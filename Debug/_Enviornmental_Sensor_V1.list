
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fed0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002358  08020070  08020070  00030070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080223c8  080223c8  00040318  2**0
                  CONTENTS
  4 .ARM          00000008  080223c8  080223c8  000323c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080223d0  080223d0  00040318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080223d0  080223d0  000323d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080223d4  080223d4  000323d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  080223d8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003308  20000318  080226f0  00040318  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003620  080226f0  00043620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY
 12 .debug_info   000376e6  00000000  00000000  00040348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008118  00000000  00000000  00077a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de8  00000000  00000000  0007fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa8  00000000  00000000  00082930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f79  00000000  00000000  000853d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003faff  00000000  00000000  000ab351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3620  00000000  00000000  000eae50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d670  00000000  00000000  0019e4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000318 	.word	0x20000318
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020058 	.word	0x08020058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000031c 	.word	0x2000031c
 80001dc:	08020058 	.word	0x08020058

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03d      	b.n	80010b8 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21b      	bcs.n	800107c <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	43db      	mvns	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	440b      	add	r3, r1
 800105e:	4002      	ands	r2, r0
 8001060:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4403      	add	r3, r0
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e01a      	b.n	80010b2 <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	43db      	mvns	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	4002      	ands	r2, r0
 8001096:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4403      	add	r3, r0
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d3bd      	bcc.n	800103c <setSoftPWM+0x14>
		}
	}

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <toggle_blue_led>:
uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
		if(blue_led_pwm_val != 0)
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <toggle_blue_led+0x34>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <toggle_blue_led+0x16>
    		{
			blue_led_pwm_val = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <toggle_blue_led+0x34>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	e003      	b.n	80010ee <toggle_blue_led+0x1e>
    		}
    		else
    		{
    			blue_led_pwm_val = 1000;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <toggle_blue_led+0x34>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	801a      	strh	r2, [r3, #0]
    		}
    		BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <toggle_blue_led+0x34>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <toggle_blue_led+0x38>)
 80010f6:	4619      	mov	r1, r3
 80010f8:	2008      	movs	r0, #8
 80010fa:	f7ff ff95 	bl	8001028 <setSoftPWM>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200012da 	.word	0x200012da
 8001108:	20000334 	.word	0x20000334

0800110c <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <pir_interrupt+0x2c>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001116:	2101      	movs	r1, #1
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <pir_interrupt+0x30>)
 800111a:	f004 fc9b 	bl	8005a54 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <pir_interrupt+0x34>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 800112a:	e002      	b.n	8001132 <pir_interrupt+0x26>
		pir_motion_flag = 0;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <pir_interrupt+0x34>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200014c1 	.word	0x200014c1
 800113c:	40020000 	.word	0x40020000
 8001140:	200014c0 	.word	0x200014c0

08001144 <timer_interrupt>:

void timer_interrupt() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <timer_interrupt+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <timer_interrupt+0x2c>)
 8001150:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <timer_interrupt+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d302      	bcc.n	8001162 <timer_interrupt+0x1e>
		time_keep = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <timer_interrupt+0x2c>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 8001162:	f002 fcab 	bl	8003abc <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	4a02      	ldr	r2, [pc, #8]	; (8001174 <timer_interrupt+0x30>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200014b4 	.word	0x200014b4
 8001174:	200016f8 	.word	0x200016f8

08001178 <power_off_detect>:

void power_off_detect() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 800117c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <power_off_detect+0x20>)
 8001182:	f004 fc67 	bl	8005a54 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <power_off_detect+0x1c>
		_RunTime_Packet.pwr_off_det = 1;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <power_off_detect+0x24>)
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020000 	.word	0x40020000
 800119c:	20001474 	.word	0x20001474

080011a0 <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_DMA_Init+0x3c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MX_DMA_Init+0x3c>)
 80011b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2044      	movs	r0, #68	; 0x44
 80011c8:	f003 fa5b 	bl	8004682 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011cc:	2044      	movs	r0, #68	; 0x44
 80011ce:	f003 fa74 	bl	80046ba <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <pwr_off_detected>:

static void pwr_off_detected() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <pwr_off_detected+0x3c>)
 80011e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d014      	beq.n	8001218 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <pwr_off_detected+0x3c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		GREEN_LED_PWM(disable_led);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <pwr_off_detected+0x40>)
 80011f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
		RED_LED_PWM(disable_led);
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <pwr_off_detected+0x40>)
 8001200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(0);
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <pwr_off_detected+0x44>)
 8001208:	2100      	movs	r1, #0
 800120a:	2008      	movs	r0, #8
 800120c:	f7ff ff0c 	bl	8001028 <setSoftPWM>
		HAL_Delay(5000);
 8001210:	f241 3088 	movw	r0, #5000	; 0x1388
 8001214:	f002 fc5e 	bl	8003ad4 <HAL_Delay>

	}
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20001474 	.word	0x20001474
 8001220:	40000400 	.word	0x40000400
 8001224:	20000334 	.word	0x20000334

08001228 <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f01a f970 	bl	801b51c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <clock_speed_slow+0xbc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <clock_speed_slow+0xbc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <clock_speed_slow+0xbc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <clock_speed_slow+0xc0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <clock_speed_slow+0xc0>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <clock_speed_slow+0xc0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001288:	2306      	movs	r3, #6
 800128a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 f847 	bl	8008334 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <clock_speed_slow+0x88>
		Error_Handler();
 80012ac:	f001 fec8 	bl	8003040 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80012b8:	23c0      	movs	r3, #192	; 0xc0
 80012ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 faaa 	bl	8008824 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <clock_speed_slow+0xb2>
		Error_Handler();
 80012d6:	f001 feb3 	bl	8003040 <Error_Handler>
	}

}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	; 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	; 0x50
 80012f0:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <clock_speed_high+0x11c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <clock_speed_high+0x11c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 8001306:	bf00      	nop
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <clock_speed_high+0x11c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <clock_speed_high+0x36>
 8001314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f2      	bne.n	8001308 <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <clock_speed_high+0x11c>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4a38      	ldr	r2, [pc, #224]	; (8001408 <clock_speed_high+0x11c>)
 8001328:	f023 0303 	bic.w	r3, r3, #3
 800132c:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <clock_speed_high+0x11c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a35      	ldr	r2, [pc, #212]	; (8001408 <clock_speed_high+0x11c>)
 8001334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001338:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f01a f8ea 	bl	801b51c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <clock_speed_high+0x11c>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a29      	ldr	r2, [pc, #164]	; (8001408 <clock_speed_high+0x11c>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <clock_speed_high+0x11c>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <clock_speed_high+0x120>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001380:	4a22      	ldr	r2, [pc, #136]	; (800140c <clock_speed_high+0x120>)
 8001382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <clock_speed_high+0x120>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001394:	2305      	movs	r3, #5
 8001396:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013ac:	2319      	movs	r3, #25
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013b4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f006 ffb6 	bl	8008334 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <clock_speed_high+0xe6>
		Error_Handler();
 80013ce:	f001 fe37 	bl	8003040 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fa18 	bl	8008824 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <clock_speed_high+0x112>
		Error_Handler();
 80013fa:	f001 fe21 	bl	8003040 <Error_Handler>
	}

}
 80013fe:	bf00      	nop
 8001400:	3750      	adds	r7, #80	; 0x50
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <load_param+0x78>)
 8001418:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 8001420:	b29b      	uxth	r3, r3
 8001422:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 8001426:	4293      	cmp	r3, r2
 8001428:	d109      	bne.n	800143e <load_param+0x2e>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <load_param+0x7c>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f240 1397 	movw	r3, #407	; 0x197
 8001436:	461a      	mov	r2, r3
 8001438:	f01a f848 	bl	801b4cc <memcpy>
 800143c:	e008      	b.n	8001450 <load_param+0x40>
	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <load_param+0x7c>)
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <load_param+0x80>)
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f240 1397 	movw	r3, #407	; 0x197
 800144a:	461a      	mov	r2, r3
 800144c:	f01a f83e 	bl	801b4cc <memcpy>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 8001450:	4910      	ldr	r1, [pc, #64]	; (8001494 <load_param+0x84>)
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <load_param+0x88>)
 8001454:	f01b f89d 	bl	801c592 <strstr>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <load_param+0x58>
		_RunTime_Packet.fileformat_selection = 1;
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <load_param+0x8c>)
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001466:	e00a      	b.n	800147e <load_param+0x6e>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001468:	490d      	ldr	r1, [pc, #52]	; (80014a0 <load_param+0x90>)
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <load_param+0x88>)
 800146c:	f01b f891 	bl	801c592 <strstr>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <load_param+0x6e>
		_RunTime_Packet.fileformat_selection = 0;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <load_param+0x8c>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	08060000 	.word	0x08060000
 800148c:	200012dc 	.word	0x200012dc
 8001490:	08021880 	.word	0x08021880
 8001494:	08020070 	.word	0x08020070
 8001498:	20001340 	.word	0x20001340
 800149c:	20001474 	.word	0x20001474
 80014a0:	08020078 	.word	0x08020078

080014a4 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014aa:	b672      	cpsid	i
}
 80014ac:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <store_param+0xc0>)
 80014b0:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80014b2:	f003 fdc7 	bl	8005044 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <store_param+0xc4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <store_param+0xc4>)
 80014be:	2202      	movs	r2, #2
 80014c0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <store_param+0xc4>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <store_param+0xc4>)
 80014ca:	2220      	movs	r2, #32
 80014cc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <store_param+0xc4>)
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <store_param+0xc4>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <store_param+0xc4>)
 80014dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e0:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <store_param+0xc8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <store_param+0xc8>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <store_param+0xc8>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <store_param+0xc8>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 80014fa:	463b      	mov	r3, r7
 80014fc:	4619      	mov	r1, r3
 80014fe:	481b      	ldr	r0, [pc, #108]	; (800156c <store_param+0xc8>)
 8001500:	f003 ff1e 	bl	8005340 <HAL_FLASHEx_Erase>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800150a:	f003 fdcd 	bl	80050a8 <HAL_FLASH_GetError>
 800150e:	4603      	mov	r3, r0
 8001510:	e024      	b.n	800155c <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <store_param+0xcc>)
 8001514:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <store_param+0xd0>)
 8001518:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800151a:	e016      	b.n	800154a <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 800151c:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	68f9      	ldr	r1, [r7, #12]
 8001524:	2002      	movs	r0, #2
 8001526:	f003 fd39 	bl	8004f9c <HAL_FLASH_Program>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <store_param+0x9a>

		{
			WrAdr += 4;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3304      	adds	r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3304      	adds	r3, #4
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	e005      	b.n	800154a <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 800153e:	f003 fda3 	bl	8005088 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001542:	f003 fdb1 	bl	80050a8 <HAL_FLASH_GetError>
 8001546:	4603      	mov	r3, r0
 8001548:	e008      	b.n	800155c <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3e4      	bcc.n	800151c <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001552:	f003 fd99 	bl	8005088 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001556:	b662      	cpsie	i
}
 8001558:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800155a:	2300      	movs	r3, #0

}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200012dc 	.word	0x200012dc
 8001568:	40023c00 	.word	0x40023c00
 800156c:	20001714 	.word	0x20001714
 8001570:	08060197 	.word	0x08060197
 8001574:	08060000 	.word	0x08060000

08001578 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	if (save_param) {
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <save_data+0x58>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d022      	beq.n	80015ca <save_data+0x52>
		if (start_timer) {
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <save_data+0x5c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 800158c:	4812      	ldr	r0, [pc, #72]	; (80015d8 <save_data+0x60>)
 800158e:	f009 f991 	bl	800a8b4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <save_data+0x60>)
 8001594:	f009 f92c 	bl	800a7f0 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <save_data+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <save_data+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <save_data+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015ac:	d30d      	bcc.n	80015ca <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <save_data+0x60>)
 80015b0:	f009 f980 	bl	800a8b4 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80015b4:	f7ff ff76 	bl	80014a4 <store_param>
			time_keep = 0;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <save_data+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <save_data+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <save_data+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200014b1 	.word	0x200014b1
 80015d4:	200014b2 	.word	0x200014b2
 80015d8:	200018b0 	.word	0x200018b0
 80015dc:	200014b4 	.word	0x200014b4

080015e0 <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

	sensirion_i2c_hal_init();
 80015e6:	f011 fb9f 	bl	8012d28 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 80015ea:	f011 fa4f 	bl	8012a8c <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 80015ee:	f011 f8e7 	bl	80127c0 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 80015f2:	f011 f9ff 	bl	80129f4 <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 80015f6:	1cba      	adds	r2, r7, #2
 80015f8:	1d39      	adds	r1, r7, #4
 80015fa:	1dbb      	adds	r3, r7, #6
 80015fc:	4618      	mov	r0, r3
 80015fe:	f011 f9a1 	bl	8012944 <scd4x_get_serial_number>

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <get_scd4x_measurement>:
void get_scd4x_measurement() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	; 0x40
 8001610:	af02      	add	r7, sp, #8
	int16_t error = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 8001616:	f011 f823 	bl	8012660 <scd4x_start_periodic_measurement>
 800161a:	4603      	mov	r3, r0
 800161c:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 800161e:	483e      	ldr	r0, [pc, #248]	; (8001718 <get_scd4x_measurement+0x10c>)
 8001620:	f011 fbf8 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 800162a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800162e:	4618      	mov	r0, r3
 8001630:	f011 f93c 	bl	80128ac <scd4x_get_data_ready_flag>
 8001634:	4603      	mov	r3, r0
 8001636:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 8001638:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800163c:	2b00      	cmp	r3, #0
 800163e:	d066      	beq.n	800170e <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2,
 8001640:	4a36      	ldr	r2, [pc, #216]	; (800171c <get_scd4x_measurement+0x110>)
 8001642:	4937      	ldr	r1, [pc, #220]	; (8001720 <get_scd4x_measurement+0x114>)
 8001644:	4837      	ldr	r0, [pc, #220]	; (8001724 <get_scd4x_measurement+0x118>)
 8001646:	f011 f889 	bl	801275c <scd4x_read_measurement>
 800164a:	4603      	mov	r3, r0
 800164c:	86fb      	strh	r3, [r7, #54]	; 0x36
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <get_scd4x_measurement+0x118>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a35      	ldr	r2, [pc, #212]	; (8001728 <get_scd4x_measurement+0x11c>)
 8001654:	fb82 1203 	smull	r1, r2, r2, r3
 8001658:	1192      	asrs	r2, r2, #6
 800165a:	17db      	asrs	r3, r3, #31
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <get_scd4x_measurement+0x118>)
 8001660:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 8001662:	4b30      	ldr	r3, [pc, #192]	; (8001724 <get_scd4x_measurement+0x118>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <get_scd4x_measurement+0x11c>)
 8001668:	fb82 1203 	smull	r1, r2, r2, r3
 800166c:	1192      	asrs	r2, r2, #6
 800166e:	17db      	asrs	r3, r3, #31
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <get_scd4x_measurement+0x118>)
 8001674:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <get_scd4x_measurement+0x120>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d047      	beq.n	800170e <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 800167e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001682:	2b00      	cmp	r3, #0
 8001684:	d013      	beq.n	80016ae <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 8001686:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800168a:	463b      	mov	r3, r7
 800168c:	4928      	ldr	r1, [pc, #160]	; (8001730 <get_scd4x_measurement+0x124>)
 800168e:	4618      	mov	r0, r3
 8001690:	f01a ff4a 	bl	801c528 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001694:	463b      	mov	r3, r7
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fdac 	bl	80001f4 <strlen>
 800169c:	4603      	mov	r3, r0
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4639      	mov	r1, r7
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <get_scd4x_measurement+0x128>)
 80016a8:	f00a f8c0 	bl	800b82c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 80016ac:	e02f      	b.n	800170e <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <get_scd4x_measurement+0x118>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d111      	bne.n	80016da <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80016b6:	463b      	mov	r3, r7
 80016b8:	491f      	ldr	r1, [pc, #124]	; (8001738 <get_scd4x_measurement+0x12c>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f01a ff34 	bl	801c528 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fd96 	bl	80001f4 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4639      	mov	r1, r7
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <get_scd4x_measurement+0x128>)
 80016d4:	f00a f8aa 	bl	800b82c <HAL_UART_Transmit>
}
 80016d8:	e019      	b.n	800170e <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <get_scd4x_measurement+0x118>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf, "Co2: %d, Temperature: %ld C, Humidity: %ld \r\n",
 80016de:	4619      	mov	r1, r3
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <get_scd4x_measurement+0x118>)
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <get_scd4x_measurement+0x118>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4638      	mov	r0, r7
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	460a      	mov	r2, r1
 80016f0:	4912      	ldr	r1, [pc, #72]	; (800173c <get_scd4x_measurement+0x130>)
 80016f2:	f01a ff19 	bl	801c528 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016f6:	463b      	mov	r3, r7
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fd7b 	bl	80001f4 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	4639      	mov	r1, r7
 8001704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <get_scd4x_measurement+0x128>)
 800170a:	f00a f88f 	bl	800b82c <HAL_UART_Transmit>
}
 800170e:	bf00      	nop
 8001710:	3738      	adds	r7, #56	; 0x38
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	000186a0 	.word	0x000186a0
 800171c:	2000147c 	.word	0x2000147c
 8001720:	20001478 	.word	0x20001478
 8001724:	20001474 	.word	0x20001474
 8001728:	10624dd3 	.word	0x10624dd3
 800172c:	200014b0 	.word	0x200014b0
 8001730:	08020080 	.word	0x08020080
 8001734:	200019a0 	.word	0x200019a0
 8001738:	080200b0 	.word	0x080200b0
 800173c:	080200d4 	.word	0x080200d4

08001740 <init_sps30>:
static void init_sps30() {
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <init_sps30+0x34>)
 8001748:	f011 ff58 	bl	80135fc <sensirion_sleep_usec>

	sensirion_uart_open();
 800174c:	f011 fea0 	bl	8013490 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f012 f871 	bl	801383a <sps30_read_version>
 8001758:	4603      	mov	r3, r0
 800175a:	85fb      	strh	r3, [r7, #46]	; 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4618      	mov	r0, r3
 8001762:	f011 ff5f 	bl	8013624 <sps30_get_serial>
 8001766:	4603      	mov	r3, r0
 8001768:	85fb      	strh	r3, [r7, #46]	; 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800176a:	bf00      	nop
 800176c:	3730      	adds	r7, #48	; 0x30
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	000f4240 	.word	0x000f4240

08001778 <get_sps30_measurement>:
 void get_sps30_measurement() {
 8001778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800177c:	b0a0      	sub	sp, #128	; 0x80
 800177e:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001780:	f011 ff7c 	bl	801367c <sps30_start_measurement>
 8001784:	4603      	mov	r3, r0
 8001786:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800178a:	483a      	ldr	r0, [pc, #232]	; (8001874 <get_sps30_measurement+0xfc>)
 800178c:	f011 ffa2 	bl	80136d4 <sps30_read_measurement>
 8001790:	4603      	mov	r3, r0
 8001792:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <get_sps30_measurement+0xfc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a37      	ldr	r2, [pc, #220]	; (8001878 <get_sps30_measurement+0x100>)
 800179c:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <get_sps30_measurement+0xfc>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a35      	ldr	r2, [pc, #212]	; (8001878 <get_sps30_measurement+0x100>)
 80017a4:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <get_sps30_measurement+0xfc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4a33      	ldr	r2, [pc, #204]	; (8001878 <get_sps30_measurement+0x100>)
 80017ac:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <get_sps30_measurement+0xfc>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <get_sps30_measurement+0x100>)
 80017b4:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80017b6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db54      	blt.n	8001868 <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <get_sps30_measurement+0x104>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d050      	beq.n	8001868 <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 80017c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017ca:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d113      	bne.n	8001800 <get_sps30_measurement+0x88>
				sprintf(buffer,
 80017d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	463b      	mov	r3, r7
 80017e0:	4927      	ldr	r1, [pc, #156]	; (8001880 <get_sps30_measurement+0x108>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f01a fea0 	bl	801c528 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80017e8:	463b      	mov	r3, r7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fd02 	bl	80001f4 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4639      	mov	r1, r7
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	4822      	ldr	r0, [pc, #136]	; (8001884 <get_sps30_measurement+0x10c>)
 80017fc:	f00a f816 	bl	800b82c <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <get_sps30_measurement+0xfc>)
 8001802:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe feb7 	bl	8000578 <__aeabi_f2d>
 800180a:	4682      	mov	sl, r0
 800180c:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <get_sps30_measurement+0xfc>)
 8001810:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe feb0 	bl	8000578 <__aeabi_f2d>
 8001818:	4604      	mov	r4, r0
 800181a:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <get_sps30_measurement+0xfc>)
 800181e:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fea9 	bl	8000578 <__aeabi_f2d>
 8001826:	4680      	mov	r8, r0
 8001828:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <get_sps30_measurement+0xfc>)
 800182c:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fea2 	bl	8000578 <__aeabi_f2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4638      	mov	r0, r7
 800183a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800183e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001842:	e9cd 4500 	strd	r4, r5, [sp]
 8001846:	4652      	mov	r2, sl
 8001848:	465b      	mov	r3, fp
 800184a:	490f      	ldr	r1, [pc, #60]	; (8001888 <get_sps30_measurement+0x110>)
 800184c:	f01a fe6c 	bl	801c528 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001850:	463b      	mov	r3, r7
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fcce 	bl	80001f4 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	4639      	mov	r1, r7
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	4808      	ldr	r0, [pc, #32]	; (8001884 <get_sps30_measurement+0x10c>)
 8001864:	f009 ffe2 	bl	800b82c <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 8001868:	bf00      	nop
 800186a:	3768      	adds	r7, #104	; 0x68
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001872:	bf00      	nop
 8001874:	200016d0 	.word	0x200016d0
 8001878:	20001474 	.word	0x20001474
 800187c:	200014b0 	.word	0x200014b0
 8001880:	08020104 	.word	0x08020104
 8001884:	200019a0 	.word	0x200019a0
 8001888:	08020138 	.word	0x08020138

0800188c <check_peripheral_error>:
static void check_peripheral_error() {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <check_peripheral_error+0x70>)
 8001892:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <check_peripheral_error+0x1a>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <check_peripheral_error+0x70>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		console_uart_init();
 80018a2:	f00e fff3 	bl	801088c <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <check_peripheral_error+0x70>)
 80018a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <check_peripheral_error+0x50>
		_RunTime_Packet.sps30_uart_error = 0;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <check_peripheral_error+0x70>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	4810      	ldr	r0, [pc, #64]	; (8001900 <check_peripheral_error+0x74>)
 80018c0:	f004 f8e0 	bl	8005a84 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80018c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c8:	f002 f904 	bl	8003ad4 <HAL_Delay>
		enable_5v();
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <check_peripheral_error+0x74>)
 80018d4:	f004 f8d6 	bl	8005a84 <HAL_GPIO_WritePin>
		init_sps30();
 80018d8:	f7ff ff32 	bl	8001740 <init_sps30>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x62 << 1), 5, 100)
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	2205      	movs	r2, #5
 80018e0:	21c4      	movs	r1, #196	; 0xc4
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <check_peripheral_error+0x78>)
 80018e4:	f004 fd98 	bl	8006418 <HAL_I2C_IsDeviceReady>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <check_peripheral_error+0x6a>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <check_peripheral_error+0x70>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20001474 	.word	0x20001474
 8001900:	40020400 	.word	0x40020400
 8001904:	20001770 	.word	0x20001770

08001908 <sensor_calibration>:
static void sensor_calibration() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <sensor_calibration+0x28>)
 800190e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <sensor_calibration+0x24>
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <sensor_calibration+0x28>)
 8001918:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <sensor_calibration+0x28>)
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		sps30_start_manual_fan_cleaning();
 8001928:	f011 ff73 	bl	8013812 <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20001474 	.word	0x20001474

08001934 <sleep>:
static void sleep() {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <sleep+0x90>)
 800193a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
	RED_LED_PWM(disable_led);
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <sleep+0x90>)
 8001942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
	BLUE_LED_PWM(disable_led);
 8001948:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <sleep+0x94>)
 800194a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800194e:	2008      	movs	r0, #8
 8001950:	f7ff fb6a 	bl	8001028 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <sleep+0x98>)
 8001956:	f002 f968 	bl	8003c2a <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	220b      	movs	r2, #11
 8001960:	491b      	ldr	r1, [pc, #108]	; (80019d0 <sleep+0x9c>)
 8001962:	481c      	ldr	r0, [pc, #112]	; (80019d4 <sleep+0xa0>)
 8001964:	f009 ff62 	bl	800b82c <HAL_UART_Transmit>
	disable_5v();
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	481a      	ldr	r0, [pc, #104]	; (80019d8 <sleep+0xa4>)
 8001970:	f004 f888 	bl	8005a84 <HAL_GPIO_WritePin>
	disable_motion();
 8001974:	2201      	movs	r2, #1
 8001976:	2102      	movs	r1, #2
 8001978:	4818      	ldr	r0, [pc, #96]	; (80019dc <sleep+0xa8>)
 800197a:	f004 f883 	bl	8005a84 <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 800197e:	f010 ff1f 	bl	80127c0 <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 8001982:	f011 f85d 	bl	8012a40 <scd4x_power_down>
	console_uart_deinit();
 8001986:	f00e ff75 	bl	8010874 <console_uart_deinit>
	sensirion_i2c_hal_free();
 800198a:	f011 f9ff 	bl	8012d8c <sensirion_i2c_hal_free>
	sensirion_uart_close();
 800198e:	f011 fdbf 	bl	8013510 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001992:	f018 ff73 	bl	801a87c <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <sleep+0xac>)
 8001998:	f008 fe7b 	bl	800a692 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <sleep+0xb0>)
 800199e:	f008 fe78 	bl	800a692 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <sleep+0xb4>)
 80019a4:	f008 fe75 	bl	800a692 <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 80019a8:	4810      	ldr	r0, [pc, #64]	; (80019ec <sleep+0xb8>)
 80019aa:	f002 ff61 	bl	8004870 <HAL_DMA_DeInit>

	clock_speed_slow();
 80019ae:	f7ff fc3b 	bl	8001228 <clock_speed_slow>

	HAL_SuspendTick();
 80019b2:	f002 f8b3 	bl	8003b1c <HAL_SuspendTick>




	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80019b6:	2101      	movs	r1, #1
 80019b8:	2001      	movs	r0, #1
 80019ba:	f006 fc8f 	bl	80082dc <HAL_PWR_EnterSTOPMode>


}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40000400 	.word	0x40000400
 80019c8:	20000334 	.word	0x20000334
 80019cc:	20001728 	.word	0x20001728
 80019d0:	08020170 	.word	0x08020170
 80019d4:	200019a0 	.word	0x200019a0
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020000 	.word	0x40020000
 80019e0:	20001868 	.word	0x20001868
 80019e4:	200018b0 	.word	0x200018b0
 80019e8:	200018f8 	.word	0x200018f8
 80019ec:	20001940 	.word	0x20001940

080019f0 <wakeup>:
static void wakeup() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

	//also add usb stuff


	HAL_ResumeTick();
 80019f4:	f002 f8a2 	bl	8003b3c <HAL_ResumeTick>
	clock_speed_high();
 80019f8:	f7ff fc78 	bl	80012ec <clock_speed_high>
	enable_5v();
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	4832      	ldr	r0, [pc, #200]	; (8001acc <wakeup+0xdc>)
 8001a04:	f004 f83e 	bl	8005a84 <HAL_GPIO_WritePin>
	enable_motion();
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4830      	ldr	r0, [pc, #192]	; (8001ad0 <wakeup+0xe0>)
 8001a0e:	f004 f839 	bl	8005a84 <HAL_GPIO_WritePin>
	console_uart_init();
 8001a12:	f00e ff3b 	bl	801088c <console_uart_init>

	MX_DMA_Init();
 8001a16:	f7ff fbc3 	bl	80011a0 <MX_DMA_Init>
	MX_TIM1_Init();
 8001a1a:	f001 f811 	bl	8002a40 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a1e:	f001 f85f 	bl	8002ae0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001a22:	f001 f8ab 	bl	8002b7c <MX_TIM3_Init>

	init_scd4x_i2c();
 8001a26:	f7ff fddb 	bl	80015e0 <init_scd4x_i2c>
	MX_USB_DEVICE_Init(); //initialize usb anyways
 8001a2a:	f018 ff39 	bl	801a8a0 <MX_USB_DEVICE_Init>
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a32:	4827      	ldr	r0, [pc, #156]	; (8001ad0 <wakeup+0xe0>)
 8001a34:	f004 f80e 	bl	8005a54 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <wakeup+0x54>
		init_sps30();
 8001a3e:	f7ff fe7f 	bl	8001740 <init_sps30>
 8001a42:	e00f      	b.n	8001a64 <wakeup+0x74>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <wakeup+0xe4>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_start_timer = 1;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <wakeup+0xe4>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <wakeup+0xe8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001a5a:	f002 f82f 	bl	8003abc <HAL_GetTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <wakeup+0xec>)
 8001a62:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001a64:	481e      	ldr	r0, [pc, #120]	; (8001ae0 <wakeup+0xf0>)
 8001a66:	f008 fe69 	bl	800a73c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001a6a:	491e      	ldr	r1, [pc, #120]	; (8001ae4 <wakeup+0xf4>)
 8001a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <wakeup+0xf8>)
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <wakeup+0xfc>)
 8001a74:	f002 ff5a 	bl	800492c <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <wakeup+0xf0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <wakeup+0xf0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a86:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <wakeup+0xf4>)
 8001a8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a8e:	2008      	movs	r0, #8
 8001a90:	f7ff faca 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001a94:	2100      	movs	r1, #0
 8001a96:	4816      	ldr	r0, [pc, #88]	; (8001af0 <wakeup+0x100>)
 8001a98:	f008 ff94 	bl	800a9c4 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <wakeup+0x104>)
 8001a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	4812      	ldr	r0, [pc, #72]	; (8001af0 <wakeup+0x100>)
 8001aa8:	f008 ff8c 	bl	800a9c4 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <wakeup+0x104>)
 8001aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab2:	639a      	str	r2, [r3, #56]	; 0x38

	pwr_off_detected();
 8001ab4:	f7ff fb94 	bl	80011e0 <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abc:	220a      	movs	r2, #10
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <wakeup+0x108>)
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <wakeup+0x10c>)
 8001ac2:	f009 feb3 	bl	800b82c <HAL_UART_Transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	20001474 	.word	0x20001474
 8001ad8:	200014bc 	.word	0x200014bc
 8001adc:	20001700 	.word	0x20001700
 8001ae0:	20001868 	.word	0x20001868
 8001ae4:	20000334 	.word	0x20000334
 8001ae8:	40020418 	.word	0x40020418
 8001aec:	20001940 	.word	0x20001940
 8001af0:	200018f8 	.word	0x200018f8
 8001af4:	40000400 	.word	0x40000400
 8001af8:	0802017c 	.word	0x0802017c
 8001afc:	200019a0 	.word	0x200019a0

08001b00 <green_led_blink>:

static void green_led_blink() {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <green_led_blink+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b0a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b0e:	f001 ffe1 	bl	8003ad4 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <green_led_blink+0x4c>)
 8001b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b1a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b1e:	f001 ffd9 	bl	8003ad4 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <green_led_blink+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b28:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b2c:	f001 ffd2 	bl	8003ad4 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <green_led_blink+0x4c>)
 8001b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b38:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b3c:	f001 ffca 	bl	8003ad4 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b40:	4b02      	ldr	r3, [pc, #8]	; (8001b4c <green_led_blink+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40000400 	.word	0x40000400

08001b50 <led_awake_routine>:

static void led_awake_routine() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001b54:	4ba6      	ldr	r3, [pc, #664]	; (8001df0 <led_awake_routine+0x2a0>)
 8001b56:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8195 	bne.w	8001e8a <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b64:	48a3      	ldr	r0, [pc, #652]	; (8001df4 <led_awake_routine+0x2a4>)
 8001b66:	f003 ff75 	bl	8005a54 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d025      	beq.n	8001bbc <led_awake_routine+0x6c>
				{




			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001b70:	4b9f      	ldr	r3, [pc, #636]	; (8001df0 <led_awake_routine+0x2a0>)
 8001b72:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b76:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001df8 <led_awake_routine+0x2a8>
 8001b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	db0d      	blt.n	8001ba0 <led_awake_routine+0x50>
							GREEN_LED_PWM(0);
 8001b84:	4b9d      	ldr	r3, [pc, #628]	; (8001dfc <led_awake_routine+0x2ac>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
							RED_LED_PWM(disable_led);
 8001b8a:	4b9c      	ldr	r3, [pc, #624]	; (8001dfc <led_awake_routine+0x2ac>)
 8001b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001b92:	4a9b      	ldr	r2, [pc, #620]	; (8001e00 <led_awake_routine+0x2b0>)
 8001b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b98:	2008      	movs	r0, #8
 8001b9a:	f7ff fa45 	bl	8001028 <setSoftPWM>
			red_led_pwm_val =0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001b9e:	e196      	b.n	8001ece <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001ba0:	4b96      	ldr	r3, [pc, #600]	; (8001dfc <led_awake_routine+0x2ac>)
 8001ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
						RED_LED_PWM(disable_led);
 8001ba8:	4b94      	ldr	r3, [pc, #592]	; (8001dfc <led_awake_routine+0x2ac>)
 8001baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
						BLUE_LED_PWM(0);
 8001bb0:	4a93      	ldr	r2, [pc, #588]	; (8001e00 <led_awake_routine+0x2b0>)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2008      	movs	r0, #8
 8001bb6:	f7ff fa37 	bl	8001028 <setSoftPWM>
}
 8001bba:	e188      	b.n	8001ece <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <led_awake_routine+0x2b0>)
 8001bbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bc2:	2008      	movs	r0, #8
 8001bc4:	f7ff fa30 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001bc8:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <led_awake_routine+0x2a0>)
 8001bca:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bce:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001df8 <led_awake_routine+0x2a8>
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	db38      	blt.n	8001c4e <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001bdc:	4b87      	ldr	r3, [pc, #540]	; (8001dfc <led_awake_routine+0x2ac>)
 8001bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001be4:	4a86      	ldr	r2, [pc, #536]	; (8001e00 <led_awake_routine+0x2b0>)
 8001be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bea:	2008      	movs	r0, #8
 8001bec:	f7ff fa1c 	bl	8001028 <setSoftPWM>
							if (!green_led_pwm_flag) {
 8001bf0:	4b84      	ldr	r3, [pc, #528]	; (8001e04 <led_awake_routine+0x2b4>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <led_awake_routine+0xbc>
								green_led_pwm_val += 5;
 8001bf8:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <led_awake_routine+0x2b8>)
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3305      	adds	r3, #5
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e008      	b.n	8001c1e <led_awake_routine+0xce>
								green_led_pwm_val -= 5;
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b05      	subs	r3, #5
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c1c:	801a      	strh	r2, [r3, #0]
							if (green_led_pwm_val > 1000) {
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c28:	dd03      	ble.n	8001c32 <led_awake_routine+0xe2>
								green_led_pwm_flag = 1;
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <led_awake_routine+0x2b4>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <led_awake_routine+0xf2>
							} else if (green_led_pwm_val <= 0) {
 8001c32:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	dc02      	bgt.n	8001c42 <led_awake_routine+0xf2>
								green_led_pwm_flag = 0;
 8001c3c:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <led_awake_routine+0x2b4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
							GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001c42:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c48:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <led_awake_routine+0x2ac>)
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c4c:	e13f      	b.n	8001ece <led_awake_routine+0x37e>
			else if (_RunTime_Packet.battery_voltage > battery_Low
 8001c4e:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <led_awake_routine+0x2a0>)
 8001c50:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c54:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	dd42      	ble.n	8001ce8 <led_awake_routine+0x198>
						&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <led_awake_routine+0x2a0>)
 8001c64:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c68:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001df8 <led_awake_routine+0x2a8>
 8001c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	d838      	bhi.n	8001ce8 <led_awake_routine+0x198>
					RED_LED_PWM(disable_led);
 8001c76:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <led_awake_routine+0x2ac>)
 8001c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
					BLUE_LED_PWM(disable_led);
 8001c7e:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <led_awake_routine+0x2b0>)
 8001c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c84:	2008      	movs	r0, #8
 8001c86:	f7ff f9cf 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8001c8a:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <led_awake_routine+0x2b4>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <led_awake_routine+0x156>
						green_led_pwm_val += 5;
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <led_awake_routine+0x2b8>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <led_awake_routine+0x2b8>)
 8001ca2:	801a      	strh	r2, [r3, #0]
 8001ca4:	e008      	b.n	8001cb8 <led_awake_routine+0x168>
						green_led_pwm_val -= 5;
 8001ca6:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <led_awake_routine+0x2b8>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b05      	subs	r3, #5
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <led_awake_routine+0x2b8>)
 8001cb6:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8001cb8:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <led_awake_routine+0x2b8>)
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cc2:	dd03      	ble.n	8001ccc <led_awake_routine+0x17c>
						green_led_pwm_flag = 1;
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <led_awake_routine+0x2b4>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e007      	b.n	8001cdc <led_awake_routine+0x18c>
					} else if (green_led_pwm_val <= 0) {
 8001ccc:	4b4e      	ldr	r3, [pc, #312]	; (8001e08 <led_awake_routine+0x2b8>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dc02      	bgt.n	8001cdc <led_awake_routine+0x18c>
						green_led_pwm_flag = 0;
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <led_awake_routine+0x2b4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <led_awake_routine+0x2b8>)
 8001cde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <led_awake_routine+0x2ac>)
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce6:	e0f2      	b.n	8001ece <led_awake_routine+0x37e>
				} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <led_awake_routine+0x2a0>)
 8001cea:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e0c <led_awake_routine+0x2bc>
 8001cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	f340 808d 	ble.w	8001e18 <led_awake_routine+0x2c8>
						&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <led_awake_routine+0x2a0>)
 8001d00:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d04:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	f200 8082 	bhi.w	8001e18 <led_awake_routine+0x2c8>
					if(green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <led_awake_routine+0x2b4>)
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <led_awake_routine+0x2c0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d003      	beq.n	8001d28 <led_awake_routine+0x1d8>
						green_led_pwm_flag = red_led_pwm_flag;
 8001d20:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <led_awake_routine+0x2c0>)
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <led_awake_routine+0x2b4>)
 8001d26:	701a      	strb	r2, [r3, #0]
					BLUE_LED_PWM(disable_led);
 8001d28:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <led_awake_routine+0x2b0>)
 8001d2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d2e:	2008      	movs	r0, #8
 8001d30:	f7ff f97a 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <led_awake_routine+0x2b4>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <led_awake_routine+0x200>
						green_led_pwm_val += 5;
 8001d3c:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <led_awake_routine+0x2b8>)
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3305      	adds	r3, #5
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <led_awake_routine+0x2b8>)
 8001d4c:	801a      	strh	r2, [r3, #0]
 8001d4e:	e008      	b.n	8001d62 <led_awake_routine+0x212>
						green_led_pwm_val -= 5;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <led_awake_routine+0x2b8>)
 8001d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b05      	subs	r3, #5
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <led_awake_routine+0x2b8>)
 8001d60:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <led_awake_routine+0x2b8>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6c:	dd03      	ble.n	8001d76 <led_awake_routine+0x226>
						green_led_pwm_flag = 1;
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <led_awake_routine+0x2b4>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e007      	b.n	8001d86 <led_awake_routine+0x236>
					} else if (green_led_pwm_val <= 0) {
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <led_awake_routine+0x2b8>)
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dc02      	bgt.n	8001d86 <led_awake_routine+0x236>
						green_led_pwm_flag = 0;
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <led_awake_routine+0x2b4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
					if (!red_led_pwm_flag) {
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <led_awake_routine+0x2c0>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <led_awake_routine+0x252>
						red_led_pwm_val += 5;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <led_awake_routine+0x2c4>)
 8001d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3305      	adds	r3, #5
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <led_awake_routine+0x2c4>)
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	e008      	b.n	8001db4 <led_awake_routine+0x264>
						red_led_pwm_val -= 5;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <led_awake_routine+0x2c4>)
 8001da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b05      	subs	r3, #5
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <led_awake_routine+0x2c4>)
 8001db2:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <led_awake_routine+0x2c4>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dbe:	dd03      	ble.n	8001dc8 <led_awake_routine+0x278>
						red_led_pwm_flag = 1;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <led_awake_routine+0x2c0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <led_awake_routine+0x288>
					} else if (red_led_pwm_val <= 0) {
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <led_awake_routine+0x2c4>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	dc02      	bgt.n	8001dd8 <led_awake_routine+0x288>
						red_led_pwm_flag = 0;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <led_awake_routine+0x2c0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <led_awake_routine+0x2b8>)
 8001dda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <led_awake_routine+0x2ac>)
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <led_awake_routine+0x2c4>)
 8001de4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <led_awake_routine+0x2ac>)
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
 8001dec:	e06f      	b.n	8001ece <led_awake_routine+0x37e>
 8001dee:	bf00      	nop
 8001df0:	20001474 	.word	0x20001474
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40833333 	.word	0x40833333
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	20000334 	.word	0x20000334
 8001e04:	200012d4 	.word	0x200012d4
 8001e08:	200012d6 	.word	0x200012d6
 8001e0c:	40533333 	.word	0x40533333
 8001e10:	200012d5 	.word	0x200012d5
 8001e14:	200012d8 	.word	0x200012d8
					GREEN_LED_PWM(disable_led);
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <led_awake_routine+0x384>)
 8001e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
					BLUE_LED_PWM(disable_led);
 8001e20:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <led_awake_routine+0x388>)
 8001e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e26:	2008      	movs	r0, #8
 8001e28:	f7ff f8fe 	bl	8001028 <setSoftPWM>
					if (!red_led_pwm_flag) {
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <led_awake_routine+0x38c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <led_awake_routine+0x2f8>
						red_led_pwm_val += 5;
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <led_awake_routine+0x390>)
 8001e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3305      	adds	r3, #5
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <led_awake_routine+0x390>)
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	e008      	b.n	8001e5a <led_awake_routine+0x30a>
						red_led_pwm_val -= 5;
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <led_awake_routine+0x390>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b05      	subs	r3, #5
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <led_awake_routine+0x390>)
 8001e58:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <led_awake_routine+0x390>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e64:	dd03      	ble.n	8001e6e <led_awake_routine+0x31e>
						red_led_pwm_flag = 1;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <led_awake_routine+0x38c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e007      	b.n	8001e7e <led_awake_routine+0x32e>
					} else if (red_led_pwm_val <= 0) {
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <led_awake_routine+0x390>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dc02      	bgt.n	8001e7e <led_awake_routine+0x32e>
						red_led_pwm_flag = 0;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <led_awake_routine+0x38c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <led_awake_routine+0x390>)
 8001e80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <led_awake_routine+0x384>)
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e88:	e021      	b.n	8001ece <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <led_awake_routine+0x384>)
 8001e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <led_awake_routine+0x388>)
 8001e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e98:	2008      	movs	r0, #8
 8001e9a:	f7ff f8c5 	bl	8001028 <setSoftPWM>
		if(red_led_pwm_val != disable_led)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <led_awake_routine+0x390>)
 8001ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea8:	d004      	beq.n	8001eb4 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <led_awake_routine+0x390>)
 8001eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	e002      	b.n	8001eba <led_awake_routine+0x36a>
			red_led_pwm_val =0;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <led_awake_routine+0x390>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <led_awake_routine+0x390>)
 8001ebc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <led_awake_routine+0x384>)
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8001ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ec8:	f001 fe04 	bl	8003ad4 <HAL_Delay>
}
 8001ecc:	e7ff      	b.n	8001ece <led_awake_routine+0x37e>
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	20000334 	.word	0x20000334
 8001edc:	200012d5 	.word	0x200012d5
 8001ee0:	200012d8 	.word	0x200012d8

08001ee4 <led_awake_routine1>:


static void led_awake_routine1() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001ee8:	4ba6      	ldr	r3, [pc, #664]	; (8002184 <led_awake_routine1+0x2a0>)
 8001eea:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8195 	bne.w	800221e <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef8:	48a3      	ldr	r0, [pc, #652]	; (8002188 <led_awake_routine1+0x2a4>)
 8001efa:	f003 fdab 	bl	8005a54 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d025      	beq.n	8001f50 <led_awake_routine1+0x6c>
				{




			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001f04:	4b9f      	ldr	r3, [pc, #636]	; (8002184 <led_awake_routine1+0x2a0>)
 8001f06:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f0a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800218c <led_awake_routine1+0x2a8>
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	db0d      	blt.n	8001f34 <led_awake_routine1+0x50>
							GREEN_LED_PWM(0);
 8001f18:	4b9d      	ldr	r3, [pc, #628]	; (8002190 <led_awake_routine1+0x2ac>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
							RED_LED_PWM(disable_led);
 8001f1e:	4b9c      	ldr	r3, [pc, #624]	; (8002190 <led_awake_routine1+0x2ac>)
 8001f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f24:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001f26:	4a9b      	ldr	r2, [pc, #620]	; (8002194 <led_awake_routine1+0x2b0>)
 8001f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f2c:	2008      	movs	r0, #8
 8001f2e:	f7ff f87b 	bl	8001028 <setSoftPWM>
			red_led_pwm_val =0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001f32:	e196      	b.n	8002262 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8001f34:	4b96      	ldr	r3, [pc, #600]	; (8002190 <led_awake_routine1+0x2ac>)
 8001f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34
						RED_LED_PWM(disable_led);
 8001f3c:	4b94      	ldr	r3, [pc, #592]	; (8002190 <led_awake_routine1+0x2ac>)
 8001f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
						BLUE_LED_PWM(0);
 8001f44:	4a93      	ldr	r2, [pc, #588]	; (8002194 <led_awake_routine1+0x2b0>)
 8001f46:	2100      	movs	r1, #0
 8001f48:	2008      	movs	r0, #8
 8001f4a:	f7ff f86d 	bl	8001028 <setSoftPWM>
}
 8001f4e:	e188      	b.n	8002262 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001f50:	4a90      	ldr	r2, [pc, #576]	; (8002194 <led_awake_routine1+0x2b0>)
 8001f52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f56:	2008      	movs	r0, #8
 8001f58:	f7ff f866 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001f5c:	4b89      	ldr	r3, [pc, #548]	; (8002184 <led_awake_routine1+0x2a0>)
 8001f5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f62:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800218c <led_awake_routine1+0x2a8>
 8001f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	db38      	blt.n	8001fe2 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 8001f70:	4b87      	ldr	r3, [pc, #540]	; (8002190 <led_awake_routine1+0x2ac>)
 8001f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001f78:	4a86      	ldr	r2, [pc, #536]	; (8002194 <led_awake_routine1+0x2b0>)
 8001f7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f7ff f852 	bl	8001028 <setSoftPWM>
							if (!green_led_pwm_flag) {
 8001f84:	4b84      	ldr	r3, [pc, #528]	; (8002198 <led_awake_routine1+0x2b4>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <led_awake_routine1+0xbc>
								green_led_pwm_val += 40;
 8001f8c:	4b83      	ldr	r3, [pc, #524]	; (800219c <led_awake_routine1+0x2b8>)
 8001f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3328      	adds	r3, #40	; 0x28
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	4b80      	ldr	r3, [pc, #512]	; (800219c <led_awake_routine1+0x2b8>)
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	e008      	b.n	8001fb2 <led_awake_routine1+0xce>
								green_led_pwm_val -= 40;
 8001fa0:	4b7e      	ldr	r3, [pc, #504]	; (800219c <led_awake_routine1+0x2b8>)
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b28      	subs	r3, #40	; 0x28
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	4b7b      	ldr	r3, [pc, #492]	; (800219c <led_awake_routine1+0x2b8>)
 8001fb0:	801a      	strh	r2, [r3, #0]
							if (green_led_pwm_val > 1000) {
 8001fb2:	4b7a      	ldr	r3, [pc, #488]	; (800219c <led_awake_routine1+0x2b8>)
 8001fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fbc:	dd03      	ble.n	8001fc6 <led_awake_routine1+0xe2>
								green_led_pwm_flag = 1;
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <led_awake_routine1+0x2b4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e007      	b.n	8001fd6 <led_awake_routine1+0xf2>
							} else if (green_led_pwm_val <= 0) {
 8001fc6:	4b75      	ldr	r3, [pc, #468]	; (800219c <led_awake_routine1+0x2b8>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dc02      	bgt.n	8001fd6 <led_awake_routine1+0xf2>
								green_led_pwm_flag = 0;
 8001fd0:	4b71      	ldr	r3, [pc, #452]	; (8002198 <led_awake_routine1+0x2b4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
							GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001fd6:	4b71      	ldr	r3, [pc, #452]	; (800219c <led_awake_routine1+0x2b8>)
 8001fd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	; (8002190 <led_awake_routine1+0x2ac>)
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fe0:	e13f      	b.n	8002262 <led_awake_routine1+0x37e>
			else if (_RunTime_Packet.battery_voltage > battery_Low
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <led_awake_routine1+0x2a0>)
 8001fe4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fe8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	dd42      	ble.n	800207c <led_awake_routine1+0x198>
						&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <led_awake_routine1+0x2a0>)
 8001ff8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ffc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800218c <led_awake_routine1+0x2a8>
 8002000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	d838      	bhi.n	800207c <led_awake_routine1+0x198>
					RED_LED_PWM(disable_led);
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <led_awake_routine1+0x2ac>)
 800200c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
					BLUE_LED_PWM(disable_led);
 8002012:	4a60      	ldr	r2, [pc, #384]	; (8002194 <led_awake_routine1+0x2b0>)
 8002014:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002018:	2008      	movs	r0, #8
 800201a:	f7ff f805 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 800201e:	4b5e      	ldr	r3, [pc, #376]	; (8002198 <led_awake_routine1+0x2b4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <led_awake_routine1+0x156>
						green_led_pwm_val += 40;
 8002026:	4b5d      	ldr	r3, [pc, #372]	; (800219c <led_awake_routine1+0x2b8>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	b29b      	uxth	r3, r3
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <led_awake_routine1+0x2b8>)
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	e008      	b.n	800204c <led_awake_routine1+0x168>
						green_led_pwm_val -= 40;
 800203a:	4b58      	ldr	r3, [pc, #352]	; (800219c <led_awake_routine1+0x2b8>)
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b28      	subs	r3, #40	; 0x28
 8002044:	b29b      	uxth	r3, r3
 8002046:	b21a      	sxth	r2, r3
 8002048:	4b54      	ldr	r3, [pc, #336]	; (800219c <led_awake_routine1+0x2b8>)
 800204a:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <led_awake_routine1+0x2b8>)
 800204e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002056:	dd03      	ble.n	8002060 <led_awake_routine1+0x17c>
						green_led_pwm_flag = 1;
 8002058:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <led_awake_routine1+0x2b4>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e007      	b.n	8002070 <led_awake_routine1+0x18c>
					} else if (green_led_pwm_val <= 0) {
 8002060:	4b4e      	ldr	r3, [pc, #312]	; (800219c <led_awake_routine1+0x2b8>)
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	dc02      	bgt.n	8002070 <led_awake_routine1+0x18c>
						green_led_pwm_flag = 0;
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <led_awake_routine1+0x2b4>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002070:	4b4a      	ldr	r3, [pc, #296]	; (800219c <led_awake_routine1+0x2b8>)
 8002072:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <led_awake_routine1+0x2ac>)
 8002078:	635a      	str	r2, [r3, #52]	; 0x34
 800207a:	e0f2      	b.n	8002262 <led_awake_routine1+0x37e>
				} else if (_RunTime_Packet.battery_voltage > battery_very_low
 800207c:	4b41      	ldr	r3, [pc, #260]	; (8002184 <led_awake_routine1+0x2a0>)
 800207e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002082:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80021a0 <led_awake_routine1+0x2bc>
 8002086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	f340 808d 	ble.w	80021ac <led_awake_routine1+0x2c8>
						&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8002092:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <led_awake_routine1+0x2a0>)
 8002094:	edd3 7a08 	vldr	s15, [r3, #32]
 8002098:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800209c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	f200 8082 	bhi.w	80021ac <led_awake_routine1+0x2c8>
					if(green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <led_awake_routine1+0x2b4>)
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <led_awake_routine1+0x2c0>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d003      	beq.n	80020bc <led_awake_routine1+0x1d8>
						green_led_pwm_flag = red_led_pwm_flag;
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <led_awake_routine1+0x2c0>)
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <led_awake_routine1+0x2b4>)
 80020ba:	701a      	strb	r2, [r3, #0]
					BLUE_LED_PWM(disable_led);
 80020bc:	4a35      	ldr	r2, [pc, #212]	; (8002194 <led_awake_routine1+0x2b0>)
 80020be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020c2:	2008      	movs	r0, #8
 80020c4:	f7fe ffb0 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <led_awake_routine1+0x2b4>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <led_awake_routine1+0x200>
						green_led_pwm_val += 40;
 80020d0:	4b32      	ldr	r3, [pc, #200]	; (800219c <led_awake_routine1+0x2b8>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3328      	adds	r3, #40	; 0x28
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <led_awake_routine1+0x2b8>)
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e008      	b.n	80020f6 <led_awake_routine1+0x212>
						green_led_pwm_val -= 40;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <led_awake_routine1+0x2b8>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b28      	subs	r3, #40	; 0x28
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <led_awake_routine1+0x2b8>)
 80020f4:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <led_awake_routine1+0x2b8>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002100:	dd03      	ble.n	800210a <led_awake_routine1+0x226>
						green_led_pwm_flag = 1;
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <led_awake_routine1+0x2b4>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e007      	b.n	800211a <led_awake_routine1+0x236>
					} else if (green_led_pwm_val <= 0) {
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <led_awake_routine1+0x2b8>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	dc02      	bgt.n	800211a <led_awake_routine1+0x236>
						green_led_pwm_flag = 0;
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <led_awake_routine1+0x2b4>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
					if (!red_led_pwm_flag) {
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <led_awake_routine1+0x2c0>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <led_awake_routine1+0x252>
						red_led_pwm_val += 40;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <led_awake_routine1+0x2c4>)
 8002124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002128:	b29b      	uxth	r3, r3
 800212a:	3328      	adds	r3, #40	; 0x28
 800212c:	b29b      	uxth	r3, r3
 800212e:	b21a      	sxth	r2, r3
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <led_awake_routine1+0x2c4>)
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	e008      	b.n	8002148 <led_awake_routine1+0x264>
						red_led_pwm_val -= 40;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <led_awake_routine1+0x2c4>)
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b28      	subs	r3, #40	; 0x28
 8002140:	b29b      	uxth	r3, r3
 8002142:	b21a      	sxth	r2, r3
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <led_awake_routine1+0x2c4>)
 8002146:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <led_awake_routine1+0x2c4>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002152:	dd03      	ble.n	800215c <led_awake_routine1+0x278>
						red_led_pwm_flag = 1;
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <led_awake_routine1+0x2c0>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e007      	b.n	800216c <led_awake_routine1+0x288>
					} else if (red_led_pwm_val <= 0) {
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <led_awake_routine1+0x2c4>)
 800215e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002162:	2b00      	cmp	r3, #0
 8002164:	dc02      	bgt.n	800216c <led_awake_routine1+0x288>
						red_led_pwm_flag = 0;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <led_awake_routine1+0x2c0>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <led_awake_routine1+0x2b8>)
 800216e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <led_awake_routine1+0x2ac>)
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <led_awake_routine1+0x2c4>)
 8002178:	f9b3 2000 	ldrsh.w	r2, [r3]
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <led_awake_routine1+0x2ac>)
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
 8002180:	e06f      	b.n	8002262 <led_awake_routine1+0x37e>
 8002182:	bf00      	nop
 8002184:	20001474 	.word	0x20001474
 8002188:	40020000 	.word	0x40020000
 800218c:	40833333 	.word	0x40833333
 8002190:	40000400 	.word	0x40000400
 8002194:	20000334 	.word	0x20000334
 8002198:	200012d4 	.word	0x200012d4
 800219c:	200012d6 	.word	0x200012d6
 80021a0:	40533333 	.word	0x40533333
 80021a4:	200012d5 	.word	0x200012d5
 80021a8:	200012d8 	.word	0x200012d8
					GREEN_LED_PWM(disable_led);
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <led_awake_routine1+0x384>)
 80021ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
					BLUE_LED_PWM(disable_led);
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <led_awake_routine1+0x388>)
 80021b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021ba:	2008      	movs	r0, #8
 80021bc:	f7fe ff34 	bl	8001028 <setSoftPWM>
					if (!red_led_pwm_flag) {
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <led_awake_routine1+0x38c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <led_awake_routine1+0x2f8>
						red_led_pwm_val += 40;
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <led_awake_routine1+0x390>)
 80021ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3328      	adds	r3, #40	; 0x28
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <led_awake_routine1+0x390>)
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	e008      	b.n	80021ee <led_awake_routine1+0x30a>
						red_led_pwm_val -= 40;
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <led_awake_routine1+0x390>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b28      	subs	r3, #40	; 0x28
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <led_awake_routine1+0x390>)
 80021ec:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <led_awake_routine1+0x390>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f8:	dd03      	ble.n	8002202 <led_awake_routine1+0x31e>
						red_led_pwm_flag = 1;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <led_awake_routine1+0x38c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <led_awake_routine1+0x32e>
					} else if (red_led_pwm_val <= 0) {
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <led_awake_routine1+0x390>)
 8002204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002208:	2b00      	cmp	r3, #0
 800220a:	dc02      	bgt.n	8002212 <led_awake_routine1+0x32e>
						red_led_pwm_flag = 0;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <led_awake_routine1+0x38c>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <led_awake_routine1+0x390>)
 8002214:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <led_awake_routine1+0x384>)
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800221c:	e021      	b.n	8002262 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <led_awake_routine1+0x384>)
 8002220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <led_awake_routine1+0x388>)
 8002228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800222c:	2008      	movs	r0, #8
 800222e:	f7fe fefb 	bl	8001028 <setSoftPWM>
		if(red_led_pwm_val != disable_led)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <led_awake_routine1+0x390>)
 8002234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223c:	d004      	beq.n	8002248 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <led_awake_routine1+0x390>)
 8002240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	e002      	b.n	800224e <led_awake_routine1+0x36a>
			red_led_pwm_val =0;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <led_awake_routine1+0x390>)
 800224a:	2200      	movs	r2, #0
 800224c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <led_awake_routine1+0x390>)
 8002250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <led_awake_routine1+0x384>)
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8002258:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800225c:	f001 fc3a 	bl	8003ad4 <HAL_Delay>
}
 8002260:	e7ff      	b.n	8002262 <led_awake_routine1+0x37e>
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40000400 	.word	0x40000400
 800226c:	20000334 	.word	0x20000334
 8002270:	200012d5 	.word	0x200012d5
 8002274:	200012d8 	.word	0x200012d8

08002278 <ver_GetUid>:


static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800227e:	f001 fc79 	bl	8003b74 <HAL_GetUIDw1>
 8002282:	4603      	mov	r3, r0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002288:	f001 fc74 	bl	8003b74 <HAL_GetUIDw1>
 800228c:	4603      	mov	r3, r0
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <ver_GetUid+0x8c>)
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002294:	4c1c      	ldr	r4, [pc, #112]	; (8002308 <ver_GetUid+0x90>)
 8002296:	f001 fc79 	bl	8003b8c <HAL_GetUIDw2>
 800229a:	4603      	mov	r3, r0
 800229c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b23      	cmp	r3, #35	; 0x23
 80022a2:	d909      	bls.n	80022b8 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b3d      	cmp	r3, #61	; 0x3d
 80022a8:	bf28      	it	cs
 80022aa:	233d      	movcs	r3, #61	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	333d      	adds	r3, #61	; 0x3d
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <ver_GetUid+0x8c>)
 80022b4:	71da      	strb	r2, [r3, #7]
 80022b6:	e00b      	b.n	80022d0 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d901      	bls.n	80022c2 <ver_GetUid+0x4a>
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	e000      	b.n	80022c4 <ver_GetUid+0x4c>
 80022c2:	2230      	movs	r2, #48	; 0x30
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <ver_GetUid+0x8c>)
 80022ce:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80022d0:	f001 fc44 	bl	8003b5c <HAL_GetUIDw0>
 80022d4:	4603      	mov	r3, r0
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	480b      	ldr	r0, [pc, #44]	; (800230c <ver_GetUid+0x94>)
 80022de:	f010 f88d 	bl	80123fc <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80022e2:	f001 fc3b 	bl	8003b5c <HAL_GetUIDw0>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <ver_GetUid+0x98>)
 80022ee:	f010 f885 	bl	80123fc <CharToHexasc>
	sUid[12] = 0;
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <ver_GetUid+0x8c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <ver_GetUid+0x8c>)
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	20001704 	.word	0x20001704
 8002308:	20001707 	.word	0x20001707
 800230c:	2000170c 	.word	0x2000170c
 8002310:	2000170e 	.word	0x2000170e

08002314 <app_main>:

void app_main() {
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0


	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 800231a:	223c      	movs	r2, #60	; 0x3c
 800231c:	2100      	movs	r1, #0
 800231e:	4885      	ldr	r0, [pc, #532]	; (8002534 <app_main+0x220>)
 8002320:	f019 f8fc 	bl	801b51c <memset>

	load_param();
 8002324:	f7ff f874 	bl	8001410 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002328:	4883      	ldr	r0, [pc, #524]	; (8002538 <app_main+0x224>)
 800232a:	f008 fa07 	bl	800a73c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800232e:	4983      	ldr	r1, [pc, #524]	; (800253c <app_main+0x228>)
 8002330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002334:	4a82      	ldr	r2, [pc, #520]	; (8002540 <app_main+0x22c>)
 8002336:	4883      	ldr	r0, [pc, #524]	; (8002544 <app_main+0x230>)
 8002338:	f002 faf8 	bl	800492c <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 800233c:	4b7e      	ldr	r3, [pc, #504]	; (8002538 <app_main+0x224>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b7d      	ldr	r3, [pc, #500]	; (8002538 <app_main+0x224>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 800234c:	4a7b      	ldr	r2, [pc, #492]	; (800253c <app_main+0x228>)
 800234e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002352:	2008      	movs	r0, #8
 8002354:	f7fe fe68 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8002358:	2100      	movs	r1, #0
 800235a:	487b      	ldr	r0, [pc, #492]	; (8002548 <app_main+0x234>)
 800235c:	f008 fb32 	bl	800a9c4 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8002360:	4b7a      	ldr	r3, [pc, #488]	; (800254c <app_main+0x238>)
 8002362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002366:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002368:	2104      	movs	r1, #4
 800236a:	4877      	ldr	r0, [pc, #476]	; (8002548 <app_main+0x234>)
 800236c:	f008 fb2a 	bl	800a9c4 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <app_main+0x238>)
 8002372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002376:	639a      	str	r2, [r3, #56]	; 0x38

	MX_USB_DEVICE_Init(); //initialize usb anyways
 8002378:	f018 fa92 	bl	801a8a0 <MX_USB_DEVICE_Init>
	prev_usb_time_ = HAL_GetTick();
 800237c:	f001 fb9e 	bl	8003abc <HAL_GetTick>
 8002380:	4603      	mov	r3, r0
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <app_main+0x23c>)
 8002384:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8002386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800238a:	4872      	ldr	r0, [pc, #456]	; (8002554 <app_main+0x240>)
 800238c:	f003 fb62 	bl	8005a54 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <app_main+0x88>
		init_sps30();
 8002396:	f7ff f9d3 	bl	8001740 <init_sps30>
 800239a:	e012      	b.n	80023c2 <app_main+0xae>
	} else {
		_RunTime_Packet.usb_detection = 0;
 800239c:	4b65      	ldr	r3, [pc, #404]	; (8002534 <app_main+0x220>)
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_first_start = 1;
 80023a4:	4b63      	ldr	r3, [pc, #396]	; (8002534 <app_main+0x220>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		_RunTime_Packet.usb_active_disable_pm = 1;
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <app_main+0x220>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		_RunTime_Packet.usb_start_timer = 1;
 80023b4:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <app_main+0x220>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <app_main+0x244>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
	}

	//init_sps30();
	init_scd4x_i2c();
 80023c2:	f7ff f90d 	bl	80015e0 <init_scd4x_i2c>
	console_init();
 80023c6:	f00e fa95 	bl	80108f4 <console_init>
	Rtc_set_alarm();
 80023ca:	f00f fea1 	bl	8012110 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	2200      	movs	r2, #0
 80023d4:	4619      	mov	r1, r3
 80023d6:	4861      	ldr	r0, [pc, #388]	; (800255c <app_main+0x248>)
 80023d8:	f006 fee4 	bl	80091a4 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 80023dc:	7fba      	ldrb	r2, [r7, #30]
 80023de:	4b55      	ldr	r3, [pc, #340]	; (8002534 <app_main+0x220>)
 80023e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

    //if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	  _RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 80023e4:	495e      	ldr	r1, [pc, #376]	; (8002560 <app_main+0x24c>)
 80023e6:	485f      	ldr	r0, [pc, #380]	; (8002564 <app_main+0x250>)
 80023e8:	f018 f9de 	bl	801a7a8 <createfile>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <app_main+0x220>)
 80023f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   // 	 _RunTime_Packet.sd_file_creation = -1;
   // }



    green_led_blink();
 80023f6:	f7ff fb83 	bl	8001b00 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 80023fa:	23c8      	movs	r3, #200	; 0xc8
 80023fc:	2215      	movs	r2, #21
 80023fe:	495a      	ldr	r1, [pc, #360]	; (8002568 <app_main+0x254>)
 8002400:	485a      	ldr	r0, [pc, #360]	; (800256c <app_main+0x258>)
 8002402:	f009 fa13 	bl	800b82c <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002406:	f001 fb59 	bl	8003abc <HAL_GetTick>
 800240a:	4603      	mov	r3, r0
 800240c:	4a58      	ldr	r2, [pc, #352]	; (8002570 <app_main+0x25c>)
 800240e:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002410:	f001 fb54 	bl	8003abc <HAL_GetTick>
 8002414:	4603      	mov	r3, r0
 8002416:	4a57      	ldr	r2, [pc, #348]	; (8002574 <app_main+0x260>)
 8002418:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800241a:	4b57      	ldr	r3, [pc, #348]	; (8002578 <app_main+0x264>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002420:	e156      	b.n	80026d0 <app_main+0x3bc>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	484b      	ldr	r0, [pc, #300]	; (8002554 <app_main+0x240>)
 8002428:	f003 fb14 	bl	8005a54 <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <app_main+0x128>
					{
				prev_sleep_time = HAL_GetTick();
 8002432:	f001 fb43 	bl	8003abc <HAL_GetTick>
 8002436:	4603      	mov	r3, r0
 8002438:	4a4d      	ldr	r2, [pc, #308]	; (8002570 <app_main+0x25c>)
 800243a:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	4845      	ldr	r0, [pc, #276]	; (800255c <app_main+0x248>)
 8002446:	f006 fdcb 	bl	8008fe0 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	4619      	mov	r1, r3
 8002450:	4842      	ldr	r0, [pc, #264]	; (800255c <app_main+0x248>)
 8002452:	f006 fea7 	bl	80091a4 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 8002456:	79ba      	ldrb	r2, [r7, #6]
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <app_main+0x220>)
 800245a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			_RunTime_Packet.month = sDate.Month;
 800245e:	797a      	ldrb	r2, [r7, #5]
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <app_main+0x220>)
 8002462:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			_RunTime_Packet.year = sDate.Year;
 8002466:	79fa      	ldrb	r2, [r7, #7]
 8002468:	4b32      	ldr	r3, [pc, #200]	; (8002534 <app_main+0x220>)
 800246a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

			if (_RunTime_Packet.prev_day != sDate.Date) {
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <app_main+0x220>)
 8002470:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002474:	79bb      	ldrb	r3, [r7, #6]
 8002476:	429a      	cmp	r2, r3
 8002478:	d007      	beq.n	800248a <app_main+0x176>
				_RunTime_Packet.day_changed = 1;
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <app_main+0x220>)
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				_RunTime_Packet.prev_day = sDate.Date;
 8002482:	79ba      	ldrb	r2, [r7, #6]
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <app_main+0x220>)
 8002486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

			check_peripheral_error();
 800248a:	f7ff f9ff 	bl	800188c <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <app_main+0x220>)
 8002490:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d104      	bne.n	80024a2 <app_main+0x18e>
					|| _RunTime_Packet.usb_first_start) {
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <app_main+0x220>)
 800249a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d045      	beq.n	800252e <app_main+0x21a>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <app_main+0x220>)
 80024a4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <app_main+0x1a0>
				{

					start_usb_timer = 1;
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <app_main+0x268>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e003      	b.n	80024bc <app_main+0x1a8>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <app_main+0x220>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 80024bc:	f001 fafe 	bl	8003abc <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <app_main+0x23c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <app_main+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d329      	bcc.n	8002524 <app_main+0x210>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <app_main+0x220>)
 80024d2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024da:	d10d      	bne.n	80024f8 <app_main+0x1e4>
							&& _RunTime_Packet.usb_first_start) {
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <app_main+0x220>)
 80024de:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <app_main+0x1e4>
						_RunTime_Packet.sd_file_creation = createfile(
 80024e6:	491e      	ldr	r1, [pc, #120]	; (8002560 <app_main+0x24c>)
 80024e8:	481e      	ldr	r0, [pc, #120]	; (8002564 <app_main+0x250>)
 80024ea:	f018 f95d 	bl	801a7a8 <createfile>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <app_main+0x220>)
 80024f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <app_main+0x220>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					_RunTime_Packet.usb_detection = 0;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <app_main+0x220>)
 8002502:	2200      	movs	r2, #0
 8002504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <app_main+0x220>)
 800250a:	2200      	movs	r2, #0
 800250c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					start_usb_timer = 0;
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <app_main+0x268>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002516:	f7ff f913 	bl	8001740 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 800251a:	f001 facf 	bl	8003abc <HAL_GetTick>
 800251e:	4603      	mov	r3, r0
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <app_main+0x260>)
 8002522:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8002524:	f001 faca 	bl	8003abc <HAL_GetTick>
 8002528:	4603      	mov	r3, r0
 800252a:	4a11      	ldr	r2, [pc, #68]	; (8002570 <app_main+0x25c>)
 800252c:	6013      	str	r3, [r2, #0]
			}

			console_process();
 800252e:	f00e f995 	bl	801085c <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002532:	e039      	b.n	80025a8 <app_main+0x294>
 8002534:	20001474 	.word	0x20001474
 8002538:	20001868 	.word	0x20001868
 800253c:	20000334 	.word	0x20000334
 8002540:	40020418 	.word	0x40020418
 8002544:	20001940 	.word	0x20001940
 8002548:	200018f8 	.word	0x200018f8
 800254c:	40000400 	.word	0x40000400
 8002550:	20001700 	.word	0x20001700
 8002554:	40020000 	.word	0x40020000
 8002558:	200014bc 	.word	0x200014bc
 800255c:	200017c4 	.word	0x200017c4
 8002560:	20001340 	.word	0x20001340
 8002564:	200012dc 	.word	0x200012dc
 8002568:	08020188 	.word	0x08020188
 800256c:	200019a0 	.word	0x200019a0
 8002570:	200016f8 	.word	0x200016f8
 8002574:	200016fc 	.word	0x200016fc
 8002578:	2000000c 	.word	0x2000000c
 800257c:	200014b8 	.word	0x200014b8
 8002580:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002584:	f00e f96a 	bl	801085c <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002588:	4b76      	ldr	r3, [pc, #472]	; (8002764 <app_main+0x450>)
 800258a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <app_main+0x282>
					get_scd4x_measurement();
 8002592:	f7ff f83b 	bl	800160c <get_scd4x_measurement>
				}

				get_sps30_measurement();
 8002596:	f7ff f8ef 	bl	8001778 <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 800259a:	4873      	ldr	r0, [pc, #460]	; (8002768 <app_main+0x454>)
 800259c:	f00f ffc4 	bl	8012528 <adc_Measure>
				led_awake_routine1();
 80025a0:	f7ff fca0 	bl	8001ee4 <led_awake_routine1>
				pwr_off_detected();
 80025a4:	f7fe fe1c 	bl	80011e0 <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80025a8:	f001 fa88 	bl	8003abc <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <app_main+0x458>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <app_main+0x45c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d809      	bhi.n	80025d0 <app_main+0x2bc>
					&& !_RunTime_Packet.usb_detection
 80025bc:	4b69      	ldr	r3, [pc, #420]	; (8002764 <app_main+0x450>)
 80025be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <app_main+0x2bc>
					&& !_RunTime_Packet.usb_first_start)
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <app_main+0x450>)
 80025c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0d9      	beq.n	8002584 <app_main+0x270>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 80025d0:	f7ff f99a 	bl	8001908 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 80025d4:	4b67      	ldr	r3, [pc, #412]	; (8002774 <app_main+0x460>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d018      	beq.n	800260e <app_main+0x2fa>
 80025dc:	4b61      	ldr	r3, [pc, #388]	; (8002764 <app_main+0x450>)
 80025de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d113      	bne.n	800260e <app_main+0x2fa>
					&& !_RunTime_Packet.usb_first_start
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <app_main+0x450>)
 80025e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10e      	bne.n	800260e <app_main+0x2fa>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 80025f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f4:	4860      	ldr	r0, [pc, #384]	; (8002778 <app_main+0x464>)
 80025f6:	f003 fa2d 	bl	8005a54 <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <app_main+0x2fa>
					USB_DETECT_Pin)) {
				scd4x_stop_periodic_measurement();
 8002600:	f010 f8de 	bl	80127c0 <scd4x_stop_periodic_measurement>
				sps30_stop_measurement();
 8002604:	f011 f852 	bl	80136ac <sps30_stop_measurement>
				stop_measurement = 0;
 8002608:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <app_main+0x460>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 800260e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002612:	4859      	ldr	r0, [pc, #356]	; (8002778 <app_main+0x464>)
 8002614:	f003 fa1e 	bl	8005a54 <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d039      	beq.n	8002692 <app_main+0x37e>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <app_main+0x468>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d035      	beq.n	8002692 <app_main+0x37e>
 8002626:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <app_main+0x450>)
 8002628:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d130      	bne.n	8002692 <app_main+0x37e>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.day_changed
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <app_main+0x450>)
 8002632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <app_main+0x346>
						|| _RunTime_Packet.filename_changed
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <app_main+0x450>)
 800263c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <app_main+0x346>
						|| _RunTime_Packet.fileformat_changed
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <app_main+0x450>)
 8002646:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <app_main+0x346>
						|| _RunTime_Packet.sd_file_creation == -1) {
 800264e:	4b45      	ldr	r3, [pc, #276]	; (8002764 <app_main+0x450>)
 8002650:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d114      	bne.n	8002684 <app_main+0x370>
					_RunTime_Packet.day_changed = 0;
 800265a:	4b42      	ldr	r3, [pc, #264]	; (8002764 <app_main+0x450>)
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					_RunTime_Packet.filename_changed = 0;
 8002662:	4b40      	ldr	r3, [pc, #256]	; (8002764 <app_main+0x450>)
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					_RunTime_Packet.fileformat_changed = 0;
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <app_main+0x450>)
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					_RunTime_Packet.sd_file_creation = createfile(
 8002672:	4943      	ldr	r1, [pc, #268]	; (8002780 <app_main+0x46c>)
 8002674:	4843      	ldr	r0, [pc, #268]	; (8002784 <app_main+0x470>)
 8002676:	f018 f897 	bl	801a7a8 <createfile>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <app_main+0x450>)
 8002680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				filesaving_process();
 8002684:	f018 f878 	bl	801a778 <filesaving_process>

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 8002688:	f001 fa18 	bl	8003abc <HAL_GetTick>
 800268c:	4603      	mov	r3, r0
 800268e:	4a37      	ldr	r2, [pc, #220]	; (800276c <app_main+0x458>)
 8002690:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002692:	f00f fd3d 	bl	8012110 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 8002696:	4834      	ldr	r0, [pc, #208]	; (8002768 <app_main+0x454>)
 8002698:	f00f ff46 	bl	8012528 <adc_Measure>
			led_awake_routine();
 800269c:	f7ff fa58 	bl	8001b50 <led_awake_routine>
			save_data();
 80026a0:	f7fe ff6a 	bl	8001578 <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80026a4:	2101      	movs	r1, #1
 80026a6:	4834      	ldr	r0, [pc, #208]	; (8002778 <app_main+0x464>)
 80026a8:	f003 f9d4 	bl	8005a54 <HAL_GPIO_ReadPin>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <app_main+0x3ac>
				_RunTime_Packet.motion_detection = 1;
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <app_main+0x450>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <app_main+0x474>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e005      	b.n	80026cc <app_main+0x3b8>
			} else {
				_RunTime_Packet.motion_detection = 0;
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <app_main+0x450>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <app_main+0x474>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 80026cc:	f7fe fd88 	bl	80011e0 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80026d0:	f001 f9f4 	bl	8003abc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b2d      	ldr	r3, [pc, #180]	; (800278c <app_main+0x478>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <app_main+0x47c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f67f ae9e 	bls.w	8002422 <app_main+0x10e>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		if (_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <app_main+0x450>)
 80026e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <app_main+0x3fc>
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <app_main+0x450>)
 80026f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <app_main+0x3fc>
				|| _RunTime_Packet.fileformat_changed
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <app_main+0x450>)
 80026fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <app_main+0x3fc>
				|| _RunTime_Packet.sd_file_creation == -1) {
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <app_main+0x450>)
 8002706:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d114      	bne.n	800273a <app_main+0x426>
			_RunTime_Packet.day_changed = 0;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <app_main+0x450>)
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			_RunTime_Packet.filename_changed = 0;
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <app_main+0x450>)
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			_RunTime_Packet.fileformat_changed = 0;
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <app_main+0x450>)
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.sd_file_creation = createfile(
 8002728:	4915      	ldr	r1, [pc, #84]	; (8002780 <app_main+0x46c>)
 800272a:	4816      	ldr	r0, [pc, #88]	; (8002784 <app_main+0x470>)
 800272c:	f018 f83c 	bl	801a7a8 <createfile>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <app_main+0x450>)
 8002736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);
		}
		filesaving_process();
 800273a:	f018 f81d 	bl	801a778 <filesaving_process>
		prev_sleep_time = HAL_GetTick();
 800273e:	f001 f9bd 	bl	8003abc <HAL_GetTick>
 8002742:	4603      	mov	r3, r0
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <app_main+0x478>)
 8002746:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8002748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800274c:	480a      	ldr	r0, [pc, #40]	; (8002778 <app_main+0x464>)
 800274e:	f003 f981 	bl	8005a54 <HAL_GPIO_ReadPin>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f ae56 	bne.w	8002406 <app_main+0xf2>

			sleep();
 800275a:	f7ff f8eb 	bl	8001934 <sleep>
			wakeup();
 800275e:	f7ff f947 	bl	80019f0 <wakeup>
		prev_sleep_time = HAL_GetTick();
 8002762:	e650      	b.n	8002406 <app_main+0xf2>
 8002764:	20001474 	.word	0x20001474
 8002768:	20001494 	.word	0x20001494
 800276c:	200016fc 	.word	0x200016fc
 8002770:	20000004 	.word	0x20000004
 8002774:	2000000c 	.word	0x2000000c
 8002778:	40020000 	.word	0x40020000
 800277c:	20000029 	.word	0x20000029
 8002780:	20001340 	.word	0x20001340
 8002784:	200012dc 	.word	0x200012dc
 8002788:	200014c1 	.word	0x200014c1
 800278c:	200016f8 	.word	0x200016f8
 8002790:	20000000 	.word	0x20000000

08002794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002798:	f001 f92a 	bl	80039f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279c:	f000 f81c 	bl	80027d8 <SystemClock_Config>
  MX_FATFS_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 80027a0:	f000 fae2 	bl	8002d68 <MX_GPIO_Init>
  MX_DMA_Init();
 80027a4:	f000 fac0 	bl	8002d28 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80027a8:	f000 f92a 	bl	8002a00 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80027ac:	f000 fa68 	bl	8002c80 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80027b0:	f000 f900 	bl	80029b4 <MX_RTC_Init>
  MX_I2C1_Init();
 80027b4:	f000 f8d0 	bl	8002958 <MX_I2C1_Init>
  MX_TIM2_Init();
 80027b8:	f000 f992 	bl	8002ae0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80027bc:	f000 fa8a 	bl	8002cd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80027c0:	f000 f878 	bl	80028b4 <MX_ADC1_Init>
  MX_FATFS_Init();
 80027c4:	f00f faf4 	bl	8011db0 <MX_FATFS_Init>
  MX_TIM1_Init();
 80027c8:	f000 f93a 	bl	8002a40 <MX_TIM1_Init>
  MX_TIM3_Init();
 80027cc:	f000 f9d6 	bl	8002b7c <MX_TIM3_Init>


  app_main(); //keep mx_usb_device_init off here
 80027d0:	f7ff fda0 	bl	8002314 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <main+0x40>
	...

080027d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b094      	sub	sp, #80	; 0x50
 80027dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027de:	f107 0320 	add.w	r3, r7, #32
 80027e2:	2230      	movs	r2, #48	; 0x30
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f018 fe98 	bl	801b51c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <SystemClock_Config+0xd4>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a29      	ldr	r2, [pc, #164]	; (80028ac <SystemClock_Config+0xd4>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <SystemClock_Config+0xd4>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <SystemClock_Config+0xd8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <SystemClock_Config+0xd8>)
 8002826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <SystemClock_Config+0xd8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002838:	2305      	movs	r3, #5
 800283a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800283c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002842:	2301      	movs	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002846:	2302      	movs	r3, #2
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800284a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002850:	2319      	movs	r3, #25
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002854:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800285a:	2304      	movs	r3, #4
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800285e:	2307      	movs	r3, #7
 8002860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	4618      	mov	r0, r3
 8002868:	f005 fd64 	bl	8008334 <HAL_RCC_OscConfig>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002872:	f000 fbe5 	bl	8003040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002876:	230f      	movs	r3, #15
 8002878:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800287a:	2302      	movs	r3, #2
 800287c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2102      	movs	r1, #2
 8002892:	4618      	mov	r0, r3
 8002894:	f005 ffc6 	bl	8008824 <HAL_RCC_ClockConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800289e:	f000 fbcf 	bl	8003040 <Error_Handler>
  }
}
 80028a2:	bf00      	nop
 80028a4:	3750      	adds	r7, #80	; 0x50
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000

080028b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ba:	463b      	mov	r3, r7
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <MX_ADC1_Init+0x98>)
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <MX_ADC1_Init+0x9c>)
 80028ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <MX_ADC1_Init+0x98>)
 80028ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MX_ADC1_Init+0x98>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <MX_ADC1_Init+0x98>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <MX_ADC1_Init+0x98>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <MX_ADC1_Init+0x98>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <MX_ADC1_Init+0x98>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <MX_ADC1_Init+0x98>)
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <MX_ADC1_Init+0xa0>)
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_ADC1_Init+0x98>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <MX_ADC1_Init+0x98>)
 8002902:	2201      	movs	r2, #1
 8002904:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_ADC1_Init+0x98>)
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_ADC1_Init+0x98>)
 8002910:	2201      	movs	r2, #1
 8002912:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_ADC1_Init+0x98>)
 8002916:	f001 f945 	bl	8003ba4 <HAL_ADC_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002920:	f000 fb8e 	bl	8003040 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002924:	230a      	movs	r3, #10
 8002926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002928:	2301      	movs	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <MX_ADC1_Init+0x98>)
 8002936:	f001 fb2b 	bl	8003f90 <HAL_ADC_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002940:	f000 fb7e 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20001728 	.word	0x20001728
 8002950:	40012000 	.word	0x40012000
 8002954:	0f000001 	.word	0x0f000001

08002958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <MX_I2C1_Init+0x50>)
 800295e:	4a13      	ldr	r2, [pc, #76]	; (80029ac <MX_I2C1_Init+0x54>)
 8002960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <MX_I2C1_Init+0x58>)
 8002966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <MX_I2C1_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800297a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <MX_I2C1_Init+0x50>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <MX_I2C1_Init+0x50>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <MX_I2C1_Init+0x50>)
 8002996:	f003 f8a7 	bl	8005ae8 <HAL_I2C_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029a0:	f000 fb4e 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20001770 	.word	0x20001770
 80029ac:	40005400 	.word	0x40005400
 80029b0:	00061a80 	.word	0x00061a80

080029b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_RTC_Init+0x44>)
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <MX_RTC_Init+0x48>)
 80029bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_RTC_Init+0x44>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_RTC_Init+0x44>)
 80029c6:	227f      	movs	r2, #127	; 0x7f
 80029c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <MX_RTC_Init+0x44>)
 80029cc:	22ff      	movs	r2, #255	; 0xff
 80029ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_RTC_Init+0x44>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <MX_RTC_Init+0x44>)
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_RTC_Init+0x44>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029e2:	4805      	ldr	r0, [pc, #20]	; (80029f8 <MX_RTC_Init+0x44>)
 80029e4:	f006 f9ec 	bl	8008dc0 <HAL_RTC_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80029ee:	f000 fb27 	bl	8003040 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200017c4 	.word	0x200017c4
 80029fc:	40002800 	.word	0x40002800

08002a00 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a06:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <MX_SDIO_SD_Init+0x3c>)
 8002a08:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <MX_SDIO_SD_Init+0x38>)
 8002a2a:	2205      	movs	r2, #5
 8002a2c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	200017e4 	.word	0x200017e4
 8002a3c:	40012c00 	.word	0x40012c00

08002a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	463b      	mov	r3, r7
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <MX_TIM1_Init+0x9c>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002a8a:	f007 fdb3 	bl	800a5f4 <HAL_TIM_Base_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002a94:	f000 fad4 	bl	8003040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a9e:	f107 0308 	add.w	r3, r7, #8
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002aa6:	f008 fa07 	bl	800aeb8 <HAL_TIM_ConfigClockSource>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002ab0:	f000 fac6 	bl	8003040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002abc:	463b      	mov	r3, r7
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_TIM1_Init+0x98>)
 8002ac2:	f008 fdb5 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002acc:	f000 fab8 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20001868 	.word	0x20001868
 8002adc:	40010000 	.word	0x40010000

08002ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af4:	463b      	mov	r3, r7
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002b04:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b14:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002b18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b26:	4814      	ldr	r0, [pc, #80]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b28:	f007 fd64 	bl	800a5f4 <HAL_TIM_Base_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b32:	f000 fa85 	bl	8003040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b44:	f008 f9b8 	bl	800aeb8 <HAL_TIM_ConfigClockSource>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b4e:	f000 fa77 	bl	8003040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4806      	ldr	r0, [pc, #24]	; (8002b78 <MX_TIM2_Init+0x98>)
 8002b60:	f008 fd66 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b6a:	f000 fa69 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200018b0 	.word	0x200018b0

08002b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b90:	f107 0320 	add.w	r3, r7, #32
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	615a      	str	r2, [r3, #20]
 8002baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bae:	4a33      	ldr	r2, [pc, #204]	; (8002c7c <MX_TIM3_Init+0x100>)
 8002bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bd2:	4829      	ldr	r0, [pc, #164]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bd4:	f007 fd0e 	bl	800a5f4 <HAL_TIM_Base_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bde:	f000 fa2f 	bl	8003040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bec:	4619      	mov	r1, r3
 8002bee:	4822      	ldr	r0, [pc, #136]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002bf0:	f008 f962 	bl	800aeb8 <HAL_TIM_ConfigClockSource>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bfa:	f000 fa21 	bl	8003040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bfe:	481e      	ldr	r0, [pc, #120]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002c00:	f007 fe87 	bl	800a912 <HAL_TIM_PWM_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c0a:	f000 fa19 	bl	8003040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c16:	f107 0320 	add.w	r3, r7, #32
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4816      	ldr	r0, [pc, #88]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002c1e:	f008 fd07 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c28:	f000 fa0a 	bl	8003040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2c:	2360      	movs	r3, #96	; 0x60
 8002c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002c44:	f008 f876 	bl	800ad34 <HAL_TIM_PWM_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c4e:	f000 f9f7 	bl	8003040 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2204      	movs	r2, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4807      	ldr	r0, [pc, #28]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002c5a:	f008 f86b 	bl	800ad34 <HAL_TIM_PWM_ConfigChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c64:	f000 f9ec 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c68:	4803      	ldr	r0, [pc, #12]	; (8002c78 <MX_TIM3_Init+0xfc>)
 8002c6a:	f000 fc07 	bl	800347c <HAL_TIM_MspPostInit>

}
 8002c6e:	bf00      	nop
 8002c70:	3738      	adds	r7, #56	; 0x38
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200018f8 	.word	0x200018f8
 8002c7c:	40000400 	.word	0x40000400

08002c80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <MX_USART1_UART_Init+0x50>)
 8002c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <MX_USART1_UART_Init+0x4c>)
 8002cb8:	f008 fd3c 	bl	800b734 <HAL_UART_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002cc2:	f000 f9bd 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200019a0 	.word	0x200019a0
 8002cd0:	40011000 	.word	0x40011000

08002cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <MX_USART2_UART_Init+0x50>)
 8002cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002d0c:	f008 fd12 	bl	800b734 <HAL_UART_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d16:	f000 f993 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200019e4 	.word	0x200019e4
 8002d24:	40004400 	.word	0x40004400

08002d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_DMA_Init+0x3c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <MX_DMA_Init+0x3c>)
 8002d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_DMA_Init+0x3c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2044      	movs	r0, #68	; 0x44
 8002d50:	f001 fc97 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002d54:	2044      	movs	r0, #68	; 0x44
 8002d56:	f001 fcb0 	bl	80046ba <HAL_NVIC_EnableIRQ>

}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a70      	ldr	r2, [pc, #448]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a62      	ldr	r2, [pc, #392]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b52      	ldr	r3, [pc, #328]	; (8002f48 <MX_GPIO_Init+0x1e0>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	484f      	ldr	r0, [pc, #316]	; (8002f4c <MX_GPIO_Init+0x1e4>)
 8002e10:	f002 fe38 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002e14:	2201      	movs	r2, #1
 8002e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e1a:	484d      	ldr	r0, [pc, #308]	; (8002f50 <MX_GPIO_Init+0x1e8>)
 8002e1c:	f002 fe32 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2108      	movs	r1, #8
 8002e24:	484a      	ldr	r0, [pc, #296]	; (8002f50 <MX_GPIO_Init+0x1e8>)
 8002e26:	f002 fe2d 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e2a:	f642 63fe 	movw	r3, #12030	; 0x2efe
 8002e2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e30:	2303      	movs	r3, #3
 8002e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4845      	ldr	r0, [pc, #276]	; (8002f54 <MX_GPIO_Init+0x1ec>)
 8002e40:	f002 fba0 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	483d      	ldr	r0, [pc, #244]	; (8002f4c <MX_GPIO_Init+0x1e4>)
 8002e58:	f002 fb94 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	4836      	ldr	r0, [pc, #216]	; (8002f4c <MX_GPIO_Init+0x1e4>)
 8002e74:	f002 fb86 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002e78:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8002e7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	482f      	ldr	r0, [pc, #188]	; (8002f4c <MX_GPIO_Init+0x1e4>)
 8002e8e:	f002 fb79 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002e92:	f247 4307 	movw	r3, #29703	; 0x7407
 8002e96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	482a      	ldr	r0, [pc, #168]	; (8002f50 <MX_GPIO_Init+0x1e8>)
 8002ea8:	f002 fb6c 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 8002eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4822      	ldr	r0, [pc, #136]	; (8002f50 <MX_GPIO_Init+0x1e8>)
 8002ec6:	f002 fb5d 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8002eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ed0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481a      	ldr	r0, [pc, #104]	; (8002f4c <MX_GPIO_Init+0x1e4>)
 8002ee2:	f002 fb4f 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8002ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_GPIO_Init+0x1e4>)
 8002efe:	f002 fb41 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002f02:	2308      	movs	r3, #8
 8002f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4619      	mov	r1, r3
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <MX_GPIO_Init+0x1e8>)
 8002f1a:	f002 fb33 	bl	8005584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	2017      	movs	r0, #23
 8002f24:	f001 fbad 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f28:	2017      	movs	r0, #23
 8002f2a:	f001 fbc6 	bl	80046ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2028      	movs	r0, #40	; 0x28
 8002f34:	f001 fba5 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f38:	2028      	movs	r0, #40	; 0x28
 8002f3a:	f001 fbbe 	bl	80046ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800

08002f58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8002f6a:	f7fe f8eb 	bl	8001144 <timer_interrupt>
}

}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 8002f88:	f7fe f8c0 	bl	800110c <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f92:	d114      	bne.n	8002fbe <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8002faa:	f000 fd87 	bl	8003abc <HAL_GetTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_GPIO_EXTI_Callback+0x64>)
 8002fb2:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8002fb4:	f000 fd82 	bl	8003abc <HAL_GetTick>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_GPIO_EXTI_Callback+0x68>)
 8002fbc:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_EXTI_Callback+0x52>
    {
    	power_off_detect();
 8002fc6:	f7fe f8d7 	bl	8001178 <power_off_detect>
    }
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20001474 	.word	0x20001474
 8002fd8:	200014bc 	.word	0x200014bc
 8002fdc:	20001700 	.word	0x20001700
 8002fe0:	200016f8 	.word	0x200016f8

08002fe4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	RtcInt();
 8002fec:	f00f f85e 	bl	80120ac <RtcInt>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <HAL_UART_ErrorCallback+0x40>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d106      	bne.n	8003016 <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	43d2      	mvns	r2, r2
 8003012:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003014:	e009      	b.n	800302a <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a08      	ldr	r2, [pc, #32]	; (800303c <HAL_UART_ErrorCallback+0x44>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d105      	bne.n	800302a <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	43d2      	mvns	r2, r2
 8003028:	601a      	str	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	200019a0 	.word	0x200019a0
 800303c:	200019e4 	.word	0x200019e4

08003040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003044:	b672      	cpsid	i
}
 8003046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003048:	e7fe      	b.n	8003048 <Error_Handler+0x8>
	...

0800304c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_MspInit+0x4c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_MspInit+0x4c>)
 800305c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003060:	6453      	str	r3, [r2, #68]	; 0x44
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_MspInit+0x4c>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_MspInit+0x4c>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a08      	ldr	r2, [pc, #32]	; (8003098 <HAL_MspInit+0x4c>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_MspInit+0x4c>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a17      	ldr	r2, [pc, #92]	; (8003118 <HAL_ADC_MspInit+0x7c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d127      	bne.n	800310e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_ADC_MspInit+0x80>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_ADC_MspInit+0x80>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6453      	str	r3, [r2, #68]	; 0x44
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_ADC_MspInit+0x80>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_ADC_MspInit+0x80>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_ADC_MspInit+0x80>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_ADC_MspInit+0x80>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 80030f6:	2301      	movs	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030fa:	2303      	movs	r3, #3
 80030fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	4805      	ldr	r0, [pc, #20]	; (8003120 <HAL_ADC_MspInit+0x84>)
 800310a:	f002 fa3b 	bl	8005584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800310e:	bf00      	nop
 8003110:	3728      	adds	r7, #40	; 0x28
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40012000 	.word	0x40012000
 800311c:	40023800 	.word	0x40023800
 8003120:	40020800 	.word	0x40020800

08003124 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a08      	ldr	r2, [pc, #32]	; (8003154 <HAL_ADC_MspDeInit+0x30>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d109      	bne.n	800314a <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_ADC_MspDeInit+0x34>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <HAL_ADC_MspDeInit+0x34>)
 800313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003140:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 8003142:	2101      	movs	r1, #1
 8003144:	4805      	ldr	r0, [pc, #20]	; (800315c <HAL_ADC_MspDeInit+0x38>)
 8003146:	f002 fba1 	bl	800588c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40012000 	.word	0x40012000
 8003158:	40023800 	.word	0x40023800
 800315c:	40020800 	.word	0x40020800

08003160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_I2C_MspInit+0x84>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d12c      	bne.n	80031dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_I2C_MspInit+0x88>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_I2C_MspInit+0x88>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_I2C_MspInit+0x88>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 800319e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a4:	2312      	movs	r3, #18
 80031a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ac:	2303      	movs	r3, #3
 80031ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b0:	2304      	movs	r3, #4
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	480c      	ldr	r0, [pc, #48]	; (80031ec <HAL_I2C_MspInit+0x8c>)
 80031bc:	f002 f9e2 	bl	8005584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_I2C_MspInit+0x88>)
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_I2C_MspInit+0x88>)
 80031ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ce:	6413      	str	r3, [r2, #64]	; 0x40
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_I2C_MspInit+0x88>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40005400 	.word	0x40005400
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020400 	.word	0x40020400

080031f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0b      	ldr	r2, [pc, #44]	; (800322c <HAL_I2C_MspDeInit+0x3c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10f      	bne.n	8003222 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_I2C_MspDeInit+0x40>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <HAL_I2C_MspDeInit+0x40>)
 8003208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 800320e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003212:	4808      	ldr	r0, [pc, #32]	; (8003234 <HAL_I2C_MspDeInit+0x44>)
 8003214:	f002 fb3a 	bl	800588c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <HAL_I2C_MspDeInit+0x44>)
 800321e:	f002 fb35 	bl	800588c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40005400 	.word	0x40005400
 8003230:	40023800 	.word	0x40023800
 8003234:	40020400 	.word	0x40020400

08003238 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_RTC_MspInit+0x60>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d119      	bne.n	800328e <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800325a:	2302      	movs	r3, #2
 800325c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800325e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003262:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	4618      	mov	r0, r3
 800326a:	f005 fcbb 	bl	8008be4 <HAL_RCCEx_PeriphCLKConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003274:	f7ff fee4 	bl	8003040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RTC_MspInit+0x64>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	2029      	movs	r0, #41	; 0x29
 8003284:	f001 f9fd 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003288:	2029      	movs	r0, #41	; 0x29
 800328a:	f001 fa16 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40002800 	.word	0x40002800
 800329c:	42470e3c 	.word	0x42470e3c

080032a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a28      	ldr	r2, [pc, #160]	; (8003360 <HAL_SD_MspInit+0xc0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d14a      	bne.n	8003358 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b27      	ldr	r3, [pc, #156]	; (8003364 <HAL_SD_MspInit+0xc4>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	4a26      	ldr	r2, [pc, #152]	; (8003364 <HAL_SD_MspInit+0xc4>)
 80032cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_SD_MspInit+0xc4>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_SD_MspInit+0xc4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_SD_MspInit+0xc4>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_SD_MspInit+0xc4>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_SD_MspInit+0xc4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_SD_MspInit+0xc4>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_SD_MspInit+0xc4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003316:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003328:	230c      	movs	r3, #12
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <HAL_SD_MspInit+0xc8>)
 8003334:	f002 f926 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003338:	2304      	movs	r3, #4
 800333a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003348:	230c      	movs	r3, #12
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4619      	mov	r1, r3
 8003352:	4806      	ldr	r0, [pc, #24]	; (800336c <HAL_SD_MspInit+0xcc>)
 8003354:	f002 f916 	bl	8005584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003358:	bf00      	nop
 800335a:	3728      	adds	r7, #40	; 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40023800 	.word	0x40023800
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00

08003370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <HAL_TIM_Base_MspInit+0xf8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d13f      	bne.n	8003402 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	4b39      	ldr	r3, [pc, #228]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a38      	ldr	r2, [pc, #224]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800339e:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033a0:	4a34      	ldr	r2, [pc, #208]	; (8003474 <HAL_TIM_Base_MspInit+0x104>)
 80033a2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033a6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80033aa:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033be:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c6:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ce:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d6:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033da:	2200      	movs	r2, #0
 80033dc:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80033e4:	4822      	ldr	r0, [pc, #136]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033e6:	f001 f995 	bl	8004714 <HAL_DMA_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80033f0:	f7ff fe26 	bl	8003040 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033f8:	621a      	str	r2, [r3, #32]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_TIM_Base_MspInit+0x100>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003400:	e02e      	b.n	8003460 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d116      	bne.n	800343a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a15      	ldr	r2, [pc, #84]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	201c      	movs	r0, #28
 800342e:	f001 f928 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003432:	201c      	movs	r0, #28
 8003434:	f001 f941 	bl	80046ba <HAL_NVIC_EnableIRQ>
}
 8003438:	e012      	b.n	8003460 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_TIM_Base_MspInit+0x108>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10d      	bne.n	8003460 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	6413      	str	r3, [r2, #64]	; 0x40
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_TIM_Base_MspInit+0xfc>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40010000 	.word	0x40010000
 800346c:	40023800 	.word	0x40023800
 8003470:	20001940 	.word	0x20001940
 8003474:	40026488 	.word	0x40026488
 8003478:	40000400 	.word	0x40000400

0800347c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <HAL_TIM_MspPostInit+0x68>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d11d      	bne.n	80034da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_TIM_MspPostInit+0x6c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a10      	ldr	r2, [pc, #64]	; (80034e8 <HAL_TIM_MspPostInit+0x6c>)
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_TIM_MspPostInit+0x6c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80034ba:	2330      	movs	r3, #48	; 0x30
 80034bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	4619      	mov	r1, r3
 80034d4:	4805      	ldr	r0, [pc, #20]	; (80034ec <HAL_TIM_MspPostInit+0x70>)
 80034d6:	f002 f855 	bl	8005584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034da:	bf00      	nop
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020400 	.word	0x40020400

080034f0 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a16      	ldr	r2, [pc, #88]	; (8003558 <HAL_TIM_Base_MspDeInit+0x68>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10b      	bne.n	800351a <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f9ac 	bl	8004870 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003518:	e019      	b.n	800354e <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d109      	bne.n	8003538 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_TIM_Base_MspDeInit+0x6c>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003530:	201c      	movs	r0, #28
 8003532:	f001 f8d0 	bl	80046d6 <HAL_NVIC_DisableIRQ>
}
 8003536:	e00a      	b.n	800354e <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_TIM_Base_MspDeInit+0x70>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d105      	bne.n	800354e <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40023800 	.word	0x40023800
 8003560:	40000400 	.word	0x40000400

08003564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	; 0x30
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a3a      	ldr	r2, [pc, #232]	; (800366c <HAL_UART_MspInit+0x108>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d134      	bne.n	80035f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <HAL_UART_MspInit+0x10c>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a38      	ldr	r2, [pc, #224]	; (8003670 <HAL_UART_MspInit+0x10c>)
 8003590:	f043 0310 	orr.w	r3, r3, #16
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_UART_MspInit+0x10c>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_UART_MspInit+0x10c>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a31      	ldr	r2, [pc, #196]	; (8003670 <HAL_UART_MspInit+0x10c>)
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_UART_MspInit+0x10c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 80035be:	23c0      	movs	r3, #192	; 0xc0
 80035c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ce:	2307      	movs	r3, #7
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	4826      	ldr	r0, [pc, #152]	; (8003674 <HAL_UART_MspInit+0x110>)
 80035da:	f001 ffd3 	bl	8005584 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2025      	movs	r0, #37	; 0x25
 80035e4:	f001 f84d 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035e8:	2025      	movs	r0, #37	; 0x25
 80035ea:	f001 f866 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ee:	e038      	b.n	8003662 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a20      	ldr	r2, [pc, #128]	; (8003678 <HAL_UART_MspInit+0x114>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d133      	bne.n	8003662 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_UART_MspInit+0x10c>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_UART_MspInit+0x10c>)
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_UART_MspInit+0x10c>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_UART_MspInit+0x10c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_UART_MspInit+0x10c>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_UART_MspInit+0x10c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003632:	230c      	movs	r3, #12
 8003634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003642:	2307      	movs	r3, #7
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003646:	f107 031c 	add.w	r3, r7, #28
 800364a:	4619      	mov	r1, r3
 800364c:	480b      	ldr	r0, [pc, #44]	; (800367c <HAL_UART_MspInit+0x118>)
 800364e:	f001 ff99 	bl	8005584 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	2026      	movs	r0, #38	; 0x26
 8003658:	f001 f813 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800365c:	2026      	movs	r0, #38	; 0x26
 800365e:	f001 f82c 	bl	80046ba <HAL_NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3730      	adds	r7, #48	; 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40011000 	.word	0x40011000
 8003670:	40023800 	.word	0x40023800
 8003674:	40020400 	.word	0x40020400
 8003678:	40004400 	.word	0x40004400
 800367c:	40020000 	.word	0x40020000

08003680 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_UART_MspDeInit+0x5c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10d      	bne.n	80036ae <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_UART_MspDeInit+0x60>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_UART_MspDeInit+0x60>)
 8003698:	f023 0310 	bic.w	r3, r3, #16
 800369c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 800369e:	21c0      	movs	r1, #192	; 0xc0
 80036a0:	4810      	ldr	r0, [pc, #64]	; (80036e4 <HAL_UART_MspDeInit+0x64>)
 80036a2:	f002 f8f3 	bl	800588c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80036a6:	2025      	movs	r0, #37	; 0x25
 80036a8:	f001 f815 	bl	80046d6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80036ac:	e011      	b.n	80036d2 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_UART_MspDeInit+0x68>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10c      	bne.n	80036d2 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_UART_MspDeInit+0x60>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_UART_MspDeInit+0x60>)
 80036be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036c2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 80036c4:	210c      	movs	r1, #12
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <HAL_UART_MspDeInit+0x6c>)
 80036c8:	f002 f8e0 	bl	800588c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80036cc:	2026      	movs	r0, #38	; 0x26
 80036ce:	f001 f802 	bl	80046d6 <HAL_NVIC_DisableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40011000 	.word	0x40011000
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020400 	.word	0x40020400
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40020000 	.word	0x40020000

080036f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 80036f4:	f000 fffd 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <NMI_Handler+0x8>

080036fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80036fe:	f000 fff8 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003702:	e7fe      	b.n	8003702 <HardFault_Handler+0x8>

08003704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003708:	f000 fff3 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800370c:	e7fe      	b.n	800370c <MemManage_Handler+0x8>

0800370e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003712:	f000 ffee 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003716:	e7fe      	b.n	8003716 <BusFault_Handler+0x8>

08003718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800371c:	f000 ffe9 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003720:	e7fe      	b.n	8003720 <UsageFault_Handler+0x8>

08003722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003726:	f000 ffe4 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}

0800372e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003732:	f000 ffde 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}

0800373a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 800373e:	f000 ffd8 	bl	80046f2 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}

08003746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800374a:	f000 f9a3 	bl	8003a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}

08003752 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800375a:	f002 f9ad 	bl	8005ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <TIM2_IRQHandler+0x10>)
 800376a:	f007 f9db 	bl	800ab24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200018b0 	.word	0x200018b0

08003778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <USART1_IRQHandler+0x10>)
 800377e:	f008 f97d 	bl	800ba7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200019a0 	.word	0x200019a0

0800378c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <USART2_IRQHandler+0x10>)
 8003792:	f008 f973 	bl	800ba7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200019e4 	.word	0x200019e4

080037a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 80037a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80037a8:	f002 f986 	bl	8005ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80037b4:	4802      	ldr	r0, [pc, #8]	; (80037c0 <RTC_Alarm_IRQHandler+0x10>)
 80037b6:	f005 fe87 	bl	80094c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200017c4 	.word	0x200017c4

080037c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <OTG_FS_IRQHandler+0x10>)
 80037ca:	f003 fc2c 	bl	8007026 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2000288c 	.word	0x2000288c

080037d8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <DMA2_Stream5_IRQHandler+0x10>)
 80037de:	f001 f973 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20001940 	.word	0x20001940

080037ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return 1;
 80037f0:	2301      	movs	r3, #1
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_kill>:

int _kill(int pid, int sig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003806:	f017 fdbd 	bl	801b384 <__errno>
 800380a:	4603      	mov	r3, r0
 800380c:	2216      	movs	r2, #22
 800380e:	601a      	str	r2, [r3, #0]
  return -1;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_exit>:

void _exit (int status)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffe7 	bl	80037fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800382e:	e7fe      	b.n	800382e <_exit+0x12>

08003830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e00a      	b.n	8003858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003842:	f3af 8000 	nop.w
 8003846:	4601      	mov	r1, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	60ba      	str	r2, [r7, #8]
 800384e:	b2ca      	uxtb	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3301      	adds	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	dbf0      	blt.n	8003842 <_read+0x12>
  }

  return len;
 8003860:	687b      	ldr	r3, [r7, #4]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e009      	b.n	8003890 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	60ba      	str	r2, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3301      	adds	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	dbf1      	blt.n	800387c <_write+0x12>
  }
  return len;
 8003898:	687b      	ldr	r3, [r7, #4]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <_close>:

int _close(int file)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ca:	605a      	str	r2, [r3, #4]
  return 0;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_isatty>:

int _isatty(int file)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038e2:	2301      	movs	r3, #1
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <_sbrk+0x5c>)
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <_sbrk+0x60>)
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <_sbrk+0x64>)
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <_sbrk+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800393c:	f017 fd22 	bl	801b384 <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	220c      	movs	r2, #12
 8003944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e009      	b.n	8003960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <_sbrk+0x64>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <_sbrk+0x64>)
 800395c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20018000 	.word	0x20018000
 800396c:	00000400 	.word	0x00000400
 8003970:	20001a28 	.word	0x20001a28
 8003974:	20003620 	.word	0x20003620

08003978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <SystemInit+0x20>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <SystemInit+0x20>)
 8003984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800399c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039a0:	480d      	ldr	r0, [pc, #52]	; (80039d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039a2:	490e      	ldr	r1, [pc, #56]	; (80039dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a8:	e002      	b.n	80039b0 <LoopCopyDataInit>

080039aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ae:	3304      	adds	r3, #4

080039b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039b4:	d3f9      	bcc.n	80039aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039b8:	4c0b      	ldr	r4, [pc, #44]	; (80039e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039bc:	e001      	b.n	80039c2 <LoopFillZerobss>

080039be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c0:	3204      	adds	r2, #4

080039c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039c4:	d3fb      	bcc.n	80039be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039c6:	f7ff ffd7 	bl	8003978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f017 fd4f 	bl	801b46c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ce:	f7fe fee1 	bl	8002794 <main>
  bx  lr    
 80039d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80039d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039dc:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 80039e0:	080223d8 	.word	0x080223d8
  ldr r2, =_sbss
 80039e4:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 80039e8:	20003620 	.word	0x20003620

080039ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ec:	e7fe      	b.n	80039ec <ADC_IRQHandler>
	...

080039f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_Init+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_Init+0x40>)
 80039fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_Init+0x40>)
 8003a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_Init+0x40>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a18:	2003      	movs	r0, #3
 8003a1a:	f000 fe27 	bl	800466c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1e:	200f      	movs	r0, #15
 8003a20:	f000 f808 	bl	8003a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a24:	f7ff fb12 	bl	800304c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023c00 	.word	0x40023c00

08003a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x54>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_InitTick+0x58>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fe51 	bl	80046fa <HAL_SYSTICK_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00e      	b.n	8003a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d80a      	bhi.n	8003a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f000 fe07 	bl	8004682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <HAL_InitTick+0x5c>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000010 	.word	0x20000010
 8003a8c:	20000018 	.word	0x20000018
 8003a90:	20000014 	.word	0x20000014

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000018 	.word	0x20000018
 8003ab8:	20001a2c 	.word	0x20001a2c

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20001a2c 	.word	0x20001a2c

08003ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000018 	.word	0x20000018

08003b1c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_SuspendTick+0x1c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_SuspendTick+0x1c>)
 8003b26:	f023 0302 	bic.w	r3, r3, #2
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e010 	.word	0xe000e010

08003b3c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_ResumeTick+0x1c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <HAL_ResumeTick+0x1c>)
 8003b46:	f043 0302 	orr.w	r3, r3, #2
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000e010 	.word	0xe000e010

08003b5c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_GetUIDw0+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	1fff7a10 	.word	0x1fff7a10

08003b74 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_GetUIDw1+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	1fff7a14 	.word	0x1fff7a14

08003b8c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_GetUIDw2+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	1fff7a18 	.word	0x1fff7a18

08003ba4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e033      	b.n	8003c22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fa6a 	bl	800309c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d118      	bne.n	8003c14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bea:	f023 0302 	bic.w	r3, r3, #2
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 faec 	bl	80041d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
 8003c12:	e001      	b.n	8003c18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e022      	b.n	8003c86 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0202 	orr.w	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d108      	bne.n	8003c7c <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fa5a 	bl	8003124 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_Start+0x1a>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e097      	b.n	8003dda <HAL_ADC_Start+0x14a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d018      	beq.n	8003cf2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cd0:	4b45      	ldr	r3, [pc, #276]	; (8003de8 <HAL_ADC_Start+0x158>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a45      	ldr	r2, [pc, #276]	; (8003dec <HAL_ADC_Start+0x15c>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0c9a      	lsrs	r2, r3, #18
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ce4:	e002      	b.n	8003cec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f9      	bne.n	8003ce6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d15f      	bne.n	8003dc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d106      	bne.n	8003d4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	f023 0206 	bic.w	r2, r3, #6
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d4c:	e002      	b.n	8003d54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_ADC_Start+0x160>)
 8003d5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d129      	bne.n	8003dd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e020      	b.n	8003dd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <HAL_ADC_Start+0x164>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_ADC_Start+0x148>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d114      	bne.n	8003dd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f043 0210 	orr.w	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000010 	.word	0x20000010
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	40012300 	.word	0x40012300
 8003df4:	40012000 	.word	0x40012000

08003df8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_ADC_Stop+0x16>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e021      	b.n	8003e52 <HAL_ADC_Stop+0x5a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d113      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e063      	b.n	8003f6c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003ea4:	f7ff fe0a 	bl	8003abc <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003eaa:	e021      	b.n	8003ef0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d01d      	beq.n	8003ef0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_ADC_PollForConversion+0x6c>
 8003eba:	f7ff fdff 	bl	8003abc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d212      	bcs.n	8003ef0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0204 	orr.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e03d      	b.n	8003f6c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d1d6      	bne.n	8003eac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0212 	mvn.w	r2, #18
 8003f06:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d123      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11f      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d111      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e105      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x228>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d925      	bls.n	8004008 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68d9      	ldr	r1, [r3, #12]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4613      	mov	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	3b1e      	subs	r3, #30
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	400a      	ands	r2, r1
 8003fe0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68d9      	ldr	r1, [r3, #12]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4403      	add	r3, r0
 8003ffa:	3b1e      	subs	r3, #30
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	e022      	b.n	800404e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6919      	ldr	r1, [r3, #16]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	2207      	movs	r2, #7
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43da      	mvns	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	400a      	ands	r2, r1
 800402a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6919      	ldr	r1, [r3, #16]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	4618      	mov	r0, r3
 800403e:	4603      	mov	r3, r0
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4403      	add	r3, r0
 8004044:	409a      	lsls	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b06      	cmp	r3, #6
 8004054:	d824      	bhi.n	80040a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3b05      	subs	r3, #5
 8004068:	221f      	movs	r2, #31
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	400a      	ands	r2, r1
 8004076:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	4618      	mov	r0, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	3b05      	subs	r3, #5
 8004092:	fa00 f203 	lsl.w	r2, r0, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	635a      	str	r2, [r3, #52]	; 0x34
 800409e:	e04c      	b.n	800413a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d824      	bhi.n	80040f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	3b23      	subs	r3, #35	; 0x23
 80040ba:	221f      	movs	r2, #31
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43da      	mvns	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	400a      	ands	r2, r1
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4618      	mov	r0, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	3b23      	subs	r3, #35	; 0x23
 80040e4:	fa00 f203 	lsl.w	r2, r0, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
 80040f0:	e023      	b.n	800413a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	3b41      	subs	r3, #65	; 0x41
 8004104:	221f      	movs	r2, #31
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43da      	mvns	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	400a      	ands	r2, r1
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	4618      	mov	r0, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	3b41      	subs	r3, #65	; 0x41
 800412e:	fa00 f203 	lsl.w	r2, r0, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_ADC_ConfigChannel+0x234>)
 800413c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <HAL_ADC_ConfigChannel+0x238>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d109      	bne.n	800415c <HAL_ADC_ConfigChannel+0x1cc>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b12      	cmp	r3, #18
 800414e:	d105      	bne.n	800415c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_ADC_ConfigChannel+0x238>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d123      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x21e>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b10      	cmp	r3, #16
 800416c:	d003      	beq.n	8004176 <HAL_ADC_ConfigChannel+0x1e6>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b11      	cmp	r3, #17
 8004174:	d11b      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b10      	cmp	r3, #16
 8004188:	d111      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <HAL_ADC_ConfigChannel+0x23c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <HAL_ADC_ConfigChannel+0x240>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0c9a      	lsrs	r2, r3, #18
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041a0:	e002      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f9      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40012300 	.word	0x40012300
 80041c8:	40012000 	.word	0x40012000
 80041cc:	20000010 	.word	0x20000010
 80041d0:	431bde83 	.word	0x431bde83

080041d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041dc:	4b79      	ldr	r3, [pc, #484]	; (80043c4 <ADC_Init+0x1f0>)
 80041de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800422c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6899      	ldr	r1, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <ADC_Init+0x1f4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800427a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800429c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	e00f      	b.n	80042d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0202 	bic.w	r2, r2, #2
 80042e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7e1b      	ldrb	r3, [r3, #24]
 80042ec:	005a      	lsls	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01b      	beq.n	8004338 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800431e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	3b01      	subs	r3, #1
 800432c:	035a      	lsls	r2, r3, #13
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	e007      	b.n	8004348 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	3b01      	subs	r3, #1
 8004364:	051a      	lsls	r2, r3, #20
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800437c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800438a:	025a      	lsls	r2, r3, #9
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	029a      	lsls	r2, r3, #10
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40012300 	.word	0x40012300
 80043c8:	0f000001 	.word	0x0f000001

080043cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e031      	b.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 021f 	bic.w	r2, r3, #31
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012300 	.word	0x40012300

08004458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <__NVIC_SetPriorityGrouping+0x44>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004474:	4013      	ands	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448a:	4a04      	ldr	r2, [pc, #16]	; (800449c <__NVIC_SetPriorityGrouping+0x44>)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	60d3      	str	r3, [r2, #12]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <__NVIC_GetPriorityGrouping+0x18>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	f003 0307 	and.w	r3, r3, #7
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	db0b      	blt.n	80044e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	4907      	ldr	r1, [pc, #28]	; (80044f4 <__NVIC_EnableIRQ+0x38>)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2001      	movs	r0, #1
 80044de:	fa00 f202 	lsl.w	r2, r0, r2
 80044e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	e000e100 	.word	0xe000e100

080044f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	2b00      	cmp	r3, #0
 8004508:	db12      	blt.n	8004530 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	f003 021f 	and.w	r2, r3, #31
 8004510:	490a      	ldr	r1, [pc, #40]	; (800453c <__NVIC_DisableIRQ+0x44>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2001      	movs	r0, #1
 800451a:	fa00 f202 	lsl.w	r2, r0, r2
 800451e:	3320      	adds	r3, #32
 8004520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004524:	f3bf 8f4f 	dsb	sy
}
 8004528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800452a:	f3bf 8f6f 	isb	sy
}
 800452e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf28      	it	cs
 80045b2:	2304      	movcs	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d902      	bls.n	80045c4 <NVIC_EncodePriority+0x30>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b03      	subs	r3, #3
 80045c2:	e000      	b.n	80045c6 <NVIC_EncodePriority+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43d9      	mvns	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	4313      	orrs	r3, r2
         );
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004600:	f3bf 8f4f 	dsb	sy
}
 8004604:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <__NVIC_SystemReset+0x24>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800460e:	4904      	ldr	r1, [pc, #16]	; (8004620 <__NVIC_SystemReset+0x24>)
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <__NVIC_SystemReset+0x28>)
 8004612:	4313      	orrs	r3, r2
 8004614:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004616:	f3bf 8f4f 	dsb	sy
}
 800461a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <__NVIC_SystemReset+0x20>
 8004620:	e000ed00 	.word	0xe000ed00
 8004624:	05fa0004 	.word	0x05fa0004

08004628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004638:	d301      	bcc.n	800463e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800463a:	2301      	movs	r3, #1
 800463c:	e00f      	b.n	800465e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <SysTick_Config+0x40>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004646:	210f      	movs	r1, #15
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	f7ff ff78 	bl	8004540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <SysTick_Config+0x40>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <SysTick_Config+0x40>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	e000e010 	.word	0xe000e010

0800466c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff feef 	bl	8004458 <__NVIC_SetPriorityGrouping>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004694:	f7ff ff04 	bl	80044a0 <__NVIC_GetPriorityGrouping>
 8004698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f7ff ff78 	bl	8004594 <NVIC_EncodePriority>
 80046a4:	4602      	mov	r2, r0
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff47 	bl	8004540 <__NVIC_SetPriority>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fef7 	bl	80044bc <__NVIC_EnableIRQ>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff07 	bl	80044f8 <__NVIC_DisableIRQ>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80046f6:	f7ff ff81 	bl	80045fc <__NVIC_SystemReset>

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ff90 	bl	8004628 <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7ff f9cc 	bl	8003abc <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e099      	b.n	8004864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004750:	e00f      	b.n	8004772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004752:	f7ff f9b3 	bl	8003abc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b05      	cmp	r3, #5
 800475e:	d908      	bls.n	8004772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e078      	b.n	8004864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e8      	bne.n	8004752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_DMA_Init+0x158>)
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d107      	bne.n	80047dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4313      	orrs	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0307 	bic.w	r3, r3, #7
 80047f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b04      	cmp	r3, #4
 8004804:	d117      	bne.n	8004836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb43 	bl	8004ea4 <DMA_CheckFifoParam>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004832:	2301      	movs	r3, #1
 8004834:	e016      	b.n	8004864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fafa 	bl	8004e38 <DMA_CalcBaseAndBitshift>
 8004844:	4603      	mov	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	223f      	movs	r2, #63	; 0x3f
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	f010803f 	.word	0xf010803f

08004870 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e050      	b.n	8004924 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d101      	bne.n	8004892 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
 8004890:	e048      	b.n	8004924 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2221      	movs	r2, #33	; 0x21
 80048d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fab0 	bl	8004e38 <DMA_CalcBaseAndBitshift>
 80048d8:	4603      	mov	r3, r0
 80048da:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	223f      	movs	r2, #63	; 0x3f
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_DMA_Start+0x20>
 8004948:	2302      	movs	r3, #2
 800494a:	e026      	b.n	800499a <HAL_DMA_Start+0x6e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d115      	bne.n	800498c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fa31 	bl	8004ddc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e005      	b.n	8004998 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049b0:	f7ff f884 	bl	8003abc <HAL_GetTick>
 80049b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d008      	beq.n	80049d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e052      	b.n	8004a7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0216 	bic.w	r2, r2, #22
 80049e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <HAL_DMA_Abort+0x62>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0208 	bic.w	r2, r2, #8
 8004a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a24:	e013      	b.n	8004a4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a26:	f7ff f849 	bl	8003abc <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d90c      	bls.n	8004a4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e015      	b.n	8004a7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e4      	bne.n	8004a26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	223f      	movs	r2, #63	; 0x3f
 8004a62:	409a      	lsls	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d004      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e00c      	b.n	8004aba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad4:	4b8e      	ldr	r3, [pc, #568]	; (8004d10 <HAL_DMA_IRQHandler+0x248>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_DMA_IRQHandler+0x24c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2208      	movs	r2, #8
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d012      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2204      	movs	r2, #4
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d043      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d024      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e01f      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e016      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0208 	bic.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 808f 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8087 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	2220      	movs	r2, #32
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d136      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0216 	bic.w	r2, r2, #22
 8004c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x1da>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0208 	bic.w	r2, r2, #8
 8004cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	223f      	movs	r2, #63	; 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d07e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
        }
        return;
 8004cde:	e079      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d031      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e02c      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
 8004d0e:	bf00      	nop
 8004d10:	20000010 	.word	0x20000010
 8004d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e01e      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d032      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d307      	bcc.n	8004db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f2      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x2cc>
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
 8004dd2:	e000      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dd4:	bf00      	nop
    }
  }
}
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d108      	bne.n	8004e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e1a:	e007      	b.n	8004e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b10      	subs	r3, #16
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <DMA_CalcBaseAndBitshift+0x64>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d909      	bls.n	8004e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58
 8004e78:	e007      	b.n	8004e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ea0:	08021a30 	.word	0x08021a30

08004ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d11f      	bne.n	8004efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d856      	bhi.n	8004f72 <DMA_CheckFifoParam+0xce>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <DMA_CheckFifoParam+0x28>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eef 	.word	0x08004eef
 8004ed4:	08004edd 	.word	0x08004edd
 8004ed8:	08004f73 	.word	0x08004f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d046      	beq.n	8004f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e043      	b.n	8004f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ef6:	d140      	bne.n	8004f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efc:	e03d      	b.n	8004f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f06:	d121      	bne.n	8004f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d837      	bhi.n	8004f7e <DMA_CheckFifoParam+0xda>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <DMA_CheckFifoParam+0x70>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f2b 	.word	0x08004f2b
 8004f1c:	08004f25 	.word	0x08004f25
 8004f20:	08004f3d 	.word	0x08004f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e030      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d025      	beq.n	8004f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3a:	e022      	b.n	8004f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f44:	d11f      	bne.n	8004f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f4a:	e01c      	b.n	8004f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d903      	bls.n	8004f5a <DMA_CheckFifoParam+0xb6>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d003      	beq.n	8004f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f58:	e018      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5e:	e015      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00e      	beq.n	8004f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e00b      	b.n	8004f8a <DMA_CheckFifoParam+0xe6>
      break;
 8004f72:	bf00      	nop
 8004f74:	e00a      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
 8004f78:	e008      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e006      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7e:	bf00      	nop
 8004f80:	e004      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f82:	bf00      	nop
 8004f84:	e002      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_FLASH_Program+0xa0>)
 8004fb0:	7e1b      	ldrb	r3, [r3, #24]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_FLASH_Program+0x1e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e03b      	b.n	8005032 <HAL_FLASH_Program+0x96>
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_FLASH_Program+0xa0>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fc4:	f000 f87c 	bl	80050c0 <FLASH_WaitForLastOperation>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d12b      	bne.n	800502a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004fd8:	783b      	ldrb	r3, [r7, #0]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f000 f927 	bl	8005230 <FLASH_Program_Byte>
 8004fe2:	e016      	b.n	8005012 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004fea:	883b      	ldrh	r3, [r7, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	68b8      	ldr	r0, [r7, #8]
 8004ff0:	f000 f8fa 	bl	80051e8 <FLASH_Program_HalfWord>
 8004ff4:	e00d      	b.n	8005012 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d105      	bne.n	8005008 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	68b8      	ldr	r0, [r7, #8]
 8005002:	f000 f8cf 	bl	80051a4 <FLASH_Program_Word>
 8005006:	e004      	b.n	8005012 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500c:	68b8      	ldr	r0, [r7, #8]
 800500e:	f000 f897 	bl	8005140 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005012:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005016:	f000 f853 	bl	80050c0 <FLASH_WaitForLastOperation>
 800501a:	4603      	mov	r3, r0
 800501c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_FLASH_Program+0xa4>)
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	4a07      	ldr	r2, [pc, #28]	; (8005040 <HAL_FLASH_Program+0xa4>)
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_FLASH_Program+0xa0>)
 800502c:	2200      	movs	r2, #0
 800502e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20001a30 	.word	0x20001a30
 8005040:	40023c00 	.word	0x40023c00

08005044 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_FLASH_Unlock+0x38>)
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da0b      	bge.n	800506e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_FLASH_Unlock+0x38>)
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <HAL_FLASH_Unlock+0x3c>)
 800505a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <HAL_FLASH_Unlock+0x38>)
 800505e:	4a09      	ldr	r2, [pc, #36]	; (8005084 <HAL_FLASH_Unlock+0x40>)
 8005060:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_FLASH_Unlock+0x38>)
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	da01      	bge.n	800506e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800506e:	79fb      	ldrb	r3, [r7, #7]
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40023c00 	.word	0x40023c00
 8005080:	45670123 	.word	0x45670123
 8005084:	cdef89ab 	.word	0xcdef89ab

08005088 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_FLASH_Lock+0x1c>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_FLASH_Lock+0x1c>)
 8005092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005096:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40023c00 	.word	0x40023c00

080050a8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <HAL_FLASH_GetError+0x14>)
 80050ae:	69db      	ldr	r3, [r3, #28]
}  
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20001a30 	.word	0x20001a30

080050c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <FLASH_WaitForLastOperation+0x78>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80050d2:	f7fe fcf3 	bl	8003abc <HAL_GetTick>
 80050d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80050d8:	e010      	b.n	80050fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d00c      	beq.n	80050fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <FLASH_WaitForLastOperation+0x38>
 80050e8:	f7fe fce8 	bl	8003abc <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d201      	bcs.n	80050fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e019      	b.n	8005130 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <FLASH_WaitForLastOperation+0x7c>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e8      	bne.n	80050da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <FLASH_WaitForLastOperation+0x7c>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <FLASH_WaitForLastOperation+0x7c>)
 8005116:	2201      	movs	r2, #1
 8005118:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <FLASH_WaitForLastOperation+0x7c>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005126:	f000 f8a5 	bl	8005274 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
  
}  
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20001a30 	.word	0x20001a30
 800513c:	40023c00 	.word	0x40023c00

08005140 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800514c:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <FLASH_Program_DoubleWord+0x60>)
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <FLASH_Program_DoubleWord+0x60>)
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <FLASH_Program_DoubleWord+0x60>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <FLASH_Program_DoubleWord+0x60>)
 800515e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <FLASH_Program_DoubleWord+0x60>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <FLASH_Program_DoubleWord+0x60>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005176:	f3bf 8f6f 	isb	sy
}
 800517a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800517c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	000a      	movs	r2, r1
 800518a:	2300      	movs	r3, #0
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	3104      	adds	r1, #4
 8005190:	4613      	mov	r3, r2
 8005192:	600b      	str	r3, [r1, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40023c00 	.word	0x40023c00

080051a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <FLASH_Program_Word+0x40>)
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4a0c      	ldr	r2, [pc, #48]	; (80051e4 <FLASH_Program_Word+0x40>)
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80051ba:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <FLASH_Program_Word+0x40>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <FLASH_Program_Word+0x40>)
 80051c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <FLASH_Program_Word+0x40>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <FLASH_Program_Word+0x40>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40023c00 	.word	0x40023c00

080051e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <FLASH_Program_HalfWord+0x44>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	4a0c      	ldr	r2, [pc, #48]	; (800522c <FLASH_Program_HalfWord+0x44>)
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <FLASH_Program_HalfWord+0x44>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	4a09      	ldr	r2, [pc, #36]	; (800522c <FLASH_Program_HalfWord+0x44>)
 8005206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <FLASH_Program_HalfWord+0x44>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	4a06      	ldr	r2, [pc, #24]	; (800522c <FLASH_Program_HalfWord+0x44>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	801a      	strh	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40023c00 	.word	0x40023c00

08005230 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <FLASH_Program_Byte+0x40>)
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <FLASH_Program_Byte+0x40>)
 8005242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <FLASH_Program_Byte+0x40>)
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <FLASH_Program_Byte+0x40>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <FLASH_Program_Byte+0x40>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4a06      	ldr	r2, [pc, #24]	; (8005270 <FLASH_Program_Byte+0x40>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	701a      	strb	r2, [r3, #0]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40023c00 	.word	0x40023c00

08005274 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005278:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <FLASH_SetErrorCode+0xc8>)
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f043 0310 	orr.w	r3, r3, #16
 800528c:	4a2b      	ldr	r2, [pc, #172]	; (800533c <FLASH_SetErrorCode+0xc8>)
 800528e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005290:	4b29      	ldr	r3, [pc, #164]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 8005292:	2210      	movs	r2, #16
 8005294:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005296:	4b28      	ldr	r3, [pc, #160]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80052a2:	4b26      	ldr	r3, [pc, #152]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f043 0308 	orr.w	r3, r3, #8
 80052aa:	4a24      	ldr	r2, [pc, #144]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 80052b0:	2220      	movs	r2, #32
 80052b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80052b4:	4b20      	ldr	r3, [pc, #128]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	4a1c      	ldr	r2, [pc, #112]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 80052ce:	2240      	movs	r2, #64	; 0x40
 80052d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80052d2:	4b19      	ldr	r3, [pc, #100]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80052de:	4b17      	ldr	r3, [pc, #92]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f043 0302 	orr.w	r3, r3, #2
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 80052ec:	2280      	movs	r2, #128	; 0x80
 80052ee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80052f0:	4b11      	ldr	r3, [pc, #68]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <FLASH_SetErrorCode+0xc8>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	4a0d      	ldr	r2, [pc, #52]	; (800533c <FLASH_SetErrorCode+0xc8>)
 8005306:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 800530a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800530e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005310:	4b09      	ldr	r3, [pc, #36]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <FLASH_SetErrorCode+0xc8>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f043 0320 	orr.w	r3, r3, #32
 8005324:	4a05      	ldr	r2, [pc, #20]	; (800533c <FLASH_SetErrorCode+0xc8>)
 8005326:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <FLASH_SetErrorCode+0xc4>)
 800532a:	2202      	movs	r2, #2
 800532c:	60da      	str	r2, [r3, #12]
  }
}
 800532e:	bf00      	nop
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40023c00 	.word	0x40023c00
 800533c:	20001a30 	.word	0x20001a30

08005340 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005352:	4b31      	ldr	r3, [pc, #196]	; (8005418 <HAL_FLASHEx_Erase+0xd8>)
 8005354:	7e1b      	ldrb	r3, [r3, #24]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_FLASHEx_Erase+0x1e>
 800535a:	2302      	movs	r3, #2
 800535c:	e058      	b.n	8005410 <HAL_FLASHEx_Erase+0xd0>
 800535e:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <HAL_FLASHEx_Erase+0xd8>)
 8005360:	2201      	movs	r2, #1
 8005362:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005368:	f7ff feaa 	bl	80050c0 <FLASH_WaitForLastOperation>
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d148      	bne.n	8005408 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f04f 32ff 	mov.w	r2, #4294967295
 800537c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d115      	bne.n	80053b2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 f844 	bl	8005420 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005398:	f24c 3050 	movw	r0, #50000	; 0xc350
 800539c:	f7ff fe90 	bl	80050c0 <FLASH_WaitForLastOperation>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80053a4:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_FLASHEx_Erase+0xdc>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_FLASHEx_Erase+0xdc>)
 80053aa:	f023 0304 	bic.w	r3, r3, #4
 80053ae:	6113      	str	r3, [r2, #16]
 80053b0:	e028      	b.n	8005404 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	e01c      	b.n	80053f4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	4619      	mov	r1, r3
 80053c2:	68b8      	ldr	r0, [r7, #8]
 80053c4:	f000 f850 	bl	8005468 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053cc:	f7ff fe78 	bl	80050c0 <FLASH_WaitForLastOperation>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <HAL_FLASHEx_Erase+0xdc>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	4a10      	ldr	r2, [pc, #64]	; (800541c <HAL_FLASHEx_Erase+0xdc>)
 80053da:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80053de:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	601a      	str	r2, [r3, #0]
          break;
 80053ec:	e00a      	b.n	8005404 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	d3da      	bcc.n	80053ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005404:	f000 f878 	bl	80054f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005408:	4b03      	ldr	r3, [pc, #12]	; (8005418 <HAL_FLASHEx_Erase+0xd8>)
 800540a:	2200      	movs	r2, #0
 800540c:	761a      	strb	r2, [r3, #24]

  return status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20001a30 	.word	0x20001a30
 800541c:	40023c00 	.word	0x40023c00

08005420 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <FLASH_MassErase+0x44>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <FLASH_MassErase+0x44>)
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <FLASH_MassErase+0x44>)
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	4a09      	ldr	r2, [pc, #36]	; (8005464 <FLASH_MassErase+0x44>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <FLASH_MassErase+0x44>)
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	4313      	orrs	r3, r2
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <FLASH_MassErase+0x44>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	6113      	str	r3, [r2, #16]
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40023c00 	.word	0x40023c00

08005468 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e010      	b.n	80054a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d103      	bne.n	8005492 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800548a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e009      	b.n	80054a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d103      	bne.n	80054a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e002      	b.n	80054a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80054a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	490f      	ldr	r1, [pc, #60]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <FLASH_Erase_Sector+0x8c>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e6:	6113      	str	r3, [r2, #16]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40023c00 	.word	0x40023c00

080054f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <FLASH_FlushCaches+0x88>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005504:	2b00      	cmp	r3, #0
 8005506:	d017      	beq.n	8005538 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <FLASH_FlushCaches+0x88>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <FLASH_FlushCaches+0x88>)
 800550e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005512:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005514:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a19      	ldr	r2, [pc, #100]	; (8005580 <FLASH_FlushCaches+0x88>)
 800551a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a16      	ldr	r2, [pc, #88]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800552a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800552c:	4b14      	ldr	r3, [pc, #80]	; (8005580 <FLASH_FlushCaches+0x88>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a13      	ldr	r2, [pc, #76]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005536:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <FLASH_FlushCaches+0x88>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	2b00      	cmp	r3, #0
 8005542:	d017      	beq.n	8005574 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <FLASH_FlushCaches+0x88>)
 800554a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <FLASH_FlushCaches+0x88>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a07      	ldr	r2, [pc, #28]	; (8005580 <FLASH_FlushCaches+0x88>)
 8005562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005566:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <FLASH_FlushCaches+0x88>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <FLASH_FlushCaches+0x88>)
 800556e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005572:	6013      	str	r3, [r2, #0]
  }
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40023c00 	.word	0x40023c00

08005584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	; 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	e159      	b.n	8005854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055a0:	2201      	movs	r2, #1
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	f040 8148 	bne.w	800584e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d005      	beq.n	80055d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d130      	bne.n	8005638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	2203      	movs	r2, #3
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800560c:	2201      	movs	r2, #1
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4013      	ands	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	f003 0201 	and.w	r2, r3, #1
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4313      	orrs	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	2b03      	cmp	r3, #3
 8005642:	d017      	beq.n	8005674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	2203      	movs	r2, #3
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4313      	orrs	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d123      	bne.n	80056c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	08da      	lsrs	r2, r3, #3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3208      	adds	r2, #8
 8005688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	220f      	movs	r2, #15
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4013      	ands	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	08da      	lsrs	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3208      	adds	r2, #8
 80056c2:	69b9      	ldr	r1, [r7, #24]
 80056c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	2203      	movs	r2, #3
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 0203 	and.w	r2, r3, #3
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80a2 	beq.w	800584e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_GPIO_Init+0x2e8>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	4a56      	ldr	r2, [pc, #344]	; (800586c <HAL_GPIO_Init+0x2e8>)
 8005714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005718:	6453      	str	r3, [r2, #68]	; 0x44
 800571a:	4b54      	ldr	r3, [pc, #336]	; (800586c <HAL_GPIO_Init+0x2e8>)
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005726:	4a52      	ldr	r2, [pc, #328]	; (8005870 <HAL_GPIO_Init+0x2ec>)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	089b      	lsrs	r3, r3, #2
 800572c:	3302      	adds	r3, #2
 800572e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	220f      	movs	r2, #15
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a49      	ldr	r2, [pc, #292]	; (8005874 <HAL_GPIO_Init+0x2f0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d019      	beq.n	8005786 <HAL_GPIO_Init+0x202>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a48      	ldr	r2, [pc, #288]	; (8005878 <HAL_GPIO_Init+0x2f4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_GPIO_Init+0x1fe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a47      	ldr	r2, [pc, #284]	; (800587c <HAL_GPIO_Init+0x2f8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00d      	beq.n	800577e <HAL_GPIO_Init+0x1fa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a46      	ldr	r2, [pc, #280]	; (8005880 <HAL_GPIO_Init+0x2fc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <HAL_GPIO_Init+0x1f6>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a45      	ldr	r2, [pc, #276]	; (8005884 <HAL_GPIO_Init+0x300>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_GPIO_Init+0x1f2>
 8005772:	2304      	movs	r3, #4
 8005774:	e008      	b.n	8005788 <HAL_GPIO_Init+0x204>
 8005776:	2307      	movs	r3, #7
 8005778:	e006      	b.n	8005788 <HAL_GPIO_Init+0x204>
 800577a:	2303      	movs	r3, #3
 800577c:	e004      	b.n	8005788 <HAL_GPIO_Init+0x204>
 800577e:	2302      	movs	r3, #2
 8005780:	e002      	b.n	8005788 <HAL_GPIO_Init+0x204>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_GPIO_Init+0x204>
 8005786:	2300      	movs	r3, #0
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	f002 0203 	and.w	r2, r2, #3
 800578e:	0092      	lsls	r2, r2, #2
 8005790:	4093      	lsls	r3, r2
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005798:	4935      	ldr	r1, [pc, #212]	; (8005870 <HAL_GPIO_Init+0x2ec>)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	3302      	adds	r3, #2
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057a6:	4b38      	ldr	r3, [pc, #224]	; (8005888 <HAL_GPIO_Init+0x304>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057ca:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <HAL_GPIO_Init+0x304>)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057d0:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <HAL_GPIO_Init+0x304>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057f4:	4a24      	ldr	r2, [pc, #144]	; (8005888 <HAL_GPIO_Init+0x304>)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <HAL_GPIO_Init+0x304>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800581e:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <HAL_GPIO_Init+0x304>)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005824:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_GPIO_Init+0x304>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005848:	4a0f      	ldr	r2, [pc, #60]	; (8005888 <HAL_GPIO_Init+0x304>)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3301      	adds	r3, #1
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	f67f aea2 	bls.w	80055a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3724      	adds	r7, #36	; 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800
 8005870:	40013800 	.word	0x40013800
 8005874:	40020000 	.word	0x40020000
 8005878:	40020400 	.word	0x40020400
 800587c:	40020800 	.word	0x40020800
 8005880:	40020c00 	.word	0x40020c00
 8005884:	40021000 	.word	0x40021000
 8005888:	40013c00 	.word	0x40013c00

0800588c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e0bb      	b.n	8005a20 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058a8:	2201      	movs	r2, #1
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	f040 80ab 	bne.w	8005a1a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058c4:	4a5c      	ldr	r2, [pc, #368]	; (8005a38 <HAL_GPIO_DeInit+0x1ac>)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	3302      	adds	r3, #2
 80058cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	220f      	movs	r2, #15
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a54      	ldr	r2, [pc, #336]	; (8005a3c <HAL_GPIO_DeInit+0x1b0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d019      	beq.n	8005922 <HAL_GPIO_DeInit+0x96>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a53      	ldr	r2, [pc, #332]	; (8005a40 <HAL_GPIO_DeInit+0x1b4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_GPIO_DeInit+0x92>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a52      	ldr	r2, [pc, #328]	; (8005a44 <HAL_GPIO_DeInit+0x1b8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00d      	beq.n	800591a <HAL_GPIO_DeInit+0x8e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a51      	ldr	r2, [pc, #324]	; (8005a48 <HAL_GPIO_DeInit+0x1bc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <HAL_GPIO_DeInit+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a50      	ldr	r2, [pc, #320]	; (8005a4c <HAL_GPIO_DeInit+0x1c0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <HAL_GPIO_DeInit+0x86>
 800590e:	2304      	movs	r3, #4
 8005910:	e008      	b.n	8005924 <HAL_GPIO_DeInit+0x98>
 8005912:	2307      	movs	r3, #7
 8005914:	e006      	b.n	8005924 <HAL_GPIO_DeInit+0x98>
 8005916:	2303      	movs	r3, #3
 8005918:	e004      	b.n	8005924 <HAL_GPIO_DeInit+0x98>
 800591a:	2302      	movs	r3, #2
 800591c:	e002      	b.n	8005924 <HAL_GPIO_DeInit+0x98>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <HAL_GPIO_DeInit+0x98>
 8005922:	2300      	movs	r3, #0
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	f002 0203 	and.w	r2, r2, #3
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	4093      	lsls	r3, r2
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d132      	bne.n	800599a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005934:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	4944      	ldr	r1, [pc, #272]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 800593e:	4013      	ands	r3, r2
 8005940:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005942:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	43db      	mvns	r3, r3
 800594a:	4941      	ldr	r1, [pc, #260]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 800594c:	4013      	ands	r3, r2
 800594e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005950:	4b3f      	ldr	r3, [pc, #252]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	43db      	mvns	r3, r3
 8005958:	493d      	ldr	r1, [pc, #244]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 800595a:	4013      	ands	r3, r2
 800595c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800595e:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	43db      	mvns	r3, r3
 8005966:	493a      	ldr	r1, [pc, #232]	; (8005a50 <HAL_GPIO_DeInit+0x1c4>)
 8005968:	4013      	ands	r3, r2
 800596a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	220f      	movs	r2, #15
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800597c:	4a2e      	ldr	r2, [pc, #184]	; (8005a38 <HAL_GPIO_DeInit+0x1ac>)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	3302      	adds	r3, #2
 8005984:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	43da      	mvns	r2, r3
 800598c:	482a      	ldr	r0, [pc, #168]	; (8005a38 <HAL_GPIO_DeInit+0x1ac>)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	089b      	lsrs	r3, r3, #2
 8005992:	400a      	ands	r2, r1
 8005994:	3302      	adds	r3, #2
 8005996:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	2103      	movs	r1, #3
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	401a      	ands	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	08da      	lsrs	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3208      	adds	r2, #8
 80059b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	220f      	movs	r2, #15
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	08d2      	lsrs	r2, r2, #3
 80059d0:	4019      	ands	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3208      	adds	r2, #8
 80059d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2103      	movs	r1, #3
 80059e4:	fa01 f303 	lsl.w	r3, r1, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	2101      	movs	r1, #1
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	2103      	movs	r1, #3
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	401a      	ands	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	f67f af40 	bls.w	80058a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40013800 	.word	0x40013800
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	40020400 	.word	0x40020400
 8005a44:	40020800 	.word	0x40020800
 8005a48:	40020c00 	.word	0x40020c00
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40013c00 	.word	0x40013c00

08005a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	e001      	b.n	8005a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
 8005a90:	4613      	mov	r3, r2
 8005a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a94:	787b      	ldrb	r3, [r7, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aa0:	e003      	b.n	8005aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	041a      	lsls	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d006      	beq.n	8005adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ace:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd fa4e 	bl	8002f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40013c00 	.word	0x40013c00

08005ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e12b      	b.n	8005d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fd fb26 	bl	8003160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2224      	movs	r2, #36	; 0x24
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f003 f822 	bl	8008b94 <HAL_RCC_GetPCLK1Freq>
 8005b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4a81      	ldr	r2, [pc, #516]	; (8005d5c <HAL_I2C_Init+0x274>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d807      	bhi.n	8005b6c <HAL_I2C_Init+0x84>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a80      	ldr	r2, [pc, #512]	; (8005d60 <HAL_I2C_Init+0x278>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	bf94      	ite	ls
 8005b64:	2301      	movls	r3, #1
 8005b66:	2300      	movhi	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e006      	b.n	8005b7a <HAL_I2C_Init+0x92>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a7d      	ldr	r2, [pc, #500]	; (8005d64 <HAL_I2C_Init+0x27c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bf94      	ite	ls
 8005b74:	2301      	movls	r3, #1
 8005b76:	2300      	movhi	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e0e7      	b.n	8005d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a78      	ldr	r2, [pc, #480]	; (8005d68 <HAL_I2C_Init+0x280>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	0c9b      	lsrs	r3, r3, #18
 8005b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4a6a      	ldr	r2, [pc, #424]	; (8005d5c <HAL_I2C_Init+0x274>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d802      	bhi.n	8005bbc <HAL_I2C_Init+0xd4>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	e009      	b.n	8005bd0 <HAL_I2C_Init+0xe8>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	4a69      	ldr	r2, [pc, #420]	; (8005d6c <HAL_I2C_Init+0x284>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	099b      	lsrs	r3, r3, #6
 8005bce:	3301      	adds	r3, #1
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005be2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	495c      	ldr	r1, [pc, #368]	; (8005d5c <HAL_I2C_Init+0x274>)
 8005bec:	428b      	cmp	r3, r1
 8005bee:	d819      	bhi.n	8005c24 <HAL_I2C_Init+0x13c>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1e59      	subs	r1, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c04:	400b      	ands	r3, r1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_I2C_Init+0x138>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1e59      	subs	r1, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1e:	e051      	b.n	8005cc4 <HAL_I2C_Init+0x1dc>
 8005c20:	2304      	movs	r3, #4
 8005c22:	e04f      	b.n	8005cc4 <HAL_I2C_Init+0x1dc>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d111      	bne.n	8005c50 <HAL_I2C_Init+0x168>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1e58      	subs	r0, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	440b      	add	r3, r1
 8005c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf0c      	ite	eq
 8005c48:	2301      	moveq	r3, #1
 8005c4a:	2300      	movne	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e012      	b.n	8005c76 <HAL_I2C_Init+0x18e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1e58      	subs	r0, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	0099      	lsls	r1, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c66:	3301      	adds	r3, #1
 8005c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_I2C_Init+0x196>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e022      	b.n	8005cc4 <HAL_I2C_Init+0x1dc>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10e      	bne.n	8005ca4 <HAL_I2C_Init+0x1bc>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1e58      	subs	r0, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	440b      	add	r3, r1
 8005c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	e00f      	b.n	8005cc4 <HAL_I2C_Init+0x1dc>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	1e58      	subs	r0, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6859      	ldr	r1, [r3, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	0099      	lsls	r1, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	6809      	ldr	r1, [r1, #0]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6911      	ldr	r1, [r2, #16]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68d2      	ldr	r2, [r2, #12]
 8005cfe:	4311      	orrs	r1, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	000186a0 	.word	0x000186a0
 8005d60:	001e847f 	.word	0x001e847f
 8005d64:	003d08ff 	.word	0x003d08ff
 8005d68:	431bde83 	.word	0x431bde83
 8005d6c:	10624dd3 	.word	0x10624dd3

08005d70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e021      	b.n	8005dc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2224      	movs	r2, #36	; 0x24
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fd fa28 	bl	80031f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	460b      	mov	r3, r1
 8005dde:	817b      	strh	r3, [r7, #10]
 8005de0:	4613      	mov	r3, r2
 8005de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005de4:	f7fd fe6a 	bl	8003abc <HAL_GetTick>
 8005de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	f040 80e0 	bne.w	8005fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2319      	movs	r3, #25
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4970      	ldr	r1, [pc, #448]	; (8005fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fd86 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e0d3      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_I2C_Master_Transmit+0x50>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e0cc      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d007      	beq.n	8005e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2210      	movs	r2, #16
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	893a      	ldrh	r2, [r7, #8]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a50      	ldr	r2, [pc, #320]	; (8005fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e88:	8979      	ldrh	r1, [r7, #10]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fbf0 	bl	8006674 <I2C_MasterRequestWrite>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e08d      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005eb4:	e066      	b.n	8005f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	6a39      	ldr	r1, [r7, #32]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fe00 	bl	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d107      	bne.n	8005ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e06b      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d11b      	bne.n	8005f58 <HAL_I2C_Master_Transmit+0x188>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	6a39      	ldr	r1, [r7, #32]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fdf0 	bl	8006b42 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d107      	bne.n	8005f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e01a      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d194      	bne.n	8005eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	00100002 	.word	0x00100002
 8005fc8:	ffff0000 	.word	0xffff0000

08005fcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	460b      	mov	r3, r1
 8005fda:	817b      	strh	r3, [r7, #10]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fe0:	f7fd fd6c 	bl	8003abc <HAL_GetTick>
 8005fe4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	f040 820b 	bne.w	800640a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2319      	movs	r3, #25
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	497c      	ldr	r1, [pc, #496]	; (80061f0 <HAL_I2C_Master_Receive+0x224>)
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fc88 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
 800600c:	e1fe      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_I2C_Master_Receive+0x50>
 8006018:	2302      	movs	r3, #2
 800601a:	e1f7      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b01      	cmp	r3, #1
 8006030:	d007      	beq.n	8006042 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0201 	orr.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2222      	movs	r2, #34	; 0x22
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2210      	movs	r2, #16
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	893a      	ldrh	r2, [r7, #8]
 8006072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a5c      	ldr	r2, [pc, #368]	; (80061f4 <HAL_I2C_Master_Receive+0x228>)
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006084:	8979      	ldrh	r1, [r7, #10]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fb74 	bl	8006778 <I2C_MasterRequestRead>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e1b8      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d113      	bne.n	80060ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a2:	2300      	movs	r3, #0
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e18c      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d11b      	bne.n	800610a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	e16c      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	2b02      	cmp	r3, #2
 8006110:	d11b      	bne.n	800614a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006120:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	e14c      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006170:	e138      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006176:	2b03      	cmp	r3, #3
 8006178:	f200 80f1 	bhi.w	800635e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006180:	2b01      	cmp	r3, #1
 8006182:	d123      	bne.n	80061cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fd1b 	bl	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e139      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061ca:	e10b      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d14e      	bne.n	8006272 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	2200      	movs	r2, #0
 80061dc:	4906      	ldr	r1, [pc, #24]	; (80061f8 <HAL_I2C_Master_Receive+0x22c>)
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fb98 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e10e      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
 80061ee:	bf00      	nop
 80061f0:	00100002 	.word	0x00100002
 80061f4:	ffff0000 	.word	0xffff0000
 80061f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006270:	e0b8      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2200      	movs	r2, #0
 800627a:	4966      	ldr	r1, [pc, #408]	; (8006414 <HAL_I2C_Master_Receive+0x448>)
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fb49 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0bf      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	2200      	movs	r2, #0
 80062d6:	494f      	ldr	r1, [pc, #316]	; (8006414 <HAL_I2C_Master_Receive+0x448>)
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fb1b 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e091      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800635c:	e042      	b.n	80063e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fc2e 	bl	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e04c      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d118      	bne.n	80063e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f47f aec2 	bne.w	8006172 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	00010004 	.word	0x00010004

08006418 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	460b      	mov	r3, r1
 8006426:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006428:	f7fd fb48 	bl	8003abc <HAL_GetTick>
 800642c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b20      	cmp	r3, #32
 800643c:	f040 8111 	bne.w	8006662 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2319      	movs	r3, #25
 8006446:	2201      	movs	r2, #1
 8006448:	4988      	ldr	r1, [pc, #544]	; (800666c <HAL_I2C_IsDeviceReady+0x254>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fa62 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
 8006458:	e104      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_I2C_IsDeviceReady+0x50>
 8006464:	2302      	movs	r3, #2
 8006466:	e0fd      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d007      	beq.n	800648e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2224      	movs	r2, #36	; 0x24
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a70      	ldr	r2, [pc, #448]	; (8006670 <HAL_I2C_IsDeviceReady+0x258>)
 80064b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fa20 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	d103      	bne.n	80064f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0b6      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006504:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006506:	f7fd fad9 	bl	8003abc <HAL_GetTick>
 800650a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800653a:	e025      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800653c:	f7fd fabe 	bl	8003abc <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d302      	bcc.n	8006552 <HAL_I2C_IsDeviceReady+0x13a>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	22a0      	movs	r2, #160	; 0xa0
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b02      	cmp	r3, #2
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2ba0      	cmp	r3, #160	; 0xa0
 8006592:	d005      	beq.n	80065a0 <HAL_I2C_IsDeviceReady+0x188>
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <HAL_I2C_IsDeviceReady+0x188>
 800659a:	7dbb      	ldrb	r3, [r7, #22]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0cd      	beq.n	800653c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d129      	bne.n	800660a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2319      	movs	r3, #25
 80065e2:	2201      	movs	r2, #1
 80065e4:	4921      	ldr	r1, [pc, #132]	; (800666c <HAL_I2C_IsDeviceReady+0x254>)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f994 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e036      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	e02c      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006618:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006622:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2319      	movs	r3, #25
 800662a:	2201      	movs	r2, #1
 800662c:	490f      	ldr	r1, [pc, #60]	; (800666c <HAL_I2C_IsDeviceReady+0x254>)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f970 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e012      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	3301      	adds	r3, #1
 8006642:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	429a      	cmp	r2, r3
 800664a:	f4ff af32 	bcc.w	80064b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	00100002 	.word	0x00100002
 8006670:	ffff0000 	.word	0xffff0000

08006674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	460b      	mov	r3, r1
 8006682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d006      	beq.n	800669e <I2C_MasterRequestWrite+0x2a>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d003      	beq.n	800669e <I2C_MasterRequestWrite+0x2a>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800669c:	d108      	bne.n	80066b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e00b      	b.n	80066c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	2b12      	cmp	r3, #18
 80066b6:	d107      	bne.n	80066c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f91d 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00d      	beq.n	80066fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ee:	d103      	bne.n	80066f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e035      	b.n	8006768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006704:	d108      	bne.n	8006718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006706:	897b      	ldrh	r3, [r7, #10]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006714:	611a      	str	r2, [r3, #16]
 8006716:	e01b      	b.n	8006750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006718:	897b      	ldrh	r3, [r7, #10]
 800671a:	11db      	asrs	r3, r3, #7
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0306 	and.w	r3, r3, #6
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f063 030f 	orn	r3, r3, #15
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	490e      	ldr	r1, [pc, #56]	; (8006770 <I2C_MasterRequestWrite+0xfc>)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f943 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e010      	b.n	8006768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006746:	897b      	ldrh	r3, [r7, #10]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4907      	ldr	r1, [pc, #28]	; (8006774 <I2C_MasterRequestWrite+0x100>)
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f933 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	00010008 	.word	0x00010008
 8006774:	00010002 	.word	0x00010002

08006778 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af02      	add	r7, sp, #8
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	460b      	mov	r3, r1
 8006786:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800679c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d006      	beq.n	80067b2 <I2C_MasterRequestRead+0x3a>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d003      	beq.n	80067b2 <I2C_MasterRequestRead+0x3a>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067b0:	d108      	bne.n	80067c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	e00b      	b.n	80067dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	2b11      	cmp	r3, #17
 80067ca:	d107      	bne.n	80067dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f893 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00d      	beq.n	8006810 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006802:	d103      	bne.n	800680c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e079      	b.n	8006904 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006818:	d108      	bne.n	800682c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800681a:	897b      	ldrh	r3, [r7, #10]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]
 800682a:	e05f      	b.n	80068ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800682c:	897b      	ldrh	r3, [r7, #10]
 800682e:	11db      	asrs	r3, r3, #7
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0306 	and.w	r3, r3, #6
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f063 030f 	orn	r3, r3, #15
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4930      	ldr	r1, [pc, #192]	; (800690c <I2C_MasterRequestRead+0x194>)
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f8b9 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e054      	b.n	8006904 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800685a:	897b      	ldrh	r3, [r7, #10]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4929      	ldr	r1, [pc, #164]	; (8006910 <I2C_MasterRequestRead+0x198>)
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f8a9 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e044      	b.n	8006904 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f831 	bl	8006914 <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d103      	bne.n	80068d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e017      	b.n	8006904 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80068d4:	897b      	ldrh	r3, [r7, #10]
 80068d6:	11db      	asrs	r3, r3, #7
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 0306 	and.w	r3, r3, #6
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f063 030e 	orn	r3, r3, #14
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4907      	ldr	r1, [pc, #28]	; (8006910 <I2C_MasterRequestRead+0x198>)
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f865 	bl	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	00010008 	.word	0x00010008
 8006910:	00010002 	.word	0x00010002

08006914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006924:	e025      	b.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d021      	beq.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fd f8c5 	bl	8003abc <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d116      	bne.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e023      	b.n	80069ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10d      	bne.n	8006998 <I2C_WaitOnFlagUntilTimeout+0x84>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	43da      	mvns	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	e00c      	b.n	80069b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	43da      	mvns	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d0b6      	beq.n	8006926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069d0:	e051      	b.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e0:	d123      	bne.n	8006a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e046      	b.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d021      	beq.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fd f843 	bl	8003abc <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d116      	bne.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e020      	b.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10c      	bne.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	43da      	mvns	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	e00b      	b.n	8006ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d18d      	bne.n	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006acc:	e02d      	b.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f8ce 	bl	8006c70 <I2C_IsAcknowledgeFailed>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e02d      	b.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d021      	beq.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	f7fc ffe9 	bl	8003abc <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d116      	bne.n	8006b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f043 0220 	orr.w	r2, r3, #32
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e007      	b.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b34:	2b80      	cmp	r3, #128	; 0x80
 8006b36:	d1ca      	bne.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b4e:	e02d      	b.n	8006bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f88d 	bl	8006c70 <I2C_IsAcknowledgeFailed>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e02d      	b.n	8006bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b66:	d021      	beq.n	8006bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b68:	f7fc ffa8 	bl	8003abc <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d116      	bne.n	8006bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e007      	b.n	8006bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d1ca      	bne.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd0:	e042      	b.n	8006c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	d119      	bne.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0210 	mvn.w	r2, #16
 8006be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e029      	b.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c14:	f7fc ff52 	bl	8003abc <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d116      	bne.n	8006c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e007      	b.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d1b5      	bne.n	8006bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c86:	d11b      	bne.n	8006cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f043 0204 	orr.w	r2, r3, #4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd0:	b08f      	sub	sp, #60	; 0x3c
 8006cd2:	af0a      	add	r7, sp, #40	; 0x28
 8006cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e10f      	b.n	8006f00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f013 ffb4 	bl	801ac68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2203      	movs	r2, #3
 8006d04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f006 fc45 	bl	800d5ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	687e      	ldr	r6, [r7, #4]
 8006d2c:	466d      	mov	r5, sp
 8006d2e:	f106 0410 	add.w	r4, r6, #16
 8006d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d42:	1d33      	adds	r3, r6, #4
 8006d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d46:	6838      	ldr	r0, [r7, #0]
 8006d48:	f006 fb1c 	bl	800d384 <USB_CoreInit>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e0d0      	b.n	8006f00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f006 fc33 	bl	800d5d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	e04a      	b.n	8006e06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d70:	7bfa      	ldrb	r2, [r7, #15]
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	333d      	adds	r3, #61	; 0x3d
 8006d80:	2201      	movs	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	333c      	adds	r3, #60	; 0x3c
 8006d94:	7bfa      	ldrb	r2, [r7, #15]
 8006d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d98:	7bfa      	ldrb	r2, [r7, #15]
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	b298      	uxth	r0, r3
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	3344      	adds	r3, #68	; 0x44
 8006dac:	4602      	mov	r2, r0
 8006dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006db0:	7bfa      	ldrb	r2, [r7, #15]
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	3340      	adds	r3, #64	; 0x40
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dc4:	7bfa      	ldrb	r2, [r7, #15]
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	3348      	adds	r3, #72	; 0x48
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dd8:	7bfa      	ldrb	r2, [r7, #15]
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	334c      	adds	r3, #76	; 0x4c
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006dec:	7bfa      	ldrb	r2, [r7, #15]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	3354      	adds	r3, #84	; 0x54
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	3301      	adds	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	7bfa      	ldrb	r2, [r7, #15]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d3af      	bcc.n	8006d70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
 8006e14:	e044      	b.n	8006ea0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e16:	7bfa      	ldrb	r2, [r7, #15]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e2c:	7bfa      	ldrb	r2, [r7, #15]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006e3e:	7bfa      	ldrb	r2, [r7, #15]
 8006e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e42:	7bfa      	ldrb	r2, [r7, #15]
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e58:	7bfa      	ldrb	r2, [r7, #15]
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e6e:	7bfa      	ldrb	r2, [r7, #15]
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	7bfa      	ldrb	r2, [r7, #15]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d3b5      	bcc.n	8006e16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	687e      	ldr	r6, [r7, #4]
 8006eb2:	466d      	mov	r5, sp
 8006eb4:	f106 0410 	add.w	r4, r6, #16
 8006eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ec8:	1d33      	adds	r3, r6, #4
 8006eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f006 fbcb 	bl	800d668 <USB_DevInit>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e00d      	b.n	8006f00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f007 fd69 	bl	800e9d0 <USB_DevDisconnect>

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f08 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e015      	b.n	8006f46 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f007 fcbc 	bl	800e8a4 <USB_StopDevice>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e007      	b.n	8006f46 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f013 feea 	bl	801ad10 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_PCD_Start+0x1c>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e020      	b.n	8006fac <HAL_PCD_Start+0x5e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d109      	bne.n	8006f8e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d005      	beq.n	8006f8e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f006 fafa 	bl	800d58c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f007 fcf6 	bl	800e98e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_PCD_Stop+0x1c>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e026      	b.n	800701e <HAL_PCD_Stop+0x6a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f006 fae6 	bl	800d5ae <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f007 fcf2 	bl	800e9d0 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f006 fc9c 	bl	800d930 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d109      	bne.n	8007014 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007004:	2b01      	cmp	r3, #1
 8007006:	d005      	beq.n	8007014 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007026:	b590      	push	{r4, r7, lr}
 8007028:	b08d      	sub	sp, #52	; 0x34
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4618      	mov	r0, r3
 800703e:	f007 fd7b 	bl	800eb38 <USB_GetMode>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 848a 	bne.w	800795e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f007 fcdf 	bl	800ea12 <USB_ReadInterrupts>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8480 	beq.w	800795c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	0a1b      	lsrs	r3, r3, #8
 8007066:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f007 fccc 	bl	800ea12 <USB_ReadInterrupts>
 800707a:	4603      	mov	r3, r0
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b02      	cmp	r3, #2
 8007082:	d107      	bne.n	8007094 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695a      	ldr	r2, [r3, #20]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f002 0202 	and.w	r2, r2, #2
 8007092:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f007 fcba 	bl	800ea12 <USB_ReadInterrupts>
 800709e:	4603      	mov	r3, r0
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	d161      	bne.n	800716c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0210 	bic.w	r2, r2, #16
 80070b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	3304      	adds	r3, #4
 80070d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	0c5b      	lsrs	r3, r3, #17
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d124      	bne.n	800712e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d035      	beq.n	800715c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070fe:	b29b      	uxth	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	6a38      	ldr	r0, [r7, #32]
 8007104:	f007 faa2 	bl	800e64c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	091b      	lsrs	r3, r3, #4
 8007110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007114:	441a      	add	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	091b      	lsrs	r3, r3, #4
 8007122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007126:	441a      	add	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	621a      	str	r2, [r3, #32]
 800712c:	e016      	b.n	800715c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	0c5b      	lsrs	r3, r3, #17
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	2b06      	cmp	r3, #6
 8007138:	d110      	bne.n	800715c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007140:	2208      	movs	r2, #8
 8007142:	4619      	mov	r1, r3
 8007144:	6a38      	ldr	r0, [r7, #32]
 8007146:	f007 fa81 	bl	800e64c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007156:	441a      	add	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0210 	orr.w	r2, r2, #16
 800716a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f007 fc4e 	bl	800ea12 <USB_ReadInterrupts>
 8007176:	4603      	mov	r3, r0
 8007178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800717c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007180:	f040 80a7 	bne.w	80072d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f007 fc53 	bl	800ea38 <USB_ReadDevAllOutEpInterrupt>
 8007192:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007194:	e099      	b.n	80072ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 808e 	beq.w	80072be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f007 fc77 	bl	800eaa0 <USB_ReadDevOutEPInterrupt>
 80071b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00c      	beq.n	80071d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	461a      	mov	r2, r3
 80071cc:	2301      	movs	r3, #1
 80071ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80071d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fef0 	bl	8007fb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	2308      	movs	r3, #8
 80071f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80071f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 ffc6 	bl	8008188 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b00      	cmp	r3, #0
 8007204:	d008      	beq.n	8007218 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	461a      	mov	r2, r3
 8007214:	2310      	movs	r3, #16
 8007216:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d030      	beq.n	8007284 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d109      	bne.n	8007242 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800723c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007240:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007244:	4613      	mov	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	4413      	add	r3, r2
 8007254:	3304      	adds	r3, #4
 8007256:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	78db      	ldrb	r3, [r3, #3]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d108      	bne.n	8007272 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f013 fe21 	bl	801aeb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727e:	461a      	mov	r2, r3
 8007280:	2302      	movs	r3, #2
 8007282:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	461a      	mov	r2, r3
 800729c:	2320      	movs	r3, #32
 800729e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b6:	461a      	mov	r2, r3
 80072b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	3301      	adds	r3, #1
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f47f af62 	bne.w	8007196 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f007 fb9b 	bl	800ea12 <USB_ReadInterrupts>
 80072dc:	4603      	mov	r3, r0
 80072de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e6:	f040 80db 	bne.w	80074a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f007 fbbc 	bl	800ea6c <USB_ReadDevAllInEpInterrupt>
 80072f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80072fa:	e0cd      	b.n	8007498 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80c2 	beq.w	800748c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f007 fbe2 	bl	800eadc <USB_ReadDevInEPInterrupt>
 8007318:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d057      	beq.n	80073d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	2201      	movs	r2, #1
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	43db      	mvns	r3, r3
 800733e:	69f9      	ldr	r1, [r7, #28]
 8007340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007344:	4013      	ands	r3, r2
 8007346:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007354:	461a      	mov	r2, r3
 8007356:	2301      	movs	r3, #1
 8007358:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d132      	bne.n	80073c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007366:	4613      	mov	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	334c      	adds	r3, #76	; 0x4c
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4403      	add	r3, r0
 8007382:	3348      	adds	r3, #72	; 0x48
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4419      	add	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738c:	4613      	mov	r3, r2
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4403      	add	r3, r0
 8007396:	334c      	adds	r3, #76	; 0x4c
 8007398:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d113      	bne.n	80073c8 <HAL_PCD_IRQHandler+0x3a2>
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a4:	4613      	mov	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	3354      	adds	r3, #84	; 0x54
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d108      	bne.n	80073c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073c0:	461a      	mov	r2, r3
 80073c2:	2101      	movs	r1, #1
 80073c4:	f007 fbea 	bl	800eb9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f013 fceb 	bl	801adaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	461a      	mov	r2, r3
 80073ec:	2308      	movs	r3, #8
 80073ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007406:	461a      	mov	r2, r3
 8007408:	2310      	movs	r3, #16
 800740a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d008      	beq.n	8007428 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007422:	461a      	mov	r2, r3
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d023      	beq.n	800747a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007434:	6a38      	ldr	r0, [r7, #32]
 8007436:	f006 fa7b 	bl	800d930 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	3338      	adds	r3, #56	; 0x38
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	3304      	adds	r3, #4
 800744c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	78db      	ldrb	r3, [r3, #3]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d108      	bne.n	8007468 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	b2db      	uxtb	r3, r3
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f013 fd38 	bl	801aed8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	461a      	mov	r2, r3
 8007476:	2302      	movs	r3, #2
 8007478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fd08 	bl	8007e9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	3301      	adds	r3, #1
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	085b      	lsrs	r3, r3, #1
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	f47f af2e 	bne.w	80072fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f007 fab4 	bl	800ea12 <USB_ReadInterrupts>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b4:	d122      	bne.n	80074fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d108      	bne.n	80074e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fef0 	bl	80082c4 <HAL_PCDEx_LPM_Callback>
 80074e4:	e002      	b.n	80074ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f013 fcd6 	bl	801ae98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695a      	ldr	r2, [r3, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80074fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f007 fa86 	bl	800ea12 <USB_ReadInterrupts>
 8007506:	4603      	mov	r3, r0
 8007508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007510:	d112      	bne.n	8007538 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	d102      	bne.n	8007528 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f013 fc92 	bl	801ae4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007536:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f007 fa68 	bl	800ea12 <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754c:	f040 80b7 	bne.w	80076be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2110      	movs	r1, #16
 800756a:	4618      	mov	r0, r3
 800756c:	f006 f9e0 	bl	800d930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007570:	2300      	movs	r3, #0
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007574:	e046      	b.n	8007604 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	461a      	mov	r2, r3
 8007584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007588:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	461a      	mov	r2, r3
 80075b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	3301      	adds	r3, #1
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	429a      	cmp	r2, r3
 800760c:	d3b3      	bcc.n	8007576 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800761c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007620:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	2b00      	cmp	r3, #0
 8007628:	d016      	beq.n	8007658 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763a:	f043 030b 	orr.w	r3, r3, #11
 800763e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007650:	f043 030b 	orr.w	r3, r3, #11
 8007654:	6453      	str	r3, [r2, #68]	; 0x44
 8007656:	e015      	b.n	8007684 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800766a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800766e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800767e:	f043 030b 	orr.w	r3, r3, #11
 8007682:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007692:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007696:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076a8:	461a      	mov	r2, r3
 80076aa:	f007 fa77 	bl	800eb9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80076bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f007 f9a5 	bl	800ea12 <USB_ReadInterrupts>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	d124      	bne.n	800771e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f007 fa3b 	bl	800eb54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f006 f9a1 	bl	800da2a <USB_GetDevSpeed>
 80076e8:	4603      	mov	r3, r0
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681c      	ldr	r4, [r3, #0]
 80076f4:	f001 fa42 	bl	8008b7c <HAL_RCC_GetHCLKFreq>
 80076f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	4620      	mov	r0, r4
 8007704:	f005 fea0 	bl	800d448 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f013 fb76 	bl	801adfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800771c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f007 f975 	bl	800ea12 <USB_ReadInterrupts>
 8007728:	4603      	mov	r3, r0
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b08      	cmp	r3, #8
 8007730:	d10a      	bne.n	8007748 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f013 fb53 	bl	801adde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f002 0208 	and.w	r2, r2, #8
 8007746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f007 f960 	bl	800ea12 <USB_ReadInterrupts>
 8007752:	4603      	mov	r3, r0
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b80      	cmp	r3, #128	; 0x80
 800775a:	d122      	bne.n	80077a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007768:	2301      	movs	r3, #1
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	e014      	b.n	8007798 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	4613      	mov	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb27 	bl	8007de0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	3301      	adds	r3, #1
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779e:	429a      	cmp	r2, r3
 80077a0:	d3e5      	bcc.n	800776e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f007 f933 	bl	800ea12 <USB_ReadInterrupts>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b6:	d13b      	bne.n	8007830 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077b8:	2301      	movs	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
 80077bc:	e02b      	b.n	8007816 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3340      	adds	r3, #64	; 0x40
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d115      	bne.n	8007810 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80077e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da12      	bge.n	8007810 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	333f      	adds	r3, #63	; 0x3f
 80077fa:	2201      	movs	r2, #1
 80077fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007806:	b2db      	uxtb	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fae8 	bl	8007de0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	3301      	adds	r3, #1
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	429a      	cmp	r2, r3
 800781e:	d3ce      	bcc.n	80077be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	695a      	ldr	r2, [r3, #20]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800782e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f007 f8ec 	bl	800ea12 <USB_ReadInterrupts>
 800783a:	4603      	mov	r3, r0
 800783c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007844:	d155      	bne.n	80078f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007846:	2301      	movs	r3, #1
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
 800784a:	e045      	b.n	80078d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d12e      	bne.n	80078d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007876:	2b00      	cmp	r3, #0
 8007878:	da2b      	bge.n	80078d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007886:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800788a:	429a      	cmp	r2, r3
 800788c:	d121      	bne.n	80078d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	4613      	mov	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078ce:	6053      	str	r3, [r2, #4]
            break;
 80078d0:	e007      	b.n	80078e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	3301      	adds	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078de:	429a      	cmp	r2, r3
 80078e0:	d3b4      	bcc.n	800784c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80078f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f007 f88b 	bl	800ea12 <USB_ReadInterrupts>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007906:	d10a      	bne.n	800791e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f013 faf7 	bl	801aefc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695a      	ldr	r2, [r3, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800791c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f007 f875 	bl	800ea12 <USB_ReadInterrupts>
 8007928:	4603      	mov	r3, r0
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b04      	cmp	r3, #4
 8007930:	d115      	bne.n	800795e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f013 fae7 	bl	801af18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	e000      	b.n	800795e <HAL_PCD_IRQHandler+0x938>
      return;
 800795c:	bf00      	nop
    }
  }
}
 800795e:	3734      	adds	r7, #52	; 0x34
 8007960:	46bd      	mov	sp, r7
 8007962:	bd90      	pop	{r4, r7, pc}

08007964 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_PCD_SetAddress+0x1a>
 800797a:	2302      	movs	r3, #2
 800797c:	e013      	b.n	80079a6 <HAL_PCD_SetAddress+0x42>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f006 ffd3 	bl	800e942 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	4608      	mov	r0, r1
 80079b8:	4611      	mov	r1, r2
 80079ba:	461a      	mov	r2, r3
 80079bc:	4603      	mov	r3, r0
 80079be:	70fb      	strb	r3, [r7, #3]
 80079c0:	460b      	mov	r3, r1
 80079c2:	803b      	strh	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0f      	bge.n	80079f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3338      	adds	r3, #56	; 0x38
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	705a      	strb	r2, [r3, #1]
 80079f2:	e00f      	b.n	8007a14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	f003 020f 	and.w	r2, r3, #15
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007a20:	883a      	ldrh	r2, [r7, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	78ba      	ldrb	r2, [r7, #2]
 8007a2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	785b      	ldrb	r3, [r3, #1]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a3e:	78bb      	ldrb	r3, [r7, #2]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d102      	bne.n	8007a4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_PCD_EP_Open+0xaa>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e00e      	b.n	8007a76 <HAL_PCD_EP_Open+0xc8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68f9      	ldr	r1, [r7, #12]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f006 f804 	bl	800da74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007a74:	7afb      	ldrb	r3, [r7, #11]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da0f      	bge.n	8007ab2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	f003 020f 	and.w	r2, r3, #15
 8007a98:	4613      	mov	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	3338      	adds	r3, #56	; 0x38
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	705a      	strb	r2, [r3, #1]
 8007ab0:	e00f      	b.n	8007ad2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	f003 020f 	and.w	r2, r3, #15
 8007ab8:	4613      	mov	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	3304      	adds	r3, #4
 8007aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_PCD_EP_Close+0x6e>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e00e      	b.n	8007b0a <HAL_PCD_EP_Close+0x8c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f006 f842 	bl	800db84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	f003 020f 	and.w	r2, r3, #15
 8007b28:	4613      	mov	r3, r2
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	3304      	adds	r3, #4
 8007b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	f003 030f 	and.w	r3, r3, #15
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d102      	bne.n	8007b6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	6979      	ldr	r1, [r7, #20]
 8007b86:	f006 fb21 	bl	800e1cc <USB_EP0StartXfer>
 8007b8a:	e008      	b.n	8007b9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	6979      	ldr	r1, [r7, #20]
 8007b9a:	f006 f8cf 	bl	800dd3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	f003 020f 	and.w	r2, r3, #15
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007bca:	681b      	ldr	r3, [r3, #0]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	607a      	str	r2, [r7, #4]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	460b      	mov	r3, r1
 8007be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	f003 020f 	and.w	r2, r3, #15
 8007bee:	4613      	mov	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	3338      	adds	r3, #56	; 0x38
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2201      	movs	r2, #1
 8007c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d102      	bne.n	8007c32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	6979      	ldr	r1, [r7, #20]
 8007c4a:	f006 fabf 	bl	800e1cc <USB_EP0StartXfer>
 8007c4e:	e008      	b.n	8007c62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	f006 f86d 	bl	800dd3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	f003 020f 	and.w	r2, r3, #15
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d901      	bls.n	8007c8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e050      	b.n	8007d2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da0f      	bge.n	8007cb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	3338      	adds	r3, #56	; 0x38
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	705a      	strb	r2, [r3, #1]
 8007cb0:	e00d      	b.n	8007cce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_PCD_EP_SetStall+0x82>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e01e      	b.n	8007d2c <HAL_PCD_EP_SetStall+0xc0>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f006 fcfd 	bl	800e6fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	b2d9      	uxtb	r1, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f006 ff3d 	bl	800eb9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	f003 020f 	and.w	r2, r3, #15
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d901      	bls.n	8007d52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e042      	b.n	8007dd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da0f      	bge.n	8007d7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	f003 020f 	and.w	r2, r3, #15
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	3338      	adds	r3, #56	; 0x38
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3304      	adds	r3, #4
 8007d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	705a      	strb	r2, [r3, #1]
 8007d78:	e00f      	b.n	8007d9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 020f 	and.w	r2, r3, #15
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	4413      	add	r3, r2
 8007d90:	3304      	adds	r3, #4
 8007d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_PCD_EP_ClrStall+0x86>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e00e      	b.n	8007dd8 <HAL_PCD_EP_ClrStall+0xa4>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f006 fd05 	bl	800e7d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da0c      	bge.n	8007e0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	f003 020f 	and.w	r2, r3, #15
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	3338      	adds	r3, #56	; 0x38
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	4413      	add	r3, r2
 8007e08:	3304      	adds	r3, #4
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e00c      	b.n	8007e28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	3304      	adds	r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68f9      	ldr	r1, [r7, #12]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f006 fb24 	bl	800e47c <USB_EPStopXfer>
 8007e34:	4603      	mov	r3, r0
 8007e36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_PCD_EP_Flush+0x1a>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e01b      	b.n	8007e94 <HAL_PCD_EP_Flush+0x52>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da09      	bge.n	8007e80 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f005 fd59 	bl	800d930 <USB_FlushTxFifo>
 8007e7e:	e004      	b.n	8007e8a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f005 fd87 	bl	800d998 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	3338      	adds	r3, #56	; 0x38
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a1a      	ldr	r2, [r3, #32]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d901      	bls.n	8007ed4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e06c      	b.n	8007fae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d902      	bls.n	8007ef0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3303      	adds	r3, #3
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ef8:	e02b      	b.n	8007f52 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d902      	bls.n	8007f16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	3303      	adds	r3, #3
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6919      	ldr	r1, [r3, #16]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	4603      	mov	r3, r0
 8007f34:	6978      	ldr	r0, [r7, #20]
 8007f36:	f006 fb4b 	bl	800e5d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1a      	ldr	r2, [r3, #32]
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d809      	bhi.n	8007f7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d203      	bcs.n	8007f7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1be      	bne.n	8007efa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d811      	bhi.n	8007fac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	2201      	movs	r2, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	6939      	ldr	r1, [r7, #16]
 8007fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa8:	4013      	ands	r3, r2
 8007faa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	333c      	adds	r3, #60	; 0x3c
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d17b      	bne.n	80080e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d015      	beq.n	8008024 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4a61      	ldr	r2, [pc, #388]	; (8008180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	f240 80b9 	bls.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80b3 	beq.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	461a      	mov	r2, r3
 800801c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008020:	6093      	str	r3, [r2, #8]
 8008022:	e0a7      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	461a      	mov	r2, r3
 800803c:	2320      	movs	r3, #32
 800803e:	6093      	str	r3, [r2, #8]
 8008040:	e098      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 8093 	bne.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	4a4b      	ldr	r2, [pc, #300]	; (8008180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d90f      	bls.n	8008076 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806c:	461a      	mov	r2, r3
 800806e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008072:	6093      	str	r3, [r2, #8]
 8008074:	e07e      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	4613      	mov	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	69da      	ldr	r2, [r3, #28]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	0159      	lsls	r1, r3, #5
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	440b      	add	r3, r1
 8008098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d114      	bne.n	80080d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080c0:	461a      	mov	r2, r3
 80080c2:	2101      	movs	r1, #1
 80080c4:	f006 fd6a 	bl	800eb9c <USB_EP0_OutStart>
 80080c8:	e006      	b.n	80080d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	441a      	add	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f012 fe48 	bl	801ad74 <HAL_PCD_DataOutStageCallback>
 80080e4:	e046      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4a26      	ldr	r2, [pc, #152]	; (8008184 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d124      	bne.n	8008138 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008104:	461a      	mov	r2, r3
 8008106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810a:	6093      	str	r3, [r2, #8]
 800810c:	e032      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008124:	461a      	mov	r2, r3
 8008126:	2320      	movs	r3, #32
 8008128:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f012 fe1f 	bl	801ad74 <HAL_PCD_DataOutStageCallback>
 8008136:	e01d      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d114      	bne.n	8008168 <PCD_EP_OutXfrComplete_int+0x1b0>
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008160:	461a      	mov	r2, r3
 8008162:	2100      	movs	r1, #0
 8008164:	f006 fd1a 	bl	800eb9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f012 fe00 	bl	801ad74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	4f54300a 	.word	0x4f54300a
 8008184:	4f54310a 	.word	0x4f54310a

08008188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	333c      	adds	r3, #60	; 0x3c
 80081a0:	3304      	adds	r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a15      	ldr	r2, [pc, #84]	; (8008210 <PCD_EP_OutSetupPacket_int+0x88>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d90e      	bls.n	80081dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d4:	461a      	mov	r2, r3
 80081d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f012 fdb7 	bl	801ad50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <PCD_EP_OutSetupPacket_int+0x88>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d90c      	bls.n	8008204 <PCD_EP_OutSetupPacket_int+0x7c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d108      	bne.n	8008204 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081fc:	461a      	mov	r2, r3
 80081fe:	2101      	movs	r1, #1
 8008200:	f006 fccc 	bl	800eb9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	4f54300a 	.word	0x4f54300a

08008214 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
 8008220:	4613      	mov	r3, r2
 8008222:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d107      	bne.n	8008242 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008232:	883b      	ldrh	r3, [r7, #0]
 8008234:	0419      	lsls	r1, r3, #16
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	430a      	orrs	r2, r1
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
 8008240:	e028      	b.n	8008294 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	e00d      	b.n	8008272 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3340      	adds	r3, #64	; 0x40
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	3301      	adds	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	3b01      	subs	r3, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	d3ec      	bcc.n	8008256 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800827c:	883b      	ldrh	r3, [r7, #0]
 800827e:	0418      	lsls	r0, r3, #16
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	3b01      	subs	r3, #1
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	4302      	orrs	r2, r0
 800828c:	3340      	adds	r3, #64	; 0x40
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <HAL_PWR_EnterSTOPMode+0x50>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f023 0203 	bic.w	r2, r3, #3
 80082f0:	490e      	ldr	r1, [pc, #56]	; (800832c <HAL_PWR_EnterSTOPMode+0x50>)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <HAL_PWR_EnterSTOPMode+0x54>)
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4a0c      	ldr	r2, [pc, #48]	; (8008330 <HAL_PWR_EnterSTOPMode+0x54>)
 80082fe:	f043 0304 	orr.w	r3, r3, #4
 8008302:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800830a:	bf30      	wfi
 800830c:	e002      	b.n	8008314 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800830e:	bf40      	sev
    __WFE();
 8008310:	bf20      	wfe
    __WFE();
 8008312:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008314:	4b06      	ldr	r3, [pc, #24]	; (8008330 <HAL_PWR_EnterSTOPMode+0x54>)
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	4a05      	ldr	r2, [pc, #20]	; (8008330 <HAL_PWR_EnterSTOPMode+0x54>)
 800831a:	f023 0304 	bic.w	r3, r3, #4
 800831e:	6113      	str	r3, [r2, #16]
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	40007000 	.word	0x40007000
 8008330:	e000ed00 	.word	0xe000ed00

08008334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e267      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d075      	beq.n	800843e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008352:	4b88      	ldr	r3, [pc, #544]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 030c 	and.w	r3, r3, #12
 800835a:	2b04      	cmp	r3, #4
 800835c:	d00c      	beq.n	8008378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800835e:	4b85      	ldr	r3, [pc, #532]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008366:	2b08      	cmp	r3, #8
 8008368:	d112      	bne.n	8008390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800836a:	4b82      	ldr	r3, [pc, #520]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008376:	d10b      	bne.n	8008390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008378:	4b7e      	ldr	r3, [pc, #504]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d05b      	beq.n	800843c <HAL_RCC_OscConfig+0x108>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d157      	bne.n	800843c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e242      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008398:	d106      	bne.n	80083a8 <HAL_RCC_OscConfig+0x74>
 800839a:	4b76      	ldr	r3, [pc, #472]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a75      	ldr	r2, [pc, #468]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	e01d      	b.n	80083e4 <HAL_RCC_OscConfig+0xb0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083b0:	d10c      	bne.n	80083cc <HAL_RCC_OscConfig+0x98>
 80083b2:	4b70      	ldr	r3, [pc, #448]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a6f      	ldr	r2, [pc, #444]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	4b6d      	ldr	r3, [pc, #436]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a6c      	ldr	r2, [pc, #432]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e00b      	b.n	80083e4 <HAL_RCC_OscConfig+0xb0>
 80083cc:	4b69      	ldr	r3, [pc, #420]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a68      	ldr	r2, [pc, #416]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	4b66      	ldr	r3, [pc, #408]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a65      	ldr	r2, [pc, #404]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80083de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d013      	beq.n	8008414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ec:	f7fb fb66 	bl	8003abc <HAL_GetTick>
 80083f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083f4:	f7fb fb62 	bl	8003abc <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b64      	cmp	r3, #100	; 0x64
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e207      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008406:	4b5b      	ldr	r3, [pc, #364]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f0      	beq.n	80083f4 <HAL_RCC_OscConfig+0xc0>
 8008412:	e014      	b.n	800843e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008414:	f7fb fb52 	bl	8003abc <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800841c:	f7fb fb4e 	bl	8003abc <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b64      	cmp	r3, #100	; 0x64
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e1f3      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800842e:	4b51      	ldr	r3, [pc, #324]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f0      	bne.n	800841c <HAL_RCC_OscConfig+0xe8>
 800843a:	e000      	b.n	800843e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800843c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d063      	beq.n	8008512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800844a:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 030c 	and.w	r3, r3, #12
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008456:	4b47      	ldr	r3, [pc, #284]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800845e:	2b08      	cmp	r3, #8
 8008460:	d11c      	bne.n	800849c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008462:	4b44      	ldr	r3, [pc, #272]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d116      	bne.n	800849c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800846e:	4b41      	ldr	r3, [pc, #260]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d005      	beq.n	8008486 <HAL_RCC_OscConfig+0x152>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d001      	beq.n	8008486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e1c7      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008486:	4b3b      	ldr	r3, [pc, #236]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	4937      	ldr	r1, [pc, #220]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008496:	4313      	orrs	r3, r2
 8008498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800849a:	e03a      	b.n	8008512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d020      	beq.n	80084e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084a4:	4b34      	ldr	r3, [pc, #208]	; (8008578 <HAL_RCC_OscConfig+0x244>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084aa:	f7fb fb07 	bl	8003abc <HAL_GetTick>
 80084ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084b2:	f7fb fb03 	bl	8003abc <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e1a8      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084c4:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0f0      	beq.n	80084b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4925      	ldr	r1, [pc, #148]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	600b      	str	r3, [r1, #0]
 80084e4:	e015      	b.n	8008512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084e6:	4b24      	ldr	r3, [pc, #144]	; (8008578 <HAL_RCC_OscConfig+0x244>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fb fae6 	bl	8003abc <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084f4:	f7fb fae2 	bl	8003abc <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e187      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008506:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d036      	beq.n	800858c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d016      	beq.n	8008554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008526:	4b15      	ldr	r3, [pc, #84]	; (800857c <HAL_RCC_OscConfig+0x248>)
 8008528:	2201      	movs	r2, #1
 800852a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852c:	f7fb fac6 	bl	8003abc <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008534:	f7fb fac2 	bl	8003abc <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e167      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008546:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCC_OscConfig+0x240>)
 8008548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0x200>
 8008552:	e01b      	b.n	800858c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008554:	4b09      	ldr	r3, [pc, #36]	; (800857c <HAL_RCC_OscConfig+0x248>)
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800855a:	f7fb faaf 	bl	8003abc <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008560:	e00e      	b.n	8008580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008562:	f7fb faab 	bl	8003abc <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d907      	bls.n	8008580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e150      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
 8008574:	40023800 	.word	0x40023800
 8008578:	42470000 	.word	0x42470000
 800857c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008580:	4b88      	ldr	r3, [pc, #544]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ea      	bne.n	8008562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 8097 	beq.w	80086c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800859e:	4b81      	ldr	r3, [pc, #516]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10f      	bne.n	80085ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]
 80085ae:	4b7d      	ldr	r3, [pc, #500]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	4a7c      	ldr	r2, [pc, #496]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80085b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b8:	6413      	str	r3, [r2, #64]	; 0x40
 80085ba:	4b7a      	ldr	r3, [pc, #488]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c2:	60bb      	str	r3, [r7, #8]
 80085c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ca:	4b77      	ldr	r3, [pc, #476]	; (80087a8 <HAL_RCC_OscConfig+0x474>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d118      	bne.n	8008608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085d6:	4b74      	ldr	r3, [pc, #464]	; (80087a8 <HAL_RCC_OscConfig+0x474>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a73      	ldr	r2, [pc, #460]	; (80087a8 <HAL_RCC_OscConfig+0x474>)
 80085dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085e2:	f7fb fa6b 	bl	8003abc <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ea:	f7fb fa67 	bl	8003abc <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e10c      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085fc:	4b6a      	ldr	r3, [pc, #424]	; (80087a8 <HAL_RCC_OscConfig+0x474>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d106      	bne.n	800861e <HAL_RCC_OscConfig+0x2ea>
 8008610:	4b64      	ldr	r3, [pc, #400]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	4a63      	ldr	r2, [pc, #396]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	6713      	str	r3, [r2, #112]	; 0x70
 800861c:	e01c      	b.n	8008658 <HAL_RCC_OscConfig+0x324>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	2b05      	cmp	r3, #5
 8008624:	d10c      	bne.n	8008640 <HAL_RCC_OscConfig+0x30c>
 8008626:	4b5f      	ldr	r3, [pc, #380]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862a:	4a5e      	ldr	r2, [pc, #376]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 800862c:	f043 0304 	orr.w	r3, r3, #4
 8008630:	6713      	str	r3, [r2, #112]	; 0x70
 8008632:	4b5c      	ldr	r3, [pc, #368]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008636:	4a5b      	ldr	r2, [pc, #364]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	6713      	str	r3, [r2, #112]	; 0x70
 800863e:	e00b      	b.n	8008658 <HAL_RCC_OscConfig+0x324>
 8008640:	4b58      	ldr	r3, [pc, #352]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	4a57      	ldr	r2, [pc, #348]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	6713      	str	r3, [r2, #112]	; 0x70
 800864c:	4b55      	ldr	r3, [pc, #340]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 800864e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008650:	4a54      	ldr	r2, [pc, #336]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008652:	f023 0304 	bic.w	r3, r3, #4
 8008656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d015      	beq.n	800868c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008660:	f7fb fa2c 	bl	8003abc <HAL_GetTick>
 8008664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008666:	e00a      	b.n	800867e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008668:	f7fb fa28 	bl	8003abc <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	f241 3288 	movw	r2, #5000	; 0x1388
 8008676:	4293      	cmp	r3, r2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e0cb      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800867e:	4b49      	ldr	r3, [pc, #292]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0ee      	beq.n	8008668 <HAL_RCC_OscConfig+0x334>
 800868a:	e014      	b.n	80086b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800868c:	f7fb fa16 	bl	8003abc <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008692:	e00a      	b.n	80086aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008694:	f7fb fa12 	bl	8003abc <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e0b5      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086aa:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80086ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1ee      	bne.n	8008694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d105      	bne.n	80086c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086bc:	4b39      	ldr	r3, [pc, #228]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	4a38      	ldr	r2, [pc, #224]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80086c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80a1 	beq.w	8008814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086d2:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 030c 	and.w	r3, r3, #12
 80086da:	2b08      	cmp	r3, #8
 80086dc:	d05c      	beq.n	8008798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d141      	bne.n	800876a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086e6:	4b31      	ldr	r3, [pc, #196]	; (80087ac <HAL_RCC_OscConfig+0x478>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ec:	f7fb f9e6 	bl	8003abc <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086f4:	f7fb f9e2 	bl	8003abc <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e087      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008706:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f0      	bne.n	80086f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	69da      	ldr	r2, [r3, #28]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	019b      	lsls	r3, r3, #6
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	3b01      	subs	r3, #1
 800872c:	041b      	lsls	r3, r3, #16
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	061b      	lsls	r3, r3, #24
 8008736:	491b      	ldr	r1, [pc, #108]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 8008738:	4313      	orrs	r3, r2
 800873a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800873c:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <HAL_RCC_OscConfig+0x478>)
 800873e:	2201      	movs	r2, #1
 8008740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008742:	f7fb f9bb 	bl	8003abc <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008748:	e008      	b.n	800875c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800874a:	f7fb f9b7 	bl	8003abc <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e05c      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800875c:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0f0      	beq.n	800874a <HAL_RCC_OscConfig+0x416>
 8008768:	e054      	b.n	8008814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800876a:	4b10      	ldr	r3, [pc, #64]	; (80087ac <HAL_RCC_OscConfig+0x478>)
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008770:	f7fb f9a4 	bl	8003abc <HAL_GetTick>
 8008774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008776:	e008      	b.n	800878a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008778:	f7fb f9a0 	bl	8003abc <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e045      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800878a:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <HAL_RCC_OscConfig+0x470>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1f0      	bne.n	8008778 <HAL_RCC_OscConfig+0x444>
 8008796:	e03d      	b.n	8008814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d107      	bne.n	80087b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e038      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
 80087a4:	40023800 	.word	0x40023800
 80087a8:	40007000 	.word	0x40007000
 80087ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087b0:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <HAL_RCC_OscConfig+0x4ec>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d028      	beq.n	8008810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d121      	bne.n	8008810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d11a      	bne.n	8008810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087e0:	4013      	ands	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d111      	bne.n	8008810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	085b      	lsrs	r3, r3, #1
 80087f8:	3b01      	subs	r3, #1
 80087fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d107      	bne.n	8008810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	d001      	beq.n	8008814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40023800 	.word	0x40023800

08008824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e0cc      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008838:	4b68      	ldr	r3, [pc, #416]	; (80089dc <HAL_RCC_ClockConfig+0x1b8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90c      	bls.n	8008860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008846:	4b65      	ldr	r3, [pc, #404]	; (80089dc <HAL_RCC_ClockConfig+0x1b8>)
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800884e:	4b63      	ldr	r3, [pc, #396]	; (80089dc <HAL_RCC_ClockConfig+0x1b8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d001      	beq.n	8008860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e0b8      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d020      	beq.n	80088ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008878:	4b59      	ldr	r3, [pc, #356]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	4a58      	ldr	r2, [pc, #352]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 800887e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008890:	4b53      	ldr	r3, [pc, #332]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	4a52      	ldr	r2, [pc, #328]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800889a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800889c:	4b50      	ldr	r3, [pc, #320]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	494d      	ldr	r1, [pc, #308]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d044      	beq.n	8008944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d107      	bne.n	80088d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088c2:	4b47      	ldr	r3, [pc, #284]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d119      	bne.n	8008902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e07f      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d003      	beq.n	80088e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d107      	bne.n	80088f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e2:	4b3f      	ldr	r3, [pc, #252]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e06f      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088f2:	4b3b      	ldr	r3, [pc, #236]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e067      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008902:	4b37      	ldr	r3, [pc, #220]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f023 0203 	bic.w	r2, r3, #3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	4934      	ldr	r1, [pc, #208]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008910:	4313      	orrs	r3, r2
 8008912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008914:	f7fb f8d2 	bl	8003abc <HAL_GetTick>
 8008918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800891a:	e00a      	b.n	8008932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800891c:	f7fb f8ce 	bl	8003abc <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	f241 3288 	movw	r2, #5000	; 0x1388
 800892a:	4293      	cmp	r3, r2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e04f      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008932:	4b2b      	ldr	r3, [pc, #172]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 020c 	and.w	r2, r3, #12
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	429a      	cmp	r2, r3
 8008942:	d1eb      	bne.n	800891c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008944:	4b25      	ldr	r3, [pc, #148]	; (80089dc <HAL_RCC_ClockConfig+0x1b8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d20c      	bcs.n	800896c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008952:	4b22      	ldr	r3, [pc, #136]	; (80089dc <HAL_RCC_ClockConfig+0x1b8>)
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800895a:	4b20      	ldr	r3, [pc, #128]	; (80089dc <HAL_RCC_ClockConfig+0x1b8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d001      	beq.n	800896c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e032      	b.n	80089d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	d008      	beq.n	800898a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008978:	4b19      	ldr	r3, [pc, #100]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	4916      	ldr	r1, [pc, #88]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008986:	4313      	orrs	r3, r2
 8008988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	490e      	ldr	r1, [pc, #56]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089aa:	f000 f821 	bl	80089f0 <HAL_RCC_GetSysClockFreq>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <HAL_RCC_ClockConfig+0x1bc>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	490a      	ldr	r1, [pc, #40]	; (80089e4 <HAL_RCC_ClockConfig+0x1c0>)
 80089bc:	5ccb      	ldrb	r3, [r1, r3]
 80089be:	fa22 f303 	lsr.w	r3, r2, r3
 80089c2:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <HAL_RCC_ClockConfig+0x1c4>)
 80089c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089c6:	4b09      	ldr	r3, [pc, #36]	; (80089ec <HAL_RCC_ClockConfig+0x1c8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fb f832 	bl	8003a34 <HAL_InitTick>

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	40023c00 	.word	0x40023c00
 80089e0:	40023800 	.word	0x40023800
 80089e4:	08021a18 	.word	0x08021a18
 80089e8:	20000010 	.word	0x20000010
 80089ec:	20000014 	.word	0x20000014

080089f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089f4:	b090      	sub	sp, #64	; 0x40
 80089f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
 80089fc:	2300      	movs	r3, #0
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a00:	2300      	movs	r3, #0
 8008a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a08:	4b59      	ldr	r3, [pc, #356]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 030c 	and.w	r3, r3, #12
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d00d      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x40>
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	f200 80a1 	bhi.w	8008b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <HAL_RCC_GetSysClockFreq+0x34>
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d003      	beq.n	8008a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8008a22:	e09b      	b.n	8008b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a24:	4b53      	ldr	r3, [pc, #332]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008a28:	e09b      	b.n	8008b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a2a:	4b53      	ldr	r3, [pc, #332]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a2e:	e098      	b.n	8008b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a30:	4b4f      	ldr	r3, [pc, #316]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a3a:	4b4d      	ldr	r3, [pc, #308]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d028      	beq.n	8008a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a46:	4b4a      	ldr	r3, [pc, #296]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	099b      	lsrs	r3, r3, #6
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	623b      	str	r3, [r7, #32]
 8008a50:	627a      	str	r2, [r7, #36]	; 0x24
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4b47      	ldr	r3, [pc, #284]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a5c:	fb03 f201 	mul.w	r2, r3, r1
 8008a60:	2300      	movs	r3, #0
 8008a62:	fb00 f303 	mul.w	r3, r0, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	4a43      	ldr	r2, [pc, #268]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8008a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a70:	460a      	mov	r2, r1
 8008a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a76:	4413      	add	r3, r2
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	61fa      	str	r2, [r7, #28]
 8008a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008a8a:	f7f8 f915 	bl	8000cb8 <__aeabi_uldivmod>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4613      	mov	r3, r2
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a96:	e053      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a98:	4b35      	ldr	r3, [pc, #212]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	099b      	lsrs	r3, r3, #6
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	617a      	str	r2, [r7, #20]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008aaa:	f04f 0b00 	mov.w	fp, #0
 8008aae:	4652      	mov	r2, sl
 8008ab0:	465b      	mov	r3, fp
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f04f 0100 	mov.w	r1, #0
 8008aba:	0159      	lsls	r1, r3, #5
 8008abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ac0:	0150      	lsls	r0, r2, #5
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8008aca:	eb63 090b 	sbc.w	r9, r3, fp
 8008ace:	f04f 0200 	mov.w	r2, #0
 8008ad2:	f04f 0300 	mov.w	r3, #0
 8008ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8008ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	00eb      	lsls	r3, r5, #3
 8008af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008af8:	00e2      	lsls	r2, r4, #3
 8008afa:	4614      	mov	r4, r2
 8008afc:	461d      	mov	r5, r3
 8008afe:	eb14 030a 	adds.w	r3, r4, sl
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	eb45 030b 	adc.w	r3, r5, fp
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b16:	4629      	mov	r1, r5
 8008b18:	028b      	lsls	r3, r1, #10
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b20:	4621      	mov	r1, r4
 8008b22:	028a      	lsls	r2, r1, #10
 8008b24:	4610      	mov	r0, r2
 8008b26:	4619      	mov	r1, r3
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	60bb      	str	r3, [r7, #8]
 8008b2e:	60fa      	str	r2, [r7, #12]
 8008b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b34:	f7f8 f8c0 	bl	8000cb8 <__aeabi_uldivmod>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	0c1b      	lsrs	r3, r3, #16
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b5a:	e002      	b.n	8008b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3740      	adds	r7, #64	; 0x40
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b6e:	bf00      	nop
 8008b70:	40023800 	.word	0x40023800
 8008b74:	00f42400 	.word	0x00f42400
 8008b78:	017d7840 	.word	0x017d7840

08008b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b80:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b82:	681b      	ldr	r3, [r3, #0]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000010 	.word	0x20000010

08008b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b98:	f7ff fff0 	bl	8008b7c <HAL_RCC_GetHCLKFreq>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	0a9b      	lsrs	r3, r3, #10
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	4903      	ldr	r1, [pc, #12]	; (8008bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008baa:	5ccb      	ldrb	r3, [r1, r3]
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	08021a28 	.word	0x08021a28

08008bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bc0:	f7ff ffdc 	bl	8008b7c <HAL_RCC_GetHCLKFreq>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	0b5b      	lsrs	r3, r3, #13
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	4903      	ldr	r1, [pc, #12]	; (8008be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bd2:	5ccb      	ldrb	r3, [r1, r3]
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40023800 	.word	0x40023800
 8008be0:	08021a28 	.word	0x08021a28

08008be4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d105      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d035      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008c0c:	4b67      	ldr	r3, [pc, #412]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c12:	f7fa ff53 	bl	8003abc <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c18:	e008      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c1a:	f7fa ff4f 	bl	8003abc <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d901      	bls.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e0ba      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c2c:	4b60      	ldr	r3, [pc, #384]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1f0      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	019a      	lsls	r2, r3, #6
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	071b      	lsls	r3, r3, #28
 8008c44:	495a      	ldr	r1, [pc, #360]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008c4c:	4b57      	ldr	r3, [pc, #348]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c52:	f7fa ff33 	bl	8003abc <HAL_GetTick>
 8008c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c58:	e008      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c5a:	f7fa ff2f 	bl	8003abc <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d901      	bls.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e09a      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c6c:	4b50      	ldr	r3, [pc, #320]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0f0      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 8083 	beq.w	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	4b49      	ldr	r3, [pc, #292]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8e:	4a48      	ldr	r2, [pc, #288]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c94:	6413      	str	r3, [r2, #64]	; 0x40
 8008c96:	4b46      	ldr	r3, [pc, #280]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ca2:	4b44      	ldr	r3, [pc, #272]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a43      	ldr	r2, [pc, #268]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cae:	f7fa ff05 	bl	8003abc <HAL_GetTick>
 8008cb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008cb6:	f7fa ff01 	bl	8003abc <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e06c      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008cc8:	4b3a      	ldr	r3, [pc, #232]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008cd4:	4b36      	ldr	r3, [pc, #216]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cdc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02f      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d028      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cf2:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cfa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008cfc:	4b2e      	ldr	r3, [pc, #184]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d02:	4b2d      	ldr	r3, [pc, #180]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008d08:	4a29      	ldr	r2, [pc, #164]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d0e:	4b28      	ldr	r3, [pc, #160]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d114      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008d1a:	f7fa fecf 	bl	8003abc <HAL_GetTick>
 8008d1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d20:	e00a      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d22:	f7fa fecb 	bl	8003abc <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d901      	bls.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e034      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d38:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0ee      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d50:	d10d      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008d52:	4b17      	ldr	r3, [pc, #92]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d66:	4912      	ldr	r1, [pc, #72]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	608b      	str	r3, [r1, #8]
 8008d6c:	e005      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008d6e:	4b10      	ldr	r3, [pc, #64]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	4a0f      	ldr	r2, [pc, #60]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008d78:	6093      	str	r3, [r2, #8]
 8008d7a:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d86:	490a      	ldr	r1, [pc, #40]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	7c1a      	ldrb	r2, [r3, #16]
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008d9e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	42470068 	.word	0x42470068
 8008db0:	40023800 	.word	0x40023800
 8008db4:	40007000 	.word	0x40007000
 8008db8:	42470e40 	.word	0x42470e40
 8008dbc:	424711e0 	.word	0x424711e0

08008dc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e066      	b.n	8008ea4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7f5b      	ldrb	r3, [r3, #29]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fa fa26 	bl	8003238 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	22ca      	movs	r2, #202	; 0xca
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2253      	movs	r2, #83	; 0x53
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fbce 	bl	80095a4 <RTC_EnterInitMode>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d12c      	bne.n	8008e6c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e24:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6899      	ldr	r1, [r3, #8]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	68d2      	ldr	r2, [r2, #12]
 8008e4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6919      	ldr	r1, [r3, #16]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	041a      	lsls	r2, r3, #16
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fbd5 	bl	8009612 <RTC_ExitInitMode>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d113      	bne.n	8008e9a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e80:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	22ff      	movs	r2, #255	; 0xff
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	7f1b      	ldrb	r3, [r3, #28]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_RTC_SetTime+0x1c>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e087      	b.n	8008fd8 <HAL_RTC_SetTime+0x12c>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d126      	bne.n	8008f28 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d102      	bne.n	8008eee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2200      	movs	r2, #0
 8008eec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fbb2 	bl	800965c <RTC_ByteToBcd2>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fbab 	bl	800965c <RTC_ByteToBcd2>
 8008f06:	4603      	mov	r3, r0
 8008f08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f0a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	789b      	ldrb	r3, [r3, #2]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fba3 	bl	800965c <RTC_ByteToBcd2>
 8008f16:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	78db      	ldrb	r3, [r3, #3]
 8008f20:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	e018      	b.n	8008f5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008f48:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008f4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	78db      	ldrb	r3, [r3, #3]
 8008f54:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	22ca      	movs	r2, #202	; 0xca
 8008f60:	625a      	str	r2, [r3, #36]	; 0x24
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2253      	movs	r2, #83	; 0x53
 8008f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fb1a 	bl	80095a4 <RTC_EnterInitMode>
 8008f70:	4603      	mov	r3, r0
 8008f72:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f74:	7cfb      	ldrb	r3, [r7, #19]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d120      	bne.n	8008fbc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008f84:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f88:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6899      	ldr	r1, [r3, #8]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fb2d 	bl	8009612 <RTC_ExitInitMode>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008fbc:	7cfb      	ldrb	r3, [r7, #19]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	22ff      	movs	r2, #255	; 0xff
 8008fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	771a      	strb	r2, [r3, #28]

  return status;
 8008fd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd90      	pop	{r4, r7, pc}

08008fe0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009012:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009016:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	0a1b      	lsrs	r3, r3, #8
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009032:	b2da      	uxtb	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009040:	b2da      	uxtb	r2, r3
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	0d9b      	lsrs	r3, r3, #22
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	b2da      	uxtb	r2, r3
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11a      	bne.n	8009092 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fb18 	bl	8009696 <RTC_Bcd2ToByte>
 8009066:	4603      	mov	r3, r0
 8009068:	461a      	mov	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fb0f 	bl	8009696 <RTC_Bcd2ToByte>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	789b      	ldrb	r3, [r3, #2]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fb06 	bl	8009696 <RTC_Bcd2ToByte>
 800908a:	4603      	mov	r3, r0
 800908c:	461a      	mov	r2, r3
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	7f1b      	ldrb	r3, [r3, #28]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_RTC_SetDate+0x1c>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e071      	b.n	800919c <HAL_RTC_SetDate+0x100>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2202      	movs	r2, #2
 80090c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10e      	bne.n	80090e8 <HAL_RTC_SetDate+0x4c>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	f003 0310 	and.w	r3, r3, #16
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d008      	beq.n	80090e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	f023 0310 	bic.w	r3, r3, #16
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	330a      	adds	r3, #10
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d11c      	bne.n	8009128 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	78db      	ldrb	r3, [r3, #3]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fab2 	bl	800965c <RTC_ByteToBcd2>
 80090f8:	4603      	mov	r3, r0
 80090fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 faab 	bl	800965c <RTC_ByteToBcd2>
 8009106:	4603      	mov	r3, r0
 8009108:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800910a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	789b      	ldrb	r3, [r3, #2]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 faa3 	bl	800965c <RTC_ByteToBcd2>
 8009116:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009118:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e00e      	b.n	8009146 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	78db      	ldrb	r3, [r3, #3]
 800912c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009134:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800913a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	22ca      	movs	r2, #202	; 0xca
 800914c:	625a      	str	r2, [r3, #36]	; 0x24
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2253      	movs	r2, #83	; 0x53
 8009154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fa24 	bl	80095a4 <RTC_EnterInitMode>
 800915c:	4603      	mov	r3, r0
 800915e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009160:	7cfb      	ldrb	r3, [r7, #19]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10c      	bne.n	8009180 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009170:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009174:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 fa4b 	bl	8009612 <RTC_ExitInitMode>
 800917c:	4603      	mov	r3, r0
 800917e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009180:	7cfb      	ldrb	r3, [r7, #19]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	22ff      	movs	r2, #255	; 0xff
 8009192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	771a      	strb	r2, [r3, #28]

  return status;
 800919a:	7cfb      	ldrb	r3, [r7, #19]
}
 800919c:	4618      	mov	r0, r3
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd90      	pop	{r4, r7, pc}

080091a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	0c1b      	lsrs	r3, r3, #16
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	0a1b      	lsrs	r3, r3, #8
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	0b5b      	lsrs	r3, r3, #13
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d11a      	bne.n	8009238 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	78db      	ldrb	r3, [r3, #3]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fa45 	bl	8009696 <RTC_Bcd2ToByte>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fa3c 	bl	8009696 <RTC_Bcd2ToByte>
 800921e:	4603      	mov	r3, r0
 8009220:	461a      	mov	r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	789b      	ldrb	r3, [r3, #2]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fa33 	bl	8009696 <RTC_Bcd2ToByte>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b089      	sub	sp, #36	; 0x24
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009250:	4b9a      	ldr	r3, [pc, #616]	; (80094bc <HAL_RTC_SetAlarm_IT+0x278>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a9a      	ldr	r2, [pc, #616]	; (80094c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009256:	fba2 2303 	umull	r2, r3, r2, r3
 800925a:	0adb      	lsrs	r3, r3, #11
 800925c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	7f1b      	ldrb	r3, [r3, #28]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_RTC_SetAlarm_IT+0x36>
 8009276:	2302      	movs	r3, #2
 8009278:	e11c      	b.n	80094b4 <HAL_RTC_SetAlarm_IT+0x270>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2202      	movs	r2, #2
 8009284:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d137      	bne.n	80092fc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2200      	movs	r2, #0
 800929e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f9d9 	bl	800965c <RTC_ByteToBcd2>
 80092aa:	4603      	mov	r3, r0
 80092ac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f9d2 	bl	800965c <RTC_ByteToBcd2>
 80092b8:	4603      	mov	r3, r0
 80092ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80092bc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	789b      	ldrb	r3, [r3, #2]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f9ca 	bl	800965c <RTC_ByteToBcd2>
 80092c8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80092ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	78db      	ldrb	r3, [r3, #3]
 80092d2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80092d4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f9bc 	bl	800965c <RTC_ByteToBcd2>
 80092e4:	4603      	mov	r3, r0
 80092e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80092e8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80092f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80092f6:	4313      	orrs	r3, r2
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	e023      	b.n	8009344 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	d102      	bne.n	8009310 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2200      	movs	r2, #0
 800930e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	785b      	ldrb	r3, [r3, #1]
 800931a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800931c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009322:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	78db      	ldrb	r3, [r3, #3]
 8009328:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800932a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009332:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009334:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800933a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009340:	4313      	orrs	r3, r2
 8009342:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800934c:	4313      	orrs	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	22ca      	movs	r2, #202	; 0xca
 8009356:	625a      	str	r2, [r3, #36]	; 0x24
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2253      	movs	r2, #83	; 0x53
 800935e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009368:	d141      	bne.n	80093ee <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009378:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	b2da      	uxtb	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800938a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	617a      	str	r2, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	22ff      	movs	r2, #255	; 0xff
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2203      	movs	r2, #3
 80093a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e082      	b.n	80094b4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0e7      	beq.n	800938c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093da:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093ea:	609a      	str	r2, [r3, #8]
 80093ec:	e04b      	b.n	8009486 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80093fc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	b2da      	uxtb	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800940e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009410:	4b2a      	ldr	r3, [pc, #168]	; (80094bc <HAL_RTC_SetAlarm_IT+0x278>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a2a      	ldr	r2, [pc, #168]	; (80094c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	0adb      	lsrs	r3, r3, #11
 800941c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009420:	fb02 f303 	mul.w	r3, r2, r3
 8009424:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	1e5a      	subs	r2, r3, #1
 800942a:	617a      	str	r2, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10b      	bne.n	8009448 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2203      	movs	r2, #3
 800943c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e035      	b.n	80094b4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0e7      	beq.n	8009426 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009474:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009484:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009486:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a0e      	ldr	r2, [pc, #56]	; (80094c4 <HAL_RTC_SetAlarm_IT+0x280>)
 800948c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009490:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009492:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	4a0b      	ldr	r2, [pc, #44]	; (80094c4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800949c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	22ff      	movs	r2, #255	; 0xff
 80094a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3724      	adds	r7, #36	; 0x24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd90      	pop	{r4, r7, pc}
 80094bc:	20000010 	.word	0x20000010
 80094c0:	10624dd3 	.word	0x10624dd3
 80094c4:	40013c00 	.word	0x40013c00

080094c8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d012      	beq.n	8009504 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f9 fd79 	bl	8002fe4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009502:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d012      	beq.n	8009538 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f8d4 	bl	80096ce <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	b2da      	uxtb	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009536:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <HAL_RTC_AlarmIRQHandler+0x88>)
 800953a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800953e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	775a      	strb	r2, [r3, #29]
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	40013c00 	.word	0x40013c00

08009554 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800956e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009570:	f7fa faa4 	bl	8003abc <HAL_GetTick>
 8009574:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009576:	e009      	b.n	800958c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009578:	f7fa faa0 	bl	8003abc <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009586:	d901      	bls.n	800958c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e007      	b.n	800959c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0ee      	beq.n	8009578 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d122      	bne.n	8009608 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095d0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095d2:	f7fa fa73 	bl	8003abc <HAL_GetTick>
 80095d6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80095d8:	e00c      	b.n	80095f4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095da:	f7fa fa6f 	bl	8003abc <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095e8:	d904      	bls.n	80095f4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2204      	movs	r2, #4
 80095ee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <RTC_EnterInitMode+0x64>
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d1e8      	bne.n	80095da <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800962c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f003 0320 	and.w	r3, r3, #32
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff ff89 	bl	8009554 <HAL_RTC_WaitForSynchro>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2204      	movs	r2, #4
 800964c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800966a:	e005      	b.n	8009678 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	3301      	adds	r3, #1
 8009670:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	3b0a      	subs	r3, #10
 8009676:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	2b09      	cmp	r3, #9
 800967c:	d8f6      	bhi.n	800966c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	b2da      	uxtb	r2, r3
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	4313      	orrs	r3, r2
 8009688:	b2db      	uxtb	r3, r3
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	4603      	mov	r3, r0
 800969e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	091b      	lsrs	r3, r3, #4
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	461a      	mov	r2, r3
 80096ac:	0092      	lsls	r2, r2, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	f003 030f 	and.w	r3, r3, #15
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	4413      	add	r3, r2
 80096c0:	b2db      	uxtb	r3, r3
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e022      	b.n	800973a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d105      	bne.n	800970c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7f9 fdca 	bl	80032a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2203      	movs	r2, #3
 8009710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f815 	bl	8009744 <HAL_SD_InitCard>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e00a      	b.n	800973a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009744:	b5b0      	push	{r4, r5, r7, lr}
 8009746:	b08e      	sub	sp, #56	; 0x38
 8009748:	af04      	add	r7, sp, #16
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800974c:	2300      	movs	r3, #0
 800974e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009758:	2300      	movs	r3, #0
 800975a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800975c:	2300      	movs	r3, #0
 800975e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009760:	2376      	movs	r3, #118	; 0x76
 8009762:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681d      	ldr	r5, [r3, #0]
 8009768:	466c      	mov	r4, sp
 800976a:	f107 0314 	add.w	r3, r7, #20
 800976e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009776:	f107 0308 	add.w	r3, r7, #8
 800977a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800977c:	4628      	mov	r0, r5
 800977e:	f003 f8cf 	bl	800c920 <SDIO_Init>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e04f      	b.n	8009834 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009794:	4b29      	ldr	r3, [pc, #164]	; (800983c <HAL_SD_InitCard+0xf8>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f003 f907 	bl	800c9b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80097a4:	4b25      	ldr	r3, [pc, #148]	; (800983c <HAL_SD_InitCard+0xf8>)
 80097a6:	2201      	movs	r2, #1
 80097a8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80097aa:	2002      	movs	r0, #2
 80097ac:	f7fa f992 	bl	8003ad4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fe69 	bl	800a488 <SD_PowerON>
 80097b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e02e      	b.n	8009834 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fd88 	bl	800a2ec <SD_InitCard>
 80097dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e01b      	b.n	8009834 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009804:	4618      	mov	r0, r3
 8009806:	f003 f966 	bl	800cad6 <SDMMC_CmdBlockLength>
 800980a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00f      	beq.n	8009832 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a0a      	ldr	r2, [pc, #40]	; (8009840 <HAL_SD_InitCard+0xfc>)
 8009818:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3728      	adds	r7, #40	; 0x28
 8009838:	46bd      	mov	sp, r7
 800983a:	bdb0      	pop	{r4, r5, r7, pc}
 800983c:	422580a0 	.word	0x422580a0
 8009840:	004005ff 	.word	0x004005ff

08009844 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b092      	sub	sp, #72	; 0x48
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009852:	f7fa f933 	bl	8003abc <HAL_GetTick>
 8009856:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d107      	bne.n	8009876 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e1bd      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b01      	cmp	r3, #1
 8009880:	f040 81b0 	bne.w	8009be4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800988a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	441a      	add	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009894:	429a      	cmp	r2, r3
 8009896:	d907      	bls.n	80098a8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e1a4      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2203      	movs	r2, #3
 80098ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2200      	movs	r2, #0
 80098b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d002      	beq.n	80098c6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	025b      	lsls	r3, r3, #9
 80098c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	025b      	lsls	r3, r3, #9
 80098d0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80098d2:	2390      	movs	r3, #144	; 0x90
 80098d4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80098d6:	2302      	movs	r3, #2
 80098d8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80098da:	2300      	movs	r3, #0
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80098de:	2301      	movs	r3, #1
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f107 0214 	add.w	r2, r7, #20
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f003 f8c6 	bl	800ca7e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d90a      	bls.n	800990e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2202      	movs	r2, #2
 80098fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009904:	4618      	mov	r0, r3
 8009906:	f003 f92a 	bl	800cb5e <SDMMC_CmdReadMultiBlock>
 800990a:	6478      	str	r0, [r7, #68]	; 0x44
 800990c:	e009      	b.n	8009922 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800991a:	4618      	mov	r0, r3
 800991c:	f003 f8fd 	bl	800cb1a <SDMMC_CmdReadSingleBlock>
 8009920:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009924:	2b00      	cmp	r3, #0
 8009926:	d012      	beq.n	800994e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a7a      	ldr	r2, [pc, #488]	; (8009b18 <HAL_SD_ReadBlocks+0x2d4>)
 800992e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009936:	431a      	orrs	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e151      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009952:	e061      	b.n	8009a18 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d03c      	beq.n	80099dc <HAL_SD_ReadBlocks+0x198>
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d039      	beq.n	80099dc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009968:	2300      	movs	r3, #0
 800996a:	643b      	str	r3, [r7, #64]	; 0x40
 800996c:	e033      	b.n	80099d6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f002 ffff 	bl	800c976 <SDIO_ReadFIFO>
 8009978:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	b2da      	uxtb	r2, r3
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009984:	3301      	adds	r3, #1
 8009986:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998a:	3b01      	subs	r3, #1
 800998c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	0a1b      	lsrs	r3, r3, #8
 8009992:	b2da      	uxtb	r2, r3
 8009994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009996:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999a:	3301      	adds	r3, #1
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800999e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a0:	3b01      	subs	r3, #1
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	0c1b      	lsrs	r3, r3, #16
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b0:	3301      	adds	r3, #1
 80099b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b6:	3b01      	subs	r3, #1
 80099b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	0e1b      	lsrs	r3, r3, #24
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	3301      	adds	r3, #1
 80099c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099cc:	3b01      	subs	r3, #1
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80099d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d2:	3301      	adds	r3, #1
 80099d4:	643b      	str	r3, [r7, #64]	; 0x40
 80099d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d8:	2b07      	cmp	r3, #7
 80099da:	d9c8      	bls.n	800996e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80099dc:	f7fa f86e 	bl	8003abc <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d902      	bls.n	80099f2 <HAL_SD_ReadBlocks+0x1ae>
 80099ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d112      	bne.n	8009a18 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a48      	ldr	r2, [pc, #288]	; (8009b18 <HAL_SD_ReadBlocks+0x2d4>)
 80099f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e0ec      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a1e:	f240 332a 	movw	r3, #810	; 0x32a
 8009a22:	4013      	ands	r3, r2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d095      	beq.n	8009954 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d022      	beq.n	8009a7c <HAL_SD_ReadBlocks+0x238>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d91f      	bls.n	8009a7c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d01b      	beq.n	8009a7c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f003 f8ef 	bl	800cc2c <SDMMC_CmdStopTransfer>
 8009a4e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d012      	beq.n	8009a7c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a2f      	ldr	r2, [pc, #188]	; (8009b18 <HAL_SD_ReadBlocks+0x2d4>)
 8009a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e0ba      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d012      	beq.n	8009ab0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a22      	ldr	r2, [pc, #136]	; (8009b18 <HAL_SD_ReadBlocks+0x2d4>)
 8009a90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a96:	f043 0208 	orr.w	r2, r3, #8
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0a0      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d012      	beq.n	8009ae4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a15      	ldr	r2, [pc, #84]	; (8009b18 <HAL_SD_ReadBlocks+0x2d4>)
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	f043 0202 	orr.w	r2, r3, #2
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e086      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d063      	beq.n	8009bba <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a08      	ldr	r2, [pc, #32]	; (8009b18 <HAL_SD_ReadBlocks+0x2d4>)
 8009af8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	f043 0220 	orr.w	r2, r3, #32
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e06c      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
 8009b18:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f002 ff28 	bl	800c976 <SDIO_ReadFIFO>
 8009b26:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b32:	3301      	adds	r3, #1
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	0a1b      	lsrs	r3, r3, #8
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b44:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b48:	3301      	adds	r3, #1
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	0c1b      	lsrs	r3, r3, #16
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5e:	3301      	adds	r3, #1
 8009b60:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b64:	3b01      	subs	r3, #1
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	0e1b      	lsrs	r3, r3, #24
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b74:	3301      	adds	r3, #1
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b7e:	f7f9 ff9d 	bl	8003abc <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d902      	bls.n	8009b94 <HAL_SD_ReadBlocks+0x350>
 8009b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d112      	bne.n	8009bba <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <HAL_SD_ReadBlocks+0x3b8>)
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e01b      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_SD_ReadBlocks+0x38a>
 8009bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1a6      	bne.n	8009b1c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	e006      	b.n	8009bf2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3748      	adds	r7, #72	; 0x48
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	004005ff 	.word	0x004005ff

08009c00 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b092      	sub	sp, #72	; 0x48
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c0e:	f7f9 ff55 	bl	8003abc <HAL_GetTick>
 8009c12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d107      	bne.n	8009c32 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e166      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	f040 8159 	bne.w	8009ef2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	441a      	add	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d907      	bls.n	8009c64 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e14d      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2203      	movs	r2, #3
 8009c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d002      	beq.n	8009c82 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	025b      	lsls	r3, r3, #9
 8009c80:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295
 8009c86:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	025b      	lsls	r3, r3, #9
 8009c8c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009c8e:	2390      	movs	r3, #144	; 0x90
 8009c90:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009c92:	2300      	movs	r3, #0
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f107 0218 	add.w	r2, r7, #24
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f002 fee8 	bl	800ca7e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d90a      	bls.n	8009cca <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f002 ff90 	bl	800cbe6 <SDMMC_CmdWriteMultiBlock>
 8009cc6:	6478      	str	r0, [r7, #68]	; 0x44
 8009cc8:	e009      	b.n	8009cde <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2210      	movs	r2, #16
 8009cce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f002 ff63 	bl	800cba2 <SDMMC_CmdWriteSingleBlock>
 8009cdc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d012      	beq.n	8009d0a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a87      	ldr	r2, [pc, #540]	; (8009f08 <HAL_SD_WriteBlocks+0x308>)
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e0fa      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009d0e:	e065      	b.n	8009ddc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d040      	beq.n	8009da0 <HAL_SD_WriteBlocks+0x1a0>
 8009d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d03d      	beq.n	8009da0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009d24:	2300      	movs	r3, #0
 8009d26:	643b      	str	r3, [r7, #64]	; 0x40
 8009d28:	e037      	b.n	8009d9a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d32:	3301      	adds	r3, #1
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	021a      	lsls	r2, r3, #8
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d50:	3b01      	subs	r3, #1
 8009d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	041a      	lsls	r2, r3, #16
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d62:	3301      	adds	r3, #1
 8009d64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	061a      	lsls	r2, r3, #24
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d80:	3b01      	subs	r3, #1
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f107 0214 	add.w	r2, r7, #20
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 fdfe 	bl	800c990 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d96:	3301      	adds	r3, #1
 8009d98:	643b      	str	r3, [r7, #64]	; 0x40
 8009d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d9c:	2b07      	cmp	r3, #7
 8009d9e:	d9c4      	bls.n	8009d2a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009da0:	f7f9 fe8c 	bl	8003abc <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d902      	bls.n	8009db6 <HAL_SD_WriteBlocks+0x1b6>
 8009db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d112      	bne.n	8009ddc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a53      	ldr	r2, [pc, #332]	; (8009f08 <HAL_SD_WriteBlocks+0x308>)
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e091      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de2:	f240 331a 	movw	r3, #794	; 0x31a
 8009de6:	4013      	ands	r3, r2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d091      	beq.n	8009d10 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d022      	beq.n	8009e40 <HAL_SD_WriteBlocks+0x240>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d91f      	bls.n	8009e40 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d01b      	beq.n	8009e40 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f002 ff0d 	bl	800cc2c <SDMMC_CmdStopTransfer>
 8009e12:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d012      	beq.n	8009e40 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a3a      	ldr	r2, [pc, #232]	; (8009f08 <HAL_SD_WriteBlocks+0x308>)
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e05f      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d012      	beq.n	8009e74 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a2d      	ldr	r2, [pc, #180]	; (8009f08 <HAL_SD_WriteBlocks+0x308>)
 8009e54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	f043 0208 	orr.w	r2, r3, #8
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e045      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d012      	beq.n	8009ea8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a20      	ldr	r2, [pc, #128]	; (8009f08 <HAL_SD_WriteBlocks+0x308>)
 8009e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	f043 0202 	orr.w	r2, r3, #2
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e02b      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	f003 0310 	and.w	r3, r3, #16
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d012      	beq.n	8009edc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a13      	ldr	r2, [pc, #76]	; (8009f08 <HAL_SD_WriteBlocks+0x308>)
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	f043 0210 	orr.w	r2, r3, #16
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e011      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ee4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e006      	b.n	8009f00 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
  }
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3748      	adds	r7, #72	; 0x48
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	004005ff 	.word	0x004005ff

08009f0c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f1a:	0f9b      	lsrs	r3, r3, #30
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f26:	0e9b      	lsrs	r3, r3, #26
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	f003 030f 	and.w	r3, r3, #15
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f38:	0e1b      	lsrs	r3, r3, #24
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f4a:	0c1b      	lsrs	r3, r3, #16
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6c:	0d1b      	lsrs	r3, r3, #20
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f8a:	0bdb      	lsrs	r3, r3, #15
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f9c:	0b9b      	lsrs	r3, r3, #14
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fae:	0b5b      	lsrs	r3, r3, #13
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc0:	0b1b      	lsrs	r3, r3, #12
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d163      	bne.n	800a0a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fe0:	009a      	lsls	r2, r3, #2
 8009fe2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009fec:	0f92      	lsrs	r2, r2, #30
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff8:	0edb      	lsrs	r3, r3, #27
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	f003 0307 	and.w	r3, r3, #7
 800a000:	b2da      	uxtb	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00a:	0e1b      	lsrs	r3, r3, #24
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	b2da      	uxtb	r2, r3
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a01c:	0d5b      	lsrs	r3, r3, #21
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	b2da      	uxtb	r2, r3
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a02e:	0c9b      	lsrs	r3, r3, #18
 800a030:	b2db      	uxtb	r3, r3
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	b2da      	uxtb	r2, r3
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a040:	0bdb      	lsrs	r3, r3, #15
 800a042:	b2db      	uxtb	r3, r3
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	7e1b      	ldrb	r3, [r3, #24]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	f003 0307 	and.w	r3, r3, #7
 800a062:	3302      	adds	r3, #2
 800a064:	2201      	movs	r2, #1
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a06e:	fb03 f202 	mul.w	r2, r3, r2
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	7a1b      	ldrb	r3, [r3, #8]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	2201      	movs	r2, #1
 800a082:	409a      	lsls	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a090:	0a52      	lsrs	r2, r2, #9
 800a092:	fb03 f202 	mul.w	r2, r3, r2
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a0:	661a      	str	r2, [r3, #96]	; 0x60
 800a0a2:	e031      	b.n	800a108 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d11d      	bne.n	800a0e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0b0:	041b      	lsls	r3, r3, #16
 800a0b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	029a      	lsls	r2, r3, #10
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	661a      	str	r2, [r3, #96]	; 0x60
 800a0e6:	e00f      	b.n	800a108 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a58      	ldr	r2, [pc, #352]	; (800a250 <HAL_SD_GetCardCSD+0x344>)
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e09d      	b.n	800a244 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a10c:	0b9b      	lsrs	r3, r3, #14
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	b2da      	uxtb	r2, r3
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11e:	09db      	lsrs	r3, r3, #7
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a126:	b2da      	uxtb	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a130:	b2db      	uxtb	r3, r3
 800a132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a136:	b2da      	uxtb	r2, r3
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a140:	0fdb      	lsrs	r3, r3, #31
 800a142:	b2da      	uxtb	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14c:	0f5b      	lsrs	r3, r3, #29
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	b2da      	uxtb	r2, r3
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15e:	0e9b      	lsrs	r3, r3, #26
 800a160:	b2db      	uxtb	r3, r3
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	b2da      	uxtb	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a170:	0d9b      	lsrs	r3, r3, #22
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 030f 	and.w	r3, r3, #15
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	0d5b      	lsrs	r3, r3, #21
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	0bdb      	lsrs	r3, r3, #15
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	0b9b      	lsrs	r3, r3, #14
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1da:	0b5b      	lsrs	r3, r3, #13
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	0b1b      	lsrs	r3, r3, #12
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a202:	0a9b      	lsrs	r3, r3, #10
 800a204:	b2db      	uxtb	r3, r3
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a216:	0a1b      	lsrs	r3, r3, #8
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22a:	085b      	lsrs	r3, r3, #1
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a232:	b2da      	uxtb	r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	004005ff 	.word	0x004005ff

0800a254 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f970 	bl	800a5a4 <SD_SendStatus>
 800a2c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	0a5b      	lsrs	r3, r3, #9
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a2e2:	693b      	ldr	r3, [r7, #16]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2ec:	b5b0      	push	{r4, r5, r7, lr}
 800a2ee:	b094      	sub	sp, #80	; 0x50
 800a2f0:	af04      	add	r7, sp, #16
 800a2f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f002 fb66 	bl	800c9ce <SDIO_GetPowerState>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a30c:	e0b8      	b.n	800a480 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a312:	2b03      	cmp	r3, #3
 800a314:	d02f      	beq.n	800a376 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f002 fd4d 	bl	800cdba <SDMMC_CmdSendCID>
 800a320:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <SD_InitCard+0x40>
    {
      return errorstate;
 800a328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32a:	e0a9      	b.n	800a480 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2100      	movs	r1, #0
 800a332:	4618      	mov	r0, r3
 800a334:	f002 fb90 	bl	800ca58 <SDIO_GetResponse>
 800a338:	4602      	mov	r2, r0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2104      	movs	r1, #4
 800a344:	4618      	mov	r0, r3
 800a346:	f002 fb87 	bl	800ca58 <SDIO_GetResponse>
 800a34a:	4602      	mov	r2, r0
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2108      	movs	r1, #8
 800a356:	4618      	mov	r0, r3
 800a358:	f002 fb7e 	bl	800ca58 <SDIO_GetResponse>
 800a35c:	4602      	mov	r2, r0
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	210c      	movs	r1, #12
 800a368:	4618      	mov	r0, r3
 800a36a:	f002 fb75 	bl	800ca58 <SDIO_GetResponse>
 800a36e:	4602      	mov	r2, r0
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d00d      	beq.n	800a39a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f107 020e 	add.w	r2, r7, #14
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f002 fd53 	bl	800ce34 <SDMMC_CmdSetRelAdd>
 800a38e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <SD_InitCard+0xae>
    {
      return errorstate;
 800a396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a398:	e072      	b.n	800a480 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d036      	beq.n	800a410 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a3a2:	89fb      	ldrh	r3, [r7, #14]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b2:	041b      	lsls	r3, r3, #16
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	f002 fd1d 	bl	800cdf6 <SDMMC_CmdSendCSD>
 800a3bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c6:	e05b      	b.n	800a480 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f002 fb42 	bl	800ca58 <SDIO_GetResponse>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2104      	movs	r1, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f002 fb39 	bl	800ca58 <SDIO_GetResponse>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2108      	movs	r1, #8
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f002 fb30 	bl	800ca58 <SDIO_GetResponse>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	210c      	movs	r1, #12
 800a404:	4618      	mov	r0, r3
 800a406:	f002 fb27 	bl	800ca58 <SDIO_GetResponse>
 800a40a:	4602      	mov	r2, r0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2104      	movs	r1, #4
 800a416:	4618      	mov	r0, r3
 800a418:	f002 fb1e 	bl	800ca58 <SDIO_GetResponse>
 800a41c:	4603      	mov	r3, r0
 800a41e:	0d1a      	lsrs	r2, r3, #20
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a424:	f107 0310 	add.w	r3, r7, #16
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff fd6e 	bl	8009f0c <HAL_SD_GetCardCSD>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a436:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a43a:	e021      	b.n	800a480 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6819      	ldr	r1, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a444:	041b      	lsls	r3, r3, #16
 800a446:	2200      	movs	r2, #0
 800a448:	461c      	mov	r4, r3
 800a44a:	4615      	mov	r5, r2
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	4608      	mov	r0, r1
 800a452:	f002 fc0d 	bl	800cc70 <SDMMC_CmdSelDesel>
 800a456:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <SD_InitCard+0x176>
  {
    return errorstate;
 800a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a460:	e00e      	b.n	800a480 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681d      	ldr	r5, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	466c      	mov	r4, sp
 800a46a:	f103 0210 	add.w	r2, r3, #16
 800a46e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a474:	3304      	adds	r3, #4
 800a476:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a478:	4628      	mov	r0, r5
 800a47a:	f002 fa51 	bl	800c920 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3740      	adds	r7, #64	; 0x40
 800a484:	46bd      	mov	sp, r7
 800a486:	bdb0      	pop	{r4, r5, r7, pc}

0800a488 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f002 fc08 	bl	800ccb6 <SDMMC_CmdGoIdleState>
 800a4a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	e072      	b.n	800a598 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f002 fc1b 	bl	800ccf2 <SDMMC_CmdOperCond>
 800a4bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00d      	beq.n	800a4e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f002 fbf1 	bl	800ccb6 <SDMMC_CmdGoIdleState>
 800a4d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	e05b      	b.n	800a598 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d137      	bne.n	800a55e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f002 fc1b 	bl	800cd30 <SDMMC_CmdAppCommand>
 800a4fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d02d      	beq.n	800a55e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a502:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a506:	e047      	b.n	800a598 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2100      	movs	r1, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f002 fc0e 	bl	800cd30 <SDMMC_CmdAppCommand>
 800a514:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <SD_PowerON+0x98>
    {
      return errorstate;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	e03b      	b.n	800a598 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	491e      	ldr	r1, [pc, #120]	; (800a5a0 <SD_PowerON+0x118>)
 800a526:	4618      	mov	r0, r3
 800a528:	f002 fc24 	bl	800cd74 <SDMMC_CmdAppOperCommand>
 800a52c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a538:	e02e      	b.n	800a598 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f002 fa89 	bl	800ca58 <SDIO_GetResponse>
 800a546:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	0fdb      	lsrs	r3, r3, #31
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <SD_PowerON+0xcc>
 800a550:	2301      	movs	r3, #1
 800a552:	e000      	b.n	800a556 <SD_PowerON+0xce>
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]

    count++;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a564:	4293      	cmp	r3, r2
 800a566:	d802      	bhi.n	800a56e <SD_PowerON+0xe6>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0cc      	beq.n	800a508 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a574:	4293      	cmp	r3, r2
 800a576:	d902      	bls.n	800a57e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a57c:	e00c      	b.n	800a598 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	645a      	str	r2, [r3, #68]	; 0x44
 800a58e:	e002      	b.n	800a596 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	c1100000 	.word	0xc1100000

0800a5a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d102      	bne.n	800a5ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a5b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5b8:	e018      	b.n	800a5ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c2:	041b      	lsls	r3, r3, #16
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	f002 fc55 	bl	800ce76 <SDMMC_CmdSendStatus>
 800a5cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	e009      	b.n	800a5ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f002 fa3a 	bl	800ca58 <SDIO_GetResponse>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e041      	b.n	800a68a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7f8 fea8 	bl	8003370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f000 fd30 	bl	800b098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b082      	sub	sp, #8
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6a1a      	ldr	r2, [r3, #32]
 800a6a8:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10f      	bne.n	800a6d2 <HAL_TIM_Base_DeInit+0x40>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6a1a      	ldr	r2, [r3, #32]
 800a6b8:	f240 4344 	movw	r3, #1092	; 0x444
 800a6bc:	4013      	ands	r3, r2
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d107      	bne.n	800a6d2 <HAL_TIM_Base_DeInit+0x40>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 0201 	bic.w	r2, r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7f8 ff0c 	bl	80034f0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d001      	beq.n	800a754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e03c      	b.n	800a7ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1e      	ldr	r2, [pc, #120]	; (800a7dc <HAL_TIM_Base_Start+0xa0>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d018      	beq.n	800a798 <HAL_TIM_Base_Start+0x5c>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76e:	d013      	beq.n	800a798 <HAL_TIM_Base_Start+0x5c>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a1a      	ldr	r2, [pc, #104]	; (800a7e0 <HAL_TIM_Base_Start+0xa4>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d00e      	beq.n	800a798 <HAL_TIM_Base_Start+0x5c>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a19      	ldr	r2, [pc, #100]	; (800a7e4 <HAL_TIM_Base_Start+0xa8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d009      	beq.n	800a798 <HAL_TIM_Base_Start+0x5c>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a17      	ldr	r2, [pc, #92]	; (800a7e8 <HAL_TIM_Base_Start+0xac>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d004      	beq.n	800a798 <HAL_TIM_Base_Start+0x5c>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a16      	ldr	r2, [pc, #88]	; (800a7ec <HAL_TIM_Base_Start+0xb0>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d111      	bne.n	800a7bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 0307 	and.w	r3, r3, #7
 800a7a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b06      	cmp	r3, #6
 800a7a8:	d010      	beq.n	800a7cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f042 0201 	orr.w	r2, r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ba:	e007      	b.n	800a7cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 0201 	orr.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	40010000 	.word	0x40010000
 800a7e0:	40000400 	.word	0x40000400
 800a7e4:	40000800 	.word	0x40000800
 800a7e8:	40000c00 	.word	0x40000c00
 800a7ec:	40014000 	.word	0x40014000

0800a7f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b01      	cmp	r3, #1
 800a802:	d001      	beq.n	800a808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e044      	b.n	800a892 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0201 	orr.w	r2, r2, #1
 800a81e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1e      	ldr	r2, [pc, #120]	; (800a8a0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d018      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x6c>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a832:	d013      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x6c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a1a      	ldr	r2, [pc, #104]	; (800a8a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d00e      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x6c>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a19      	ldr	r2, [pc, #100]	; (800a8a8 <HAL_TIM_Base_Start_IT+0xb8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d009      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x6c>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a17      	ldr	r2, [pc, #92]	; (800a8ac <HAL_TIM_Base_Start_IT+0xbc>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d004      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x6c>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a16      	ldr	r2, [pc, #88]	; (800a8b0 <HAL_TIM_Base_Start_IT+0xc0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d111      	bne.n	800a880 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b06      	cmp	r3, #6
 800a86c:	d010      	beq.n	800a890 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f042 0201 	orr.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a87e:	e007      	b.n	800a890 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	40010000 	.word	0x40010000
 800a8a4:	40000400 	.word	0x40000400
 800a8a8:	40000800 	.word	0x40000800
 800a8ac:	40000c00 	.word	0x40000c00
 800a8b0:	40014000 	.word	0x40014000

0800a8b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0201 	bic.w	r2, r2, #1
 800a8ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6a1a      	ldr	r2, [r3, #32]
 800a8d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10f      	bne.n	800a8fc <HAL_TIM_Base_Stop_IT+0x48>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a1a      	ldr	r2, [r3, #32]
 800a8e2:	f240 4344 	movw	r3, #1092	; 0x444
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d107      	bne.n	800a8fc <HAL_TIM_Base_Stop_IT+0x48>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 0201 	bic.w	r2, r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e041      	b.n	800a9a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d106      	bne.n	800a93e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f839 	bl	800a9b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2202      	movs	r2, #2
 800a942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f000 fba1 	bl	800b098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d109      	bne.n	800a9e8 <HAL_TIM_PWM_Start+0x24>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	bf14      	ite	ne
 800a9e0:	2301      	movne	r3, #1
 800a9e2:	2300      	moveq	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	e022      	b.n	800aa2e <HAL_TIM_PWM_Start+0x6a>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d109      	bne.n	800aa02 <HAL_TIM_PWM_Start+0x3e>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	bf14      	ite	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	2300      	moveq	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	e015      	b.n	800aa2e <HAL_TIM_PWM_Start+0x6a>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d109      	bne.n	800aa1c <HAL_TIM_PWM_Start+0x58>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	bf14      	ite	ne
 800aa14:	2301      	movne	r3, #1
 800aa16:	2300      	moveq	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	e008      	b.n	800aa2e <HAL_TIM_PWM_Start+0x6a>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	bf14      	ite	ne
 800aa28:	2301      	movne	r3, #1
 800aa2a:	2300      	moveq	r3, #0
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e068      	b.n	800ab08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <HAL_TIM_PWM_Start+0x82>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa44:	e013      	b.n	800aa6e <HAL_TIM_PWM_Start+0xaa>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d104      	bne.n	800aa56 <HAL_TIM_PWM_Start+0x92>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa54:	e00b      	b.n	800aa6e <HAL_TIM_PWM_Start+0xaa>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d104      	bne.n	800aa66 <HAL_TIM_PWM_Start+0xa2>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa64:	e003      	b.n	800aa6e <HAL_TIM_PWM_Start+0xaa>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2201      	movs	r2, #1
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fdb4 	bl	800b5e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a23      	ldr	r2, [pc, #140]	; (800ab10 <HAL_TIM_PWM_Start+0x14c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d107      	bne.n	800aa96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a1d      	ldr	r2, [pc, #116]	; (800ab10 <HAL_TIM_PWM_Start+0x14c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d018      	beq.n	800aad2 <HAL_TIM_PWM_Start+0x10e>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa8:	d013      	beq.n	800aad2 <HAL_TIM_PWM_Start+0x10e>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a19      	ldr	r2, [pc, #100]	; (800ab14 <HAL_TIM_PWM_Start+0x150>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d00e      	beq.n	800aad2 <HAL_TIM_PWM_Start+0x10e>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a17      	ldr	r2, [pc, #92]	; (800ab18 <HAL_TIM_PWM_Start+0x154>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d009      	beq.n	800aad2 <HAL_TIM_PWM_Start+0x10e>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <HAL_TIM_PWM_Start+0x158>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d004      	beq.n	800aad2 <HAL_TIM_PWM_Start+0x10e>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a14      	ldr	r2, [pc, #80]	; (800ab20 <HAL_TIM_PWM_Start+0x15c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d111      	bne.n	800aaf6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f003 0307 	and.w	r3, r3, #7
 800aadc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b06      	cmp	r3, #6
 800aae2:	d010      	beq.n	800ab06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf4:	e007      	b.n	800ab06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f042 0201 	orr.w	r2, r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	40010000 	.word	0x40010000
 800ab14:	40000400 	.word	0x40000400
 800ab18:	40000800 	.word	0x40000800
 800ab1c:	40000c00 	.word	0x40000c00
 800ab20:	40014000 	.word	0x40014000

0800ab24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d122      	bne.n	800ab80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d11b      	bne.n	800ab80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f06f 0202 	mvn.w	r2, #2
 800ab50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fa77 	bl	800b05a <HAL_TIM_IC_CaptureCallback>
 800ab6c:	e005      	b.n	800ab7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fa69 	bl	800b046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fa7a 	bl	800b06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d122      	bne.n	800abd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d11b      	bne.n	800abd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f06f 0204 	mvn.w	r2, #4
 800aba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa4d 	bl	800b05a <HAL_TIM_IC_CaptureCallback>
 800abc0:	e005      	b.n	800abce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa3f 	bl	800b046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fa50 	bl	800b06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	f003 0308 	and.w	r3, r3, #8
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d122      	bne.n	800ac28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	2b08      	cmp	r3, #8
 800abee:	d11b      	bne.n	800ac28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f06f 0208 	mvn.w	r2, #8
 800abf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2204      	movs	r2, #4
 800abfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa23 	bl	800b05a <HAL_TIM_IC_CaptureCallback>
 800ac14:	e005      	b.n	800ac22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa15 	bl	800b046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fa26 	bl	800b06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f003 0310 	and.w	r3, r3, #16
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d122      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	f003 0310 	and.w	r3, r3, #16
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	d11b      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f06f 0210 	mvn.w	r2, #16
 800ac4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2208      	movs	r2, #8
 800ac52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f9f9 	bl	800b05a <HAL_TIM_IC_CaptureCallback>
 800ac68:	e005      	b.n	800ac76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f9eb 	bl	800b046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f9fc 	bl	800b06e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d10e      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d107      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f06f 0201 	mvn.w	r2, #1
 800aca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7f8 f958 	bl	8002f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	2b80      	cmp	r3, #128	; 0x80
 800acb4:	d10e      	bne.n	800acd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc0:	2b80      	cmp	r3, #128	; 0x80
 800acc2:	d107      	bne.n	800acd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800accc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fd26 	bl	800b720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	d10e      	bne.n	800ad00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d107      	bne.n	800ad00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9c1 	bl	800b082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d10e      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d107      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f06f 0220 	mvn.w	r2, #32
 800ad24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fcf0 	bl	800b70c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	e0ae      	b.n	800aeb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b0c      	cmp	r3, #12
 800ad5e:	f200 809f 	bhi.w	800aea0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad9d 	.word	0x0800ad9d
 800ad6c:	0800aea1 	.word	0x0800aea1
 800ad70:	0800aea1 	.word	0x0800aea1
 800ad74:	0800aea1 	.word	0x0800aea1
 800ad78:	0800addd 	.word	0x0800addd
 800ad7c:	0800aea1 	.word	0x0800aea1
 800ad80:	0800aea1 	.word	0x0800aea1
 800ad84:	0800aea1 	.word	0x0800aea1
 800ad88:	0800ae1f 	.word	0x0800ae1f
 800ad8c:	0800aea1 	.word	0x0800aea1
 800ad90:	0800aea1 	.word	0x0800aea1
 800ad94:	0800aea1 	.word	0x0800aea1
 800ad98:	0800ae5f 	.word	0x0800ae5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 f9f8 	bl	800b198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	699a      	ldr	r2, [r3, #24]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f042 0208 	orr.w	r2, r2, #8
 800adb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699a      	ldr	r2, [r3, #24]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 0204 	bic.w	r2, r2, #4
 800adc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6999      	ldr	r1, [r3, #24]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	691a      	ldr	r2, [r3, #16]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	619a      	str	r2, [r3, #24]
      break;
 800adda:	e064      	b.n	800aea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 fa3e 	bl	800b264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	699a      	ldr	r2, [r3, #24]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6999      	ldr	r1, [r3, #24]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	021a      	lsls	r2, r3, #8
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	619a      	str	r2, [r3, #24]
      break;
 800ae1c:	e043      	b.n	800aea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fa89 	bl	800b33c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69da      	ldr	r2, [r3, #28]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f042 0208 	orr.w	r2, r2, #8
 800ae38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69da      	ldr	r2, [r3, #28]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0204 	bic.w	r2, r2, #4
 800ae48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69d9      	ldr	r1, [r3, #28]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	691a      	ldr	r2, [r3, #16]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	61da      	str	r2, [r3, #28]
      break;
 800ae5c:	e023      	b.n	800aea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fad3 	bl	800b410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69da      	ldr	r2, [r3, #28]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69d9      	ldr	r1, [r3, #28]
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	021a      	lsls	r2, r3, #8
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	61da      	str	r2, [r3, #28]
      break;
 800ae9e:	e002      	b.n	800aea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	75fb      	strb	r3, [r7, #23]
      break;
 800aea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d101      	bne.n	800aed4 <HAL_TIM_ConfigClockSource+0x1c>
 800aed0:	2302      	movs	r3, #2
 800aed2:	e0b4      	b.n	800b03e <HAL_TIM_ConfigClockSource+0x186>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aefa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af0c:	d03e      	beq.n	800af8c <HAL_TIM_ConfigClockSource+0xd4>
 800af0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af12:	f200 8087 	bhi.w	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af1a:	f000 8086 	beq.w	800b02a <HAL_TIM_ConfigClockSource+0x172>
 800af1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af22:	d87f      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af24:	2b70      	cmp	r3, #112	; 0x70
 800af26:	d01a      	beq.n	800af5e <HAL_TIM_ConfigClockSource+0xa6>
 800af28:	2b70      	cmp	r3, #112	; 0x70
 800af2a:	d87b      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af2c:	2b60      	cmp	r3, #96	; 0x60
 800af2e:	d050      	beq.n	800afd2 <HAL_TIM_ConfigClockSource+0x11a>
 800af30:	2b60      	cmp	r3, #96	; 0x60
 800af32:	d877      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af34:	2b50      	cmp	r3, #80	; 0x50
 800af36:	d03c      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0xfa>
 800af38:	2b50      	cmp	r3, #80	; 0x50
 800af3a:	d873      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af3c:	2b40      	cmp	r3, #64	; 0x40
 800af3e:	d058      	beq.n	800aff2 <HAL_TIM_ConfigClockSource+0x13a>
 800af40:	2b40      	cmp	r3, #64	; 0x40
 800af42:	d86f      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af44:	2b30      	cmp	r3, #48	; 0x30
 800af46:	d064      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x15a>
 800af48:	2b30      	cmp	r3, #48	; 0x30
 800af4a:	d86b      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af4c:	2b20      	cmp	r3, #32
 800af4e:	d060      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x15a>
 800af50:	2b20      	cmp	r3, #32
 800af52:	d867      	bhi.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
 800af54:	2b00      	cmp	r3, #0
 800af56:	d05c      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x15a>
 800af58:	2b10      	cmp	r3, #16
 800af5a:	d05a      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x15a>
 800af5c:	e062      	b.n	800b024 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	6899      	ldr	r1, [r3, #8]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	f000 fb19 	bl	800b5a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	609a      	str	r2, [r3, #8]
      break;
 800af8a:	e04f      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6818      	ldr	r0, [r3, #0]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	6899      	ldr	r1, [r3, #8]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f000 fb02 	bl	800b5a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689a      	ldr	r2, [r3, #8]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afae:	609a      	str	r2, [r3, #8]
      break;
 800afb0:	e03c      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6859      	ldr	r1, [r3, #4]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	461a      	mov	r2, r3
 800afc0:	f000 fa76 	bl	800b4b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2150      	movs	r1, #80	; 0x50
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 facf 	bl	800b56e <TIM_ITRx_SetConfig>
      break;
 800afd0:	e02c      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	6859      	ldr	r1, [r3, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	461a      	mov	r2, r3
 800afe0:	f000 fa95 	bl	800b50e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2160      	movs	r1, #96	; 0x60
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fabf 	bl	800b56e <TIM_ITRx_SetConfig>
      break;
 800aff0:	e01c      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	6859      	ldr	r1, [r3, #4]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	461a      	mov	r2, r3
 800b000:	f000 fa56 	bl	800b4b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2140      	movs	r1, #64	; 0x40
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 faaf 	bl	800b56e <TIM_ITRx_SetConfig>
      break;
 800b010:	e00c      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4619      	mov	r1, r3
 800b01c:	4610      	mov	r0, r2
 800b01e:	f000 faa6 	bl	800b56e <TIM_ITRx_SetConfig>
      break;
 800b022:	e003      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	73fb      	strb	r3, [r7, #15]
      break;
 800b028:	e000      	b.n	800b02c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b02a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b046:	b480      	push	{r7}
 800b048:	b083      	sub	sp, #12
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b076:	bf00      	nop
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b08a:	bf00      	nop
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
	...

0800b098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a34      	ldr	r2, [pc, #208]	; (800b17c <TIM_Base_SetConfig+0xe4>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00f      	beq.n	800b0d0 <TIM_Base_SetConfig+0x38>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b6:	d00b      	beq.n	800b0d0 <TIM_Base_SetConfig+0x38>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a31      	ldr	r2, [pc, #196]	; (800b180 <TIM_Base_SetConfig+0xe8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d007      	beq.n	800b0d0 <TIM_Base_SetConfig+0x38>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a30      	ldr	r2, [pc, #192]	; (800b184 <TIM_Base_SetConfig+0xec>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d003      	beq.n	800b0d0 <TIM_Base_SetConfig+0x38>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a2f      	ldr	r2, [pc, #188]	; (800b188 <TIM_Base_SetConfig+0xf0>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d108      	bne.n	800b0e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a25      	ldr	r2, [pc, #148]	; (800b17c <TIM_Base_SetConfig+0xe4>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d01b      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f0:	d017      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a22      	ldr	r2, [pc, #136]	; (800b180 <TIM_Base_SetConfig+0xe8>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d013      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a21      	ldr	r2, [pc, #132]	; (800b184 <TIM_Base_SetConfig+0xec>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d00f      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a20      	ldr	r2, [pc, #128]	; (800b188 <TIM_Base_SetConfig+0xf0>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d00b      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a1f      	ldr	r2, [pc, #124]	; (800b18c <TIM_Base_SetConfig+0xf4>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d007      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a1e      	ldr	r2, [pc, #120]	; (800b190 <TIM_Base_SetConfig+0xf8>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d003      	beq.n	800b122 <TIM_Base_SetConfig+0x8a>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a1d      	ldr	r2, [pc, #116]	; (800b194 <TIM_Base_SetConfig+0xfc>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d108      	bne.n	800b134 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a08      	ldr	r2, [pc, #32]	; (800b17c <TIM_Base_SetConfig+0xe4>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d103      	bne.n	800b168 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	691a      	ldr	r2, [r3, #16]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	615a      	str	r2, [r3, #20]
}
 800b16e:	bf00      	nop
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	40010000 	.word	0x40010000
 800b180:	40000400 	.word	0x40000400
 800b184:	40000800 	.word	0x40000800
 800b188:	40000c00 	.word	0x40000c00
 800b18c:	40014000 	.word	0x40014000
 800b190:	40014400 	.word	0x40014400
 800b194:	40014800 	.word	0x40014800

0800b198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	f023 0201 	bic.w	r2, r3, #1
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 0303 	bic.w	r3, r3, #3
 800b1ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f023 0302 	bic.w	r3, r3, #2
 800b1e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a1c      	ldr	r2, [pc, #112]	; (800b260 <TIM_OC1_SetConfig+0xc8>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d10c      	bne.n	800b20e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f023 0308 	bic.w	r3, r3, #8
 800b1fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	4313      	orrs	r3, r2
 800b204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f023 0304 	bic.w	r3, r3, #4
 800b20c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a13      	ldr	r2, [pc, #76]	; (800b260 <TIM_OC1_SetConfig+0xc8>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d111      	bne.n	800b23a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b21c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	4313      	orrs	r3, r2
 800b238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	621a      	str	r2, [r3, #32]
}
 800b254:	bf00      	nop
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	40010000 	.word	0x40010000

0800b264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	f023 0210 	bic.w	r2, r3, #16
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	021b      	lsls	r3, r3, #8
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f023 0320 	bic.w	r3, r3, #32
 800b2ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	011b      	lsls	r3, r3, #4
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a1e      	ldr	r2, [pc, #120]	; (800b338 <TIM_OC2_SetConfig+0xd4>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d10d      	bne.n	800b2e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a15      	ldr	r2, [pc, #84]	; (800b338 <TIM_OC2_SetConfig+0xd4>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d113      	bne.n	800b310 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	4313      	orrs	r3, r2
 800b302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	621a      	str	r2, [r3, #32]
}
 800b32a:	bf00      	nop
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	40010000 	.word	0x40010000

0800b33c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	021b      	lsls	r3, r3, #8
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a1d      	ldr	r2, [pc, #116]	; (800b40c <TIM_OC3_SetConfig+0xd0>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d10d      	bne.n	800b3b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a14      	ldr	r2, [pc, #80]	; (800b40c <TIM_OC3_SetConfig+0xd0>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d113      	bne.n	800b3e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	011b      	lsls	r3, r3, #4
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	011b      	lsls	r3, r3, #4
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	621a      	str	r2, [r3, #32]
}
 800b400:	bf00      	nop
 800b402:	371c      	adds	r7, #28
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	40010000 	.word	0x40010000

0800b410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	021b      	lsls	r3, r3, #8
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b45a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	031b      	lsls	r3, r3, #12
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	4313      	orrs	r3, r2
 800b466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a10      	ldr	r2, [pc, #64]	; (800b4ac <TIM_OC4_SetConfig+0x9c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d109      	bne.n	800b484 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	019b      	lsls	r3, r3, #6
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000

0800b4b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	f023 0201 	bic.w	r2, r3, #1
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	011b      	lsls	r3, r3, #4
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f023 030a 	bic.w	r3, r3, #10
 800b4ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	621a      	str	r2, [r3, #32]
}
 800b502:	bf00      	nop
 800b504:	371c      	adds	r7, #28
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b50e:	b480      	push	{r7}
 800b510:	b087      	sub	sp, #28
 800b512:	af00      	add	r7, sp, #0
 800b514:	60f8      	str	r0, [r7, #12]
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f023 0210 	bic.w	r2, r3, #16
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6a1b      	ldr	r3, [r3, #32]
 800b530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	031b      	lsls	r3, r3, #12
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	4313      	orrs	r3, r2
 800b542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b54a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	4313      	orrs	r3, r2
 800b554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	621a      	str	r2, [r3, #32]
}
 800b562:	bf00      	nop
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b56e:	b480      	push	{r7}
 800b570:	b085      	sub	sp, #20
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	f043 0307 	orr.w	r3, r3, #7
 800b590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	609a      	str	r2, [r3, #8]
}
 800b598:	bf00      	nop
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	021a      	lsls	r2, r3, #8
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	609a      	str	r2, [r3, #8]
}
 800b5d8:	bf00      	nop
 800b5da:	371c      	adds	r7, #28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f003 031f 	and.w	r3, r3, #31
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6a1a      	ldr	r2, [r3, #32]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	43db      	mvns	r3, r3
 800b606:	401a      	ands	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f003 031f 	and.w	r3, r3, #31
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	fa01 f303 	lsl.w	r3, r1, r3
 800b61c:	431a      	orrs	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	621a      	str	r2, [r3, #32]
}
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b640:	2b01      	cmp	r3, #1
 800b642:	d101      	bne.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b644:	2302      	movs	r3, #2
 800b646:	e050      	b.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b66e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a1c      	ldr	r2, [pc, #112]	; (800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d018      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b694:	d013      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a18      	ldr	r2, [pc, #96]	; (800b6fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d00e      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a16      	ldr	r2, [pc, #88]	; (800b700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d009      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a15      	ldr	r2, [pc, #84]	; (800b704 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d004      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a13      	ldr	r2, [pc, #76]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d10c      	bne.n	800b6d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	40010000 	.word	0x40010000
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00
 800b708:	40014000 	.word	0x40014000

0800b70c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e03f      	b.n	800b7c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d106      	bne.n	800b760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7f7 ff02 	bl	8003564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2224      	movs	r2, #36	; 0x24
 800b764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68da      	ldr	r2, [r3, #12]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fe5d 	bl	800c438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	691a      	ldr	r2, [r3, #16]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b78c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	695a      	ldr	r2, [r3, #20]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b79c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2220      	movs	r2, #32
 800b7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e021      	b.n	800b824 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2224      	movs	r2, #36	; 0x24
 800b7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68da      	ldr	r2, [r3, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7f6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7f7 ff41 	bl	8003680 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08a      	sub	sp, #40	; 0x28
 800b830:	af02      	add	r7, sp, #8
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	4613      	mov	r3, r2
 800b83a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b20      	cmp	r3, #32
 800b84a:	d17c      	bne.n	800b946 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <HAL_UART_Transmit+0x2c>
 800b852:	88fb      	ldrh	r3, [r7, #6]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e075      	b.n	800b948 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b862:	2b01      	cmp	r3, #1
 800b864:	d101      	bne.n	800b86a <HAL_UART_Transmit+0x3e>
 800b866:	2302      	movs	r3, #2
 800b868:	e06e      	b.n	800b948 <HAL_UART_Transmit+0x11c>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2221      	movs	r2, #33	; 0x21
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b880:	f7f8 f91c 	bl	8003abc <HAL_GetTick>
 800b884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	88fa      	ldrh	r2, [r7, #6]
 800b88a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	88fa      	ldrh	r2, [r7, #6]
 800b890:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b89a:	d108      	bne.n	800b8ae <HAL_UART_Transmit+0x82>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d104      	bne.n	800b8ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	61bb      	str	r3, [r7, #24]
 800b8ac:	e003      	b.n	800b8b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b8be:	e02a      	b.n	800b916 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2180      	movs	r1, #128	; 0x80
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f000 fb6e 	bl	800bfac <UART_WaitOnFlagUntilTimeout>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e036      	b.n	800b948 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10b      	bne.n	800b8f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	3302      	adds	r3, #2
 800b8f4:	61bb      	str	r3, [r7, #24]
 800b8f6:	e007      	b.n	800b908 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	781a      	ldrb	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	3301      	adds	r3, #1
 800b906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	3b01      	subs	r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1cf      	bne.n	800b8c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2200      	movs	r2, #0
 800b928:	2140      	movs	r1, #64	; 0x40
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 fb3e 	bl	800bfac <UART_WaitOnFlagUntilTimeout>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e006      	b.n	800b948 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2220      	movs	r2, #32
 800b93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	e000      	b.n	800b948 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b946:	2302      	movs	r3, #2
  }
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3720      	adds	r7, #32
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b20      	cmp	r3, #32
 800b968:	d11d      	bne.n	800b9a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <HAL_UART_Receive_IT+0x26>
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e016      	b.n	800b9a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b980:	2b01      	cmp	r3, #1
 800b982:	d101      	bne.n	800b988 <HAL_UART_Receive_IT+0x38>
 800b984:	2302      	movs	r3, #2
 800b986:	e00f      	b.n	800b9a8 <HAL_UART_Receive_IT+0x58>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b996:	88fb      	ldrh	r3, [r7, #6]
 800b998:	461a      	mov	r2, r3
 800b99a:	68b9      	ldr	r1, [r7, #8]
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 fb73 	bl	800c088 <UART_Start_Receive_IT>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	e000      	b.n	800b9a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b9a6:	2302      	movs	r3, #2
  }
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08c      	sub	sp, #48	; 0x30
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d152      	bne.n	800ba70 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b9d0:	88fb      	ldrh	r3, [r7, #6]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e04b      	b.n	800ba72 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d101      	bne.n	800b9e8 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	e044      	b.n	800ba72 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b9f6:	88fb      	ldrh	r3, [r7, #6]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 fb43 	bl	800c088 <UART_Start_Receive_IT>
 800ba02:	4603      	mov	r3, r0
 800ba04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ba08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d12c      	bne.n	800ba6a <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d125      	bne.n	800ba64 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba18:	2300      	movs	r3, #0
 800ba1a:	613b      	str	r3, [r7, #16]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	613b      	str	r3, [r7, #16]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	613b      	str	r3, [r7, #16]
 800ba2c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	330c      	adds	r3, #12
 800ba34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	e853 3f00 	ldrex	r3, [r3]
 800ba3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f043 0310 	orr.w	r3, r3, #16
 800ba44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	330c      	adds	r3, #12
 800ba4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba4e:	627a      	str	r2, [r7, #36]	; 0x24
 800ba50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6a39      	ldr	r1, [r7, #32]
 800ba54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e5      	bne.n	800ba2e <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800ba62:	e002      	b.n	800ba6a <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ba6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba6e:	e000      	b.n	800ba72 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800ba70:	2302      	movs	r3, #2
  }
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3730      	adds	r7, #48	; 0x30
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b0ba      	sub	sp, #232	; 0xe8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800baa8:	2300      	movs	r3, #0
 800baaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800baae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab2:	f003 030f 	and.w	r3, r3, #15
 800bab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800baba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10f      	bne.n	800bae2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac6:	f003 0320 	and.w	r3, r3, #32
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d009      	beq.n	800bae2 <HAL_UART_IRQHandler+0x66>
 800bace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad2:	f003 0320 	and.w	r3, r3, #32
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fbf1 	bl	800c2c2 <UART_Receive_IT>
      return;
 800bae0:	e256      	b.n	800bf90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 80de 	beq.w	800bca8 <HAL_UART_IRQHandler+0x22c>
 800baec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d106      	bne.n	800bb06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800baf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bafc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 80d1 	beq.w	800bca8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00b      	beq.n	800bb2a <HAL_UART_IRQHandler+0xae>
 800bb12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb22:	f043 0201 	orr.w	r2, r3, #1
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00b      	beq.n	800bb4e <HAL_UART_IRQHandler+0xd2>
 800bb36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	f043 0202 	orr.w	r2, r3, #2
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00b      	beq.n	800bb72 <HAL_UART_IRQHandler+0xf6>
 800bb5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d005      	beq.n	800bb72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	f043 0204 	orr.w	r2, r3, #4
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb76:	f003 0308 	and.w	r3, r3, #8
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d011      	beq.n	800bba2 <HAL_UART_IRQHandler+0x126>
 800bb7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb82:	f003 0320 	and.w	r3, r3, #32
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d105      	bne.n	800bb96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d005      	beq.n	800bba2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9a:	f043 0208 	orr.w	r2, r3, #8
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 81ed 	beq.w	800bf86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bbac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb0:	f003 0320 	and.w	r3, r3, #32
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d008      	beq.n	800bbca <HAL_UART_IRQHandler+0x14e>
 800bbb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbbc:	f003 0320 	and.w	r3, r3, #32
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fb7c 	bl	800c2c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	bf0c      	ite	eq
 800bbd8:	2301      	moveq	r3, #1
 800bbda:	2300      	movne	r3, #0
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe6:	f003 0308 	and.w	r3, r3, #8
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d103      	bne.n	800bbf6 <HAL_UART_IRQHandler+0x17a>
 800bbee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d04f      	beq.n	800bc96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fa84 	bl	800c104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc06:	2b40      	cmp	r3, #64	; 0x40
 800bc08:	d141      	bne.n	800bc8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3314      	adds	r3, #20
 800bc10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3314      	adds	r3, #20
 800bc32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1d9      	bne.n	800bc0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d013      	beq.n	800bc86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc62:	4a7d      	ldr	r2, [pc, #500]	; (800be58 <HAL_UART_IRQHandler+0x3dc>)
 800bc64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7f8 ff09 	bl	8004a82 <HAL_DMA_Abort_IT>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d016      	beq.n	800bca4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc80:	4610      	mov	r0, r2
 800bc82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc84:	e00e      	b.n	800bca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7f7 f9b6 	bl	8002ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc8c:	e00a      	b.n	800bca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7f7 f9b2 	bl	8002ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc94:	e006      	b.n	800bca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7f7 f9ae 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bca2:	e170      	b.n	800bf86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca4:	bf00      	nop
    return;
 800bca6:	e16e      	b.n	800bf86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	f040 814a 	bne.w	800bf46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb6:	f003 0310 	and.w	r3, r3, #16
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 8143 	beq.w	800bf46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bcc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 813c 	beq.w	800bf46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60bb      	str	r3, [r7, #8]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	60bb      	str	r3, [r7, #8]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	60bb      	str	r3, [r7, #8]
 800bce2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcee:	2b40      	cmp	r3, #64	; 0x40
 800bcf0:	f040 80b4 	bne.w	800be5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f000 8140 	beq.w	800bf8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd12:	429a      	cmp	r2, r3
 800bd14:	f080 8139 	bcs.w	800bf8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd2a:	f000 8088 	beq.w	800be3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	330c      	adds	r3, #12
 800bd34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd3c:	e853 3f00 	ldrex	r3, [r3]
 800bd40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	330c      	adds	r3, #12
 800bd56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd6a:	e841 2300 	strex	r3, r2, [r1]
 800bd6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1d9      	bne.n	800bd2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3314      	adds	r3, #20
 800bd80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3314      	adds	r3, #20
 800bd9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bda2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bda6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bdb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e1      	bne.n	800bd7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3314      	adds	r3, #20
 800bdbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bdc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3314      	adds	r3, #20
 800bdd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdda:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bddc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bde0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bde2:	e841 2300 	strex	r3, r2, [r1]
 800bde6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bde8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1e3      	bne.n	800bdb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2220      	movs	r2, #32
 800bdf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	330c      	adds	r3, #12
 800be02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be0e:	f023 0310 	bic.w	r3, r3, #16
 800be12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	330c      	adds	r3, #12
 800be1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800be20:	65ba      	str	r2, [r7, #88]	; 0x58
 800be22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be28:	e841 2300 	strex	r3, r2, [r1]
 800be2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e3      	bne.n	800bdfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f8 fdb2 	bl	80049a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be46:	b29b      	uxth	r3, r3
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	4619      	mov	r1, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f007 fb88 	bl	8013564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be54:	e099      	b.n	800bf8a <HAL_UART_IRQHandler+0x50e>
 800be56:	bf00      	nop
 800be58:	0800c1cb 	.word	0x0800c1cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be64:	b29b      	uxth	r3, r3
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be70:	b29b      	uxth	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 808b 	beq.w	800bf8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800be78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8086 	beq.w	800bf8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	330c      	adds	r3, #12
 800be88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8c:	e853 3f00 	ldrex	r3, [r3]
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	330c      	adds	r3, #12
 800bea2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bea6:	647a      	str	r2, [r7, #68]	; 0x44
 800bea8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800beac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800beb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e3      	bne.n	800be82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3314      	adds	r3, #20
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	623b      	str	r3, [r7, #32]
   return(result);
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	f023 0301 	bic.w	r3, r3, #1
 800bed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3314      	adds	r3, #20
 800beda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bede:	633a      	str	r2, [r7, #48]	; 0x30
 800bee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1e3      	bne.n	800beba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f023 0310 	bic.w	r3, r3, #16
 800bf16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	330c      	adds	r3, #12
 800bf20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bf24:	61fa      	str	r2, [r7, #28]
 800bf26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	69b9      	ldr	r1, [r7, #24]
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	617b      	str	r3, [r7, #20]
   return(result);
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e3      	bne.n	800bf00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f007 fb10 	bl	8013564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf44:	e023      	b.n	800bf8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <HAL_UART_IRQHandler+0x4ea>
 800bf52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f947 	bl	800c1f2 <UART_Transmit_IT>
    return;
 800bf64:	e014      	b.n	800bf90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00e      	beq.n	800bf90 <HAL_UART_IRQHandler+0x514>
 800bf72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d008      	beq.n	800bf90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f987 	bl	800c292 <UART_EndTransmit_IT>
    return;
 800bf84:	e004      	b.n	800bf90 <HAL_UART_IRQHandler+0x514>
    return;
 800bf86:	bf00      	nop
 800bf88:	e002      	b.n	800bf90 <HAL_UART_IRQHandler+0x514>
      return;
 800bf8a:	bf00      	nop
 800bf8c:	e000      	b.n	800bf90 <HAL_UART_IRQHandler+0x514>
      return;
 800bf8e:	bf00      	nop
  }
}
 800bf90:	37e8      	adds	r7, #232	; 0xe8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop

0800bf98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b090      	sub	sp, #64	; 0x40
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfbc:	e050      	b.n	800c060 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d04c      	beq.n	800c060 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bfc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d007      	beq.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x30>
 800bfcc:	f7f7 fd76 	bl	8003abc <HAL_GetTick>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d241      	bcs.n	800c060 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	330c      	adds	r3, #12
 800bfe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	e853 3f00 	ldrex	r3, [r3]
 800bfea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	330c      	adds	r3, #12
 800bffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bffc:	637a      	str	r2, [r7, #52]	; 0x34
 800bffe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c004:	e841 2300 	strex	r3, r2, [r1]
 800c008:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e5      	bne.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3314      	adds	r3, #20
 800c016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	613b      	str	r3, [r7, #16]
   return(result);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	63bb      	str	r3, [r7, #56]	; 0x38
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3314      	adds	r3, #20
 800c02e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c030:	623a      	str	r2, [r7, #32]
 800c032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	69f9      	ldr	r1, [r7, #28]
 800c036:	6a3a      	ldr	r2, [r7, #32]
 800c038:	e841 2300 	strex	r3, r2, [r1]
 800c03c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e5      	bne.n	800c010 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2220      	movs	r2, #32
 800c048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2220      	movs	r2, #32
 800c050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e00f      	b.n	800c080 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	4013      	ands	r3, r2
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	bf0c      	ite	eq
 800c070:	2301      	moveq	r3, #1
 800c072:	2300      	movne	r3, #0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	461a      	mov	r2, r3
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d09f      	beq.n	800bfbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3740      	adds	r7, #64	; 0x40
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	4613      	mov	r3, r2
 800c094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	68ba      	ldr	r2, [r7, #8]
 800c09a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	88fa      	ldrh	r2, [r7, #6]
 800c0a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	88fa      	ldrh	r2, [r7, #6]
 800c0a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2222      	movs	r2, #34	; 0x22
 800c0b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d007      	beq.n	800c0d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	695a      	ldr	r2, [r3, #20]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f042 0201 	orr.w	r2, r2, #1
 800c0e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68da      	ldr	r2, [r3, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f042 0220 	orr.w	r2, r2, #32
 800c0f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c104:	b480      	push	{r7}
 800c106:	b095      	sub	sp, #84	; 0x54
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	330c      	adds	r3, #12
 800c112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c116:	e853 3f00 	ldrex	r3, [r3]
 800c11a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c122:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	330c      	adds	r3, #12
 800c12a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c12c:	643a      	str	r2, [r7, #64]	; 0x40
 800c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c134:	e841 2300 	strex	r3, r2, [r1]
 800c138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1e5      	bne.n	800c10c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3314      	adds	r3, #20
 800c146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	e853 3f00 	ldrex	r3, [r3]
 800c14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	f023 0301 	bic.w	r3, r3, #1
 800c156:	64bb      	str	r3, [r7, #72]	; 0x48
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3314      	adds	r3, #20
 800c15e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c160:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c168:	e841 2300 	strex	r3, r2, [r1]
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1e5      	bne.n	800c140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d119      	bne.n	800c1b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	330c      	adds	r3, #12
 800c182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	e853 3f00 	ldrex	r3, [r3]
 800c18a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	f023 0310 	bic.w	r3, r3, #16
 800c192:	647b      	str	r3, [r7, #68]	; 0x44
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	330c      	adds	r3, #12
 800c19a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c19c:	61ba      	str	r2, [r7, #24]
 800c19e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a0:	6979      	ldr	r1, [r7, #20]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	e841 2300 	strex	r3, r2, [r1]
 800c1a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e5      	bne.n	800c17c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c1be:	bf00      	nop
 800c1c0:	3754      	adds	r7, #84	; 0x54
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f7f6 ff07 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1ea:	bf00      	nop
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b085      	sub	sp, #20
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b21      	cmp	r3, #33	; 0x21
 800c204:	d13e      	bne.n	800c284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c20e:	d114      	bne.n	800c23a <UART_Transmit_IT+0x48>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d110      	bne.n	800c23a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c22c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	1c9a      	adds	r2, r3, #2
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	621a      	str	r2, [r3, #32]
 800c238:	e008      	b.n	800c24c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	1c59      	adds	r1, r3, #1
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	6211      	str	r1, [r2, #32]
 800c244:	781a      	ldrb	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c250:	b29b      	uxth	r3, r3
 800c252:	3b01      	subs	r3, #1
 800c254:	b29b      	uxth	r3, r3
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	4619      	mov	r1, r3
 800c25a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d10f      	bne.n	800c280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c26e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68da      	ldr	r2, [r3, #12]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c27e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	e000      	b.n	800c286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c284:	2302      	movs	r3, #2
  }
}
 800c286:	4618      	mov	r0, r3
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b082      	sub	sp, #8
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff fe70 	bl	800bf98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b08c      	sub	sp, #48	; 0x30
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b22      	cmp	r3, #34	; 0x22
 800c2d4:	f040 80ab 	bne.w	800c42e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e0:	d117      	bne.n	800c312 <UART_Receive_IT+0x50>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d113      	bne.n	800c312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c300:	b29a      	uxth	r2, r3
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30a:	1c9a      	adds	r2, r3, #2
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	629a      	str	r2, [r3, #40]	; 0x28
 800c310:	e026      	b.n	800c360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c316:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c324:	d007      	beq.n	800c336 <UART_Receive_IT+0x74>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10a      	bne.n	800c344 <UART_Receive_IT+0x82>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d106      	bne.n	800c344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e008      	b.n	800c356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c350:	b2da      	uxtb	r2, r3
 800c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35a:	1c5a      	adds	r2, r3, #1
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c364:	b29b      	uxth	r3, r3
 800c366:	3b01      	subs	r3, #1
 800c368:	b29b      	uxth	r3, r3
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	4619      	mov	r1, r3
 800c36e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c370:	2b00      	cmp	r3, #0
 800c372:	d15a      	bne.n	800c42a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0220 	bic.w	r2, r2, #32
 800c382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	695a      	ldr	r2, [r3, #20]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0201 	bic.w	r2, r2, #1
 800c3a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d135      	bne.n	800c420 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	330c      	adds	r3, #12
 800c3c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f023 0310 	bic.w	r3, r3, #16
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	330c      	adds	r3, #12
 800c3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3da:	623a      	str	r2, [r7, #32]
 800c3dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3de:	69f9      	ldr	r1, [r7, #28]
 800c3e0:	6a3a      	ldr	r2, [r7, #32]
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e5      	bne.n	800c3ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0310 	and.w	r3, r3, #16
 800c3f8:	2b10      	cmp	r3, #16
 800c3fa:	d10a      	bne.n	800c412 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	60fb      	str	r3, [r7, #12]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f007 f8a3 	bl	8013564 <HAL_UARTEx_RxEventCallback>
 800c41e:	e002      	b.n	800c426 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f002 fc4d 	bl	800ecc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	e002      	b.n	800c430 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e000      	b.n	800c430 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c42e:	2302      	movs	r3, #2
  }
}
 800c430:	4618      	mov	r0, r3
 800c432:	3730      	adds	r7, #48	; 0x30
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c43c:	b0c0      	sub	sp, #256	; 0x100
 800c43e:	af00      	add	r7, sp, #0
 800c440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c454:	68d9      	ldr	r1, [r3, #12]
 800c456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	ea40 0301 	orr.w	r3, r0, r1
 800c460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	431a      	orrs	r2, r3
 800c470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	431a      	orrs	r2, r3
 800c478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	4313      	orrs	r3, r2
 800c480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c490:	f021 010c 	bic.w	r1, r1, #12
 800c494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c49e:	430b      	orrs	r3, r1
 800c4a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4b2:	6999      	ldr	r1, [r3, #24]
 800c4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	ea40 0301 	orr.w	r3, r0, r1
 800c4be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b8f      	ldr	r3, [pc, #572]	; (800c704 <UART_SetConfig+0x2cc>)
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d005      	beq.n	800c4d8 <UART_SetConfig+0xa0>
 800c4cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4b8d      	ldr	r3, [pc, #564]	; (800c708 <UART_SetConfig+0x2d0>)
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d104      	bne.n	800c4e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c4d8:	f7fc fb70 	bl	8008bbc <HAL_RCC_GetPCLK2Freq>
 800c4dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c4e0:	e003      	b.n	800c4ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c4e2:	f7fc fb57 	bl	8008b94 <HAL_RCC_GetPCLK1Freq>
 800c4e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ee:	69db      	ldr	r3, [r3, #28]
 800c4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4f4:	f040 810c 	bne.w	800c710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c4f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c50a:	4622      	mov	r2, r4
 800c50c:	462b      	mov	r3, r5
 800c50e:	1891      	adds	r1, r2, r2
 800c510:	65b9      	str	r1, [r7, #88]	; 0x58
 800c512:	415b      	adcs	r3, r3
 800c514:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c51a:	4621      	mov	r1, r4
 800c51c:	eb12 0801 	adds.w	r8, r2, r1
 800c520:	4629      	mov	r1, r5
 800c522:	eb43 0901 	adc.w	r9, r3, r1
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c53a:	4690      	mov	r8, r2
 800c53c:	4699      	mov	r9, r3
 800c53e:	4623      	mov	r3, r4
 800c540:	eb18 0303 	adds.w	r3, r8, r3
 800c544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c548:	462b      	mov	r3, r5
 800c54a:	eb49 0303 	adc.w	r3, r9, r3
 800c54e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c55e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c566:	460b      	mov	r3, r1
 800c568:	18db      	adds	r3, r3, r3
 800c56a:	653b      	str	r3, [r7, #80]	; 0x50
 800c56c:	4613      	mov	r3, r2
 800c56e:	eb42 0303 	adc.w	r3, r2, r3
 800c572:	657b      	str	r3, [r7, #84]	; 0x54
 800c574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c57c:	f7f4 fb9c 	bl	8000cb8 <__aeabi_uldivmod>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4b61      	ldr	r3, [pc, #388]	; (800c70c <UART_SetConfig+0x2d4>)
 800c586:	fba3 2302 	umull	r2, r3, r3, r2
 800c58a:	095b      	lsrs	r3, r3, #5
 800c58c:	011c      	lsls	r4, r3, #4
 800c58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c592:	2200      	movs	r2, #0
 800c594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c59c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	464b      	mov	r3, r9
 800c5a4:	1891      	adds	r1, r2, r2
 800c5a6:	64b9      	str	r1, [r7, #72]	; 0x48
 800c5a8:	415b      	adcs	r3, r3
 800c5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5b0:	4641      	mov	r1, r8
 800c5b2:	eb12 0a01 	adds.w	sl, r2, r1
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	eb43 0b01 	adc.w	fp, r3, r1
 800c5bc:	f04f 0200 	mov.w	r2, #0
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c5c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c5cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5d0:	4692      	mov	sl, r2
 800c5d2:	469b      	mov	fp, r3
 800c5d4:	4643      	mov	r3, r8
 800c5d6:	eb1a 0303 	adds.w	r3, sl, r3
 800c5da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5de:	464b      	mov	r3, r9
 800c5e0:	eb4b 0303 	adc.w	r3, fp, r3
 800c5e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c5f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c5f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	18db      	adds	r3, r3, r3
 800c600:	643b      	str	r3, [r7, #64]	; 0x40
 800c602:	4613      	mov	r3, r2
 800c604:	eb42 0303 	adc.w	r3, r2, r3
 800c608:	647b      	str	r3, [r7, #68]	; 0x44
 800c60a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c60e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c612:	f7f4 fb51 	bl	8000cb8 <__aeabi_uldivmod>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4611      	mov	r1, r2
 800c61c:	4b3b      	ldr	r3, [pc, #236]	; (800c70c <UART_SetConfig+0x2d4>)
 800c61e:	fba3 2301 	umull	r2, r3, r3, r1
 800c622:	095b      	lsrs	r3, r3, #5
 800c624:	2264      	movs	r2, #100	; 0x64
 800c626:	fb02 f303 	mul.w	r3, r2, r3
 800c62a:	1acb      	subs	r3, r1, r3
 800c62c:	00db      	lsls	r3, r3, #3
 800c62e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c632:	4b36      	ldr	r3, [pc, #216]	; (800c70c <UART_SetConfig+0x2d4>)
 800c634:	fba3 2302 	umull	r2, r3, r3, r2
 800c638:	095b      	lsrs	r3, r3, #5
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c640:	441c      	add	r4, r3
 800c642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c646:	2200      	movs	r2, #0
 800c648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c64c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c654:	4642      	mov	r2, r8
 800c656:	464b      	mov	r3, r9
 800c658:	1891      	adds	r1, r2, r2
 800c65a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c65c:	415b      	adcs	r3, r3
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c664:	4641      	mov	r1, r8
 800c666:	1851      	adds	r1, r2, r1
 800c668:	6339      	str	r1, [r7, #48]	; 0x30
 800c66a:	4649      	mov	r1, r9
 800c66c:	414b      	adcs	r3, r1
 800c66e:	637b      	str	r3, [r7, #52]	; 0x34
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	f04f 0300 	mov.w	r3, #0
 800c678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c67c:	4659      	mov	r1, fp
 800c67e:	00cb      	lsls	r3, r1, #3
 800c680:	4651      	mov	r1, sl
 800c682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c686:	4651      	mov	r1, sl
 800c688:	00ca      	lsls	r2, r1, #3
 800c68a:	4610      	mov	r0, r2
 800c68c:	4619      	mov	r1, r3
 800c68e:	4603      	mov	r3, r0
 800c690:	4642      	mov	r2, r8
 800c692:	189b      	adds	r3, r3, r2
 800c694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c698:	464b      	mov	r3, r9
 800c69a:	460a      	mov	r2, r1
 800c69c:	eb42 0303 	adc.w	r3, r2, r3
 800c6a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c6b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c6b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	18db      	adds	r3, r3, r3
 800c6bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6be:	4613      	mov	r3, r2
 800c6c0:	eb42 0303 	adc.w	r3, r2, r3
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c6ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c6ce:	f7f4 faf3 	bl	8000cb8 <__aeabi_uldivmod>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4b0d      	ldr	r3, [pc, #52]	; (800c70c <UART_SetConfig+0x2d4>)
 800c6d8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6dc:	095b      	lsrs	r3, r3, #5
 800c6de:	2164      	movs	r1, #100	; 0x64
 800c6e0:	fb01 f303 	mul.w	r3, r1, r3
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	3332      	adds	r3, #50	; 0x32
 800c6ea:	4a08      	ldr	r2, [pc, #32]	; (800c70c <UART_SetConfig+0x2d4>)
 800c6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f0:	095b      	lsrs	r3, r3, #5
 800c6f2:	f003 0207 	and.w	r2, r3, #7
 800c6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4422      	add	r2, r4
 800c6fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c700:	e105      	b.n	800c90e <UART_SetConfig+0x4d6>
 800c702:	bf00      	nop
 800c704:	40011000 	.word	0x40011000
 800c708:	40011400 	.word	0x40011400
 800c70c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c714:	2200      	movs	r2, #0
 800c716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c71a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c71e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c722:	4642      	mov	r2, r8
 800c724:	464b      	mov	r3, r9
 800c726:	1891      	adds	r1, r2, r2
 800c728:	6239      	str	r1, [r7, #32]
 800c72a:	415b      	adcs	r3, r3
 800c72c:	627b      	str	r3, [r7, #36]	; 0x24
 800c72e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c732:	4641      	mov	r1, r8
 800c734:	1854      	adds	r4, r2, r1
 800c736:	4649      	mov	r1, r9
 800c738:	eb43 0501 	adc.w	r5, r3, r1
 800c73c:	f04f 0200 	mov.w	r2, #0
 800c740:	f04f 0300 	mov.w	r3, #0
 800c744:	00eb      	lsls	r3, r5, #3
 800c746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c74a:	00e2      	lsls	r2, r4, #3
 800c74c:	4614      	mov	r4, r2
 800c74e:	461d      	mov	r5, r3
 800c750:	4643      	mov	r3, r8
 800c752:	18e3      	adds	r3, r4, r3
 800c754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c758:	464b      	mov	r3, r9
 800c75a:	eb45 0303 	adc.w	r3, r5, r3
 800c75e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c76e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	f04f 0300 	mov.w	r3, #0
 800c77a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c77e:	4629      	mov	r1, r5
 800c780:	008b      	lsls	r3, r1, #2
 800c782:	4621      	mov	r1, r4
 800c784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c788:	4621      	mov	r1, r4
 800c78a:	008a      	lsls	r2, r1, #2
 800c78c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c790:	f7f4 fa92 	bl	8000cb8 <__aeabi_uldivmod>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4b60      	ldr	r3, [pc, #384]	; (800c91c <UART_SetConfig+0x4e4>)
 800c79a:	fba3 2302 	umull	r2, r3, r3, r2
 800c79e:	095b      	lsrs	r3, r3, #5
 800c7a0:	011c      	lsls	r4, r3, #4
 800c7a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c7ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c7b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c7b4:	4642      	mov	r2, r8
 800c7b6:	464b      	mov	r3, r9
 800c7b8:	1891      	adds	r1, r2, r2
 800c7ba:	61b9      	str	r1, [r7, #24]
 800c7bc:	415b      	adcs	r3, r3
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7c4:	4641      	mov	r1, r8
 800c7c6:	1851      	adds	r1, r2, r1
 800c7c8:	6139      	str	r1, [r7, #16]
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	414b      	adcs	r3, r1
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	f04f 0200 	mov.w	r2, #0
 800c7d4:	f04f 0300 	mov.w	r3, #0
 800c7d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c7dc:	4659      	mov	r1, fp
 800c7de:	00cb      	lsls	r3, r1, #3
 800c7e0:	4651      	mov	r1, sl
 800c7e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7e6:	4651      	mov	r1, sl
 800c7e8:	00ca      	lsls	r2, r1, #3
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	189b      	adds	r3, r3, r2
 800c7f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	460a      	mov	r2, r1
 800c7fc:	eb42 0303 	adc.w	r3, r2, r3
 800c800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c80e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c810:	f04f 0200 	mov.w	r2, #0
 800c814:	f04f 0300 	mov.w	r3, #0
 800c818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c81c:	4649      	mov	r1, r9
 800c81e:	008b      	lsls	r3, r1, #2
 800c820:	4641      	mov	r1, r8
 800c822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c826:	4641      	mov	r1, r8
 800c828:	008a      	lsls	r2, r1, #2
 800c82a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c82e:	f7f4 fa43 	bl	8000cb8 <__aeabi_uldivmod>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4b39      	ldr	r3, [pc, #228]	; (800c91c <UART_SetConfig+0x4e4>)
 800c838:	fba3 1302 	umull	r1, r3, r3, r2
 800c83c:	095b      	lsrs	r3, r3, #5
 800c83e:	2164      	movs	r1, #100	; 0x64
 800c840:	fb01 f303 	mul.w	r3, r1, r3
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	011b      	lsls	r3, r3, #4
 800c848:	3332      	adds	r3, #50	; 0x32
 800c84a:	4a34      	ldr	r2, [pc, #208]	; (800c91c <UART_SetConfig+0x4e4>)
 800c84c:	fba2 2303 	umull	r2, r3, r2, r3
 800c850:	095b      	lsrs	r3, r3, #5
 800c852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c856:	441c      	add	r4, r3
 800c858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c85c:	2200      	movs	r2, #0
 800c85e:	673b      	str	r3, [r7, #112]	; 0x70
 800c860:	677a      	str	r2, [r7, #116]	; 0x74
 800c862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c866:	4642      	mov	r2, r8
 800c868:	464b      	mov	r3, r9
 800c86a:	1891      	adds	r1, r2, r2
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	415b      	adcs	r3, r3
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c876:	4641      	mov	r1, r8
 800c878:	1851      	adds	r1, r2, r1
 800c87a:	6039      	str	r1, [r7, #0]
 800c87c:	4649      	mov	r1, r9
 800c87e:	414b      	adcs	r3, r1
 800c880:	607b      	str	r3, [r7, #4]
 800c882:	f04f 0200 	mov.w	r2, #0
 800c886:	f04f 0300 	mov.w	r3, #0
 800c88a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c88e:	4659      	mov	r1, fp
 800c890:	00cb      	lsls	r3, r1, #3
 800c892:	4651      	mov	r1, sl
 800c894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c898:	4651      	mov	r1, sl
 800c89a:	00ca      	lsls	r2, r1, #3
 800c89c:	4610      	mov	r0, r2
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	4642      	mov	r2, r8
 800c8a4:	189b      	adds	r3, r3, r2
 800c8a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8a8:	464b      	mov	r3, r9
 800c8aa:	460a      	mov	r2, r1
 800c8ac:	eb42 0303 	adc.w	r3, r2, r3
 800c8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	663b      	str	r3, [r7, #96]	; 0x60
 800c8bc:	667a      	str	r2, [r7, #100]	; 0x64
 800c8be:	f04f 0200 	mov.w	r2, #0
 800c8c2:	f04f 0300 	mov.w	r3, #0
 800c8c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	008b      	lsls	r3, r1, #2
 800c8ce:	4641      	mov	r1, r8
 800c8d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8d4:	4641      	mov	r1, r8
 800c8d6:	008a      	lsls	r2, r1, #2
 800c8d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c8dc:	f7f4 f9ec 	bl	8000cb8 <__aeabi_uldivmod>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <UART_SetConfig+0x4e4>)
 800c8e6:	fba3 1302 	umull	r1, r3, r3, r2
 800c8ea:	095b      	lsrs	r3, r3, #5
 800c8ec:	2164      	movs	r1, #100	; 0x64
 800c8ee:	fb01 f303 	mul.w	r3, r1, r3
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	3332      	adds	r3, #50	; 0x32
 800c8f8:	4a08      	ldr	r2, [pc, #32]	; (800c91c <UART_SetConfig+0x4e4>)
 800c8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fe:	095b      	lsrs	r3, r3, #5
 800c900:	f003 020f 	and.w	r2, r3, #15
 800c904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4422      	add	r2, r4
 800c90c:	609a      	str	r2, [r3, #8]
}
 800c90e:	bf00      	nop
 800c910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c914:	46bd      	mov	sp, r7
 800c916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c91a:	bf00      	nop
 800c91c:	51eb851f 	.word	0x51eb851f

0800c920 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c920:	b084      	sub	sp, #16
 800c922:	b480      	push	{r7}
 800c924:	b085      	sub	sp, #20
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	f107 001c 	add.w	r0, r7, #28
 800c92e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c936:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c938:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c93a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c93e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c942:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c946:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c94a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	4313      	orrs	r3, r2
 800c950:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c95a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	431a      	orrs	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3714      	adds	r7, #20
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	b004      	add	sp, #16
 800c974:	4770      	bx	lr

0800c976 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2203      	movs	r2, #3
 800c9be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0303 	and.w	r3, r3, #3
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c9ea:	b480      	push	{r7}
 800c9ec:	b085      	sub	sp, #20
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ca0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ca14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ca24:	f023 030f 	bic.w	r3, r3, #15
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	b2db      	uxtb	r3, r3
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3314      	adds	r3, #20
 800ca66:	461a      	mov	r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
}  
 800ca72:	4618      	mov	r0, r3
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b085      	sub	sp, #20
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	685a      	ldr	r2, [r3, #4]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800caa4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800caaa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cab0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	431a      	orrs	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cac8:	2300      	movs	r3, #0

}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b088      	sub	sp, #32
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cae4:	2310      	movs	r3, #16
 800cae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cae8:	2340      	movs	r3, #64	; 0x40
 800caea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff ff74 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cb02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb06:	2110      	movs	r1, #16
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f9d7 	bl	800cebc <SDMMC_GetCmdResp1>
 800cb0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb10:	69fb      	ldr	r3, [r7, #28]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3720      	adds	r7, #32
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b088      	sub	sp, #32
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cb28:	2311      	movs	r3, #17
 800cb2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb2c:	2340      	movs	r3, #64	; 0x40
 800cb2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb30:	2300      	movs	r3, #0
 800cb32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb3a:	f107 0308 	add.w	r3, r7, #8
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7ff ff52 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cb46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4a:	2111      	movs	r1, #17
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f9b5 	bl	800cebc <SDMMC_GetCmdResp1>
 800cb52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb54:	69fb      	ldr	r3, [r7, #28]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3720      	adds	r7, #32
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b088      	sub	sp, #32
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cb6c:	2312      	movs	r3, #18
 800cb6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb70:	2340      	movs	r3, #64	; 0x40
 800cb72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb7e:	f107 0308 	add.w	r3, r7, #8
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff ff30 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cb8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb8e:	2112      	movs	r1, #18
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f993 	bl	800cebc <SDMMC_GetCmdResp1>
 800cb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb98:	69fb      	ldr	r3, [r7, #28]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b088      	sub	sp, #32
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cbb0:	2318      	movs	r3, #24
 800cbb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbb4:	2340      	movs	r3, #64	; 0x40
 800cbb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbc2:	f107 0308 	add.w	r3, r7, #8
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff ff0e 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cbce:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbd2:	2118      	movs	r1, #24
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f971 	bl	800cebc <SDMMC_GetCmdResp1>
 800cbda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbdc:	69fb      	ldr	r3, [r7, #28]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3720      	adds	r7, #32
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b088      	sub	sp, #32
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cbf4:	2319      	movs	r3, #25
 800cbf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbf8:	2340      	movs	r3, #64	; 0x40
 800cbfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc06:	f107 0308 	add.w	r3, r7, #8
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff feec 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc16:	2119      	movs	r1, #25
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f94f 	bl	800cebc <SDMMC_GetCmdResp1>
 800cc1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc20:	69fb      	ldr	r3, [r7, #28]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3720      	adds	r7, #32
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cc38:	230c      	movs	r3, #12
 800cc3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc3c:	2340      	movs	r3, #64	; 0x40
 800cc3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc40:	2300      	movs	r3, #0
 800cc42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc4a:	f107 0308 	add.w	r3, r7, #8
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff feca 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cc56:	4a05      	ldr	r2, [pc, #20]	; (800cc6c <SDMMC_CmdStopTransfer+0x40>)
 800cc58:	210c      	movs	r1, #12
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f92e 	bl	800cebc <SDMMC_GetCmdResp1>
 800cc60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc62:	69fb      	ldr	r3, [r7, #28]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	05f5e100 	.word	0x05f5e100

0800cc70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08a      	sub	sp, #40	; 0x28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cc80:	2307      	movs	r3, #7
 800cc82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc84:	2340      	movs	r3, #64	; 0x40
 800cc86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc92:	f107 0310 	add.w	r3, r7, #16
 800cc96:	4619      	mov	r1, r3
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f7ff fea6 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cc9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cca2:	2107      	movs	r1, #7
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 f909 	bl	800cebc <SDMMC_GetCmdResp1>
 800ccaa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3728      	adds	r7, #40	; 0x28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b088      	sub	sp, #32
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccd4:	f107 0308 	add.w	r3, r7, #8
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff fe85 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fb23 	bl	800d32c <SDMMC_GetCmdError>
 800cce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cce8:	69fb      	ldr	r3, [r7, #28]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3720      	adds	r7, #32
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b088      	sub	sp, #32
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ccfa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ccfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cd00:	2308      	movs	r3, #8
 800cd02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd04:	2340      	movs	r3, #64	; 0x40
 800cd06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd12:	f107 0308 	add.w	r3, r7, #8
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff fe66 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fab6 	bl	800d290 <SDMMC_GetCmdResp7>
 800cd24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd26:	69fb      	ldr	r3, [r7, #28]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3720      	adds	r7, #32
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b088      	sub	sp, #32
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cd3e:	2337      	movs	r3, #55	; 0x37
 800cd40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd42:	2340      	movs	r3, #64	; 0x40
 800cd44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd46:	2300      	movs	r3, #0
 800cd48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd50:	f107 0308 	add.w	r3, r7, #8
 800cd54:	4619      	mov	r1, r3
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff fe47 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cd5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd60:	2137      	movs	r1, #55	; 0x37
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f8aa 	bl	800cebc <SDMMC_GetCmdResp1>
 800cd68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd6a:	69fb      	ldr	r3, [r7, #28]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3720      	adds	r7, #32
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b088      	sub	sp, #32
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cd8a:	2329      	movs	r3, #41	; 0x29
 800cd8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd8e:	2340      	movs	r3, #64	; 0x40
 800cd90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd92:	2300      	movs	r3, #0
 800cd94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd9c:	f107 0308 	add.w	r3, r7, #8
 800cda0:	4619      	mov	r1, r3
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff fe21 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f9bd 	bl	800d128 <SDMMC_GetCmdResp3>
 800cdae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b088      	sub	sp, #32
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cdca:	23c0      	movs	r3, #192	; 0xc0
 800cdcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdd8:	f107 0308 	add.w	r3, r7, #8
 800cddc:	4619      	mov	r1, r3
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fe03 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f957 	bl	800d098 <SDMMC_GetCmdResp2>
 800cdea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdec:	69fb      	ldr	r3, [r7, #28]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3720      	adds	r7, #32
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b088      	sub	sp, #32
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ce04:	2309      	movs	r3, #9
 800ce06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ce08:	23c0      	movs	r3, #192	; 0xc0
 800ce0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce16:	f107 0308 	add.w	r3, r7, #8
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7ff fde4 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f938 	bl	800d098 <SDMMC_GetCmdResp2>
 800ce28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce2a:	69fb      	ldr	r3, [r7, #28]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3720      	adds	r7, #32
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ce42:	2303      	movs	r3, #3
 800ce44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce46:	2340      	movs	r3, #64	; 0x40
 800ce48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce54:	f107 0308 	add.w	r3, r7, #8
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff fdc5 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	2103      	movs	r1, #3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f99d 	bl	800d1a4 <SDMMC_GetCmdResp6>
 800ce6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3720      	adds	r7, #32
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b088      	sub	sp, #32
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ce84:	230d      	movs	r3, #13
 800ce86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce88:	2340      	movs	r3, #64	; 0x40
 800ce8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce96:	f107 0308 	add.w	r3, r7, #8
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff fda4 	bl	800c9ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cea2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cea6:	210d      	movs	r1, #13
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f807 	bl	800cebc <SDMMC_GetCmdResp1>
 800ceae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceb0:	69fb      	ldr	r3, [r7, #28]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3720      	adds	r7, #32
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b088      	sub	sp, #32
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	460b      	mov	r3, r1
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ceca:	4b70      	ldr	r3, [pc, #448]	; (800d08c <SDMMC_GetCmdResp1+0x1d0>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a70      	ldr	r2, [pc, #448]	; (800d090 <SDMMC_GetCmdResp1+0x1d4>)
 800ced0:	fba2 2303 	umull	r2, r3, r2, r3
 800ced4:	0a5a      	lsrs	r2, r3, #9
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	fb02 f303 	mul.w	r3, r2, r3
 800cedc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	1e5a      	subs	r2, r3, #1
 800cee2:	61fa      	str	r2, [r7, #28]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d102      	bne.n	800ceee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cee8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ceec:	e0c9      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0ef      	beq.n	800cede <SDMMC_GetCmdResp1+0x22>
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1ea      	bne.n	800cede <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0c:	f003 0304 	and.w	r3, r3, #4
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d004      	beq.n	800cf1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2204      	movs	r2, #4
 800cf18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf1a:	2304      	movs	r3, #4
 800cf1c:	e0b1      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d004      	beq.n	800cf34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e0a6      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	22c5      	movs	r2, #197	; 0xc5
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f7ff fd7f 	bl	800ca3e <SDIO_GetCommandResponse>
 800cf40:	4603      	mov	r3, r0
 800cf42:	461a      	mov	r2, r3
 800cf44:	7afb      	ldrb	r3, [r7, #11]
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d001      	beq.n	800cf4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e099      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cf4e:	2100      	movs	r1, #0
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f7ff fd81 	bl	800ca58 <SDIO_GetResponse>
 800cf56:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	4b4e      	ldr	r3, [pc, #312]	; (800d094 <SDMMC_GetCmdResp1+0x1d8>)
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e08d      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	da02      	bge.n	800cf72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf70:	e087      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf7c:	2340      	movs	r3, #64	; 0x40
 800cf7e:	e080      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf8a:	2380      	movs	r3, #128	; 0x80
 800cf8c:	e079      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf9c:	e071      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cfa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfac:	e069      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cfb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfbc:	e061      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cfc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfcc:	e059      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfdc:	e051      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfec:	e049      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cff8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cffc:	e041      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d00c:	e039      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d01c:	e031      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d002      	beq.n	800d02e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d028:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d02c:	e029      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d038:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d03c:	e021      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d04c:	e019      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d05c:	e011      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d068:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d06c:	e009      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f003 0308 	and.w	r3, r3, #8
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d078:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d07c:	e001      	b.n	800d082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d07e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000010 	.word	0x20000010
 800d090:	10624dd3 	.word	0x10624dd3
 800d094:	fdffe008 	.word	0xfdffe008

0800d098 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0a0:	4b1f      	ldr	r3, [pc, #124]	; (800d120 <SDMMC_GetCmdResp2+0x88>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a1f      	ldr	r2, [pc, #124]	; (800d124 <SDMMC_GetCmdResp2+0x8c>)
 800d0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0aa:	0a5b      	lsrs	r3, r3, #9
 800d0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
 800d0b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	1e5a      	subs	r2, r3, #1
 800d0ba:	60fa      	str	r2, [r7, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0c4:	e026      	b.n	800d114 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0ef      	beq.n	800d0b6 <SDMMC_GetCmdResp2+0x1e>
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1ea      	bne.n	800d0b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e4:	f003 0304 	and.w	r3, r3, #4
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2204      	movs	r2, #4
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0f2:	2304      	movs	r3, #4
 800d0f4:	e00e      	b.n	800d114 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d004      	beq.n	800d10c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d108:	2301      	movs	r3, #1
 800d10a:	e003      	b.n	800d114 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	22c5      	movs	r2, #197	; 0xc5
 800d110:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	20000010 	.word	0x20000010
 800d124:	10624dd3 	.word	0x10624dd3

0800d128 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d130:	4b1a      	ldr	r3, [pc, #104]	; (800d19c <SDMMC_GetCmdResp3+0x74>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a1a      	ldr	r2, [pc, #104]	; (800d1a0 <SDMMC_GetCmdResp3+0x78>)
 800d136:	fba2 2303 	umull	r2, r3, r2, r3
 800d13a:	0a5b      	lsrs	r3, r3, #9
 800d13c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d140:	fb02 f303 	mul.w	r3, r2, r3
 800d144:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	1e5a      	subs	r2, r3, #1
 800d14a:	60fa      	str	r2, [r7, #12]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d102      	bne.n	800d156 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d154:	e01b      	b.n	800d18e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0ef      	beq.n	800d146 <SDMMC_GetCmdResp3+0x1e>
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1ea      	bne.n	800d146 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2204      	movs	r2, #4
 800d180:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d182:	2304      	movs	r3, #4
 800d184:	e003      	b.n	800d18e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	22c5      	movs	r2, #197	; 0xc5
 800d18a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	20000010 	.word	0x20000010
 800d1a0:	10624dd3 	.word	0x10624dd3

0800d1a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1b2:	4b35      	ldr	r3, [pc, #212]	; (800d288 <SDMMC_GetCmdResp6+0xe4>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a35      	ldr	r2, [pc, #212]	; (800d28c <SDMMC_GetCmdResp6+0xe8>)
 800d1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1bc:	0a5b      	lsrs	r3, r3, #9
 800d1be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	1e5a      	subs	r2, r3, #1
 800d1cc:	61fa      	str	r2, [r7, #28]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d102      	bne.n	800d1d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1d6:	e052      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d0ef      	beq.n	800d1c8 <SDMMC_GetCmdResp6+0x24>
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1ea      	bne.n	800d1c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f6:	f003 0304 	and.w	r3, r3, #4
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d004      	beq.n	800d208 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2204      	movs	r2, #4
 800d202:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d204:	2304      	movs	r3, #4
 800d206:	e03a      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	2b00      	cmp	r3, #0
 800d212:	d004      	beq.n	800d21e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2201      	movs	r2, #1
 800d218:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d21a:	2301      	movs	r3, #1
 800d21c:	e02f      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7ff fc0d 	bl	800ca3e <SDIO_GetCommandResponse>
 800d224:	4603      	mov	r3, r0
 800d226:	461a      	mov	r2, r3
 800d228:	7afb      	ldrb	r3, [r7, #11]
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d001      	beq.n	800d232 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d22e:	2301      	movs	r3, #1
 800d230:	e025      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	22c5      	movs	r2, #197	; 0xc5
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d238:	2100      	movs	r1, #0
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f7ff fc0c 	bl	800ca58 <SDIO_GetResponse>
 800d240:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d106      	bne.n	800d25a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	0c1b      	lsrs	r3, r3, #16
 800d250:	b29a      	uxth	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d256:	2300      	movs	r3, #0
 800d258:	e011      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d268:	e009      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d278:	e001      	b.n	800d27e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d27a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3720      	adds	r7, #32
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	20000010 	.word	0x20000010
 800d28c:	10624dd3 	.word	0x10624dd3

0800d290 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d298:	4b22      	ldr	r3, [pc, #136]	; (800d324 <SDMMC_GetCmdResp7+0x94>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a22      	ldr	r2, [pc, #136]	; (800d328 <SDMMC_GetCmdResp7+0x98>)
 800d29e:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a2:	0a5b      	lsrs	r3, r3, #9
 800d2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2a8:	fb02 f303 	mul.w	r3, r2, r3
 800d2ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	1e5a      	subs	r2, r3, #1
 800d2b2:	60fa      	str	r2, [r7, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2bc:	e02c      	b.n	800d318 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d0ef      	beq.n	800d2ae <SDMMC_GetCmdResp7+0x1e>
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1ea      	bne.n	800d2ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2204      	movs	r2, #4
 800d2e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2ea:	2304      	movs	r3, #4
 800d2ec:	e014      	b.n	800d318 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f2:	f003 0301 	and.w	r3, r3, #1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d004      	beq.n	800d304 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d300:	2301      	movs	r3, #1
 800d302:	e009      	b.n	800d318 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2240      	movs	r2, #64	; 0x40
 800d314:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d316:	2300      	movs	r3, #0
  
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	20000010 	.word	0x20000010
 800d328:	10624dd3 	.word	0x10624dd3

0800d32c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d334:	4b11      	ldr	r3, [pc, #68]	; (800d37c <SDMMC_GetCmdError+0x50>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a11      	ldr	r2, [pc, #68]	; (800d380 <SDMMC_GetCmdError+0x54>)
 800d33a:	fba2 2303 	umull	r2, r3, r2, r3
 800d33e:	0a5b      	lsrs	r3, r3, #9
 800d340:	f241 3288 	movw	r2, #5000	; 0x1388
 800d344:	fb02 f303 	mul.w	r3, r2, r3
 800d348:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	1e5a      	subs	r2, r3, #1
 800d34e:	60fa      	str	r2, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d358:	e009      	b.n	800d36e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d362:	2b00      	cmp	r3, #0
 800d364:	d0f1      	beq.n	800d34a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	22c5      	movs	r2, #197	; 0xc5
 800d36a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	20000010 	.word	0x20000010
 800d380:	10624dd3 	.word	0x10624dd3

0800d384 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d384:	b084      	sub	sp, #16
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	f107 001c 	add.w	r0, r7, #28
 800d392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d122      	bne.n	800d3e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d105      	bne.n	800d3d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f001 fc3e 	bl	800ec58 <USB_CoreReset>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73fb      	strb	r3, [r7, #15]
 800d3e0:	e01a      	b.n	800d418 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 fc32 	bl	800ec58 <USB_CoreReset>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d106      	bne.n	800d40c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	639a      	str	r2, [r3, #56]	; 0x38
 800d40a:	e005      	b.n	800d418 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d10b      	bne.n	800d436 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	f043 0206 	orr.w	r2, r3, #6
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f043 0220 	orr.w	r2, r3, #32
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d436:	7bfb      	ldrb	r3, [r7, #15]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d442:	b004      	add	sp, #16
 800d444:	4770      	bx	lr
	...

0800d448 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d165      	bne.n	800d528 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	4a41      	ldr	r2, [pc, #260]	; (800d564 <USB_SetTurnaroundTime+0x11c>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d906      	bls.n	800d472 <USB_SetTurnaroundTime+0x2a>
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	4a40      	ldr	r2, [pc, #256]	; (800d568 <USB_SetTurnaroundTime+0x120>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d202      	bcs.n	800d472 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d46c:	230f      	movs	r3, #15
 800d46e:	617b      	str	r3, [r7, #20]
 800d470:	e062      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	4a3c      	ldr	r2, [pc, #240]	; (800d568 <USB_SetTurnaroundTime+0x120>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d306      	bcc.n	800d488 <USB_SetTurnaroundTime+0x40>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	4a3b      	ldr	r2, [pc, #236]	; (800d56c <USB_SetTurnaroundTime+0x124>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d202      	bcs.n	800d488 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d482:	230e      	movs	r3, #14
 800d484:	617b      	str	r3, [r7, #20]
 800d486:	e057      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	4a38      	ldr	r2, [pc, #224]	; (800d56c <USB_SetTurnaroundTime+0x124>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d306      	bcc.n	800d49e <USB_SetTurnaroundTime+0x56>
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	4a37      	ldr	r2, [pc, #220]	; (800d570 <USB_SetTurnaroundTime+0x128>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d202      	bcs.n	800d49e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d498:	230d      	movs	r3, #13
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	e04c      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	4a33      	ldr	r2, [pc, #204]	; (800d570 <USB_SetTurnaroundTime+0x128>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d306      	bcc.n	800d4b4 <USB_SetTurnaroundTime+0x6c>
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	4a32      	ldr	r2, [pc, #200]	; (800d574 <USB_SetTurnaroundTime+0x12c>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d802      	bhi.n	800d4b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d4ae:	230c      	movs	r3, #12
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e041      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	4a2f      	ldr	r2, [pc, #188]	; (800d574 <USB_SetTurnaroundTime+0x12c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d906      	bls.n	800d4ca <USB_SetTurnaroundTime+0x82>
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	4a2e      	ldr	r2, [pc, #184]	; (800d578 <USB_SetTurnaroundTime+0x130>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d802      	bhi.n	800d4ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d4c4:	230b      	movs	r3, #11
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	e036      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	4a2a      	ldr	r2, [pc, #168]	; (800d578 <USB_SetTurnaroundTime+0x130>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d906      	bls.n	800d4e0 <USB_SetTurnaroundTime+0x98>
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	4a29      	ldr	r2, [pc, #164]	; (800d57c <USB_SetTurnaroundTime+0x134>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d802      	bhi.n	800d4e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d4da:	230a      	movs	r3, #10
 800d4dc:	617b      	str	r3, [r7, #20]
 800d4de:	e02b      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	4a26      	ldr	r2, [pc, #152]	; (800d57c <USB_SetTurnaroundTime+0x134>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d906      	bls.n	800d4f6 <USB_SetTurnaroundTime+0xae>
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	4a25      	ldr	r2, [pc, #148]	; (800d580 <USB_SetTurnaroundTime+0x138>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d202      	bcs.n	800d4f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d4f0:	2309      	movs	r3, #9
 800d4f2:	617b      	str	r3, [r7, #20]
 800d4f4:	e020      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	4a21      	ldr	r2, [pc, #132]	; (800d580 <USB_SetTurnaroundTime+0x138>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d306      	bcc.n	800d50c <USB_SetTurnaroundTime+0xc4>
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	4a20      	ldr	r2, [pc, #128]	; (800d584 <USB_SetTurnaroundTime+0x13c>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d802      	bhi.n	800d50c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d506:	2308      	movs	r3, #8
 800d508:	617b      	str	r3, [r7, #20]
 800d50a:	e015      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	4a1d      	ldr	r2, [pc, #116]	; (800d584 <USB_SetTurnaroundTime+0x13c>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d906      	bls.n	800d522 <USB_SetTurnaroundTime+0xda>
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	4a1c      	ldr	r2, [pc, #112]	; (800d588 <USB_SetTurnaroundTime+0x140>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d202      	bcs.n	800d522 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d51c:	2307      	movs	r3, #7
 800d51e:	617b      	str	r3, [r7, #20]
 800d520:	e00a      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d522:	2306      	movs	r3, #6
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	e007      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d528:	79fb      	ldrb	r3, [r7, #7]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d52e:	2309      	movs	r3, #9
 800d530:	617b      	str	r3, [r7, #20]
 800d532:	e001      	b.n	800d538 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d534:	2309      	movs	r3, #9
 800d536:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	029b      	lsls	r3, r3, #10
 800d54c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d550:	431a      	orrs	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	371c      	adds	r7, #28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	00d8acbf 	.word	0x00d8acbf
 800d568:	00e4e1c0 	.word	0x00e4e1c0
 800d56c:	00f42400 	.word	0x00f42400
 800d570:	01067380 	.word	0x01067380
 800d574:	011a499f 	.word	0x011a499f
 800d578:	01312cff 	.word	0x01312cff
 800d57c:	014ca43f 	.word	0x014ca43f
 800d580:	016e3600 	.word	0x016e3600
 800d584:	01a6ab1f 	.word	0x01a6ab1f
 800d588:	01e84800 	.word	0x01e84800

0800d58c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f043 0201 	orr.w	r2, r3, #1
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	370c      	adds	r7, #12
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	f023 0201 	bic.w	r2, r3, #1
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d5ec:	78fb      	ldrb	r3, [r7, #3]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d115      	bne.n	800d61e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d5fe:	2001      	movs	r0, #1
 800d600:	f7f6 fa68 	bl	8003ad4 <HAL_Delay>
      ms++;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3301      	adds	r3, #1
 800d608:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f001 fa94 	bl	800eb38 <USB_GetMode>
 800d610:	4603      	mov	r3, r0
 800d612:	2b01      	cmp	r3, #1
 800d614:	d01e      	beq.n	800d654 <USB_SetCurrentMode+0x84>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b31      	cmp	r3, #49	; 0x31
 800d61a:	d9f0      	bls.n	800d5fe <USB_SetCurrentMode+0x2e>
 800d61c:	e01a      	b.n	800d654 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d61e:	78fb      	ldrb	r3, [r7, #3]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d115      	bne.n	800d650 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d630:	2001      	movs	r0, #1
 800d632:	f7f6 fa4f 	bl	8003ad4 <HAL_Delay>
      ms++;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3301      	adds	r3, #1
 800d63a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f001 fa7b 	bl	800eb38 <USB_GetMode>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d005      	beq.n	800d654 <USB_SetCurrentMode+0x84>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b31      	cmp	r3, #49	; 0x31
 800d64c:	d9f0      	bls.n	800d630 <USB_SetCurrentMode+0x60>
 800d64e:	e001      	b.n	800d654 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e005      	b.n	800d660 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b32      	cmp	r3, #50	; 0x32
 800d658:	d101      	bne.n	800d65e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e000      	b.n	800d660 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d668:	b084      	sub	sp, #16
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b086      	sub	sp, #24
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d682:	2300      	movs	r3, #0
 800d684:	613b      	str	r3, [r7, #16]
 800d686:	e009      	b.n	800d69c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	3340      	adds	r3, #64	; 0x40
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	2200      	movs	r2, #0
 800d694:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	3301      	adds	r3, #1
 800d69a:	613b      	str	r3, [r7, #16]
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	2b0e      	cmp	r3, #14
 800d6a0:	d9f2      	bls.n	800d688 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d11c      	bne.n	800d6e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6b6:	f043 0302 	orr.w	r3, r3, #2
 800d6ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
 800d6e0:	e00b      	b.n	800d6fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d700:	461a      	mov	r2, r3
 800d702:	2300      	movs	r3, #0
 800d704:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d70c:	4619      	mov	r1, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d714:	461a      	mov	r2, r3
 800d716:	680b      	ldr	r3, [r1, #0]
 800d718:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d10c      	bne.n	800d73a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	2b00      	cmp	r3, #0
 800d724:	d104      	bne.n	800d730 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d726:	2100      	movs	r1, #0
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f965 	bl	800d9f8 <USB_SetDevSpeed>
 800d72e:	e008      	b.n	800d742 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d730:	2101      	movs	r1, #1
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f960 	bl	800d9f8 <USB_SetDevSpeed>
 800d738:	e003      	b.n	800d742 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d73a:	2103      	movs	r1, #3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f95b 	bl	800d9f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d742:	2110      	movs	r1, #16
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f8f3 	bl	800d930 <USB_FlushTxFifo>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f91f 	bl	800d998 <USB_FlushRxFifo>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d76a:	461a      	mov	r2, r3
 800d76c:	2300      	movs	r3, #0
 800d76e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d776:	461a      	mov	r2, r3
 800d778:	2300      	movs	r3, #0
 800d77a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d782:	461a      	mov	r2, r3
 800d784:	2300      	movs	r3, #0
 800d786:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d788:	2300      	movs	r3, #0
 800d78a:	613b      	str	r3, [r7, #16]
 800d78c:	e043      	b.n	800d816 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	015a      	lsls	r2, r3, #5
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4413      	add	r3, r2
 800d796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7a4:	d118      	bne.n	800d7d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10a      	bne.n	800d7c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	015a      	lsls	r2, r3, #5
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	e013      	b.n	800d7ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	e008      	b.n	800d7ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4413      	add	r3, r2
 800d804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d808:	461a      	mov	r2, r3
 800d80a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d80e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	3301      	adds	r3, #1
 800d814:	613b      	str	r3, [r7, #16]
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d3b7      	bcc.n	800d78e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d81e:	2300      	movs	r3, #0
 800d820:	613b      	str	r3, [r7, #16]
 800d822:	e043      	b.n	800d8ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	015a      	lsls	r2, r3, #5
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d83a:	d118      	bne.n	800d86e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10a      	bne.n	800d858 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d84e:	461a      	mov	r2, r3
 800d850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	e013      	b.n	800d880 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	015a      	lsls	r2, r3, #5
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4413      	add	r3, r2
 800d860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d864:	461a      	mov	r2, r3
 800d866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d86a:	6013      	str	r3, [r2, #0]
 800d86c:	e008      	b.n	800d880 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	015a      	lsls	r2, r3, #5
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	4413      	add	r3, r2
 800d876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d87a:	461a      	mov	r2, r3
 800d87c:	2300      	movs	r3, #0
 800d87e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	015a      	lsls	r2, r3, #5
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4413      	add	r3, r2
 800d888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d88c:	461a      	mov	r2, r3
 800d88e:	2300      	movs	r3, #0
 800d890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d8a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	693a      	ldr	r2, [r7, #16]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d3b7      	bcc.n	800d824 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d8d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d105      	bne.n	800d8e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	f043 0210 	orr.w	r2, r3, #16
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699a      	ldr	r2, [r3, #24]
 800d8ec:	4b0f      	ldr	r3, [pc, #60]	; (800d92c <USB_DevInit+0x2c4>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d005      	beq.n	800d906 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	f043 0208 	orr.w	r2, r3, #8
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d107      	bne.n	800d91c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d914:	f043 0304 	orr.w	r3, r3, #4
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d91c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3718      	adds	r7, #24
 800d922:	46bd      	mov	sp, r7
 800d924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d928:	b004      	add	sp, #16
 800d92a:	4770      	bx	lr
 800d92c:	803c3800 	.word	0x803c3800

0800d930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3301      	adds	r3, #1
 800d942:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	4a13      	ldr	r2, [pc, #76]	; (800d994 <USB_FlushTxFifo+0x64>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d901      	bls.n	800d950 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d94c:	2303      	movs	r3, #3
 800d94e:	e01b      	b.n	800d988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	2b00      	cmp	r3, #0
 800d956:	daf2      	bge.n	800d93e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d958:	2300      	movs	r3, #0
 800d95a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	019b      	lsls	r3, r3, #6
 800d960:	f043 0220 	orr.w	r2, r3, #32
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3301      	adds	r3, #1
 800d96c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	4a08      	ldr	r2, [pc, #32]	; (800d994 <USB_FlushTxFifo+0x64>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d901      	bls.n	800d97a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e006      	b.n	800d988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	f003 0320 	and.w	r3, r3, #32
 800d982:	2b20      	cmp	r3, #32
 800d984:	d0f0      	beq.n	800d968 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr
 800d994:	00030d40 	.word	0x00030d40

0800d998 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	4a11      	ldr	r2, [pc, #68]	; (800d9f4 <USB_FlushRxFifo+0x5c>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d901      	bls.n	800d9b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	e018      	b.n	800d9e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	daf2      	bge.n	800d9a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2210      	movs	r2, #16
 800d9c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	4a08      	ldr	r2, [pc, #32]	; (800d9f4 <USB_FlushRxFifo+0x5c>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d901      	bls.n	800d9da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	e006      	b.n	800d9e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	f003 0310 	and.w	r3, r3, #16
 800d9e2:	2b10      	cmp	r3, #16
 800d9e4:	d0f0      	beq.n	800d9c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	00030d40 	.word	0x00030d40

0800d9f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	460b      	mov	r3, r1
 800da02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	78fb      	ldrb	r3, [r7, #3]
 800da12:	68f9      	ldr	r1, [r7, #12]
 800da14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da18:	4313      	orrs	r3, r2
 800da1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b087      	sub	sp, #28
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	f003 0306 	and.w	r3, r3, #6
 800da42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800da4a:	2300      	movs	r3, #0
 800da4c:	75fb      	strb	r3, [r7, #23]
 800da4e:	e00a      	b.n	800da66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d002      	beq.n	800da5c <USB_GetDevSpeed+0x32>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b06      	cmp	r3, #6
 800da5a:	d102      	bne.n	800da62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800da5c:	2302      	movs	r3, #2
 800da5e:	75fb      	strb	r3, [r7, #23]
 800da60:	e001      	b.n	800da66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800da62:	230f      	movs	r3, #15
 800da64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800da66:	7dfb      	ldrb	r3, [r7, #23]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	371c      	adds	r7, #28
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	785b      	ldrb	r3, [r3, #1]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d13a      	bne.n	800db06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da96:	69da      	ldr	r2, [r3, #28]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	f003 030f 	and.w	r3, r3, #15
 800daa0:	2101      	movs	r1, #1
 800daa2:	fa01 f303 	lsl.w	r3, r1, r3
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	68f9      	ldr	r1, [r7, #12]
 800daaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800daae:	4313      	orrs	r3, r2
 800dab0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d155      	bne.n	800db74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	015a      	lsls	r2, r3, #5
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4413      	add	r3, r2
 800dad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	791b      	ldrb	r3, [r3, #4]
 800dae2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dae4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	059b      	lsls	r3, r3, #22
 800daea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800daec:	4313      	orrs	r3, r2
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	0151      	lsls	r1, r2, #5
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	440a      	add	r2, r1
 800daf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dafa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db02:	6013      	str	r3, [r2, #0]
 800db04:	e036      	b.n	800db74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0c:	69da      	ldr	r2, [r3, #28]
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	f003 030f 	and.w	r3, r3, #15
 800db16:	2101      	movs	r1, #1
 800db18:	fa01 f303 	lsl.w	r3, r1, r3
 800db1c:	041b      	lsls	r3, r3, #16
 800db1e:	68f9      	ldr	r1, [r7, #12]
 800db20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db24:	4313      	orrs	r3, r2
 800db26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	015a      	lsls	r2, r3, #5
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d11a      	bne.n	800db74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4413      	add	r3, r2
 800db46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	791b      	ldrb	r3, [r3, #4]
 800db58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800db5a:	430b      	orrs	r3, r1
 800db5c:	4313      	orrs	r3, r2
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	0151      	lsls	r1, r2, #5
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	440a      	add	r2, r1
 800db66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
	...

0800db84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d161      	bne.n	800dc64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbb6:	d11f      	bne.n	800dbf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	015a      	lsls	r2, r3, #5
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	0151      	lsls	r1, r2, #5
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	440a      	add	r2, r1
 800dbce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dbd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	015a      	lsls	r2, r3, #5
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4413      	add	r3, r2
 800dbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	0151      	lsls	r1, r2, #5
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	440a      	add	r2, r1
 800dbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	f003 030f 	and.w	r3, r3, #15
 800dc08:	2101      	movs	r1, #1
 800dc0a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	43db      	mvns	r3, r3
 800dc12:	68f9      	ldr	r1, [r7, #12]
 800dc14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc18:	4013      	ands	r3, r2
 800dc1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc22:	69da      	ldr	r2, [r3, #28]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	f003 030f 	and.w	r3, r3, #15
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	43db      	mvns	r3, r3
 800dc36:	68f9      	ldr	r1, [r7, #12]
 800dc38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	0159      	lsls	r1, r3, #5
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	440b      	add	r3, r1
 800dc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4b35      	ldr	r3, [pc, #212]	; (800dd34 <USB_DeactivateEndpoint+0x1b0>)
 800dc5e:	4013      	ands	r3, r2
 800dc60:	600b      	str	r3, [r1, #0]
 800dc62:	e060      	b.n	800dd26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc7a:	d11f      	bne.n	800dcbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	0151      	lsls	r1, r2, #5
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	440a      	add	r2, r1
 800dc92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	015a      	lsls	r2, r3, #5
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	4413      	add	r3, r2
 800dca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	0151      	lsls	r1, r2, #5
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	440a      	add	r2, r1
 800dcb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	f003 030f 	and.w	r3, r3, #15
 800dccc:	2101      	movs	r1, #1
 800dcce:	fa01 f303 	lsl.w	r3, r1, r3
 800dcd2:	041b      	lsls	r3, r3, #16
 800dcd4:	43db      	mvns	r3, r3
 800dcd6:	68f9      	ldr	r1, [r7, #12]
 800dcd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcdc:	4013      	ands	r3, r2
 800dcde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dce6:	69da      	ldr	r2, [r3, #28]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f003 030f 	and.w	r3, r3, #15
 800dcf0:	2101      	movs	r1, #1
 800dcf2:	fa01 f303 	lsl.w	r3, r1, r3
 800dcf6:	041b      	lsls	r3, r3, #16
 800dcf8:	43db      	mvns	r3, r3
 800dcfa:	68f9      	ldr	r1, [r7, #12]
 800dcfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd00:	4013      	ands	r3, r2
 800dd02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	0159      	lsls	r1, r3, #5
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	440b      	add	r3, r1
 800dd1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4b05      	ldr	r3, [pc, #20]	; (800dd38 <USB_DeactivateEndpoint+0x1b4>)
 800dd22:	4013      	ands	r3, r2
 800dd24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	ec337800 	.word	0xec337800
 800dd38:	eff37800 	.word	0xeff37800

0800dd3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08a      	sub	sp, #40	; 0x28
 800dd40:	af02      	add	r7, sp, #8
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4613      	mov	r3, r2
 800dd48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	785b      	ldrb	r3, [r3, #1]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	f040 815c 	bne.w	800e016 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d132      	bne.n	800ddcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	69ba      	ldr	r2, [r7, #24]
 800dd76:	0151      	lsls	r1, r2, #5
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	015a      	lsls	r2, r3, #5
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	4413      	add	r3, r2
 800dd92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	69ba      	ldr	r2, [r7, #24]
 800dd9a:	0151      	lsls	r1, r2, #5
 800dd9c:	69fa      	ldr	r2, [r7, #28]
 800dd9e:	440a      	add	r2, r1
 800dda0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dda4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dda8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	015a      	lsls	r2, r3, #5
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	0151      	lsls	r1, r2, #5
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	440a      	add	r2, r1
 800ddc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddc4:	0cdb      	lsrs	r3, r3, #19
 800ddc6:	04db      	lsls	r3, r3, #19
 800ddc8:	6113      	str	r3, [r2, #16]
 800ddca:	e074      	b.n	800deb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	0151      	lsls	r1, r2, #5
 800ddde:	69fa      	ldr	r2, [r7, #28]
 800dde0:	440a      	add	r2, r1
 800dde2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dde6:	0cdb      	lsrs	r3, r3, #19
 800dde8:	04db      	lsls	r3, r3, #19
 800ddea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	015a      	lsls	r2, r3, #5
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	69ba      	ldr	r2, [r7, #24]
 800ddfc:	0151      	lsls	r1, r2, #5
 800ddfe:	69fa      	ldr	r2, [r7, #28]
 800de00:	440a      	add	r2, r1
 800de02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	015a      	lsls	r2, r3, #5
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	4413      	add	r3, r2
 800de18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	6999      	ldr	r1, [r3, #24]
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	440b      	add	r3, r1
 800de28:	1e59      	subs	r1, r3, #1
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	fbb1 f3f3 	udiv	r3, r1, r3
 800de32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800de34:	4b9d      	ldr	r3, [pc, #628]	; (800e0ac <USB_EPStartXfer+0x370>)
 800de36:	400b      	ands	r3, r1
 800de38:	69b9      	ldr	r1, [r7, #24]
 800de3a:	0148      	lsls	r0, r1, #5
 800de3c:	69f9      	ldr	r1, [r7, #28]
 800de3e:	4401      	add	r1, r0
 800de40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800de44:	4313      	orrs	r3, r2
 800de46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	015a      	lsls	r2, r3, #5
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	4413      	add	r3, r2
 800de50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de54:	691a      	ldr	r2, [r3, #16]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de5e:	69b9      	ldr	r1, [r7, #24]
 800de60:	0148      	lsls	r0, r1, #5
 800de62:	69f9      	ldr	r1, [r7, #28]
 800de64:	4401      	add	r1, r0
 800de66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800de6a:	4313      	orrs	r3, r2
 800de6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	791b      	ldrb	r3, [r3, #4]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d11f      	bne.n	800deb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	015a      	lsls	r2, r3, #5
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	4413      	add	r3, r2
 800de7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	69ba      	ldr	r2, [r7, #24]
 800de86:	0151      	lsls	r1, r2, #5
 800de88:	69fa      	ldr	r2, [r7, #28]
 800de8a:	440a      	add	r2, r1
 800de8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800de94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	015a      	lsls	r2, r3, #5
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	4413      	add	r3, r2
 800de9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	69ba      	ldr	r2, [r7, #24]
 800dea6:	0151      	lsls	r1, r2, #5
 800dea8:	69fa      	ldr	r2, [r7, #28]
 800deaa:	440a      	add	r2, r1
 800deac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800deb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d14b      	bne.n	800df54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d009      	beq.n	800ded8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	015a      	lsls	r2, r3, #5
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	4413      	add	r3, r2
 800decc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded0:	461a      	mov	r2, r3
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	791b      	ldrb	r3, [r3, #4]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d128      	bne.n	800df32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deec:	2b00      	cmp	r3, #0
 800deee:	d110      	bne.n	800df12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	015a      	lsls	r2, r3, #5
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	4413      	add	r3, r2
 800def8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	69ba      	ldr	r2, [r7, #24]
 800df00:	0151      	lsls	r1, r2, #5
 800df02:	69fa      	ldr	r2, [r7, #28]
 800df04:	440a      	add	r2, r1
 800df06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df0e:	6013      	str	r3, [r2, #0]
 800df10:	e00f      	b.n	800df32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	015a      	lsls	r2, r3, #5
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	4413      	add	r3, r2
 800df1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	0151      	lsls	r1, r2, #5
 800df24:	69fa      	ldr	r2, [r7, #28]
 800df26:	440a      	add	r2, r1
 800df28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	015a      	lsls	r2, r3, #5
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	4413      	add	r3, r2
 800df3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	69ba      	ldr	r2, [r7, #24]
 800df42:	0151      	lsls	r1, r2, #5
 800df44:	69fa      	ldr	r2, [r7, #28]
 800df46:	440a      	add	r2, r1
 800df48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df50:	6013      	str	r3, [r2, #0]
 800df52:	e133      	b.n	800e1bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	69ba      	ldr	r2, [r7, #24]
 800df64:	0151      	lsls	r1, r2, #5
 800df66:	69fa      	ldr	r2, [r7, #28]
 800df68:	440a      	add	r2, r1
 800df6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	791b      	ldrb	r3, [r3, #4]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d015      	beq.n	800dfa8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	699b      	ldr	r3, [r3, #24]
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 811b 	beq.w	800e1bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	f003 030f 	and.w	r3, r3, #15
 800df96:	2101      	movs	r1, #1
 800df98:	fa01 f303 	lsl.w	r3, r1, r3
 800df9c:	69f9      	ldr	r1, [r7, #28]
 800df9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	634b      	str	r3, [r1, #52]	; 0x34
 800dfa6:	e109      	b.n	800e1bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d110      	bne.n	800dfda <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	015a      	lsls	r2, r3, #5
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69ba      	ldr	r2, [r7, #24]
 800dfc8:	0151      	lsls	r1, r2, #5
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	440a      	add	r2, r1
 800dfce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfd6:	6013      	str	r3, [r2, #0]
 800dfd8:	e00f      	b.n	800dffa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	015a      	lsls	r2, r3, #5
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	69ba      	ldr	r2, [r7, #24]
 800dfea:	0151      	lsls	r1, r2, #5
 800dfec:	69fa      	ldr	r2, [r7, #28]
 800dfee:	440a      	add	r2, r1
 800dff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dff8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6919      	ldr	r1, [r3, #16]
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	781a      	ldrb	r2, [r3, #0]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	b298      	uxth	r0, r3
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	4603      	mov	r3, r0
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f000 fade 	bl	800e5d0 <USB_WritePacket>
 800e014:	e0d2      	b.n	800e1bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	69ba      	ldr	r2, [r7, #24]
 800e026:	0151      	lsls	r1, r2, #5
 800e028:	69fa      	ldr	r2, [r7, #28]
 800e02a:	440a      	add	r2, r1
 800e02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e030:	0cdb      	lsrs	r3, r3, #19
 800e032:	04db      	lsls	r3, r3, #19
 800e034:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	015a      	lsls	r2, r3, #5
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	4413      	add	r3, r2
 800e03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	69ba      	ldr	r2, [r7, #24]
 800e046:	0151      	lsls	r1, r2, #5
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	440a      	add	r2, r1
 800e04c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e050:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e054:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e058:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d126      	bne.n	800e0b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	015a      	lsls	r2, r3, #5
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	4413      	add	r3, r2
 800e06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e06e:	691a      	ldr	r2, [r3, #16]
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e078:	69b9      	ldr	r1, [r7, #24]
 800e07a:	0148      	lsls	r0, r1, #5
 800e07c:	69f9      	ldr	r1, [r7, #28]
 800e07e:	4401      	add	r1, r0
 800e080:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e084:	4313      	orrs	r3, r2
 800e086:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e094:	691b      	ldr	r3, [r3, #16]
 800e096:	69ba      	ldr	r2, [r7, #24]
 800e098:	0151      	lsls	r1, r2, #5
 800e09a:	69fa      	ldr	r2, [r7, #28]
 800e09c:	440a      	add	r2, r1
 800e09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e0a6:	6113      	str	r3, [r2, #16]
 800e0a8:	e03a      	b.n	800e120 <USB_EPStartXfer+0x3e4>
 800e0aa:	bf00      	nop
 800e0ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	699a      	ldr	r2, [r3, #24]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	1e5a      	subs	r2, r3, #1
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	8afa      	ldrh	r2, [r7, #22]
 800e0cc:	fb03 f202 	mul.w	r2, r3, r2
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e0:	691a      	ldr	r2, [r3, #16]
 800e0e2:	8afb      	ldrh	r3, [r7, #22]
 800e0e4:	04d9      	lsls	r1, r3, #19
 800e0e6:	4b38      	ldr	r3, [pc, #224]	; (800e1c8 <USB_EPStartXfer+0x48c>)
 800e0e8:	400b      	ands	r3, r1
 800e0ea:	69b9      	ldr	r1, [r7, #24]
 800e0ec:	0148      	lsls	r0, r1, #5
 800e0ee:	69f9      	ldr	r1, [r7, #28]
 800e0f0:	4401      	add	r1, r0
 800e0f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	015a      	lsls	r2, r3, #5
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	4413      	add	r3, r2
 800e102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e106:	691a      	ldr	r2, [r3, #16]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	69db      	ldr	r3, [r3, #28]
 800e10c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e110:	69b9      	ldr	r1, [r7, #24]
 800e112:	0148      	lsls	r0, r1, #5
 800e114:	69f9      	ldr	r1, [r7, #28]
 800e116:	4401      	add	r1, r0
 800e118:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e11c:	4313      	orrs	r3, r2
 800e11e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e120:	79fb      	ldrb	r3, [r7, #7]
 800e122:	2b01      	cmp	r3, #1
 800e124:	d10d      	bne.n	800e142 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d009      	beq.n	800e142 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	6919      	ldr	r1, [r3, #16]
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	015a      	lsls	r2, r3, #5
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	4413      	add	r3, r2
 800e13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e13e:	460a      	mov	r2, r1
 800e140:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	791b      	ldrb	r3, [r3, #4]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d128      	bne.n	800e19c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e156:	2b00      	cmp	r3, #0
 800e158:	d110      	bne.n	800e17c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	015a      	lsls	r2, r3, #5
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	4413      	add	r3, r2
 800e162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	69ba      	ldr	r2, [r7, #24]
 800e16a:	0151      	lsls	r1, r2, #5
 800e16c:	69fa      	ldr	r2, [r7, #28]
 800e16e:	440a      	add	r2, r1
 800e170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	e00f      	b.n	800e19c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	015a      	lsls	r2, r3, #5
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	4413      	add	r3, r2
 800e184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	69ba      	ldr	r2, [r7, #24]
 800e18c:	0151      	lsls	r1, r2, #5
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	440a      	add	r2, r1
 800e192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e19a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	015a      	lsls	r2, r3, #5
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	69ba      	ldr	r2, [r7, #24]
 800e1ac:	0151      	lsls	r1, r2, #5
 800e1ae:	69fa      	ldr	r2, [r7, #28]
 800e1b0:	440a      	add	r2, r1
 800e1b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3720      	adds	r7, #32
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	1ff80000 	.word	0x1ff80000

0800e1cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b087      	sub	sp, #28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	785b      	ldrb	r3, [r3, #1]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	f040 80ce 	bne.w	800e38a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d132      	bne.n	800e25c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	015a      	lsls	r2, r3, #5
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	693a      	ldr	r2, [r7, #16]
 800e206:	0151      	lsls	r1, r2, #5
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	440a      	add	r2, r1
 800e20c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	015a      	lsls	r2, r3, #5
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	4413      	add	r3, r2
 800e222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e226:	691b      	ldr	r3, [r3, #16]
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	0151      	lsls	r1, r2, #5
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	440a      	add	r2, r1
 800e230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	015a      	lsls	r2, r3, #5
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	4413      	add	r3, r2
 800e242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	0151      	lsls	r1, r2, #5
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	440a      	add	r2, r1
 800e250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e254:	0cdb      	lsrs	r3, r3, #19
 800e256:	04db      	lsls	r3, r3, #19
 800e258:	6113      	str	r3, [r2, #16]
 800e25a:	e04e      	b.n	800e2fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	4413      	add	r3, r2
 800e264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	693a      	ldr	r2, [r7, #16]
 800e26c:	0151      	lsls	r1, r2, #5
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	440a      	add	r2, r1
 800e272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e276:	0cdb      	lsrs	r3, r3, #19
 800e278:	04db      	lsls	r3, r3, #19
 800e27a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	015a      	lsls	r2, r3, #5
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	4413      	add	r3, r2
 800e284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	0151      	lsls	r1, r2, #5
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	440a      	add	r2, r1
 800e292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e296:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e29a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e29e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	699a      	ldr	r2, [r3, #24]
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d903      	bls.n	800e2b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	015a      	lsls	r2, r3, #5
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c0:	691b      	ldr	r3, [r3, #16]
 800e2c2:	693a      	ldr	r2, [r7, #16]
 800e2c4:	0151      	lsls	r1, r2, #5
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	440a      	add	r2, r1
 800e2ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e0:	691a      	ldr	r2, [r3, #16]
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2ea:	6939      	ldr	r1, [r7, #16]
 800e2ec:	0148      	lsls	r0, r1, #5
 800e2ee:	6979      	ldr	r1, [r7, #20]
 800e2f0:	4401      	add	r1, r0
 800e2f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e2fa:	79fb      	ldrb	r3, [r7, #7]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d11e      	bne.n	800e33e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d009      	beq.n	800e31c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	015a      	lsls	r2, r3, #5
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	4413      	add	r3, r2
 800e310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e314:	461a      	mov	r2, r3
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	0151      	lsls	r1, r2, #5
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	440a      	add	r2, r1
 800e332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	e097      	b.n	800e46e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	4413      	add	r3, r2
 800e346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	693a      	ldr	r2, [r7, #16]
 800e34e:	0151      	lsls	r1, r2, #5
 800e350:	697a      	ldr	r2, [r7, #20]
 800e352:	440a      	add	r2, r1
 800e354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e358:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e35c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 8083 	beq.w	800e46e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e36e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	f003 030f 	and.w	r3, r3, #15
 800e378:	2101      	movs	r1, #1
 800e37a:	fa01 f303 	lsl.w	r3, r1, r3
 800e37e:	6979      	ldr	r1, [r7, #20]
 800e380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e384:	4313      	orrs	r3, r2
 800e386:	634b      	str	r3, [r1, #52]	; 0x34
 800e388:	e071      	b.n	800e46e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	015a      	lsls	r2, r3, #5
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	4413      	add	r3, r2
 800e392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e396:	691b      	ldr	r3, [r3, #16]
 800e398:	693a      	ldr	r2, [r7, #16]
 800e39a:	0151      	lsls	r1, r2, #5
 800e39c:	697a      	ldr	r2, [r7, #20]
 800e39e:	440a      	add	r2, r1
 800e3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3a4:	0cdb      	lsrs	r3, r3, #19
 800e3a6:	04db      	lsls	r3, r3, #19
 800e3a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	015a      	lsls	r2, r3, #5
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	693a      	ldr	r2, [r7, #16]
 800e3ba:	0151      	lsls	r1, r2, #5
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	440a      	add	r2, r1
 800e3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	68da      	ldr	r2, [r3, #12]
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	68da      	ldr	r2, [r3, #12]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	015a      	lsls	r2, r3, #5
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	693a      	ldr	r2, [r7, #16]
 800e3f6:	0151      	lsls	r1, r2, #5
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	440a      	add	r2, r1
 800e3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	4413      	add	r3, r2
 800e40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e412:	691a      	ldr	r2, [r3, #16]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	69db      	ldr	r3, [r3, #28]
 800e418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e41c:	6939      	ldr	r1, [r7, #16]
 800e41e:	0148      	lsls	r0, r1, #5
 800e420:	6979      	ldr	r1, [r7, #20]
 800e422:	4401      	add	r1, r0
 800e424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e428:	4313      	orrs	r3, r2
 800e42a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d10d      	bne.n	800e44e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d009      	beq.n	800e44e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	6919      	ldr	r1, [r3, #16]
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	015a      	lsls	r2, r3, #5
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	4413      	add	r3, r2
 800e446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44a:	460a      	mov	r2, r1
 800e44c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	015a      	lsls	r2, r3, #5
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	4413      	add	r3, r2
 800e456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	0151      	lsls	r1, r2, #5
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	440a      	add	r2, r1
 800e464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e468:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e46c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	371c      	adds	r7, #28
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e486:	2300      	movs	r3, #0
 800e488:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e48a:	2300      	movs	r3, #0
 800e48c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	785b      	ldrb	r3, [r3, #1]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d14a      	bne.n	800e530 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4b2:	f040 8086 	bne.w	800e5c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	683a      	ldr	r2, [r7, #0]
 800e4c8:	7812      	ldrb	r2, [r2, #0]
 800e4ca:	0151      	lsls	r1, r2, #5
 800e4cc:	693a      	ldr	r2, [r7, #16]
 800e4ce:	440a      	add	r2, r1
 800e4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e4d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	015a      	lsls	r2, r3, #5
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	7812      	ldrb	r2, [r2, #0]
 800e4ee:	0151      	lsls	r1, r2, #5
 800e4f0:	693a      	ldr	r2, [r7, #16]
 800e4f2:	440a      	add	r2, r1
 800e4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3301      	adds	r3, #1
 800e502:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f242 7210 	movw	r2, #10000	; 0x2710
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d902      	bls.n	800e514 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	75fb      	strb	r3, [r7, #23]
          break;
 800e512:	e056      	b.n	800e5c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	015a      	lsls	r2, r3, #5
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	4413      	add	r3, r2
 800e51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e52c:	d0e7      	beq.n	800e4fe <USB_EPStopXfer+0x82>
 800e52e:	e048      	b.n	800e5c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	015a      	lsls	r2, r3, #5
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	4413      	add	r3, r2
 800e53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e548:	d13b      	bne.n	800e5c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	015a      	lsls	r2, r3, #5
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	4413      	add	r3, r2
 800e554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	7812      	ldrb	r2, [r2, #0]
 800e55e:	0151      	lsls	r1, r2, #5
 800e560:	693a      	ldr	r2, [r7, #16]
 800e562:	440a      	add	r2, r1
 800e564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e568:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e56c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	015a      	lsls	r2, r3, #5
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	4413      	add	r3, r2
 800e578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	7812      	ldrb	r2, [r2, #0]
 800e582:	0151      	lsls	r1, r2, #5
 800e584:	693a      	ldr	r2, [r7, #16]
 800e586:	440a      	add	r2, r1
 800e588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e58c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e590:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3301      	adds	r3, #1
 800e596:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f242 7210 	movw	r2, #10000	; 0x2710
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d902      	bls.n	800e5a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	75fb      	strb	r3, [r7, #23]
          break;
 800e5a6:	e00c      	b.n	800e5c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	015a      	lsls	r2, r3, #5
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5c0:	d0e7      	beq.n	800e592 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	371c      	adds	r7, #28
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b089      	sub	sp, #36	; 0x24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	4611      	mov	r1, r2
 800e5dc:	461a      	mov	r2, r3
 800e5de:	460b      	mov	r3, r1
 800e5e0:	71fb      	strb	r3, [r7, #7]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e5ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d123      	bne.n	800e63e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e5f6:	88bb      	ldrh	r3, [r7, #4]
 800e5f8:	3303      	adds	r3, #3
 800e5fa:	089b      	lsrs	r3, r3, #2
 800e5fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e5fe:	2300      	movs	r3, #0
 800e600:	61bb      	str	r3, [r7, #24]
 800e602:	e018      	b.n	800e636 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	031a      	lsls	r2, r3, #12
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	4413      	add	r3, r2
 800e60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e610:	461a      	mov	r2, r3
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	3301      	adds	r3, #1
 800e61c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	3301      	adds	r3, #1
 800e622:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	3301      	adds	r3, #1
 800e628:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	3301      	adds	r3, #1
 800e62e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	3301      	adds	r3, #1
 800e634:	61bb      	str	r3, [r7, #24]
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d3e2      	bcc.n	800e604 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3724      	adds	r7, #36	; 0x24
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b08b      	sub	sp, #44	; 0x2c
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	4613      	mov	r3, r2
 800e658:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e662:	88fb      	ldrh	r3, [r7, #6]
 800e664:	089b      	lsrs	r3, r3, #2
 800e666:	b29b      	uxth	r3, r3
 800e668:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e66a:	88fb      	ldrh	r3, [r7, #6]
 800e66c:	f003 0303 	and.w	r3, r3, #3
 800e670:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e672:	2300      	movs	r3, #0
 800e674:	623b      	str	r3, [r7, #32]
 800e676:	e014      	b.n	800e6a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	601a      	str	r2, [r3, #0]
    pDest++;
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	3301      	adds	r3, #1
 800e688:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	3301      	adds	r3, #1
 800e68e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	3301      	adds	r3, #1
 800e694:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	3301      	adds	r3, #1
 800e69a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e69c:	6a3b      	ldr	r3, [r7, #32]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	623b      	str	r3, [r7, #32]
 800e6a2:	6a3a      	ldr	r2, [r7, #32]
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d3e6      	bcc.n	800e678 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e6aa:	8bfb      	ldrh	r3, [r7, #30]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d01e      	beq.n	800e6ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f107 0310 	add.w	r3, r7, #16
 800e6c0:	6812      	ldr	r2, [r2, #0]
 800e6c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	6a3b      	ldr	r3, [r7, #32]
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	00db      	lsls	r3, r3, #3
 800e6cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	701a      	strb	r2, [r3, #0]
      i++;
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	623b      	str	r3, [r7, #32]
      pDest++;
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	3301      	adds	r3, #1
 800e6e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e6e2:	8bfb      	ldrh	r3, [r7, #30]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e6e8:	8bfb      	ldrh	r3, [r7, #30]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1ea      	bne.n	800e6c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	372c      	adds	r7, #44	; 0x2c
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	785b      	ldrb	r3, [r3, #1]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d12c      	bne.n	800e772 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	015a      	lsls	r2, r3, #5
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4413      	add	r3, r2
 800e720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	db12      	blt.n	800e750 <USB_EPSetStall+0x54>
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00f      	beq.n	800e750 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	0151      	lsls	r1, r2, #5
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	440a      	add	r2, r1
 800e746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e74a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e74e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	015a      	lsls	r2, r3, #5
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	0151      	lsls	r1, r2, #5
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	440a      	add	r2, r1
 800e766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e76a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	e02b      	b.n	800e7ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	015a      	lsls	r2, r3, #5
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	4413      	add	r3, r2
 800e77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	db12      	blt.n	800e7aa <USB_EPSetStall+0xae>
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00f      	beq.n	800e7aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	015a      	lsls	r2, r3, #5
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	4413      	add	r3, r2
 800e792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	0151      	lsls	r1, r2, #5
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	015a      	lsls	r2, r3, #5
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	0151      	lsls	r1, r2, #5
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	440a      	add	r2, r1
 800e7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3714      	adds	r7, #20
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	785b      	ldrb	r3, [r3, #1]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d128      	bne.n	800e846 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	015a      	lsls	r2, r3, #5
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68ba      	ldr	r2, [r7, #8]
 800e804:	0151      	lsls	r1, r2, #5
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	440a      	add	r2, r1
 800e80a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e80e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e812:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	791b      	ldrb	r3, [r3, #4]
 800e818:	2b03      	cmp	r3, #3
 800e81a:	d003      	beq.n	800e824 <USB_EPClearStall+0x4c>
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	791b      	ldrb	r3, [r3, #4]
 800e820:	2b02      	cmp	r3, #2
 800e822:	d138      	bne.n	800e896 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	015a      	lsls	r2, r3, #5
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	4413      	add	r3, r2
 800e82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	0151      	lsls	r1, r2, #5
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	440a      	add	r2, r1
 800e83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e83e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e842:	6013      	str	r3, [r2, #0]
 800e844:	e027      	b.n	800e896 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	0151      	lsls	r1, r2, #5
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	440a      	add	r2, r1
 800e85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e860:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e864:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	791b      	ldrb	r3, [r3, #4]
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d003      	beq.n	800e876 <USB_EPClearStall+0x9e>
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	791b      	ldrb	r3, [r3, #4]
 800e872:	2b02      	cmp	r3, #2
 800e874:	d10f      	bne.n	800e896 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	015a      	lsls	r2, r3, #5
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	4413      	add	r3, r2
 800e87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	0151      	lsls	r1, r2, #5
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	440a      	add	r2, r1
 800e88c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e894:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e016      	b.n	800e8e4 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	015a      	lsls	r2, r3, #5
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e8c8:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	015a      	lsls	r2, r3, #5
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e8dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	617b      	str	r3, [r7, #20]
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	2b0e      	cmp	r3, #14
 800e8e8:	d9e5      	bls.n	800e8b6 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	2300      	movs	r3, #0
 800e900:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e908:	461a      	mov	r2, r3
 800e90a:	2300      	movs	r3, #0
 800e90c:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7ff f842 	bl	800d998 <USB_FlushRxFifo>
 800e914:	4603      	mov	r3, r0
 800e916:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e918:	7bfb      	ldrb	r3, [r7, #15]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d001      	beq.n	800e922 <USB_StopDevice+0x7e>
  {
    return ret;
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	e00b      	b.n	800e93a <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800e922:	2110      	movs	r1, #16
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff f803 	bl	800d930 <USB_FlushTxFifo>
 800e92a:	4603      	mov	r3, r0
 800e92c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <USB_StopDevice+0x94>
  {
    return ret;
 800e934:	7bfb      	ldrb	r3, [r7, #15]
 800e936:	e000      	b.n	800e93a <USB_StopDevice+0x96>
  }

  return ret;
 800e938:	7bfb      	ldrb	r3, [r7, #15]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e942:	b480      	push	{r7}
 800e944:	b085      	sub	sp, #20
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	460b      	mov	r3, r1
 800e94c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e960:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e964:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	78fb      	ldrb	r3, [r7, #3]
 800e970:	011b      	lsls	r3, r3, #4
 800e972:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e976:	68f9      	ldr	r1, [r7, #12]
 800e978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e97c:	4313      	orrs	r3, r2
 800e97e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3714      	adds	r7, #20
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e98e:	b480      	push	{r7}
 800e990:	b085      	sub	sp, #20
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9a8:	f023 0303 	bic.w	r3, r3, #3
 800e9ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9bc:	f023 0302 	bic.w	r3, r3, #2
 800e9c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9ea:	f023 0303 	bic.w	r3, r3, #3
 800e9ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9fe:	f043 0302 	orr.w	r3, r3, #2
 800ea02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b085      	sub	sp, #20
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	695b      	ldr	r3, [r3, #20]
 800ea1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	4013      	ands	r3, r2
 800ea28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	4013      	ands	r3, r2
 800ea5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	0c1b      	lsrs	r3, r3, #16
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	b29b      	uxth	r3, r3
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	015a      	lsls	r2, r3, #5
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	4413      	add	r3, r2
 800eab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	4013      	ands	r3, r2
 800eacc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eace:	68bb      	ldr	r3, [r7, #8]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3714      	adds	r7, #20
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eadc:	b480      	push	{r7}
 800eade:	b087      	sub	sp, #28
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eafe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eb00:	78fb      	ldrb	r3, [r7, #3]
 800eb02:	f003 030f 	and.w	r3, r3, #15
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	fa22 f303 	lsr.w	r3, r2, r3
 800eb0c:	01db      	lsls	r3, r3, #7
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	693a      	ldr	r2, [r7, #16]
 800eb12:	4313      	orrs	r3, r2
 800eb14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eb16:	78fb      	ldrb	r3, [r7, #3]
 800eb18:	015a      	lsls	r2, r3, #5
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	4013      	ands	r3, r2
 800eb28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	371c      	adds	r7, #28
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	f003 0301 	and.w	r3, r3, #1
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb72:	f023 0307 	bic.w	r3, r3, #7
 800eb76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
	...

0800eb9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b087      	sub	sp, #28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	460b      	mov	r3, r1
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	333c      	adds	r3, #60	; 0x3c
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	4a26      	ldr	r2, [pc, #152]	; (800ec54 <USB_EP0_OutStart+0xb8>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d90a      	bls.n	800ebd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebd0:	d101      	bne.n	800ebd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e037      	b.n	800ec46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebdc:	461a      	mov	r2, r3
 800ebde:	2300      	movs	r3, #0
 800ebe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe8:	691b      	ldr	r3, [r3, #16]
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec04:	f043 0318 	orr.w	r3, r3, #24
 800ec08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ec1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ec1e:	7afb      	ldrb	r3, [r7, #11]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d10f      	bne.n	800ec44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ec42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	371c      	adds	r7, #28
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	4f54300a 	.word	0x4f54300a

0800ec58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	3301      	adds	r3, #1
 800ec68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4a13      	ldr	r2, [pc, #76]	; (800ecbc <USB_CoreReset+0x64>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d901      	bls.n	800ec76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e01b      	b.n	800ecae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	daf2      	bge.n	800ec64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	f043 0201 	orr.w	r2, r3, #1
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3301      	adds	r3, #1
 800ec92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	4a09      	ldr	r2, [pc, #36]	; (800ecbc <USB_CoreReset+0x64>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d901      	bls.n	800eca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec9c:	2303      	movs	r3, #3
 800ec9e:	e006      	b.n	800ecae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d0f0      	beq.n	800ec8e <USB_CoreReset+0x36>

  return HAL_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	00030d40 	.word	0x00030d40

0800ecc0 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time =0;
uint8_t invoke_date =0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a13      	ldr	r2, [pc, #76]	; (800ed18 <HAL_UART_RxCpltCallback+0x58>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d11f      	bne.n	800ed10 <HAL_UART_RxCpltCallback+0x50>
 800ecd0:	4b12      	ldr	r3, [pc, #72]	; (800ed1c <HAL_UART_RxCpltCallback+0x5c>)
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d01b      	beq.n	800ed10 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800ecd8:	2201      	movs	r2, #1
 800ecda:	4911      	ldr	r1, [pc, #68]	; (800ed20 <HAL_UART_RxCpltCallback+0x60>)
 800ecdc:	480e      	ldr	r0, [pc, #56]	; (800ed18 <HAL_UART_RxCpltCallback+0x58>)
 800ecde:	f7fc fe37 	bl	800b950 <HAL_UART_Receive_IT>
				UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800ece2:	4b10      	ldr	r3, [pc, #64]	; (800ed24 <HAL_UART_RxCpltCallback+0x64>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10a      	bne.n	800ed00 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800ecea:	4b0d      	ldr	r3, [pc, #52]	; (800ed20 <HAL_UART_RxCpltCallback+0x60>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800ecf0:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <HAL_UART_RxCpltCallback+0x68>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	7bfa      	ldrb	r2, [r7, #15]
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f001 ff23 	bl	8010b44 <embeddedCliReceiveChar>
 800ecfe:	e002      	b.n	800ed06 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800ed00:	4b0a      	ldr	r3, [pc, #40]	; (800ed2c <HAL_UART_RxCpltCallback+0x6c>)
 800ed02:	2201      	movs	r2, #1
 800ed04:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800ed06:	f7f4 fed9 	bl	8003abc <HAL_GetTick>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	4a08      	ldr	r2, [pc, #32]	; (800ed30 <HAL_UART_RxCpltCallback+0x70>)
 800ed0e:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800ed10:	bf00      	nop
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	200019a0 	.word	0x200019a0
 800ed1c:	20001a5d 	.word	0x20001a5d
 800ed20:	20001a5c 	.word	0x20001a5c
 800ed24:	20001a5e 	.word	0x20001a5e
 800ed28:	20001a50 	.word	0x20001a50
 800ed2c:	20001a5f 	.word	0x20001a5f
 800ed30:	200016f8 	.word	0x200016f8

0800ed34 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800ed44:	f107 010f 	add.w	r1, r7, #15
 800ed48:	2364      	movs	r3, #100	; 0x64
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	4803      	ldr	r0, [pc, #12]	; (800ed5c <writeCharToCli+0x28>)
 800ed4e:	f7fc fd6d 	bl	800b82c <HAL_UART_Transmit>
}
 800ed52:	bf00      	nop
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	200019a0 	.word	0x200019a0

0800ed60 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800ed60:	b40e      	push	{r1, r2, r3}
 800ed62:	b580      	push	{r7, lr}
 800ed64:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ed6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ed72:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800ed74:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800ed78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ed7c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ed80:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800ed82:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ed86:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ed8a:	f107 000c 	add.w	r0, r7, #12
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800ed94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed98:	f00e fb50 	bl	801d43c <vsniprintf>
 800ed9c:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800eda0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	da08      	bge.n	800edba <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800eda8:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <cli_printf+0x7c>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	221d      	movs	r2, #29
 800edb0:	2101      	movs	r1, #1
 800edb2:	480b      	ldr	r0, [pc, #44]	; (800ede0 <cli_printf+0x80>)
 800edb4:	f00c fb4c 	bl	801b450 <fwrite>
 800edb8:	e009      	b.n	800edce <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800edba:	f107 020c 	add.w	r2, r7, #12
 800edbe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800edc2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800edc6:	4611      	mov	r1, r2
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	f001 ffa1 	bl	8010d10 <embeddedCliPrint>
}
 800edce:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800edd2:	46bd      	mov	sp, r7
 800edd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edd8:	b003      	add	sp, #12
 800edda:	4770      	bx	lr
 800eddc:	20000144 	.word	0x20000144
 800ede0:	080205bc 	.word	0x080205bc

0800ede4 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b088      	sub	sp, #32
 800ede8:	af00      	add	r7, sp, #0
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	60b9      	str	r1, [r7, #8]
 800edee:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	61fb      	str	r3, [r7, #28]
	   int i, j;
	prev_max_wait_time = HAL_GetTick();
 800edf4:	f7f4 fe62 	bl	8003abc <HAL_GetTick>
 800edf8:	4603      	mov	r3, r0
 800edfa:	4a5b      	ldr	r2, [pc, #364]	; (800ef68 <receiveString+0x184>)
 800edfc:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800edfe:	4b5b      	ldr	r3, [pc, #364]	; (800ef6c <receiveString+0x188>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f000 80a0 	beq.w	800ef48 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800ee08:	4b59      	ldr	r3, [pc, #356]	; (800ef70 <receiveString+0x18c>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b0d      	cmp	r3, #13
 800ee0e:	d004      	beq.n	800ee1a <receiveString+0x36>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	3b01      	subs	r3, #1
 800ee14:	69fa      	ldr	r2, [r7, #28]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d164      	bne.n	800eee4 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	4413      	add	r3, r2
 800ee20:	2200      	movs	r2, #0
 800ee22:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800ee24:	4b51      	ldr	r3, [pc, #324]	; (800ef6c <receiveString+0x188>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				  //Iterating each character and removing non alphabetical characters.
				    for( i = 0; buffer[i] != '\0'; ++i)
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61bb      	str	r3, [r7, #24]
 800ee2e:	e052      	b.n	800eed6 <receiveString+0xf2>
								|| buffer[i] == '_'
								|| buffer[i] == ':'
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
								|| buffer[i] == '\0') )
				        {
				            for( j = i; buffer[j] != '\0'; ++j)
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	617b      	str	r3, [r7, #20]
 800ee34:	e00b      	b.n	800ee4e <receiveString+0x6a>
				            {
				            	buffer[j] = buffer[j+1];
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	68ba      	ldr	r2, [r7, #8]
 800ee3c:	441a      	add	r2, r3
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	68b9      	ldr	r1, [r7, #8]
 800ee42:	440b      	add	r3, r1
 800ee44:	7812      	ldrb	r2, [r2, #0]
 800ee46:	701a      	strb	r2, [r3, #0]
				            for( j = i; buffer[j] != '\0'; ++j)
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	617b      	str	r3, [r7, #20]
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	4413      	add	r3, r2
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1ed      	bne.n	800ee36 <receiveString+0x52>
				            }
				            buffer[j] = '\0';
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	4413      	add	r3, r2
 800ee60:	2200      	movs	r2, #0
 800ee62:	701a      	strb	r2, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	4413      	add	r3, r2
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b60      	cmp	r3, #96	; 0x60
 800ee6e:	d905      	bls.n	800ee7c <receiveString+0x98>
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	4413      	add	r3, r2
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b7a      	cmp	r3, #122	; 0x7a
 800ee7a:	d929      	bls.n	800eed0 <receiveString+0xec>
				        		|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	4413      	add	r3, r2
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b40      	cmp	r3, #64	; 0x40
 800ee86:	d905      	bls.n	800ee94 <receiveString+0xb0>
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	68ba      	ldr	r2, [r7, #8]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2b5a      	cmp	r3, #90	; 0x5a
 800ee92:	d91d      	bls.n	800eed0 <receiveString+0xec>
								|| buffer[i] == '_'
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	4413      	add	r3, r2
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	2b5f      	cmp	r3, #95	; 0x5f
 800ee9e:	d017      	beq.n	800eed0 <receiveString+0xec>
								|| buffer[i] == ':'
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	2b3a      	cmp	r3, #58	; 0x3a
 800eeaa:	d011      	beq.n	800eed0 <receiveString+0xec>
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	2b2f      	cmp	r3, #47	; 0x2f
 800eeb6:	d905      	bls.n	800eec4 <receiveString+0xe0>
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	68ba      	ldr	r2, [r7, #8]
 800eebc:	4413      	add	r3, r2
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b39      	cmp	r3, #57	; 0x39
 800eec2:	d905      	bls.n	800eed0 <receiveString+0xec>
								|| buffer[i] == '\0') )
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	4413      	add	r3, r2
 800eeca:	781b      	ldrb	r3, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1af      	bne.n	800ee30 <receiveString+0x4c>
				    for( i = 0; buffer[i] != '\0'; ++i)
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	3301      	adds	r3, #1
 800eed4:	61bb      	str	r3, [r7, #24]
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	4413      	add	r3, r2
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1c0      	bne.n	800ee64 <receiveString+0x80>
				        }
				    }
				break;
 800eee2:	e03d      	b.n	800ef60 <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b' || UART_CLI_rxBuffer[0] == 0x7F))
 800eee4:	4b22      	ldr	r3, [pc, #136]	; (800ef70 <receiveString+0x18c>)
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d003      	beq.n	800eef4 <receiveString+0x110>
 800eeec:	4b20      	ldr	r3, [pc, #128]	; (800ef70 <receiveString+0x18c>)
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	2b7f      	cmp	r3, #127	; 0x7f
 800eef2:	d117      	bne.n	800ef24 <receiveString+0x140>
				{
			        cli->writeChar(cli, '\b');
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2108      	movs	r1, #8
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	4798      	blx	r3
			        cli->writeChar(cli, ' ');
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2120      	movs	r1, #32
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	4798      	blx	r3
			        cli->writeChar(cli, '\b');
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2108      	movs	r1, #8
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	4798      	blx	r3
					--index;
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	3b01      	subs	r3, #1
 800ef16:	61fb      	str	r3, [r7, #28]
				  	buffer[index] = '\0';
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	2200      	movs	r2, #0
 800ef20:	701a      	strb	r2, [r3, #0]
 800ef22:	e00e      	b.n	800ef42 <receiveString+0x15e>
				}
				else
				{
				buffer[index++] = UART_CLI_rxBuffer[0];
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	1c5a      	adds	r2, r3, #1
 800ef28:	61fa      	str	r2, [r7, #28]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	4a10      	ldr	r2, [pc, #64]	; (800ef70 <receiveString+0x18c>)
 800ef30:	7812      	ldrb	r2, [r2, #0]
 800ef32:	701a      	strb	r2, [r3, #0]
				cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a0d      	ldr	r2, [pc, #52]	; (800ef70 <receiveString+0x18c>)
 800ef3a:	7812      	ldrb	r2, [r2, #0]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800ef42:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <receiveString+0x188>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - prev_max_wait_time > max_wait_time)
 800ef48:	f7f4 fdb8 	bl	8003abc <HAL_GetTick>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <receiveString+0x184>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	1ad2      	subs	r2, r2, r3
 800ef54:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <receiveString+0x190>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d800      	bhi.n	800ef5e <receiveString+0x17a>
		if (flag_cli) {
 800ef5c:	e74f      	b.n	800edfe <receiveString+0x1a>
		{
          //we break the loop if time goes above 5min
			break;
 800ef5e:	bf00      	nop
		}

	}
}
 800ef60:	bf00      	nop
 800ef62:	3720      	adds	r7, #32
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	20001a54 	.word	0x20001a54
 800ef6c:	20001a5f 	.word	0x20001a5f
 800ef70:	20001a5c 	.word	0x20001a5c
 800ef74:	2000001c 	.word	0x2000001c

0800ef78 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800ef84:	4903      	ldr	r1, [pc, #12]	; (800ef94 <onClearCLI+0x1c>)
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff feea 	bl	800ed60 <cli_printf>
}
 800ef8c:	bf00      	nop
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	080205dc 	.word	0x080205dc

0800ef98 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b092      	sub	sp, #72	; 0x48
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800efa4:	4b24      	ldr	r3, [pc, #144]	; (800f038 <debug_scd4x_PM25+0xa0>)
 800efa6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to enable debug for scd4x and PM y/n?");
 800efa8:	4924      	ldr	r1, [pc, #144]	; (800f03c <debug_scd4x_PM25+0xa4>)
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7ff fed8 	bl	800ed60 <cli_printf>

	cli_other = 1;
 800efb0:	4b23      	ldr	r3, [pc, #140]	; (800f040 <debug_scd4x_PM25+0xa8>)
 800efb2:	2201      	movs	r2, #1
 800efb4:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800efb6:	4b23      	ldr	r3, [pc, #140]	; (800f044 <debug_scd4x_PM25+0xac>)
 800efb8:	2200      	movs	r2, #0
 800efba:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800efbc:	f107 0310 	add.w	r3, r7, #16
 800efc0:	2232      	movs	r2, #50	; 0x32
 800efc2:	4619      	mov	r1, r3
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f7ff ff0d 	bl	800ede4 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800efca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800efcc:	f7f1 f912 	bl	80001f4 <strlen>
 800efd0:	4603      	mov	r3, r0
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efda:	481b      	ldr	r0, [pc, #108]	; (800f048 <debug_scd4x_PM25+0xb0>)
 800efdc:	f7fc fc26 	bl	800b82c <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800efe0:	f107 0310 	add.w	r3, r7, #16
 800efe4:	2179      	movs	r1, #121	; 0x79
 800efe6:	4618      	mov	r0, r3
 800efe8:	f00d fabe 	bl	801c568 <strchr>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d007      	beq.n	800f002 <debug_scd4x_PM25+0x6a>
		{
			debug_scd_pm=1;
 800eff2:	4b16      	ldr	r3, [pc, #88]	; (800f04c <debug_scd4x_PM25+0xb4>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug enabled");
 800eff8:	4915      	ldr	r1, [pc, #84]	; (800f050 <debug_scd4x_PM25+0xb8>)
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f7ff feb0 	bl	800ed60 <cli_printf>
 800f000:	e00f      	b.n	800f022 <debug_scd4x_PM25+0x8a>
		}
		else if(strstr(buffer, "n"))
 800f002:	f107 0310 	add.w	r3, r7, #16
 800f006:	216e      	movs	r1, #110	; 0x6e
 800f008:	4618      	mov	r0, r3
 800f00a:	f00d faad 	bl	801c568 <strchr>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d006      	beq.n	800f022 <debug_scd4x_PM25+0x8a>
		{
			debug_scd_pm=0;
 800f014:	4b0d      	ldr	r3, [pc, #52]	; (800f04c <debug_scd4x_PM25+0xb4>)
 800f016:	2200      	movs	r2, #0
 800f018:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug disabled");
 800f01a:	490e      	ldr	r1, [pc, #56]	; (800f054 <debug_scd4x_PM25+0xbc>)
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	f7ff fe9f 	bl	800ed60 <cli_printf>
		}


		flag_cli = 0;
 800f022:	4b08      	ldr	r3, [pc, #32]	; (800f044 <debug_scd4x_PM25+0xac>)
 800f024:	2200      	movs	r2, #0
 800f026:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f028:	4b05      	ldr	r3, [pc, #20]	; (800f040 <debug_scd4x_PM25+0xa8>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	701a      	strb	r2, [r3, #0]
}
 800f02e:	bf00      	nop
 800f030:	3748      	adds	r7, #72	; 0x48
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	080205e4 	.word	0x080205e4
 800f03c:	080205e8 	.word	0x080205e8
 800f040:	20001a5e 	.word	0x20001a5e
 800f044:	20001a5f 	.word	0x20001a5f
 800f048:	200019a0 	.word	0x200019a0
 800f04c:	200014b0 	.word	0x200014b0
 800f050:	0802061c 	.word	0x0802061c
 800f054:	0802062c 	.word	0x0802062c

0800f058 <DeviceSignature>:


void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli,"Device ID/Signature: TF241_%s.",	ver_GetUid());
 800f064:	f7f3 f908 	bl	8002278 <ver_GetUid>
 800f068:	4603      	mov	r3, r0
 800f06a:	461a      	mov	r2, r3
 800f06c:	4903      	ldr	r1, [pc, #12]	; (800f07c <DeviceSignature+0x24>)
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7ff fe76 	bl	800ed60 <cli_printf>
}
 800f074:	bf00      	nop
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	0802063c 	.word	0x0802063c

0800f080 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f080:	b580      	push	{r7, lr}
 800f082:	b092      	sub	sp, #72	; 0x48
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f08c:	4b2d      	ldr	r3, [pc, #180]	; (800f144 <SetID+0xc4>)
 800f08e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f090:	492d      	ldr	r1, [pc, #180]	; (800f148 <SetID+0xc8>)
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f7ff fe64 	bl	800ed60 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f098:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f09a:	f7f1 f8ab 	bl	80001f4 <strlen>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0a8:	4828      	ldr	r0, [pc, #160]	; (800f14c <SetID+0xcc>)
 800f0aa:	f7fc fbbf 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"Set the ID. Keep ID below 30 characters");
 800f0ae:	4928      	ldr	r1, [pc, #160]	; (800f150 <SetID+0xd0>)
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f7ff fe55 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f0b6:	4b27      	ldr	r3, [pc, #156]	; (800f154 <SetID+0xd4>)
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f0bc:	4b26      	ldr	r3, [pc, #152]	; (800f158 <SetID+0xd8>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f0c2:	f107 0310 	add.w	r3, r7, #16
 800f0c6:	2232      	movs	r2, #50	; 0x32
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f7ff fe8a 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f0d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0d2:	f7f1 f88f 	bl	80001f4 <strlen>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0e0:	481a      	ldr	r0, [pc, #104]	; (800f14c <SetID+0xcc>)
 800f0e2:	f7fc fba3 	bl	800b82c <HAL_UART_Transmit>

	len = strlen(buffer);
 800f0e6:	f107 0310 	add.w	r3, r7, #16
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7f1 f882 	bl	80001f4 <strlen>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 30)
 800f0f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0fa:	2b1d      	cmp	r3, #29
 800f0fc:	d814      	bhi.n	800f128 <SetID+0xa8>
	{
	   if(buffer[0] != '\0' )
 800f0fe:	7c3b      	ldrb	r3, [r7, #16]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d015      	beq.n	800f130 <SetID+0xb0>
		{if(buffer != NULL)
		{
			strcpy(_Flash_Packet.id,buffer);
 800f104:	f107 0310 	add.w	r3, r7, #16
 800f108:	4619      	mov	r1, r3
 800f10a:	4814      	ldr	r0, [pc, #80]	; (800f15c <SetID+0xdc>)
 800f10c:	f00d fa39 	bl	801c582 <strcpy>
			set_param_flags();
 800f110:	4b13      	ldr	r3, [pc, #76]	; (800f160 <SetID+0xe0>)
 800f112:	2201      	movs	r2, #1
 800f114:	701a      	strb	r2, [r3, #0]
 800f116:	4b13      	ldr	r3, [pc, #76]	; (800f164 <SetID+0xe4>)
 800f118:	2201      	movs	r2, #1
 800f11a:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"ID is set to: %s",_Flash_Packet.id);
 800f11c:	4a0f      	ldr	r2, [pc, #60]	; (800f15c <SetID+0xdc>)
 800f11e:	4912      	ldr	r1, [pc, #72]	; (800f168 <SetID+0xe8>)
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f7ff fe1d 	bl	800ed60 <cli_printf>
 800f126:	e003      	b.n	800f130 <SetID+0xb0>
		}
		}
	}
	else
	{
		cli_printf(cli,"ID is too long");
 800f128:	4910      	ldr	r1, [pc, #64]	; (800f16c <SetID+0xec>)
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f7ff fe18 	bl	800ed60 <cli_printf>
	}

	flag_cli = 0;
 800f130:	4b09      	ldr	r3, [pc, #36]	; (800f158 <SetID+0xd8>)
 800f132:	2200      	movs	r2, #0
 800f134:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f136:	4b07      	ldr	r3, [pc, #28]	; (800f154 <SetID+0xd4>)
 800f138:	2200      	movs	r2, #0
 800f13a:	701a      	strb	r2, [r3, #0]

}
 800f13c:	bf00      	nop
 800f13e:	3748      	adds	r7, #72	; 0x48
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	080205e4 	.word	0x080205e4
 800f148:	0802065c 	.word	0x0802065c
 800f14c:	200019a0 	.word	0x200019a0
 800f150:	08020694 	.word	0x08020694
 800f154:	20001a5e 	.word	0x20001a5e
 800f158:	20001a5f 	.word	0x20001a5f
 800f15c:	200013a9 	.word	0x200013a9
 800f160:	200014b1 	.word	0x200014b1
 800f164:	200014b2 	.word	0x200014b2
 800f168:	080206bc 	.word	0x080206bc
 800f16c:	080206d0 	.word	0x080206d0

0800f170 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f170:	b580      	push	{r7, lr}
 800f172:	b092      	sub	sp, #72	; 0x48
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f17c:	4b2d      	ldr	r3, [pc, #180]	; (800f234 <SetLocation+0xc4>)
 800f17e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f180:	492d      	ldr	r1, [pc, #180]	; (800f238 <SetLocation+0xc8>)
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	f7ff fdec 	bl	800ed60 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f188:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f18a:	f7f1 f833 	bl	80001f4 <strlen>
 800f18e:	4603      	mov	r3, r0
 800f190:	b29a      	uxth	r2, r3
 800f192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f198:	4828      	ldr	r0, [pc, #160]	; (800f23c <SetLocation+0xcc>)
 800f19a:	f7fc fb47 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"Set the Location. Keep Location below 15 characters");
 800f19e:	4928      	ldr	r1, [pc, #160]	; (800f240 <SetLocation+0xd0>)
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f7ff fddd 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f1a6:	4b27      	ldr	r3, [pc, #156]	; (800f244 <SetLocation+0xd4>)
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f1ac:	4b26      	ldr	r3, [pc, #152]	; (800f248 <SetLocation+0xd8>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f1b2:	f107 0310 	add.w	r3, r7, #16
 800f1b6:	2232      	movs	r2, #50	; 0x32
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f7ff fe12 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f1c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f1c2:	f7f1 f817 	bl	80001f4 <strlen>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1d0:	481a      	ldr	r0, [pc, #104]	; (800f23c <SetLocation+0xcc>)
 800f1d2:	f7fc fb2b 	bl	800b82c <HAL_UART_Transmit>

	len = strlen(buffer);
 800f1d6:	f107 0310 	add.w	r3, r7, #16
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7f1 f80a 	bl	80001f4 <strlen>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f1e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1ea:	2b0e      	cmp	r3, #14
 800f1ec:	d814      	bhi.n	800f218 <SetLocation+0xa8>
	{
		if(buffer[0] != '\0' )
 800f1ee:	7c3b      	ldrb	r3, [r7, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d015      	beq.n	800f220 <SetLocation+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.location,buffer);
 800f1f4:	f107 0310 	add.w	r3, r7, #16
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4814      	ldr	r0, [pc, #80]	; (800f24c <SetLocation+0xdc>)
 800f1fc:	f00d f9c1 	bl	801c582 <strcpy>
			set_param_flags();
 800f200:	4b13      	ldr	r3, [pc, #76]	; (800f250 <SetLocation+0xe0>)
 800f202:	2201      	movs	r2, #1
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	4b13      	ldr	r3, [pc, #76]	; (800f254 <SetLocation+0xe4>)
 800f208:	2201      	movs	r2, #1
 800f20a:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Location is set to: %s",_Flash_Packet.location);
 800f20c:	4a0f      	ldr	r2, [pc, #60]	; (800f24c <SetLocation+0xdc>)
 800f20e:	4912      	ldr	r1, [pc, #72]	; (800f258 <SetLocation+0xe8>)
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f7ff fda5 	bl	800ed60 <cli_printf>
 800f216:	e003      	b.n	800f220 <SetLocation+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"Location is too long");
 800f218:	4910      	ldr	r1, [pc, #64]	; (800f25c <SetLocation+0xec>)
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7ff fda0 	bl	800ed60 <cli_printf>
	}

	flag_cli = 0;
 800f220:	4b09      	ldr	r3, [pc, #36]	; (800f248 <SetLocation+0xd8>)
 800f222:	2200      	movs	r2, #0
 800f224:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f226:	4b07      	ldr	r3, [pc, #28]	; (800f244 <SetLocation+0xd4>)
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]

}
 800f22c:	bf00      	nop
 800f22e:	3748      	adds	r7, #72	; 0x48
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	080205e4 	.word	0x080205e4
 800f238:	0802065c 	.word	0x0802065c
 800f23c:	200019a0 	.word	0x200019a0
 800f240:	080206e0 	.word	0x080206e0
 800f244:	20001a5e 	.word	0x20001a5e
 800f248:	20001a5f 	.word	0x20001a5f
 800f24c:	200013db 	.word	0x200013db
 800f250:	200014b1 	.word	0x200014b1
 800f254:	200014b2 	.word	0x200014b2
 800f258:	08020714 	.word	0x08020714
 800f25c:	0802072c 	.word	0x0802072c

0800f260 <Setname>:

void Setname(EmbeddedCli *cli, char *args, void *context) {
 800f260:	b580      	push	{r7, lr}
 800f262:	b092      	sub	sp, #72	; 0x48
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f26c:	4b2d      	ldr	r3, [pc, #180]	; (800f324 <Setname+0xc4>)
 800f26e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f270:	492d      	ldr	r1, [pc, #180]	; (800f328 <Setname+0xc8>)
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f7ff fd74 	bl	800ed60 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f278:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f27a:	f7f0 ffbb 	bl	80001f4 <strlen>
 800f27e:	4603      	mov	r3, r0
 800f280:	b29a      	uxth	r2, r3
 800f282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f288:	4828      	ldr	r0, [pc, #160]	; (800f32c <Setname+0xcc>)
 800f28a:	f7fc facf 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"Set the name. Keep name below 15 characters");
 800f28e:	4928      	ldr	r1, [pc, #160]	; (800f330 <Setname+0xd0>)
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f7ff fd65 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f296:	4b27      	ldr	r3, [pc, #156]	; (800f334 <Setname+0xd4>)
 800f298:	2201      	movs	r2, #1
 800f29a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f29c:	4b26      	ldr	r3, [pc, #152]	; (800f338 <Setname+0xd8>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f2a2:	f107 0310 	add.w	r3, r7, #16
 800f2a6:	2232      	movs	r2, #50	; 0x32
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff fd9a 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f2b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f2b2:	f7f0 ff9f 	bl	80001f4 <strlen>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f2be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2c0:	481a      	ldr	r0, [pc, #104]	; (800f32c <Setname+0xcc>)
 800f2c2:	f7fc fab3 	bl	800b82c <HAL_UART_Transmit>

	len = strlen(buffer);
 800f2c6:	f107 0310 	add.w	r3, r7, #16
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7f0 ff92 	bl	80001f4 <strlen>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f2d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2da:	2b0e      	cmp	r3, #14
 800f2dc:	d814      	bhi.n	800f308 <Setname+0xa8>
	{
		   if(buffer[0] != '\0' )
 800f2de:	7c3b      	ldrb	r3, [r7, #16]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d015      	beq.n	800f310 <Setname+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.name,buffer);
 800f2e4:	f107 0310 	add.w	r3, r7, #16
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4814      	ldr	r0, [pc, #80]	; (800f33c <Setname+0xdc>)
 800f2ec:	f00d f949 	bl	801c582 <strcpy>
			set_param_flags();
 800f2f0:	4b13      	ldr	r3, [pc, #76]	; (800f340 <Setname+0xe0>)
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	4b13      	ldr	r3, [pc, #76]	; (800f344 <Setname+0xe4>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"name is set to: %s",_Flash_Packet.name);
 800f2fc:	4a0f      	ldr	r2, [pc, #60]	; (800f33c <Setname+0xdc>)
 800f2fe:	4912      	ldr	r1, [pc, #72]	; (800f348 <Setname+0xe8>)
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f7ff fd2d 	bl	800ed60 <cli_printf>
 800f306:	e003      	b.n	800f310 <Setname+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"name is too long");
 800f308:	4910      	ldr	r1, [pc, #64]	; (800f34c <Setname+0xec>)
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7ff fd28 	bl	800ed60 <cli_printf>
	}

	flag_cli = 0;
 800f310:	4b09      	ldr	r3, [pc, #36]	; (800f338 <Setname+0xd8>)
 800f312:	2200      	movs	r2, #0
 800f314:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f316:	4b07      	ldr	r3, [pc, #28]	; (800f334 <Setname+0xd4>)
 800f318:	2200      	movs	r2, #0
 800f31a:	701a      	strb	r2, [r3, #0]

}
 800f31c:	bf00      	nop
 800f31e:	3748      	adds	r7, #72	; 0x48
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	080205e4 	.word	0x080205e4
 800f328:	0802065c 	.word	0x0802065c
 800f32c:	200019a0 	.word	0x200019a0
 800f330:	08020744 	.word	0x08020744
 800f334:	20001a5e 	.word	0x20001a5e
 800f338:	20001a5f 	.word	0x20001a5f
 800f33c:	2000140d 	.word	0x2000140d
 800f340:	200014b1 	.word	0x200014b1
 800f344:	200014b2 	.word	0x200014b2
 800f348:	08020770 	.word	0x08020770
 800f34c:	08020784 	.word	0x08020784

0800f350 <Setgroup>:

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800f350:	b580      	push	{r7, lr}
 800f352:	b092      	sub	sp, #72	; 0x48
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f35c:	4b2d      	ldr	r3, [pc, #180]	; (800f414 <Setgroup+0xc4>)
 800f35e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f360:	492d      	ldr	r1, [pc, #180]	; (800f418 <Setgroup+0xc8>)
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff fcfc 	bl	800ed60 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f368:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f36a:	f7f0 ff43 	bl	80001f4 <strlen>
 800f36e:	4603      	mov	r3, r0
 800f370:	b29a      	uxth	r2, r3
 800f372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f378:	4828      	ldr	r0, [pc, #160]	; (800f41c <Setgroup+0xcc>)
 800f37a:	f7fc fa57 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"Set the group. Keep name below 15 characters");
 800f37e:	4928      	ldr	r1, [pc, #160]	; (800f420 <Setgroup+0xd0>)
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7ff fced 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f386:	4b27      	ldr	r3, [pc, #156]	; (800f424 <Setgroup+0xd4>)
 800f388:	2201      	movs	r2, #1
 800f38a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f38c:	4b26      	ldr	r3, [pc, #152]	; (800f428 <Setgroup+0xd8>)
 800f38e:	2200      	movs	r2, #0
 800f390:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f392:	f107 0310 	add.w	r3, r7, #16
 800f396:	2232      	movs	r2, #50	; 0x32
 800f398:	4619      	mov	r1, r3
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f7ff fd22 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f3a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f3a2:	f7f0 ff27 	bl	80001f4 <strlen>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3b0:	481a      	ldr	r0, [pc, #104]	; (800f41c <Setgroup+0xcc>)
 800f3b2:	f7fc fa3b 	bl	800b82c <HAL_UART_Transmit>

	len = strlen(buffer);
 800f3b6:	f107 0310 	add.w	r3, r7, #16
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7f0 ff1a 	bl	80001f4 <strlen>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f3c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f3ca:	2b0e      	cmp	r3, #14
 800f3cc:	d814      	bhi.n	800f3f8 <Setgroup+0xa8>
	{
		   if(buffer[0] != '\0' )
 800f3ce:	7c3b      	ldrb	r3, [r7, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d015      	beq.n	800f400 <Setgroup+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.group,buffer);
 800f3d4:	f107 0310 	add.w	r3, r7, #16
 800f3d8:	4619      	mov	r1, r3
 800f3da:	4814      	ldr	r0, [pc, #80]	; (800f42c <Setgroup+0xdc>)
 800f3dc:	f00d f8d1 	bl	801c582 <strcpy>
			set_param_flags();
 800f3e0:	4b13      	ldr	r3, [pc, #76]	; (800f430 <Setgroup+0xe0>)
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	701a      	strb	r2, [r3, #0]
 800f3e6:	4b13      	ldr	r3, [pc, #76]	; (800f434 <Setgroup+0xe4>)
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"group is set to: %s",_Flash_Packet.group);
 800f3ec:	4a0f      	ldr	r2, [pc, #60]	; (800f42c <Setgroup+0xdc>)
 800f3ee:	4912      	ldr	r1, [pc, #72]	; (800f438 <Setgroup+0xe8>)
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7ff fcb5 	bl	800ed60 <cli_printf>
 800f3f6:	e003      	b.n	800f400 <Setgroup+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"group is too long");
 800f3f8:	4910      	ldr	r1, [pc, #64]	; (800f43c <Setgroup+0xec>)
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f7ff fcb0 	bl	800ed60 <cli_printf>
	}

	flag_cli = 0;
 800f400:	4b09      	ldr	r3, [pc, #36]	; (800f428 <Setgroup+0xd8>)
 800f402:	2200      	movs	r2, #0
 800f404:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f406:	4b07      	ldr	r3, [pc, #28]	; (800f424 <Setgroup+0xd4>)
 800f408:	2200      	movs	r2, #0
 800f40a:	701a      	strb	r2, [r3, #0]

}
 800f40c:	bf00      	nop
 800f40e:	3748      	adds	r7, #72	; 0x48
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	080205e4 	.word	0x080205e4
 800f418:	0802065c 	.word	0x0802065c
 800f41c:	200019a0 	.word	0x200019a0
 800f420:	08020798 	.word	0x08020798
 800f424:	20001a5e 	.word	0x20001a5e
 800f428:	20001a5f 	.word	0x20001a5f
 800f42c:	2000143f 	.word	0x2000143f
 800f430:	200014b1 	.word	0x200014b1
 800f434:	200014b2 	.word	0x200014b2
 800f438:	080207c8 	.word	0x080207c8
 800f43c:	080207dc 	.word	0x080207dc

0800f440 <GetID>:




void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"ID: %s",	_Flash_Packet.id);
 800f44c:	4a04      	ldr	r2, [pc, #16]	; (800f460 <GetID+0x20>)
 800f44e:	4905      	ldr	r1, [pc, #20]	; (800f464 <GetID+0x24>)
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7ff fc85 	bl	800ed60 <cli_printf>
}
 800f456:	bf00      	nop
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	200013a9 	.word	0x200013a9
 800f464:	080207f0 	.word	0x080207f0

0800f468 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Location: %s",	_Flash_Packet.location);
 800f474:	4a04      	ldr	r2, [pc, #16]	; (800f488 <GetLocation+0x20>)
 800f476:	4905      	ldr	r1, [pc, #20]	; (800f48c <GetLocation+0x24>)
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f7ff fc71 	bl	800ed60 <cli_printf>

}
 800f47e:	bf00      	nop
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	200013db 	.word	0x200013db
 800f48c:	080207f8 	.word	0x080207f8

0800f490 <Getname>:

void Getname(EmbeddedCli *cli, char *args, void *context) {
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Name: %s",	_Flash_Packet.name);
 800f49c:	4a04      	ldr	r2, [pc, #16]	; (800f4b0 <Getname+0x20>)
 800f49e:	4905      	ldr	r1, [pc, #20]	; (800f4b4 <Getname+0x24>)
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7ff fc5d 	bl	800ed60 <cli_printf>

}
 800f4a6:	bf00      	nop
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	2000140d 	.word	0x2000140d
 800f4b4:	08020808 	.word	0x08020808

0800f4b8 <Getgroup>:

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Group: %s",	_Flash_Packet.group);
 800f4c4:	4a04      	ldr	r2, [pc, #16]	; (800f4d8 <Getgroup+0x20>)
 800f4c6:	4905      	ldr	r1, [pc, #20]	; (800f4dc <Getgroup+0x24>)
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7ff fc49 	bl	800ed60 <cli_printf>

}
 800f4ce:	bf00      	nop
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	2000143f 	.word	0x2000143f
 800f4dc:	08020814 	.word	0x08020814

0800f4e0 <SetDate>:





void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b09a      	sub	sp, #104	; 0x68
 800f4e4:	af02      	add	r7, sp, #8
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f4ec:	4b26      	ldr	r3, [pc, #152]	; (800f588 <SetDate+0xa8>)
 800f4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set date in following format: day:month:year eg:(15:1:23).");
 800f4f0:	4926      	ldr	r1, [pc, #152]	; (800f58c <SetDate+0xac>)
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f7ff fc34 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f4f8:	4b25      	ldr	r3, [pc, #148]	; (800f590 <SetDate+0xb0>)
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f4fe:	4b25      	ldr	r3, [pc, #148]	; (800f594 <SetDate+0xb4>)
 800f500:	2200      	movs	r2, #0
 800f502:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f508:	2232      	movs	r2, #50	; 0x32
 800f50a:	4619      	mov	r1, r3
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	f7ff fc69 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f512:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f514:	f7f0 fe6e 	bl	80001f4 <strlen>
 800f518:	4603      	mov	r3, r0
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f520:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f522:	481d      	ldr	r0, [pc, #116]	; (800f598 <SetDate+0xb8>)
 800f524:	f7fc f982 	bl	800b82c <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f528:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d004      	beq.n	800f53a <SetDate+0x5a>
	{
	Set_Date(buffer);
 800f530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f534:	4618      	mov	r0, r3
 800f536:	f002 fdc5 	bl	80120c4 <Set_Date>
	}
	flag_cli = 0;
 800f53a:	4b16      	ldr	r3, [pc, #88]	; (800f594 <SetDate+0xb4>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f540:	4b13      	ldr	r3, [pc, #76]	; (800f590 <SetDate+0xb0>)
 800f542:	2200      	movs	r2, #0
 800f544:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f54a:	2200      	movs	r2, #0
 800f54c:	4619      	mov	r1, r3
 800f54e:	4813      	ldr	r0, [pc, #76]	; (800f59c <SetDate+0xbc>)
 800f550:	f7f9 fe28 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f554:	f107 0310 	add.w	r3, r7, #16
 800f558:	2200      	movs	r2, #0
 800f55a:	4619      	mov	r1, r3
 800f55c:	480f      	ldr	r0, [pc, #60]	; (800f59c <SetDate+0xbc>)
 800f55e:	f7f9 fd3f 	bl	8008fe0 <HAL_RTC_GetTime>
	cli_printf(cli,"Set Date: %02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f566:	461a      	mov	r2, r3
 800f568:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f56c:	4619      	mov	r1, r3
 800f56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	460b      	mov	r3, r1
 800f576:	490a      	ldr	r1, [pc, #40]	; (800f5a0 <SetDate+0xc0>)
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f7ff fbf1 	bl	800ed60 <cli_printf>

}
 800f57e:	bf00      	nop
 800f580:	3760      	adds	r7, #96	; 0x60
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	080205e4 	.word	0x080205e4
 800f58c:	08020820 	.word	0x08020820
 800f590:	20001a5e 	.word	0x20001a5e
 800f594:	20001a5f 	.word	0x20001a5f
 800f598:	200019a0 	.word	0x200019a0
 800f59c:	200017c4 	.word	0x200017c4
 800f5a0:	0802085c 	.word	0x0802085c

0800f5a4 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b09a      	sub	sp, #104	; 0x68
 800f5a8:	af02      	add	r7, sp, #8
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f5b0:	4b26      	ldr	r3, [pc, #152]	; (800f64c <SetTime+0xa8>)
 800f5b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
 800f5b4:	4926      	ldr	r1, [pc, #152]	; (800f650 <SetTime+0xac>)
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f7ff fbd2 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f5bc:	4b25      	ldr	r3, [pc, #148]	; (800f654 <SetTime+0xb0>)
 800f5be:	2201      	movs	r2, #1
 800f5c0:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f5c2:	4b25      	ldr	r3, [pc, #148]	; (800f658 <SetTime+0xb4>)
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f5c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5cc:	2232      	movs	r2, #50	; 0x32
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f7ff fc07 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f5d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f5d8:	f7f0 fe0c 	bl	80001f4 <strlen>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f5e6:	481d      	ldr	r0, [pc, #116]	; (800f65c <SetTime+0xb8>)
 800f5e8:	f7fc f920 	bl	800b82c <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f5ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d004      	beq.n	800f5fe <SetTime+0x5a>
	{
	Set_Time(buffer);
 800f5f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f002 fe05 	bl	8012208 <Set_Time>
    }
	flag_cli = 0;
 800f5fe:	4b16      	ldr	r3, [pc, #88]	; (800f658 <SetTime+0xb4>)
 800f600:	2200      	movs	r2, #0
 800f602:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f604:	4b13      	ldr	r3, [pc, #76]	; (800f654 <SetTime+0xb0>)
 800f606:	2200      	movs	r2, #0
 800f608:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f60a:	4b15      	ldr	r3, [pc, #84]	; (800f660 <SetTime+0xbc>)
 800f60c:	2201      	movs	r2, #1
 800f60e:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f614:	2200      	movs	r2, #0
 800f616:	4619      	mov	r1, r3
 800f618:	4812      	ldr	r0, [pc, #72]	; (800f664 <SetTime+0xc0>)
 800f61a:	f7f9 fdc3 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f61e:	f107 0310 	add.w	r3, r7, #16
 800f622:	2200      	movs	r2, #0
 800f624:	4619      	mov	r1, r3
 800f626:	480f      	ldr	r0, [pc, #60]	; (800f664 <SetTime+0xc0>)
 800f628:	f7f9 fcda 	bl	8008fe0 <HAL_RTC_GetTime>
	cli_printf(cli,"Set Time: %02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f62c:	7c3b      	ldrb	r3, [r7, #16]
 800f62e:	461a      	mov	r2, r3
 800f630:	7c7b      	ldrb	r3, [r7, #17]
 800f632:	4619      	mov	r1, r3
 800f634:	7cbb      	ldrb	r3, [r7, #18]
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	460b      	mov	r3, r1
 800f63a:	490b      	ldr	r1, [pc, #44]	; (800f668 <SetTime+0xc4>)
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7ff fb8f 	bl	800ed60 <cli_printf>

}
 800f642:	bf00      	nop
 800f644:	3760      	adds	r7, #96	; 0x60
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	080205e4 	.word	0x080205e4
 800f650:	08020878 	.word	0x08020878
 800f654:	20001a5e 	.word	0x20001a5e
 800f658:	20001a5f 	.word	0x20001a5f
 800f65c:	200019a0 	.word	0x200019a0
 800f660:	20000029 	.word	0x20000029
 800f664:	200017c4 	.word	0x200017c4
 800f668:	080208bc 	.word	0x080208bc

0800f66c <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b08c      	sub	sp, #48	; 0x30
 800f670:	af02      	add	r7, sp, #8
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]



	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f67c:	2200      	movs	r2, #0
 800f67e:	4619      	mov	r1, r3
 800f680:	480f      	ldr	r0, [pc, #60]	; (800f6c0 <GetDate+0x54>)
 800f682:	f7f9 fd8f 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f686:	f107 0310 	add.w	r3, r7, #16
 800f68a:	2200      	movs	r2, #0
 800f68c:	4619      	mov	r1, r3
 800f68e:	480c      	ldr	r0, [pc, #48]	; (800f6c0 <GetDate+0x54>)
 800f690:	f7f9 fca6 	bl	8008fe0 <HAL_RTC_GetTime>
	cli_printf(cli,"%02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f698:	461a      	mov	r2, r3
 800f69a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f69e:	4619      	mov	r1, r3
 800f6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	4906      	ldr	r1, [pc, #24]	; (800f6c4 <GetDate+0x58>)
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f7ff fb58 	bl	800ed60 <cli_printf>
	HAL_Delay(100);
 800f6b0:	2064      	movs	r0, #100	; 0x64
 800f6b2:	f7f4 fa0f 	bl	8003ad4 <HAL_Delay>
}
 800f6b6:	bf00      	nop
 800f6b8:	3728      	adds	r7, #40	; 0x28
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	200017c4 	.word	0x200017c4
 800f6c4:	080208d8 	.word	0x080208d8

0800f6c8 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b08c      	sub	sp, #48	; 0x30
 800f6cc:	af02      	add	r7, sp, #8
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f6d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6d8:	2200      	movs	r2, #0
 800f6da:	4619      	mov	r1, r3
 800f6dc:	480d      	ldr	r0, [pc, #52]	; (800f714 <GetTime+0x4c>)
 800f6de:	f7f9 fd61 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f6e2:	f107 0310 	add.w	r3, r7, #16
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	480a      	ldr	r0, [pc, #40]	; (800f714 <GetTime+0x4c>)
 800f6ec:	f7f9 fc78 	bl	8008fe0 <HAL_RTC_GetTime>
	cli_printf(cli,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f6f0:	7c3b      	ldrb	r3, [r7, #16]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	7c7b      	ldrb	r3, [r7, #17]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	7cbb      	ldrb	r3, [r7, #18]
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4906      	ldr	r1, [pc, #24]	; (800f718 <GetTime+0x50>)
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f7ff fb2d 	bl	800ed60 <cli_printf>
	HAL_Delay(100);
 800f706:	2064      	movs	r0, #100	; 0x64
 800f708:	f7f4 f9e4 	bl	8003ad4 <HAL_Delay>
}
 800f70c:	bf00      	nop
 800f70e:	3728      	adds	r7, #40	; 0x28
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	200017c4 	.word	0x200017c4
 800f718:	080208e8 	.word	0x080208e8

0800f71c <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b092      	sub	sp, #72	; 0x48
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f728:	4b54      	ldr	r3, [pc, #336]	; (800f87c <SetInterval+0x160>)
 800f72a:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f72c:	4954      	ldr	r1, [pc, #336]	; (800f880 <SetInterval+0x164>)
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f7ff fb16 	bl	800ed60 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f734:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f736:	f7f0 fd5d 	bl	80001f4 <strlen>
 800f73a:	4603      	mov	r3, r0
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f744:	484f      	ldr	r0, [pc, #316]	; (800f884 <SetInterval+0x168>)
 800f746:	f7fc f871 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"Enter 1 for 5min.");
 800f74a:	494f      	ldr	r1, [pc, #316]	; (800f888 <SetInterval+0x16c>)
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f7ff fb07 	bl	800ed60 <cli_printf>
	cli_printf(cli,"Enter 2 for 15min.");
 800f752:	494e      	ldr	r1, [pc, #312]	; (800f88c <SetInterval+0x170>)
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7ff fb03 	bl	800ed60 <cli_printf>
	cli_printf(cli,"Enter 3 for 60min.");
 800f75a:	494d      	ldr	r1, [pc, #308]	; (800f890 <SetInterval+0x174>)
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f7ff faff 	bl	800ed60 <cli_printf>
	cli_printf(cli,"Disclaimer: The battery life will be reduced if interval is reduced.");
 800f762:	494c      	ldr	r1, [pc, #304]	; (800f894 <SetInterval+0x178>)
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f7ff fafb 	bl	800ed60 <cli_printf>
	cli_other = 1;
 800f76a:	4b4b      	ldr	r3, [pc, #300]	; (800f898 <SetInterval+0x17c>)
 800f76c:	2201      	movs	r2, #1
 800f76e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f770:	4b4a      	ldr	r3, [pc, #296]	; (800f89c <SetInterval+0x180>)
 800f772:	2200      	movs	r2, #0
 800f774:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f776:	f107 0310 	add.w	r3, r7, #16
 800f77a:	2232      	movs	r2, #50	; 0x32
 800f77c:	4619      	mov	r1, r3
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f7ff fb30 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f784:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f786:	f7f0 fd35 	bl	80001f4 <strlen>
 800f78a:	4603      	mov	r3, r0
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f794:	483b      	ldr	r0, [pc, #236]	; (800f884 <SetInterval+0x168>)
 800f796:	f7fc f849 	bl	800b82c <HAL_UART_Transmit>


	if(strstr(buffer, "1"))
 800f79a:	f107 0310 	add.w	r3, r7, #16
 800f79e:	2131      	movs	r1, #49	; 0x31
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f00c fee1 	bl	801c568 <strchr>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d015      	beq.n	800f7d8 <SetInterval+0xbc>
	{
        _Flash_Packet.Time_Interval = 5;
 800f7ac:	4b3c      	ldr	r3, [pc, #240]	; (800f8a0 <SetInterval+0x184>)
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f042 0205 	orr.w	r2, r2, #5
 800f7b4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        set_param_flags();
 800f7ca:	4b36      	ldr	r3, [pc, #216]	; (800f8a4 <SetInterval+0x188>)
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	4b35      	ldr	r3, [pc, #212]	; (800f8a8 <SetInterval+0x18c>)
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	701a      	strb	r2, [r3, #0]
 800f7d6:	e03c      	b.n	800f852 <SetInterval+0x136>
	}
	else if(strstr(buffer, "2"))
 800f7d8:	f107 0310 	add.w	r3, r7, #16
 800f7dc:	2132      	movs	r1, #50	; 0x32
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f00c fec2 	bl	801c568 <strchr>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d015      	beq.n	800f816 <SetInterval+0xfa>
	{
		_Flash_Packet.Time_Interval = 15;
 800f7ea:	4b2d      	ldr	r3, [pc, #180]	; (800f8a0 <SetInterval+0x184>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f042 020f 	orr.w	r2, r2, #15
 800f7f2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f802:	2200      	movs	r2, #0
 800f804:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f808:	4b26      	ldr	r3, [pc, #152]	; (800f8a4 <SetInterval+0x188>)
 800f80a:	2201      	movs	r2, #1
 800f80c:	701a      	strb	r2, [r3, #0]
 800f80e:	4b26      	ldr	r3, [pc, #152]	; (800f8a8 <SetInterval+0x18c>)
 800f810:	2201      	movs	r2, #1
 800f812:	701a      	strb	r2, [r3, #0]
 800f814:	e01d      	b.n	800f852 <SetInterval+0x136>
	}
	else if(strstr(buffer, "3"))
 800f816:	f107 0310 	add.w	r3, r7, #16
 800f81a:	2133      	movs	r1, #51	; 0x33
 800f81c:	4618      	mov	r0, r3
 800f81e:	f00c fea3 	bl	801c568 <strchr>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d014      	beq.n	800f852 <SetInterval+0x136>
	{
		_Flash_Packet.Time_Interval = 60;
 800f828:	4b1d      	ldr	r3, [pc, #116]	; (800f8a0 <SetInterval+0x184>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800f830:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f834:	2200      	movs	r2, #0
 800f836:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f83a:	2200      	movs	r2, #0
 800f83c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f840:	2200      	movs	r2, #0
 800f842:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f846:	4b17      	ldr	r3, [pc, #92]	; (800f8a4 <SetInterval+0x188>)
 800f848:	2201      	movs	r2, #1
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	4b16      	ldr	r3, [pc, #88]	; (800f8a8 <SetInterval+0x18c>)
 800f84e:	2201      	movs	r2, #1
 800f850:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f852:	4b12      	ldr	r3, [pc, #72]	; (800f89c <SetInterval+0x180>)
 800f854:	2200      	movs	r2, #0
 800f856:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f858:	4b0f      	ldr	r3, [pc, #60]	; (800f898 <SetInterval+0x17c>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"Interval is set to: %ldmin",_Flash_Packet.Time_Interval);
 800f85e:	4b10      	ldr	r3, [pc, #64]	; (800f8a0 <SetInterval+0x184>)
 800f860:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f864:	461a      	mov	r2, r3
 800f866:	4911      	ldr	r1, [pc, #68]	; (800f8ac <SetInterval+0x190>)
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	f7ff fa79 	bl	800ed60 <cli_printf>
	set_alarm_Time = 1;
 800f86e:	4b10      	ldr	r3, [pc, #64]	; (800f8b0 <SetInterval+0x194>)
 800f870:	2201      	movs	r2, #1
 800f872:	701a      	strb	r2, [r3, #0]
}
 800f874:	bf00      	nop
 800f876:	3748      	adds	r7, #72	; 0x48
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	080205e4 	.word	0x080205e4
 800f880:	0802065c 	.word	0x0802065c
 800f884:	200019a0 	.word	0x200019a0
 800f888:	080208f8 	.word	0x080208f8
 800f88c:	0802090c 	.word	0x0802090c
 800f890:	08020920 	.word	0x08020920
 800f894:	08020934 	.word	0x08020934
 800f898:	20001a5e 	.word	0x20001a5e
 800f89c:	20001a5f 	.word	0x20001a5f
 800f8a0:	200012dc 	.word	0x200012dc
 800f8a4:	200014b1 	.word	0x200014b1
 800f8a8:	200014b2 	.word	0x200014b2
 800f8ac:	0802097c 	.word	0x0802097c
 800f8b0:	20000029 	.word	0x20000029

0800f8b4 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Interval is Set to: %ldmin",_Flash_Packet.Time_Interval);
 800f8c0:	4b05      	ldr	r3, [pc, #20]	; (800f8d8 <GetInterval+0x24>)
 800f8c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	4904      	ldr	r1, [pc, #16]	; (800f8dc <GetInterval+0x28>)
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff fa48 	bl	800ed60 <cli_printf>

}
 800f8d0:	bf00      	nop
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	200012dc 	.word	0x200012dc
 800f8dc:	08020998 	.word	0x08020998

0800f8e0 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b092      	sub	sp, #72	; 0x48
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
uint16_t len;
	  const char *newLine = "\r\n";
 800f8ec:	4b31      	ldr	r3, [pc, #196]	; (800f9b4 <SetFilename+0xd4>)
 800f8ee:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f8f0:	4931      	ldr	r1, [pc, #196]	; (800f9b8 <SetFilename+0xd8>)
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f7ff fa34 	bl	800ed60 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f8f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8fa:	f7f0 fc7b 	bl	80001f4 <strlen>
 800f8fe:	4603      	mov	r3, r0
 800f900:	b29a      	uxth	r2, r3
 800f902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f908:	482c      	ldr	r0, [pc, #176]	; (800f9bc <SetFilename+0xdc>)
 800f90a:	f7fb ff8f 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
 800f90e:	492c      	ldr	r1, [pc, #176]	; (800f9c0 <SetFilename+0xe0>)
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f7ff fa25 	bl	800ed60 <cli_printf>
	cli_printf(cli,"If any special characters they will be omitted automatically.");
 800f916:	492b      	ldr	r1, [pc, #172]	; (800f9c4 <SetFilename+0xe4>)
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f7ff fa21 	bl	800ed60 <cli_printf>

	cli_other = 1;
 800f91e:	4b2a      	ldr	r3, [pc, #168]	; (800f9c8 <SetFilename+0xe8>)
 800f920:	2201      	movs	r2, #1
 800f922:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f924:	4b29      	ldr	r3, [pc, #164]	; (800f9cc <SetFilename+0xec>)
 800f926:	2200      	movs	r2, #0
 800f928:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f92a:	f107 0310 	add.w	r3, r7, #16
 800f92e:	2232      	movs	r2, #50	; 0x32
 800f930:	4619      	mov	r1, r3
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f7ff fa56 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f938:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f93a:	f7f0 fc5b 	bl	80001f4 <strlen>
 800f93e:	4603      	mov	r3, r0
 800f940:	b29a      	uxth	r2, r3
 800f942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f948:	481c      	ldr	r0, [pc, #112]	; (800f9bc <SetFilename+0xdc>)
 800f94a:	f7fb ff6f 	bl	800b82c <HAL_UART_Transmit>

len = strlen(buffer);
 800f94e:	f107 0310 	add.w	r3, r7, #16
 800f952:	4618      	mov	r0, r3
 800f954:	f7f0 fc4e 	bl	80001f4 <strlen>
 800f958:	4603      	mov	r3, r0
 800f95a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
if(len < 20)
 800f95e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f962:	2b13      	cmp	r3, #19
 800f964:	d818      	bhi.n	800f998 <SetFilename+0xb8>
{
	   if(buffer[0] != '\0' )
 800f966:	7c3b      	ldrb	r3, [r7, #16]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d019      	beq.n	800f9a0 <SetFilename+0xc0>
	   {
	if(buffer != NULL)
	{
		strcpy(_Flash_Packet.File_Name,buffer);
 800f96c:	f107 0310 	add.w	r3, r7, #16
 800f970:	4619      	mov	r1, r3
 800f972:	4817      	ldr	r0, [pc, #92]	; (800f9d0 <SetFilename+0xf0>)
 800f974:	f00c fe05 	bl	801c582 <strcpy>
		set_param_flags();
 800f978:	4b16      	ldr	r3, [pc, #88]	; (800f9d4 <SetFilename+0xf4>)
 800f97a:	2201      	movs	r2, #1
 800f97c:	701a      	strb	r2, [r3, #0]
 800f97e:	4b16      	ldr	r3, [pc, #88]	; (800f9d8 <SetFilename+0xf8>)
 800f980:	2201      	movs	r2, #1
 800f982:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.filename_changed = 1;
 800f984:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <SetFilename+0xfc>)
 800f986:	2201      	movs	r2, #1
 800f988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f98c:	4a10      	ldr	r2, [pc, #64]	; (800f9d0 <SetFilename+0xf0>)
 800f98e:	4914      	ldr	r1, [pc, #80]	; (800f9e0 <SetFilename+0x100>)
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f7ff f9e5 	bl	800ed60 <cli_printf>
 800f996:	e003      	b.n	800f9a0 <SetFilename+0xc0>
	}
	   }
}
else
{
	cli_printf(cli,"Filename is too long");
 800f998:	4912      	ldr	r1, [pc, #72]	; (800f9e4 <SetFilename+0x104>)
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f7ff f9e0 	bl	800ed60 <cli_printf>
}


	flag_cli = 0;
 800f9a0:	4b0a      	ldr	r3, [pc, #40]	; (800f9cc <SetFilename+0xec>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f9a6:	4b08      	ldr	r3, [pc, #32]	; (800f9c8 <SetFilename+0xe8>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	701a      	strb	r2, [r3, #0]


}
 800f9ac:	bf00      	nop
 800f9ae:	3748      	adds	r7, #72	; 0x48
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	080205e4 	.word	0x080205e4
 800f9b8:	0802065c 	.word	0x0802065c
 800f9bc:	200019a0 	.word	0x200019a0
 800f9c0:	080209b4 	.word	0x080209b4
 800f9c4:	08020a28 	.word	0x08020a28
 800f9c8:	20001a5e 	.word	0x20001a5e
 800f9cc:	20001a5f 	.word	0x20001a5f
 800f9d0:	200012dc 	.word	0x200012dc
 800f9d4:	200014b1 	.word	0x200014b1
 800f9d8:	200014b2 	.word	0x200014b2
 800f9dc:	20001474 	.word	0x20001474
 800f9e0:	08020a68 	.word	0x08020a68
 800f9e4:	08020a80 	.word	0x08020a80

0800f9e8 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f9f4:	4a04      	ldr	r2, [pc, #16]	; (800fa08 <GetFilename+0x20>)
 800f9f6:	4905      	ldr	r1, [pc, #20]	; (800fa0c <GetFilename+0x24>)
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f7ff f9b1 	bl	800ed60 <cli_printf>

}
 800f9fe:	bf00      	nop
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	200012dc 	.word	0x200012dc
 800fa0c:	08020a68 	.word	0x08020a68

0800fa10 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b092      	sub	sp, #72	; 0x48
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800fa1c:	4b41      	ldr	r3, [pc, #260]	; (800fb24 <SetFileformat+0x114>)
 800fa1e:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800fa20:	4941      	ldr	r1, [pc, #260]	; (800fb28 <SetFileformat+0x118>)
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff f99c 	bl	800ed60 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fa28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa2a:	f7f0 fbe3 	bl	80001f4 <strlen>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa38:	483c      	ldr	r0, [pc, #240]	; (800fb2c <SetFileformat+0x11c>)
 800fa3a:	f7fb fef7 	bl	800b82c <HAL_UART_Transmit>
	cli_printf(cli,"Following file formats are allowed:");
 800fa3e:	493c      	ldr	r1, [pc, #240]	; (800fb30 <SetFileformat+0x120>)
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f7ff f98d 	bl	800ed60 <cli_printf>
	cli_printf(cli,"1. (.csv)");
 800fa46:	493b      	ldr	r1, [pc, #236]	; (800fb34 <SetFileformat+0x124>)
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7ff f989 	bl	800ed60 <cli_printf>
	cli_printf(cli,"2. (.json)");
 800fa4e:	493a      	ldr	r1, [pc, #232]	; (800fb38 <SetFileformat+0x128>)
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	f7ff f985 	bl	800ed60 <cli_printf>
	cli_printf(cli,"Enter the number to select your desired format");
 800fa56:	4939      	ldr	r1, [pc, #228]	; (800fb3c <SetFileformat+0x12c>)
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f7ff f981 	bl	800ed60 <cli_printf>

	cli_other = 1;
 800fa5e:	4b38      	ldr	r3, [pc, #224]	; (800fb40 <SetFileformat+0x130>)
 800fa60:	2201      	movs	r2, #1
 800fa62:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa64:	4b37      	ldr	r3, [pc, #220]	; (800fb44 <SetFileformat+0x134>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800fa6a:	f107 0310 	add.w	r3, r7, #16
 800fa6e:	2232      	movs	r2, #50	; 0x32
 800fa70:	4619      	mov	r1, r3
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f7ff f9b6 	bl	800ede4 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fa78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa7a:	f7f0 fbbb 	bl	80001f4 <strlen>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa88:	4828      	ldr	r0, [pc, #160]	; (800fb2c <SetFileformat+0x11c>)
 800fa8a:	f7fb fecf 	bl	800b82c <HAL_UART_Transmit>

	if(strstr(buffer, "1"))
 800fa8e:	f107 0310 	add.w	r3, r7, #16
 800fa92:	2131      	movs	r1, #49	; 0x31
 800fa94:	4618      	mov	r0, r3
 800fa96:	f00c fd67 	bl	801c568 <strchr>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d014      	beq.n	800faca <SetFileformat+0xba>
	{
		strcpy(_Flash_Packet.File_Format,".CSV");
 800faa0:	4b29      	ldr	r3, [pc, #164]	; (800fb48 <SetFileformat+0x138>)
 800faa2:	4a2a      	ldr	r2, [pc, #168]	; (800fb4c <SetFileformat+0x13c>)
 800faa4:	6810      	ldr	r0, [r2, #0]
 800faa6:	6018      	str	r0, [r3, #0]
 800faa8:	7912      	ldrb	r2, [r2, #4]
 800faaa:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800faac:	4b28      	ldr	r3, [pc, #160]	; (800fb50 <SetFileformat+0x140>)
 800faae:	2201      	movs	r2, #1
 800fab0:	701a      	strb	r2, [r3, #0]
 800fab2:	4b28      	ldr	r3, [pc, #160]	; (800fb54 <SetFileformat+0x144>)
 800fab4:	2201      	movs	r2, #1
 800fab6:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800fab8:	4b27      	ldr	r3, [pc, #156]	; (800fb58 <SetFileformat+0x148>)
 800faba:	2201      	movs	r2, #1
 800fabc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 1;
 800fac0:	4b25      	ldr	r3, [pc, #148]	; (800fb58 <SetFileformat+0x148>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fac8:	e01c      	b.n	800fb04 <SetFileformat+0xf4>
	}
	else if(strstr(buffer, "2"))
 800faca:	f107 0310 	add.w	r3, r7, #16
 800face:	2132      	movs	r1, #50	; 0x32
 800fad0:	4618      	mov	r0, r3
 800fad2:	f00c fd49 	bl	801c568 <strchr>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d013      	beq.n	800fb04 <SetFileformat+0xf4>
	{
		strcpy(_Flash_Packet.File_Format,".JSON");
 800fadc:	4b1a      	ldr	r3, [pc, #104]	; (800fb48 <SetFileformat+0x138>)
 800fade:	4a1f      	ldr	r2, [pc, #124]	; (800fb5c <SetFileformat+0x14c>)
 800fae0:	6810      	ldr	r0, [r2, #0]
 800fae2:	6018      	str	r0, [r3, #0]
 800fae4:	8892      	ldrh	r2, [r2, #4]
 800fae6:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800fae8:	4b19      	ldr	r3, [pc, #100]	; (800fb50 <SetFileformat+0x140>)
 800faea:	2201      	movs	r2, #1
 800faec:	701a      	strb	r2, [r3, #0]
 800faee:	4b19      	ldr	r3, [pc, #100]	; (800fb54 <SetFileformat+0x144>)
 800faf0:	2201      	movs	r2, #1
 800faf2:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800faf4:	4b18      	ldr	r3, [pc, #96]	; (800fb58 <SetFileformat+0x148>)
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 0;
 800fafc:	4b16      	ldr	r3, [pc, #88]	; (800fb58 <SetFileformat+0x148>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}


	flag_cli = 0;
 800fb04:	4b0f      	ldr	r3, [pc, #60]	; (800fb44 <SetFileformat+0x134>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fb0a:	4b0d      	ldr	r3, [pc, #52]	; (800fb40 <SetFileformat+0x130>)
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800fb10:	4a0d      	ldr	r2, [pc, #52]	; (800fb48 <SetFileformat+0x138>)
 800fb12:	4913      	ldr	r1, [pc, #76]	; (800fb60 <SetFileformat+0x150>)
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7ff f923 	bl	800ed60 <cli_printf>

}
 800fb1a:	bf00      	nop
 800fb1c:	3748      	adds	r7, #72	; 0x48
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	080205e4 	.word	0x080205e4
 800fb28:	0802065c 	.word	0x0802065c
 800fb2c:	200019a0 	.word	0x200019a0
 800fb30:	08020a98 	.word	0x08020a98
 800fb34:	08020abc 	.word	0x08020abc
 800fb38:	08020ac8 	.word	0x08020ac8
 800fb3c:	08020ad4 	.word	0x08020ad4
 800fb40:	20001a5e 	.word	0x20001a5e
 800fb44:	20001a5f 	.word	0x20001a5f
 800fb48:	20001340 	.word	0x20001340
 800fb4c:	08020b04 	.word	0x08020b04
 800fb50:	200014b1 	.word	0x200014b1
 800fb54:	200014b2 	.word	0x200014b2
 800fb58:	20001474 	.word	0x20001474
 800fb5c:	08020b0c 	.word	0x08020b0c
 800fb60:	08020b14 	.word	0x08020b14

0800fb64 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800fb70:	4a04      	ldr	r2, [pc, #16]	; (800fb84 <GetFileformat+0x20>)
 800fb72:	4905      	ldr	r1, [pc, #20]	; (800fb88 <GetFileformat+0x24>)
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7ff f8f3 	bl	800ed60 <cli_printf>

}
 800fb7a:	bf00      	nop
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	20001340 	.word	0x20001340
 800fb88:	08020b14 	.word	0x08020b14

0800fb8c <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b096      	sub	sp, #88	; 0x58
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800fb98:	4b48      	ldr	r3, [pc, #288]	; (800fcbc <fanclean+0x130>)
 800fb9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int counter = 0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800fba0:	4b47      	ldr	r3, [pc, #284]	; (800fcc0 <fanclean+0x134>)
 800fba2:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,"Do you want to initiate particle sensor fan-cleaning? y/n?");
 800fbaa:	4946      	ldr	r1, [pc, #280]	; (800fcc4 <fanclean+0x138>)
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f7ff f8d7 	bl	800ed60 <cli_printf>

	cli_other = 1;
 800fbb2:	4b45      	ldr	r3, [pc, #276]	; (800fcc8 <fanclean+0x13c>)
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800fbb8:	4b44      	ldr	r3, [pc, #272]	; (800fccc <fanclean+0x140>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800fbbe:	f107 0314 	add.w	r3, r7, #20
 800fbc2:	2232      	movs	r2, #50	; 0x32
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7ff f90c 	bl	800ede4 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fbcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fbce:	f7f0 fb11 	bl	80001f4 <strlen>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fbda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fbdc:	483c      	ldr	r0, [pc, #240]	; (800fcd0 <fanclean+0x144>)
 800fbde:	f7fb fe25 	bl	800b82c <HAL_UART_Transmit>


        if(strstr(buffer, "n"))
 800fbe2:	f107 0314 	add.w	r3, r7, #20
 800fbe6:	216e      	movs	r1, #110	; 0x6e
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f00c fcbd 	bl	801c568 <strchr>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00f      	beq.n	800fc14 <fanclean+0x88>
		{
			_Flash_Packet.Calibration_Status=0;
 800fbf4:	4b37      	ldr	r3, [pc, #220]	; (800fcd4 <fanclean+0x148>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			_RunTime_Packet.PM_calibration=1;
 800fbfc:	4b36      	ldr	r3, [pc, #216]	; (800fcd8 <fanclean+0x14c>)
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			cli_printf(cli,"Particle sensor fan-cleaning aborted.");
 800fc04:	4935      	ldr	r1, [pc, #212]	; (800fcdc <fanclean+0x150>)
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7ff f8aa 	bl	800ed60 <cli_printf>
			//set_param_flags();
			do_Calibration = 0;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fc12:	e00f      	b.n	800fc34 <fanclean+0xa8>
		}
        else if(strstr(buffer, "y"))
 800fc14:	f107 0314 	add.w	r3, r7, #20
 800fc18:	2179      	movs	r1, #121	; 0x79
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f00c fca4 	bl	801c568 <strchr>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d006      	beq.n	800fc34 <fanclean+0xa8>
        {
        	_RunTime_Packet.PM_calibration=0;
 800fc26:	4b2c      	ldr	r3, [pc, #176]	; (800fcd8 <fanclean+0x14c>)
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        	do_Calibration = 1;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        }



		   if(do_Calibration == 1)
 800fc34:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d135      	bne.n	800fca8 <fanclean+0x11c>
		   {

				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fc3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc3e:	f7f0 fad9 	bl	80001f4 <strlen>
 800fc42:	4603      	mov	r3, r0
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc4a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc4c:	4820      	ldr	r0, [pc, #128]	; (800fcd0 <fanclean+0x144>)
 800fc4e:	f7fb fded 	bl	800b82c <HAL_UART_Transmit>
				cli_printf(cli,"Particle sensor fan-cleaning initiated, please wait.");
 800fc52:	4923      	ldr	r1, [pc, #140]	; (800fce0 <fanclean+0x154>)
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff f883 	bl	800ed60 <cli_printf>
		   while(counter < 8 )
 800fc5a:	e013      	b.n	800fc84 <fanclean+0xf8>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800fc5c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fc5e:	f7f0 fac9 	bl	80001f4 <strlen>
 800fc62:	4603      	mov	r3, r0
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc6c:	4818      	ldr	r0, [pc, #96]	; (800fcd0 <fanclean+0x144>)
 800fc6e:	f7fb fddd 	bl	800b82c <HAL_UART_Transmit>
                HAL_Delay(800);
 800fc72:	f44f 7048 	mov.w	r0, #800	; 0x320
 800fc76:	f7f3 ff2d 	bl	8003ad4 <HAL_Delay>
                toggle_blue_led();
 800fc7a:	f7f1 fa29 	bl	80010d0 <toggle_blue_led>
                counter++;
 800fc7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc80:	3301      	adds	r3, #1
 800fc82:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 8 )
 800fc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc86:	2b07      	cmp	r3, #7
 800fc88:	dde8      	ble.n	800fc5c <fanclean+0xd0>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fc8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc8c:	f7f0 fab2 	bl	80001f4 <strlen>
 800fc90:	4603      	mov	r3, r0
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc9a:	480d      	ldr	r0, [pc, #52]	; (800fcd0 <fanclean+0x144>)
 800fc9c:	f7fb fdc6 	bl	800b82c <HAL_UART_Transmit>
			cli_printf(cli,"fan-cleaning done.");
 800fca0:	4910      	ldr	r1, [pc, #64]	; (800fce4 <fanclean+0x158>)
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f7ff f85c 	bl	800ed60 <cli_printf>


		   }

		flag_cli = 0;
 800fca8:	4b08      	ldr	r3, [pc, #32]	; (800fccc <fanclean+0x140>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800fcae:	4b06      	ldr	r3, [pc, #24]	; (800fcc8 <fanclean+0x13c>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	701a      	strb	r2, [r3, #0]
}
 800fcb4:	bf00      	nop
 800fcb6:	3758      	adds	r7, #88	; 0x58
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	080205e4 	.word	0x080205e4
 800fcc0:	08020b30 	.word	0x08020b30
 800fcc4:	08020b3c 	.word	0x08020b3c
 800fcc8:	20001a5e 	.word	0x20001a5e
 800fccc:	20001a5f 	.word	0x20001a5f
 800fcd0:	200019a0 	.word	0x200019a0
 800fcd4:	200012dc 	.word	0x200012dc
 800fcd8:	20001474 	.word	0x20001474
 800fcdc:	08020b78 	.word	0x08020b78
 800fce0:	08020ba0 	.word	0x08020ba0
 800fce4:	08020bd8 	.word	0x08020bd8

0800fce8 <co2calibrate>:


void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b096      	sub	sp, #88	; 0x58
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800fcf4:	4b55      	ldr	r3, [pc, #340]	; (800fe4c <co2calibrate+0x164>)
 800fcf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t val;
	  int counter = 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800fcfc:	4b54      	ldr	r3, [pc, #336]	; (800fe50 <co2calibrate+0x168>)
 800fcfe:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800fd00:	2300      	movs	r3, #0
 800fd02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	    cli_other = 1;
 800fd06:	4b53      	ldr	r3, [pc, #332]	; (800fe54 <co2calibrate+0x16c>)
 800fd08:	2201      	movs	r2, #1
 800fd0a:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800fd0c:	4b52      	ldr	r3, [pc, #328]	; (800fe58 <co2calibrate+0x170>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer,'\0',sizeof(buffer));
 800fd12:	f107 0310 	add.w	r3, r7, #16
 800fd16:	2232      	movs	r2, #50	; 0x32
 800fd18:	2100      	movs	r1, #0
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f00b fbfe 	bl	801b51c <memset>
		cli_printf(cli,"To calibrate Co2 sensor, please provide Co2 concentration value.");
 800fd20:	494e      	ldr	r1, [pc, #312]	; (800fe5c <co2calibrate+0x174>)
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff f81c 	bl	800ed60 <cli_printf>
		cli_printf(cli,"If Co2 concentration is unknown then just press enter to cancel the calibration.");
 800fd28:	494d      	ldr	r1, [pc, #308]	; (800fe60 <co2calibrate+0x178>)
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f7ff f818 	bl	800ed60 <cli_printf>

		receiveString(cli,buffer,sizeof(buffer));
 800fd30:	f107 0310 	add.w	r3, r7, #16
 800fd34:	2232      	movs	r2, #50	; 0x32
 800fd36:	4619      	mov	r1, r3
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff f853 	bl	800ede4 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fd3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd40:	f7f0 fa58 	bl	80001f4 <strlen>
 800fd44:	4603      	mov	r3, r0
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd4e:	4845      	ldr	r0, [pc, #276]	; (800fe64 <co2calibrate+0x17c>)
 800fd50:	f7fb fd6c 	bl	800b82c <HAL_UART_Transmit>

		   if(buffer[0] != '\0' )
 800fd54:	7c3b      	ldrb	r3, [r7, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d01e      	beq.n	800fd98 <co2calibrate+0xb0>
			{
			   _RunTime_Packet.CO2_calibration = 1;
 800fd5a:	4b43      	ldr	r3, [pc, #268]	; (800fe68 <co2calibrate+0x180>)
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

                val = atoi(buffer);
 800fd62:	f107 0310 	add.w	r3, r7, #16
 800fd66:	4618      	mov	r0, r3
 800fd68:	f00b fb08 	bl	801b37c <atoi>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	647b      	str	r3, [r7, #68]	; 0x44

                if(val < 65535)
 800fd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d803      	bhi.n	800fd82 <co2calibrate+0x9a>
                {
                   _RunTime_Packet._target_co2_concentration = val;
 800fd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	4b3a      	ldr	r3, [pc, #232]	; (800fe68 <co2calibrate+0x180>)
 800fd80:	869a      	strh	r2, [r3, #52]	; 0x34
                }

            	cli_printf(cli,"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",_RunTime_Packet._target_co2_concentration);
 800fd82:	4b39      	ldr	r3, [pc, #228]	; (800fe68 <co2calibrate+0x180>)
 800fd84:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fd86:	461a      	mov	r2, r3
 800fd88:	4938      	ldr	r1, [pc, #224]	; (800fe6c <co2calibrate+0x184>)
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f7fe ffe8 	bl	800ed60 <cli_printf>
            	do_Calibration = 1;
 800fd90:	2301      	movs	r3, #1
 800fd92:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fd96:	e00a      	b.n	800fdae <co2calibrate+0xc6>
			 }
		   else
		   {
				cli_printf(cli,"Co2 sensor Calibration aborted.");
 800fd98:	4935      	ldr	r1, [pc, #212]	; (800fe70 <co2calibrate+0x188>)
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f7fe ffe0 	bl	800ed60 <cli_printf>
				_RunTime_Packet.CO2_calibration = 0;
 800fda0:	4b31      	ldr	r3, [pc, #196]	; (800fe68 <co2calibrate+0x180>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				do_Calibration = 0;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		   }

		   if(do_Calibration == 1)
 800fdae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d140      	bne.n	800fe38 <co2calibrate+0x150>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fdb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fdb8:	f7f0 fa1c 	bl	80001f4 <strlen>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fdc6:	4827      	ldr	r0, [pc, #156]	; (800fe64 <co2calibrate+0x17c>)
 800fdc8:	f7fb fd30 	bl	800b82c <HAL_UART_Transmit>
				cli_printf(cli,"Co2 is calibrating, please wait.");
 800fdcc:	4929      	ldr	r1, [pc, #164]	; (800fe74 <co2calibrate+0x18c>)
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f7fe ffc6 	bl	800ed60 <cli_printf>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 800fdd4:	4b24      	ldr	r3, [pc, #144]	; (800fe68 <co2calibrate+0x180>)
 800fdd6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d11a      	bne.n	800fe14 <co2calibrate+0x12c>
				scd4x_perform_forced_recalibration(
 800fdde:	4b22      	ldr	r3, [pc, #136]	; (800fe68 <co2calibrate+0x180>)
 800fde0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fde2:	4925      	ldr	r1, [pc, #148]	; (800fe78 <co2calibrate+0x190>)
 800fde4:	4618      	mov	r0, r3
 800fde6:	f002 fd13 	bl	8012810 <scd4x_perform_forced_recalibration>
						_RunTime_Packet._target_co2_concentration,
						&_RunTime_Packet._frc_correction);
				}
		   while(counter < 8 )
 800fdea:	e013      	b.n	800fe14 <co2calibrate+0x12c>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800fdec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fdee:	f7f0 fa01 	bl	80001f4 <strlen>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fdfc:	4819      	ldr	r0, [pc, #100]	; (800fe64 <co2calibrate+0x17c>)
 800fdfe:	f7fb fd15 	bl	800b82c <HAL_UART_Transmit>
			    HAL_Delay(800);
 800fe02:	f44f 7048 	mov.w	r0, #800	; 0x320
 800fe06:	f7f3 fe65 	bl	8003ad4 <HAL_Delay>
			    toggle_blue_led();
 800fe0a:	f7f1 f961 	bl	80010d0 <toggle_blue_led>
                counter++;
 800fe0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe10:	3301      	adds	r3, #1
 800fe12:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 8 )
 800fe14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe16:	2b07      	cmp	r3, #7
 800fe18:	dde8      	ble.n	800fdec <co2calibrate+0x104>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fe1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe1c:	f7f0 f9ea 	bl	80001f4 <strlen>
 800fe20:	4603      	mov	r3, r0
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe2a:	480e      	ldr	r0, [pc, #56]	; (800fe64 <co2calibrate+0x17c>)
 800fe2c:	f7fb fcfe 	bl	800b82c <HAL_UART_Transmit>
			cli_printf(cli,"Sensor calibration done.");
 800fe30:	4912      	ldr	r1, [pc, #72]	; (800fe7c <co2calibrate+0x194>)
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f7fe ff94 	bl	800ed60 <cli_printf>
		   }

		flag_cli = 0;
 800fe38:	4b07      	ldr	r3, [pc, #28]	; (800fe58 <co2calibrate+0x170>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800fe3e:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <co2calibrate+0x16c>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	701a      	strb	r2, [r3, #0]
}
 800fe44:	bf00      	nop
 800fe46:	3758      	adds	r7, #88	; 0x58
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	080205e4 	.word	0x080205e4
 800fe50:	08020b30 	.word	0x08020b30
 800fe54:	20001a5e 	.word	0x20001a5e
 800fe58:	20001a5f 	.word	0x20001a5f
 800fe5c:	08020bec 	.word	0x08020bec
 800fe60:	08020c30 	.word	0x08020c30
 800fe64:	200019a0 	.word	0x200019a0
 800fe68:	20001474 	.word	0x20001474
 800fe6c:	08020c84 	.word	0x08020c84
 800fe70:	08020cd4 	.word	0x08020cd4
 800fe74:	08020cf4 	.word	0x08020cf4
 800fe78:	200014aa 	.word	0x200014aa
 800fe7c:	08020d18 	.word	0x08020d18

0800fe80 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b092      	sub	sp, #72	; 0x48
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800fe8c:	4b22      	ldr	r3, [pc, #136]	; (800ff18 <SystemRestart+0x98>)
 800fe8e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to restart the device y/n?");
 800fe90:	4922      	ldr	r1, [pc, #136]	; (800ff1c <SystemRestart+0x9c>)
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f7fe ff64 	bl	800ed60 <cli_printf>

	cli_other = 1;
 800fe98:	4b21      	ldr	r3, [pc, #132]	; (800ff20 <SystemRestart+0xa0>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800fe9e:	4b21      	ldr	r3, [pc, #132]	; (800ff24 <SystemRestart+0xa4>)
 800fea0:	2200      	movs	r2, #0
 800fea2:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800fea4:	f107 0310 	add.w	r3, r7, #16
 800fea8:	2232      	movs	r2, #50	; 0x32
 800feaa:	4619      	mov	r1, r3
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f7fe ff99 	bl	800ede4 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800feb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800feb4:	f7f0 f99e 	bl	80001f4 <strlen>
 800feb8:	4603      	mov	r3, r0
 800feba:	b29a      	uxth	r2, r3
 800febc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fec0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fec2:	4819      	ldr	r0, [pc, #100]	; (800ff28 <SystemRestart+0xa8>)
 800fec4:	f7fb fcb2 	bl	800b82c <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800fec8:	f107 0310 	add.w	r3, r7, #16
 800fecc:	2179      	movs	r1, #121	; 0x79
 800fece:	4618      	mov	r0, r3
 800fed0:	f00c fb4a 	bl	801c568 <strchr>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d006      	beq.n	800fee8 <SystemRestart+0x68>
		{
			cli_printf(cli,"Device is going to restart.");
 800feda:	4914      	ldr	r1, [pc, #80]	; (800ff2c <SystemRestart+0xac>)
 800fedc:	68f8      	ldr	r0, [r7, #12]
 800fede:	f7fe ff3f 	bl	800ed60 <cli_printf>
			HAL_NVIC_SystemReset();
 800fee2:	f7f4 fc06 	bl	80046f2 <HAL_NVIC_SystemReset>
 800fee6:	e00c      	b.n	800ff02 <SystemRestart+0x82>
		}
		else if(strstr(buffer, "n"))
 800fee8:	f107 0310 	add.w	r3, r7, #16
 800feec:	216e      	movs	r1, #110	; 0x6e
 800feee:	4618      	mov	r0, r3
 800fef0:	f00c fb3a 	bl	801c568 <strchr>
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <SystemRestart+0x82>
		{
			cli_printf(cli,"Device restart aborted.");
 800fefa:	490d      	ldr	r1, [pc, #52]	; (800ff30 <SystemRestart+0xb0>)
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	f7fe ff2f 	bl	800ed60 <cli_printf>
		}


		flag_cli = 0;
 800ff02:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <SystemRestart+0xa4>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800ff08:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <SystemRestart+0xa0>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	701a      	strb	r2, [r3, #0]
}
 800ff0e:	bf00      	nop
 800ff10:	3748      	adds	r7, #72	; 0x48
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	080205e4 	.word	0x080205e4
 800ff1c:	08020d34 	.word	0x08020d34
 800ff20:	20001a5e 	.word	0x20001a5e
 800ff24:	20001a5f 	.word	0x20001a5f
 800ff28:	200019a0 	.word	0x200019a0
 800ff2c:	08020d5c 	.word	0x08020d5c
 800ff30:	08020d78 	.word	0x08020d78

0800ff34 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 800ff40:	4b08      	ldr	r3, [pc, #32]	; (800ff64 <Co2Level+0x30>)
 800ff42:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d101      	bne.n	800ff4e <Co2Level+0x1a>
						get_scd4x_measurement();
 800ff4a:	f7f1 fb5f 	bl	800160c <get_scd4x_measurement>
					}

	cli_printf(cli,"Co2 Value: %d",_RunTime_Packet.co2);
 800ff4e:	4b05      	ldr	r3, [pc, #20]	; (800ff64 <Co2Level+0x30>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	4904      	ldr	r1, [pc, #16]	; (800ff68 <Co2Level+0x34>)
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7fe ff02 	bl	800ed60 <cli_printf>
}
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	20001474 	.word	0x20001474
 800ff68:	08020d90 	.word	0x08020d90

0800ff6c <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]



	if (!_RunTime_Packet.scd4x_i2c_error) {
 800ff78:	4b08      	ldr	r3, [pc, #32]	; (800ff9c <TempLevel+0x30>)
 800ff7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d101      	bne.n	800ff86 <TempLevel+0x1a>
						get_scd4x_measurement();
 800ff82:	f7f1 fb43 	bl	800160c <get_scd4x_measurement>
					}

	cli_printf(cli,"Temperature Value: %dC ",_RunTime_Packet.temperature);
 800ff86:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <TempLevel+0x30>)
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	4904      	ldr	r1, [pc, #16]	; (800ffa0 <TempLevel+0x34>)
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f7fe fee6 	bl	800ed60 <cli_printf>
}
 800ff94:	bf00      	nop
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	20001474 	.word	0x20001474
 800ffa0:	08020da0 	.word	0x08020da0

0800ffa4 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 800ffb0:	4b08      	ldr	r3, [pc, #32]	; (800ffd4 <HumidLevel+0x30>)
 800ffb2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d101      	bne.n	800ffbe <HumidLevel+0x1a>
						get_scd4x_measurement();
 800ffba:	f7f1 fb27 	bl	800160c <get_scd4x_measurement>
					}

	cli_printf(cli,"Humidity Value: %d ",_RunTime_Packet.humidity);
 800ffbe:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <HumidLevel+0x30>)
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4904      	ldr	r1, [pc, #16]	; (800ffd8 <HumidLevel+0x34>)
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f7fe feca 	bl	800ed60 <cli_printf>
}
 800ffcc:	bf00      	nop
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	20001474 	.word	0x20001474
 800ffd8:	08020db8 	.word	0x08020db8

0800ffdc <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"For 10seconds system will poll here to detect motion.");
 800ffe8:	491f      	ldr	r1, [pc, #124]	; (8010068 <MotionDetection+0x8c>)
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7fe feb8 	bl	800ed60 <cli_printf>
	HAL_Delay(1500);
 800fff0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800fff4:	f7f3 fd6e 	bl	8003ad4 <HAL_Delay>
         prev_max_wait_time_motion = HAL_GetTick();
 800fff8:	f7f3 fd60 	bl	8003abc <HAL_GetTick>
 800fffc:	4603      	mov	r3, r0
 800fffe:	4a1b      	ldr	r2, [pc, #108]	; (801006c <MotionDetection+0x90>)
 8010000:	6013      	str	r3, [r2, #0]
         prev_motion = 0;
 8010002:	4b1b      	ldr	r3, [pc, #108]	; (8010070 <MotionDetection+0x94>)
 8010004:	2200      	movs	r2, #0
 8010006:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 8010008:	e01c      	b.n	8010044 <MotionDetection+0x68>
	{

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 801000a:	2101      	movs	r1, #1
 801000c:	4819      	ldr	r0, [pc, #100]	; (8010074 <MotionDetection+0x98>)
 801000e:	f7f5 fd21 	bl	8005a54 <HAL_GPIO_ReadPin>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d003      	beq.n	8010020 <MotionDetection+0x44>
				_RunTime_Packet.motion_detection = 1;
 8010018:	4b17      	ldr	r3, [pc, #92]	; (8010078 <MotionDetection+0x9c>)
 801001a:	2201      	movs	r2, #1
 801001c:	731a      	strb	r2, [r3, #12]
 801001e:	e002      	b.n	8010026 <MotionDetection+0x4a>
				//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
			}
			else {
				_RunTime_Packet.motion_detection = 0;
 8010020:	4b15      	ldr	r3, [pc, #84]	; (8010078 <MotionDetection+0x9c>)
 8010022:	2200      	movs	r2, #0
 8010024:	731a      	strb	r2, [r3, #12]
			}

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
			cli_printf(cli,"PIR Motion: %s\r\n",_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8010026:	4b14      	ldr	r3, [pc, #80]	; (8010078 <MotionDetection+0x9c>)
 8010028:	7b1b      	ldrb	r3, [r3, #12]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d101      	bne.n	8010032 <MotionDetection+0x56>
 801002e:	4b13      	ldr	r3, [pc, #76]	; (801007c <MotionDetection+0xa0>)
 8010030:	e000      	b.n	8010034 <MotionDetection+0x58>
 8010032:	4b13      	ldr	r3, [pc, #76]	; (8010080 <MotionDetection+0xa4>)
 8010034:	461a      	mov	r2, r3
 8010036:	4913      	ldr	r1, [pc, #76]	; (8010084 <MotionDetection+0xa8>)
 8010038:	68f8      	ldr	r0, [r7, #12]
 801003a:	f7fe fe91 	bl	800ed60 <cli_printf>
//	         	}
HAL_Delay(100);
 801003e:	2064      	movs	r0, #100	; 0x64
 8010040:	f7f3 fd48 	bl	8003ad4 <HAL_Delay>
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 8010044:	f7f3 fd3a 	bl	8003abc <HAL_GetTick>
 8010048:	4602      	mov	r2, r0
 801004a:	4b08      	ldr	r3, [pc, #32]	; (801006c <MotionDetection+0x90>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	1ad2      	subs	r2, r2, r3
 8010050:	4b0d      	ldr	r3, [pc, #52]	; (8010088 <MotionDetection+0xac>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	429a      	cmp	r2, r3
 8010056:	d3d8      	bcc.n	801000a <MotionDetection+0x2e>

	}

	cli_printf(cli,"Session ended");
 8010058:	490c      	ldr	r1, [pc, #48]	; (801008c <MotionDetection+0xb0>)
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f7fe fe80 	bl	800ed60 <cli_printf>

}
 8010060:	bf00      	nop
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	08020dcc 	.word	0x08020dcc
 801006c:	20001a58 	.word	0x20001a58
 8010070:	20001a60 	.word	0x20001a60
 8010074:	40020000 	.word	0x40020000
 8010078:	20001474 	.word	0x20001474
 801007c:	08020e04 	.word	0x08020e04
 8010080:	08020e0c 	.word	0x08020e0c
 8010084:	08020e14 	.word	0x08020e14
 8010088:	20000020 	.word	0x20000020
 801008c:	08020e28 	.word	0x08020e28

08010090 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"AirQuality Measured Values:");
 801009c:	4922      	ldr	r1, [pc, #136]	; (8010128 <AirQuality+0x98>)
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f7fe fe5e 	bl	800ed60 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

if(	_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start)
 80100a4:	4b21      	ldr	r3, [pc, #132]	; (801012c <AirQuality+0x9c>)
 80100a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d104      	bne.n	80100b8 <AirQuality+0x28>
 80100ae:	4b1f      	ldr	r3, [pc, #124]	; (801012c <AirQuality+0x9c>)
 80100b0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d004      	beq.n	80100c2 <AirQuality+0x32>
{
	cli_printf(cli,"Calculating, try again later");
 80100b8:	491d      	ldr	r1, [pc, #116]	; (8010130 <AirQuality+0xa0>)
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7fe fe50 	bl	800ed60 <cli_printf>
 80100c0:	e02e      	b.n	8010120 <AirQuality+0x90>
}
else
{

	get_sps30_measurement();
 80100c2:	f7f1 fb59 	bl	8001778 <get_sps30_measurement>
	cli_printf(cli,"%0.2f pm1.0", _RunTime_Packet.pm1_0);
 80100c6:	4b19      	ldr	r3, [pc, #100]	; (801012c <AirQuality+0x9c>)
 80100c8:	691b      	ldr	r3, [r3, #16]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7f0 fa54 	bl	8000578 <__aeabi_f2d>
 80100d0:	4602      	mov	r2, r0
 80100d2:	460b      	mov	r3, r1
 80100d4:	4917      	ldr	r1, [pc, #92]	; (8010134 <AirQuality+0xa4>)
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f7fe fe42 	bl	800ed60 <cli_printf>
	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
 80100dc:	4b13      	ldr	r3, [pc, #76]	; (801012c <AirQuality+0x9c>)
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7f0 fa49 	bl	8000578 <__aeabi_f2d>
 80100e6:	4602      	mov	r2, r0
 80100e8:	460b      	mov	r3, r1
 80100ea:	4913      	ldr	r1, [pc, #76]	; (8010138 <AirQuality+0xa8>)
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7fe fe37 	bl	800ed60 <cli_printf>
	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
 80100f2:	4b0e      	ldr	r3, [pc, #56]	; (801012c <AirQuality+0x9c>)
 80100f4:	699b      	ldr	r3, [r3, #24]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7f0 fa3e 	bl	8000578 <__aeabi_f2d>
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	490e      	ldr	r1, [pc, #56]	; (801013c <AirQuality+0xac>)
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7fe fe2c 	bl	800ed60 <cli_printf>
	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
 8010108:	4b08      	ldr	r3, [pc, #32]	; (801012c <AirQuality+0x9c>)
 801010a:	69db      	ldr	r3, [r3, #28]
 801010c:	4618      	mov	r0, r3
 801010e:	f7f0 fa33 	bl	8000578 <__aeabi_f2d>
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	490a      	ldr	r1, [pc, #40]	; (8010140 <AirQuality+0xb0>)
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f7fe fe21 	bl	800ed60 <cli_printf>
}


}
 801011e:	bf00      	nop
 8010120:	bf00      	nop
 8010122:	3710      	adds	r7, #16
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	08020e38 	.word	0x08020e38
 801012c:	20001474 	.word	0x20001474
 8010130:	08020e54 	.word	0x08020e54
 8010134:	08020e74 	.word	0x08020e74
 8010138:	08020e80 	.word	0x08020e80
 801013c:	08020e90 	.word	0x08020e90
 8010140:	08020ea0 	.word	0x08020ea0

08010144 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8010150:	4808      	ldr	r0, [pc, #32]	; (8010174 <BattVolt+0x30>)
 8010152:	f002 f9e9 	bl	8012528 <adc_Measure>
	cli_printf(cli,"Battery voltage: %0.2f",_RunTime_Packet.battery_voltage);
 8010156:	4b08      	ldr	r3, [pc, #32]	; (8010178 <BattVolt+0x34>)
 8010158:	6a1b      	ldr	r3, [r3, #32]
 801015a:	4618      	mov	r0, r3
 801015c:	f7f0 fa0c 	bl	8000578 <__aeabi_f2d>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	4905      	ldr	r1, [pc, #20]	; (801017c <BattVolt+0x38>)
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f7fe fdfa 	bl	800ed60 <cli_printf>


}
 801016c:	bf00      	nop
 801016e:	3710      	adds	r7, #16
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	20001494 	.word	0x20001494
 8010178:	20001474 	.word	0x20001474
 801017c:	08020eb0 	.word	0x08020eb0

08010180 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 8010180:	b5b0      	push	{r4, r5, r7, lr}
 8010182:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010186:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 8010188:	f000 fcd1 	bl	8010b2e <embeddedCliNewDefault>
 801018c:	4603      	mov	r3, r0
 801018e:	4aac      	ldr	r2, [pc, #688]	; (8010440 <initializeEmbeddedCli+0x2c0>)
 8010190:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 8010192:	4bac      	ldr	r3, [pc, #688]	; (8010444 <initializeEmbeddedCli+0x2c4>)
 8010194:	f507 7411 	add.w	r4, r7, #580	; 0x244
 8010198:	461d      	mov	r5, r3
 801019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801019e:	682b      	ldr	r3, [r5, #0]
 80101a0:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80101a2:	4ba9      	ldr	r3, [pc, #676]	; (8010448 <initializeEmbeddedCli+0x2c8>)
 80101a4:	f507 740c 	add.w	r4, r7, #560	; 0x230
 80101a8:	461d      	mov	r5, r3
 80101aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101ae:	682b      	ldr	r3, [r5, #0]
 80101b0:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor", .tokenizeArgs = true, .context = NULL,
			.binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature", .help =
 80101b2:	4ba6      	ldr	r3, [pc, #664]	; (801044c <initializeEmbeddedCli+0x2cc>)
 80101b4:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 80101b8:	461d      	mov	r5, r3
 80101ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101be:	682b      	ldr	r3, [r5, #0]
 80101c0:	6023      	str	r3, [r4, #0]
				"Device Signature-Electronic ID", .tokenizeArgs = true, .context = NULL,
				.binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80101c2:	4ba3      	ldr	r3, [pc, #652]	; (8010450 <initializeEmbeddedCli+0x2d0>)
 80101c4:	f507 7402 	add.w	r4, r7, #520	; 0x208
 80101c8:	461d      	mov	r5, r3
 80101ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101ce:	682b      	ldr	r3, [r5, #0]
 80101d0:	6023      	str	r3, [r4, #0]
				"Sets ID", .tokenizeArgs = true, .context = NULL,
				.binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 80101d2:	4ba0      	ldr	r3, [pc, #640]	; (8010454 <initializeEmbeddedCli+0x2d4>)
 80101d4:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 80101d8:	461d      	mov	r5, r3
 80101da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101de:	682b      	ldr	r3, [r5, #0]
 80101e0:	6023      	str	r3, [r4, #0]
				"Sets Location", .tokenizeArgs = true, .context = NULL,
				.binding = SetLocation };

	CliCommandBinding Set_name = { .name = "set-name", .help =
 80101e2:	4b9d      	ldr	r3, [pc, #628]	; (8010458 <initializeEmbeddedCli+0x2d8>)
 80101e4:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 80101e8:	461d      	mov	r5, r3
 80101ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101ee:	682b      	ldr	r3, [r5, #0]
 80101f0:	6023      	str	r3, [r4, #0]
				"Sets name", .tokenizeArgs = true, .context = NULL,
				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 80101f2:	4b9a      	ldr	r3, [pc, #616]	; (801045c <initializeEmbeddedCli+0x2dc>)
 80101f4:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 80101f8:	461d      	mov	r5, r3
 80101fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101fe:	682b      	ldr	r3, [r5, #0]
 8010200:	6023      	str	r3, [r4, #0]
				"Sets group", .tokenizeArgs = true, .context = NULL,
				.binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help =
 8010202:	4b97      	ldr	r3, [pc, #604]	; (8010460 <initializeEmbeddedCli+0x2e0>)
 8010204:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 8010208:	461d      	mov	r5, r3
 801020a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801020c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801020e:	682b      	ldr	r3, [r5, #0]
 8010210:	6023      	str	r3, [r4, #0]
				"gets ID", .tokenizeArgs = true, .context = NULL,
				.binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 8010212:	4b94      	ldr	r3, [pc, #592]	; (8010464 <initializeEmbeddedCli+0x2e4>)
 8010214:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 8010218:	461d      	mov	r5, r3
 801021a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801021c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801021e:	682b      	ldr	r3, [r5, #0]
 8010220:	6023      	str	r3, [r4, #0]
				"gets Location", .tokenizeArgs = true, .context = NULL,
				.binding = GetLocation };

	CliCommandBinding Get_name = { .name = "get-name", .help =
 8010222:	4b91      	ldr	r3, [pc, #580]	; (8010468 <initializeEmbeddedCli+0x2e8>)
 8010224:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8010228:	461d      	mov	r5, r3
 801022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801022e:	682b      	ldr	r3, [r5, #0]
 8010230:	6023      	str	r3, [r4, #0]
				"gets name", .tokenizeArgs = true, .context = NULL,
				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help =
 8010232:	4b8e      	ldr	r3, [pc, #568]	; (801046c <initializeEmbeddedCli+0x2ec>)
 8010234:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 8010238:	461d      	mov	r5, r3
 801023a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801023c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801023e:	682b      	ldr	r3, [r5, #0]
 8010240:	6023      	str	r3, [r4, #0]
				"gets group", .tokenizeArgs = true, .context = NULL,
				.binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 8010242:	4b8b      	ldr	r3, [pc, #556]	; (8010470 <initializeEmbeddedCli+0x2f0>)
 8010244:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8010248:	461d      	mov	r5, r3
 801024a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801024c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801024e:	682b      	ldr	r3, [r5, #0]
 8010250:	6023      	str	r3, [r4, #0]
			"Set Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help =
 8010252:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801025a:	4a86      	ldr	r2, [pc, #536]	; (8010474 <initializeEmbeddedCli+0x2f4>)
 801025c:	461c      	mov	r4, r3
 801025e:	4615      	mov	r5, r2
 8010260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010264:	682b      	ldr	r3, [r5, #0]
 8010266:	6023      	str	r3, [r4, #0]
			"Set Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 8010268:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801026c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010270:	4a81      	ldr	r2, [pc, #516]	; (8010478 <initializeEmbeddedCli+0x2f8>)
 8010272:	461c      	mov	r4, r3
 8010274:	4615      	mov	r5, r2
 8010276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801027a:	682b      	ldr	r3, [r5, #0]
 801027c:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 801027e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010286:	4a7d      	ldr	r2, [pc, #500]	; (801047c <initializeEmbeddedCli+0x2fc>)
 8010288:	461c      	mov	r4, r3
 801028a:	4615      	mov	r5, r2
 801028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010290:	682b      	ldr	r3, [r5, #0]
 8010292:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8010294:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010298:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801029c:	4a78      	ldr	r2, [pc, #480]	; (8010480 <initializeEmbeddedCli+0x300>)
 801029e:	461c      	mov	r4, r3
 80102a0:	4615      	mov	r5, r2
 80102a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102a6:	682b      	ldr	r3, [r5, #0]
 80102a8:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true, .context = NULL,
			.binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 80102aa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80102b2:	4a74      	ldr	r2, [pc, #464]	; (8010484 <initializeEmbeddedCli+0x304>)
 80102b4:	461c      	mov	r4, r3
 80102b6:	4615      	mov	r5, r2
 80102b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102bc:	682b      	ldr	r3, [r5, #0]
 80102be:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };


	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80102c0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102c4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80102c8:	4a6f      	ldr	r2, [pc, #444]	; (8010488 <initializeEmbeddedCli+0x308>)
 80102ca:	461c      	mov	r4, r3
 80102cc:	4615      	mov	r5, r2
 80102ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102d2:	682b      	ldr	r3, [r5, #0]
 80102d4:	6023      	str	r3, [r4, #0]
			"Set desired filename", .tokenizeArgs = true, .context = NULL,
			.binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80102d6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80102de:	4a6b      	ldr	r2, [pc, #428]	; (801048c <initializeEmbeddedCli+0x30c>)
 80102e0:	461c      	mov	r4, r3
 80102e2:	4615      	mov	r5, r2
 80102e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102e8:	682b      	ldr	r3, [r5, #0]
 80102ea:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL,
			.binding = GetFilename };


	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80102ec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80102f4:	4a66      	ldr	r2, [pc, #408]	; (8010490 <initializeEmbeddedCli+0x310>)
 80102f6:	461c      	mov	r4, r3
 80102f8:	4615      	mov	r5, r2
 80102fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102fe:	682b      	ldr	r3, [r5, #0]
 8010300:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 8010302:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010306:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801030a:	4a62      	ldr	r2, [pc, #392]	; (8010494 <initializeEmbeddedCli+0x314>)
 801030c:	461c      	mov	r4, r3
 801030e:	4615      	mov	r5, r2
 8010310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL,
			.binding = GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8010318:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801031c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010320:	4a5d      	ldr	r2, [pc, #372]	; (8010498 <initializeEmbeddedCli+0x318>)
 8010322:	461c      	mov	r4, r3
 8010324:	4615      	mov	r5, r2
 8010326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801032a:	682b      	ldr	r3, [r5, #0]
 801032c:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context = NULL,
			.binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 801032e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010332:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8010336:	4a59      	ldr	r2, [pc, #356]	; (801049c <initializeEmbeddedCli+0x31c>)
 8010338:	461c      	mov	r4, r3
 801033a:	4615      	mov	r5, r2
 801033c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801033e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010340:	682b      	ldr	r3, [r5, #0]
 8010342:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8010344:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010348:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801034c:	4a54      	ldr	r2, [pc, #336]	; (80104a0 <initializeEmbeddedCli+0x320>)
 801034e:	461c      	mov	r4, r3
 8010350:	4615      	mov	r5, r2
 8010352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010356:	682b      	ldr	r3, [r5, #0]
 8010358:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 801035a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801035e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010362:	4a50      	ldr	r2, [pc, #320]	; (80104a4 <initializeEmbeddedCli+0x324>)
 8010364:	461c      	mov	r4, r3
 8010366:	4615      	mov	r5, r2
 8010368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	6023      	str	r3, [r4, #0]
			"Check Co2 level", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8010370:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010374:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010378:	4a4b      	ldr	r2, [pc, #300]	; (80104a8 <initializeEmbeddedCli+0x328>)
 801037a:	461c      	mov	r4, r3
 801037c:	4615      	mov	r5, r2
 801037e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010382:	682b      	ldr	r3, [r5, #0]
 8010384:	6023      	str	r3, [r4, #0]
			"Check Temperature level", .tokenizeArgs = true, .context = NULL,
			.binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8010386:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801038a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801038e:	4a47      	ldr	r2, [pc, #284]	; (80104ac <initializeEmbeddedCli+0x32c>)
 8010390:	461c      	mov	r4, r3
 8010392:	4615      	mov	r5, r2
 8010394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010398:	682b      	ldr	r3, [r5, #0]
 801039a:	6023      	str	r3, [r4, #0]
			"Check Humidity level", .tokenizeArgs = true, .context = NULL,
			.binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 801039c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103a0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80103a4:	4a42      	ldr	r2, [pc, #264]	; (80104b0 <initializeEmbeddedCli+0x330>)
 80103a6:	461c      	mov	r4, r3
 80103a8:	4615      	mov	r5, r2
 80103aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ae:	682b      	ldr	r3, [r5, #0]
 80103b0:	6023      	str	r3, [r4, #0]
			"Detect Motion", .tokenizeArgs = true, .context = NULL,
			.binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 80103b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80103ba:	4a3e      	ldr	r2, [pc, #248]	; (80104b4 <initializeEmbeddedCli+0x334>)
 80103bc:	461c      	mov	r4, r3
 80103be:	4615      	mov	r5, r2
 80103c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103c4:	682b      	ldr	r3, [r5, #0]
 80103c6:	6023      	str	r3, [r4, #0]
				"Check air quality level", .tokenizeArgs = true, .context = NULL,
				.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-volt", .help =
 80103c8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80103d0:	4a39      	ldr	r2, [pc, #228]	; (80104b8 <initializeEmbeddedCli+0x338>)
 80103d2:	461c      	mov	r4, r3
 80103d4:	4615      	mov	r5, r2
 80103d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103da:	682b      	ldr	r3, [r5, #0]
 80103dc:	6023      	str	r3, [r4, #0]
				.binding = BattVolt };



	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 80103de:	4b18      	ldr	r3, [pc, #96]	; (8010440 <initializeEmbeddedCli+0x2c0>)
 80103e0:	681c      	ldr	r4, [r3, #0]
 80103e2:	466a      	mov	r2, sp
 80103e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80103e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80103ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80103f0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80103f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103f6:	4620      	mov	r0, r4
 80103f8:	f000 fc57 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 80103fc:	4b10      	ldr	r3, [pc, #64]	; (8010440 <initializeEmbeddedCli+0x2c0>)
 80103fe:	681c      	ldr	r4, [r3, #0]
 8010400:	466a      	mov	r2, sp
 8010402:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8010406:	e893 0003 	ldmia.w	r3, {r0, r1}
 801040a:	e882 0003 	stmia.w	r2, {r0, r1}
 801040e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8010412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010414:	4620      	mov	r0, r4
 8010416:	f000 fc48 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 801041a:	4b09      	ldr	r3, [pc, #36]	; (8010440 <initializeEmbeddedCli+0x2c0>)
 801041c:	681c      	ldr	r4, [r3, #0]
 801041e:	466a      	mov	r2, sp
 8010420:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8010424:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010428:	e882 0003 	stmia.w	r2, {r0, r1}
 801042c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010432:	4620      	mov	r0, r4
 8010434:	f000 fc39 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8010438:	4b01      	ldr	r3, [pc, #4]	; (8010440 <initializeEmbeddedCli+0x2c0>)
 801043a:	681c      	ldr	r4, [r3, #0]
 801043c:	466a      	mov	r2, sp
 801043e:	e03d      	b.n	80104bc <initializeEmbeddedCli+0x33c>
 8010440:	20001a50 	.word	0x20001a50
 8010444:	08020ec8 	.word	0x08020ec8
 8010448:	08020edc 	.word	0x08020edc
 801044c:	08020ef0 	.word	0x08020ef0
 8010450:	08020f04 	.word	0x08020f04
 8010454:	08020f18 	.word	0x08020f18
 8010458:	08020f2c 	.word	0x08020f2c
 801045c:	08020f40 	.word	0x08020f40
 8010460:	08020f54 	.word	0x08020f54
 8010464:	08020f68 	.word	0x08020f68
 8010468:	08020f7c 	.word	0x08020f7c
 801046c:	08020f90 	.word	0x08020f90
 8010470:	08020fa4 	.word	0x08020fa4
 8010474:	08020fb8 	.word	0x08020fb8
 8010478:	08020fcc 	.word	0x08020fcc
 801047c:	08020fe0 	.word	0x08020fe0
 8010480:	08020ff4 	.word	0x08020ff4
 8010484:	08021008 	.word	0x08021008
 8010488:	0802101c 	.word	0x0802101c
 801048c:	08021030 	.word	0x08021030
 8010490:	08021044 	.word	0x08021044
 8010494:	08021058 	.word	0x08021058
 8010498:	0802106c 	.word	0x0802106c
 801049c:	08021080 	.word	0x08021080
 80104a0:	08021094 	.word	0x08021094
 80104a4:	080210a8 	.word	0x080210a8
 80104a8:	080210bc 	.word	0x080210bc
 80104ac:	080210d0 	.word	0x080210d0
 80104b0:	080210e4 	.word	0x080210e4
 80104b4:	080210f8 	.word	0x080210f8
 80104b8:	0802110c 	.word	0x0802110c
 80104bc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80104c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80104c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80104cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 fbeb 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 80104d4:	4bd6      	ldr	r3, [pc, #856]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80104d6:	681c      	ldr	r4, [r3, #0]
 80104d8:	466a      	mov	r2, sp
 80104da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80104de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104e2:	e882 0003 	stmia.w	r2, {r0, r1}
 80104e6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80104ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104ec:	4620      	mov	r0, r4
 80104ee:	f000 fbdc 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_name);
 80104f2:	4bcf      	ldr	r3, [pc, #828]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80104f4:	681c      	ldr	r4, [r3, #0]
 80104f6:	466a      	mov	r2, sp
 80104f8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80104fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010500:	e882 0003 	stmia.w	r2, {r0, r1}
 8010504:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8010508:	cb0e      	ldmia	r3, {r1, r2, r3}
 801050a:	4620      	mov	r0, r4
 801050c:	f000 fbcd 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_group);
 8010510:	4bc7      	ldr	r3, [pc, #796]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 8010512:	681c      	ldr	r4, [r3, #0]
 8010514:	466a      	mov	r2, sp
 8010516:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801051a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801051e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010522:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8010526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010528:	4620      	mov	r0, r4
 801052a:	f000 fbbe 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 801052e:	4bc0      	ldr	r3, [pc, #768]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 8010530:	681c      	ldr	r4, [r3, #0]
 8010532:	466a      	mov	r2, sp
 8010534:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8010538:	e893 0003 	ldmia.w	r3, {r0, r1}
 801053c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010540:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8010544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010546:	4620      	mov	r0, r4
 8010548:	f000 fbaf 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 801054c:	4bb8      	ldr	r3, [pc, #736]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801054e:	681c      	ldr	r4, [r3, #0]
 8010550:	466a      	mov	r2, sp
 8010552:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8010556:	e893 0003 	ldmia.w	r3, {r0, r1}
 801055a:	e882 0003 	stmia.w	r2, {r0, r1}
 801055e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8010562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010564:	4620      	mov	r0, r4
 8010566:	f000 fba0 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_name);
 801056a:	4bb1      	ldr	r3, [pc, #708]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801056c:	681c      	ldr	r4, [r3, #0]
 801056e:	466a      	mov	r2, sp
 8010570:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010578:	e882 0003 	stmia.w	r2, {r0, r1}
 801057c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8010580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010582:	4620      	mov	r0, r4
 8010584:	f000 fb91 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_group);
 8010588:	4ba9      	ldr	r3, [pc, #676]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801058a:	681c      	ldr	r4, [r3, #0]
 801058c:	466a      	mov	r2, sp
 801058e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8010592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010596:	e882 0003 	stmia.w	r2, {r0, r1}
 801059a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801059e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105a0:	4620      	mov	r0, r4
 80105a2:	f000 fb82 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 80105a6:	4ba2      	ldr	r3, [pc, #648]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80105a8:	681c      	ldr	r4, [r3, #0]
 80105aa:	466a      	mov	r2, sp
 80105ac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80105b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80105b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80105bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105be:	4620      	mov	r0, r4
 80105c0:	f000 fb73 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 80105c4:	4b9a      	ldr	r3, [pc, #616]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80105c6:	681c      	ldr	r4, [r3, #0]
 80105c8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80105cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105d0:	466d      	mov	r5, sp
 80105d2:	f103 020c 	add.w	r2, r3, #12
 80105d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105da:	e885 0003 	stmia.w	r5, {r0, r1}
 80105de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105e0:	4620      	mov	r0, r4
 80105e2:	f000 fb62 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 80105e6:	4b92      	ldr	r3, [pc, #584]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80105e8:	681c      	ldr	r4, [r3, #0]
 80105ea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80105ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80105f2:	466d      	mov	r5, sp
 80105f4:	f103 020c 	add.w	r2, r3, #12
 80105f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8010600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010602:	4620      	mov	r0, r4
 8010604:	f000 fb51 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8010608:	4b89      	ldr	r3, [pc, #548]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801060a:	681c      	ldr	r4, [r3, #0]
 801060c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010614:	466d      	mov	r5, sp
 8010616:	f103 020c 	add.w	r2, r3, #12
 801061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801061e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010624:	4620      	mov	r0, r4
 8010626:	f000 fb40 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 801062a:	4b81      	ldr	r3, [pc, #516]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801062c:	681c      	ldr	r4, [r3, #0]
 801062e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010632:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8010636:	466d      	mov	r5, sp
 8010638:	f103 020c 	add.w	r2, r3, #12
 801063c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010640:	e885 0003 	stmia.w	r5, {r0, r1}
 8010644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fb2f 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 801064c:	4b78      	ldr	r3, [pc, #480]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801064e:	681c      	ldr	r4, [r3, #0]
 8010650:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010654:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010658:	466d      	mov	r5, sp
 801065a:	f103 020c 	add.w	r2, r3, #12
 801065e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010662:	e885 0003 	stmia.w	r5, {r0, r1}
 8010666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010668:	4620      	mov	r0, r4
 801066a:	f000 fb1e 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 801066e:	4b70      	ldr	r3, [pc, #448]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 8010670:	681c      	ldr	r4, [r3, #0]
 8010672:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010676:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801067a:	466d      	mov	r5, sp
 801067c:	f103 020c 	add.w	r2, r3, #12
 8010680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010684:	e885 0003 	stmia.w	r5, {r0, r1}
 8010688:	cb0e      	ldmia	r3, {r1, r2, r3}
 801068a:	4620      	mov	r0, r4
 801068c:	f000 fb0d 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010690:	4b67      	ldr	r3, [pc, #412]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 8010692:	681c      	ldr	r4, [r3, #0]
 8010694:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010698:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801069c:	466d      	mov	r5, sp
 801069e:	f103 020c 	add.w	r2, r3, #12
 80106a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80106aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106ac:	4620      	mov	r0, r4
 80106ae:	f000 fafc 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 80106b2:	4b5f      	ldr	r3, [pc, #380]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80106b4:	681c      	ldr	r4, [r3, #0]
 80106b6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80106ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80106be:	466d      	mov	r5, sp
 80106c0:	f103 020c 	add.w	r2, r3, #12
 80106c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80106cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106ce:	4620      	mov	r0, r4
 80106d0:	f000 faeb 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 80106d4:	4b56      	ldr	r3, [pc, #344]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80106d6:	681c      	ldr	r4, [r3, #0]
 80106d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80106dc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80106e0:	466d      	mov	r5, sp
 80106e2:	f103 020c 	add.w	r2, r3, #12
 80106e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80106ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fada 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 80106f6:	4b4e      	ldr	r3, [pc, #312]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80106f8:	681c      	ldr	r4, [r3, #0]
 80106fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80106fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010702:	466d      	mov	r5, sp
 8010704:	f103 020c 	add.w	r2, r3, #12
 8010708:	e892 0003 	ldmia.w	r2, {r0, r1}
 801070c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010712:	4620      	mov	r0, r4
 8010714:	f000 fac9 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8010718:	4b45      	ldr	r3, [pc, #276]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801071a:	681c      	ldr	r4, [r3, #0]
 801071c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010720:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8010724:	466d      	mov	r5, sp
 8010726:	f103 020c 	add.w	r2, r3, #12
 801072a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801072e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010734:	4620      	mov	r0, r4
 8010736:	f000 fab8 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 801073a:	4b3d      	ldr	r3, [pc, #244]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801073c:	681c      	ldr	r4, [r3, #0]
 801073e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010742:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010746:	466d      	mov	r5, sp
 8010748:	f103 020c 	add.w	r2, r3, #12
 801074c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010750:	e885 0003 	stmia.w	r5, {r0, r1}
 8010754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010756:	4620      	mov	r0, r4
 8010758:	f000 faa7 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 801075c:	4b34      	ldr	r3, [pc, #208]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801075e:	681c      	ldr	r4, [r3, #0]
 8010760:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010764:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010768:	466d      	mov	r5, sp
 801076a:	f103 020c 	add.w	r2, r3, #12
 801076e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010772:	e885 0003 	stmia.w	r5, {r0, r1}
 8010776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010778:	4620      	mov	r0, r4
 801077a:	f000 fa96 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 801077e:	4b2c      	ldr	r3, [pc, #176]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 8010780:	681c      	ldr	r4, [r3, #0]
 8010782:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010786:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801078a:	466d      	mov	r5, sp
 801078c:	f103 020c 	add.w	r2, r3, #12
 8010790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010794:	e885 0003 	stmia.w	r5, {r0, r1}
 8010798:	cb0e      	ldmia	r3, {r1, r2, r3}
 801079a:	4620      	mov	r0, r4
 801079c:	f000 fa85 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 80107a0:	4b23      	ldr	r3, [pc, #140]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80107a2:	681c      	ldr	r4, [r3, #0]
 80107a4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80107a8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80107ac:	466d      	mov	r5, sp
 80107ae:	f103 020c 	add.w	r2, r3, #12
 80107b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80107ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107bc:	4620      	mov	r0, r4
 80107be:	f000 fa74 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 80107c2:	4b1b      	ldr	r3, [pc, #108]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80107c4:	681c      	ldr	r4, [r3, #0]
 80107c6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80107ca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80107ce:	466d      	mov	r5, sp
 80107d0:	f103 020c 	add.w	r2, r3, #12
 80107d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80107dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107de:	4620      	mov	r0, r4
 80107e0:	f000 fa63 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 80107e4:	4b12      	ldr	r3, [pc, #72]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 80107e6:	681c      	ldr	r4, [r3, #0]
 80107e8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80107ec:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107f0:	466d      	mov	r5, sp
 80107f2:	f103 020c 	add.w	r2, r3, #12
 80107f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80107fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010800:	4620      	mov	r0, r4
 8010802:	f000 fa52 	bl	8010caa <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8010806:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 8010808:	681c      	ldr	r4, [r3, #0]
 801080a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801080e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010812:	466d      	mov	r5, sp
 8010814:	f103 020c 	add.w	r2, r3, #12
 8010818:	e892 0003 	ldmia.w	r2, {r0, r1}
 801081c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010822:	4620      	mov	r0, r4
 8010824:	f000 fa41 	bl	8010caa <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8010828:	4b01      	ldr	r3, [pc, #4]	; (8010830 <initializeEmbeddedCli+0x6b0>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	e002      	b.n	8010834 <initializeEmbeddedCli+0x6b4>
 801082e:	bf00      	nop
 8010830:	20001a50 	.word	0x20001a50
 8010834:	4a06      	ldr	r2, [pc, #24]	; (8010850 <initializeEmbeddedCli+0x6d0>)
 8010836:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010838:	4b06      	ldr	r3, [pc, #24]	; (8010854 <initializeEmbeddedCli+0x6d4>)
 801083a:	2201      	movs	r2, #1
 801083c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801083e:	4b06      	ldr	r3, [pc, #24]	; (8010858 <initializeEmbeddedCli+0x6d8>)
 8010840:	2200      	movs	r2, #0
 8010842:	701a      	strb	r2, [r3, #0]
}
 8010844:	bf00      	nop
 8010846:	f507 7716 	add.w	r7, r7, #600	; 0x258
 801084a:	46bd      	mov	sp, r7
 801084c:	bdb0      	pop	{r4, r5, r7, pc}
 801084e:	bf00      	nop
 8010850:	0800ed35 	.word	0x0800ed35
 8010854:	20001a5d 	.word	0x20001a5d
 8010858:	20001a5e 	.word	0x20001a5e

0801085c <console_process>:

void console_process(void) {
 801085c:	b580      	push	{r7, lr}
 801085e:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010860:	4b03      	ldr	r3, [pc, #12]	; (8010870 <console_process+0x14>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4618      	mov	r0, r3
 8010866:	f000 f990 	bl	8010b8a <embeddedCliProcess>
}
 801086a:	bf00      	nop
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	20001a50 	.word	0x20001a50

08010874 <console_uart_deinit>:



void console_uart_deinit()
{
 8010874:	b580      	push	{r7, lr}
 8010876:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010878:	4803      	ldr	r0, [pc, #12]	; (8010888 <console_uart_deinit+0x14>)
 801087a:	f7fa ffa8 	bl	800b7ce <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 801087e:	4802      	ldr	r0, [pc, #8]	; (8010888 <console_uart_deinit+0x14>)
 8010880:	f7f2 fefe 	bl	8003680 <HAL_UART_MspDeInit>
}
 8010884:	bf00      	nop
 8010886:	bd80      	pop	{r7, pc}
 8010888:	200019a0 	.word	0x200019a0

0801088c <console_uart_init>:
void console_uart_init()
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010890:	4815      	ldr	r0, [pc, #84]	; (80108e8 <console_uart_init+0x5c>)
 8010892:	f7fa ff9c 	bl	800b7ce <HAL_UART_DeInit>
	  huart1.Instance = USART1;
 8010896:	4b14      	ldr	r3, [pc, #80]	; (80108e8 <console_uart_init+0x5c>)
 8010898:	4a14      	ldr	r2, [pc, #80]	; (80108ec <console_uart_init+0x60>)
 801089a:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 801089c:	4b12      	ldr	r3, [pc, #72]	; (80108e8 <console_uart_init+0x5c>)
 801089e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80108a2:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80108a4:	4b10      	ldr	r3, [pc, #64]	; (80108e8 <console_uart_init+0x5c>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 80108aa:	4b0f      	ldr	r3, [pc, #60]	; (80108e8 <console_uart_init+0x5c>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 80108b0:	4b0d      	ldr	r3, [pc, #52]	; (80108e8 <console_uart_init+0x5c>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 80108b6:	4b0c      	ldr	r3, [pc, #48]	; (80108e8 <console_uart_init+0x5c>)
 80108b8:	220c      	movs	r2, #12
 80108ba:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80108bc:	4b0a      	ldr	r3, [pc, #40]	; (80108e8 <console_uart_init+0x5c>)
 80108be:	2200      	movs	r2, #0
 80108c0:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80108c2:	4b09      	ldr	r3, [pc, #36]	; (80108e8 <console_uart_init+0x5c>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 80108c8:	4807      	ldr	r0, [pc, #28]	; (80108e8 <console_uart_init+0x5c>)
 80108ca:	f7fa ff33 	bl	800b734 <HAL_UART_Init>
 80108ce:	4603      	mov	r3, r0
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <console_uart_init+0x4c>
	  {
	    Error_Handler();
 80108d4:	f7f2 fbb4 	bl	8003040 <Error_Handler>
	  }
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80108d8:	2201      	movs	r2, #1
 80108da:	4905      	ldr	r1, [pc, #20]	; (80108f0 <console_uart_init+0x64>)
 80108dc:	4802      	ldr	r0, [pc, #8]	; (80108e8 <console_uart_init+0x5c>)
 80108de:	f7fb f837 	bl	800b950 <HAL_UART_Receive_IT>
}
 80108e2:	bf00      	nop
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	200019a0 	.word	0x200019a0
 80108ec:	40011000 	.word	0x40011000
 80108f0:	20001a5c 	.word	0x20001a5c

080108f4 <console_init>:

void console_init(void) {
 80108f4:	b580      	push	{r7, lr}
 80108f6:	af00      	add	r7, sp, #0
	console_uart_init();
 80108f8:	f7ff ffc8 	bl	801088c <console_uart_init>
	initializeEmbeddedCli();
 80108fc:	f7ff fc40 	bl	8010180 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010900:	2201      	movs	r2, #1
 8010902:	4903      	ldr	r1, [pc, #12]	; (8010910 <console_init+0x1c>)
 8010904:	4803      	ldr	r0, [pc, #12]	; (8010914 <console_init+0x20>)
 8010906:	f7fb f823 	bl	800b950 <HAL_UART_Receive_IT>
}
 801090a:	bf00      	nop
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	20001a5c 	.word	0x20001a5c
 8010914:	200019a0 	.word	0x200019a0

08010918 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8010918:	b480      	push	{r7}
 801091a:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 801091c:	4b0e      	ldr	r3, [pc, #56]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 801091e:	2240      	movs	r2, #64	; 0x40
 8010920:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8010922:	4b0d      	ldr	r3, [pc, #52]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 8010924:	2240      	movs	r2, #64	; 0x40
 8010926:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8010928:	4b0b      	ldr	r3, [pc, #44]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 801092a:	2280      	movs	r2, #128	; 0x80
 801092c:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 801092e:	4b0a      	ldr	r3, [pc, #40]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 8010930:	2200      	movs	r2, #0
 8010932:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8010934:	4b08      	ldr	r3, [pc, #32]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 8010936:	2200      	movs	r2, #0
 8010938:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 801093a:	4b07      	ldr	r3, [pc, #28]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 801093c:	2232      	movs	r2, #50	; 0x32
 801093e:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010940:	4b05      	ldr	r3, [pc, #20]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 8010942:	2201      	movs	r2, #1
 8010944:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8010946:	4b04      	ldr	r3, [pc, #16]	; (8010958 <embeddedCliDefaultConfig+0x40>)
 8010948:	4a04      	ldr	r2, [pc, #16]	; (801095c <embeddedCliDefaultConfig+0x44>)
 801094a:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 801094c:	4b02      	ldr	r3, [pc, #8]	; (8010958 <embeddedCliDefaultConfig+0x40>)
}
 801094e:	4618      	mov	r0, r3
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr
 8010958:	20001a64 	.word	0x20001a64
 801095c:	08021144 	.word	0x08021144

08010960 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	895b      	ldrh	r3, [r3, #10]
 801096c:	2201      	movs	r2, #1
 801096e:	4413      	add	r3, r2
 8010970:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	889b      	ldrh	r3, [r3, #4]
 8010976:	3303      	adds	r3, #3
 8010978:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	88db      	ldrh	r3, [r3, #6]
 801097e:	3303      	adds	r3, #3
 8010980:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010982:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	891b      	ldrh	r3, [r3, #8]
 8010988:	3303      	adds	r3, #3
 801098a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 801098c:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 801098e:	89fa      	ldrh	r2, [r7, #14]
 8010990:	4613      	mov	r3, r2
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	4413      	add	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	3303      	adds	r3, #3
 801099a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 801099c:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 801099e:	89fb      	ldrh	r3, [r7, #14]
 80109a0:	3303      	adds	r3, #3
 80109a2:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80109a4:	4413      	add	r3, r2
 80109a6:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	b29b      	uxth	r3, r3
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3714      	adds	r7, #20
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr

080109ba <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80109ba:	b580      	push	{r7, lr}
 80109bc:	b088      	sub	sp, #32
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	895b      	ldrh	r3, [r3, #10]
 80109ca:	2201      	movs	r2, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff ffc5 	bl	8010960 <embeddedCliRequiredSize>
 80109d6:	4603      	mov	r3, r0
 80109d8:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 80109da:	2300      	movs	r3, #0
 80109dc:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10f      	bne.n	8010a06 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 80109e6:	6938      	ldr	r0, [r7, #16]
 80109e8:	f00a fd68 	bl	801b4bc <malloc>
 80109ec:	4603      	mov	r3, r0
 80109ee:	461a      	mov	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d101      	bne.n	8010a00 <embeddedCliNew+0x46>
            return NULL;
 80109fc:	2300      	movs	r3, #0
 80109fe:	e092      	b.n	8010b26 <embeddedCliNew+0x16c>
        allocated = true;
 8010a00:	2301      	movs	r3, #1
 8010a02:	77fb      	strb	r3, [r7, #31]
 8010a04:	e007      	b.n	8010a16 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	8a1b      	ldrh	r3, [r3, #16]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d901      	bls.n	8010a16 <embeddedCliNew+0x5c>
        return NULL;
 8010a12:	2300      	movs	r3, #0
 8010a14:	e087      	b.n	8010b26 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	2100      	movs	r1, #0
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f00a fd7b 	bl	801b51c <memset>

    cli = (EmbeddedCli *) buf;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	3310      	adds	r3, #16
 8010a2e:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	3334      	adds	r3, #52	; 0x34
 8010a3a:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	889b      	ldrh	r3, [r3, #4]
 8010a4c:	3303      	adds	r3, #3
 8010a4e:	f023 0303 	bic.w	r3, r3, #3
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	4413      	add	r3, r2
 8010a56:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	88db      	ldrh	r3, [r3, #6]
 8010a62:	3303      	adds	r3, #3
 8010a64:	f023 0303 	bic.w	r3, r3, #3
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8010a74:	8afa      	ldrh	r2, [r7, #22]
 8010a76:	4613      	mov	r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	4413      	add	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	3303      	adds	r3, #3
 8010a80:	f023 0303 	bic.w	r3, r3, #3
 8010a84:	68fa      	ldr	r2, [r7, #12]
 8010a86:	4413      	add	r3, r2
 8010a88:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8010a90:	8afb      	ldrh	r3, [r7, #22]
 8010a92:	3303      	adds	r3, #3
 8010a94:	f023 0303 	bic.w	r3, r3, #3
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	68fa      	ldr	r2, [r7, #12]
 8010aa2:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	891a      	ldrh	r2, [r3, #8]
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8010aac:	7ffb      	ldrb	r3, [r7, #31]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d008      	beq.n	8010ac4 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ab8:	f043 0304 	orr.w	r3, r3, #4
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	7c9b      	ldrb	r3, [r3, #18]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d008      	beq.n	8010ade <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ad2:	f043 0320 	orr.w	r3, r3, #32
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	889a      	ldrh	r2, [r3, #4]
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	2200      	movs	r2, #0
 8010af0:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	88da      	ldrh	r2, [r3, #6]
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	2200      	movs	r2, #0
 8010afe:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	895b      	ldrh	r3, [r3, #10]
 8010b04:	2201      	movs	r2, #1
 8010b06:	4413      	add	r3, r2
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8010b1e:	69b8      	ldr	r0, [r7, #24]
 8010b20:	f000 fc5e 	bl	80113e0 <initInternalBindings>

    return cli;
 8010b24:	69bb      	ldr	r3, [r7, #24]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3720      	adds	r7, #32
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 8010b32:	f7ff fef1 	bl	8010918 <embeddedCliDefaultConfig>
 8010b36:	4603      	mov	r3, r0
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7ff ff3e 	bl	80109ba <embeddedCliNew>
 8010b3e:	4603      	mov	r3, r0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3310      	adds	r3, #16
 8010b5a:	78fa      	ldrb	r2, [r7, #3]
 8010b5c:	4611      	mov	r1, r2
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f000 ffe1 	bl	8011b26 <fifoBufPush>
 8010b64:	4603      	mov	r3, r0
 8010b66:	f083 0301 	eor.w	r3, r3, #1
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d008      	beq.n	8010b82 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010b76:	f043 0301 	orr.w	r3, r3, #1
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 8010b82:	bf00      	nop
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f000 8083 	beq.w	8010ca2 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ba8:	f003 0302 	and.w	r3, r3, #2
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d155      	bne.n	8010c5c <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010bb6:	f043 0302 	orr.w	r3, r3, #2
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 ff0b 	bl	80119e4 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010bce:	e045      	b.n	8010c5c <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	3310      	adds	r3, #16
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 ff7e 	bl	8011ad6 <fifoBufPop>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010be4:	f003 0308 	and.w	r3, r3, #8
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d005      	beq.n	8010bf8 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8010bec:	7afb      	ldrb	r3, [r7, #11]
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fa17 	bl	8011024 <onEscapedInput>
 8010bf6:	e02a      	b.n	8010c4e <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010bfe:	2b1b      	cmp	r3, #27
 8010c00:	d10c      	bne.n	8010c1c <embeddedCliProcess+0x92>
 8010c02:	7afb      	ldrb	r3, [r7, #11]
 8010c04:	2b5b      	cmp	r3, #91	; 0x5b
 8010c06:	d109      	bne.n	8010c1c <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c0e:	f043 0308 	orr.w	r3, r3, #8
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010c1a:	e018      	b.n	8010c4e <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8010c1c:	7afb      	ldrb	r3, [r7, #11]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f000 ff01 	bl	8011a26 <isControlChar>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d005      	beq.n	8010c36 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8010c2a:	7afb      	ldrb	r3, [r7, #11]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 fa54 	bl	80110dc <onControlInput>
 8010c34:	e00b      	b.n	8010c4e <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8010c36:	7afb      	ldrb	r3, [r7, #11]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f000 ff14 	bl	8011a66 <isDisplayableChar>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d004      	beq.n	8010c4e <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8010c44:	7afb      	ldrb	r3, [r7, #11]
 8010c46:	4619      	mov	r1, r3
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 fa17 	bl	801107c <onCharInput>
        }

        printLiveAutocompletion(cli);
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 fdb1 	bl	80117b6 <printLiveAutocompletion>

        impl->lastChar = c;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	7afa      	ldrb	r2, [r7, #11]
 8010c58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	3310      	adds	r3, #16
 8010c60:	4618      	mov	r0, r3
 8010c62:	f000 ff17 	bl	8011a94 <fifoBufAvailable>
 8010c66:	4603      	mov	r3, r0
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1b1      	bne.n	8010bd0 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c72:	f003 0301 	and.w	r3, r3, #1
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d014      	beq.n	8010ca4 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	69db      	ldr	r3, [r3, #28]
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	8c12      	ldrh	r2, [r2, #32]
 8010c88:	4413      	add	r3, r2
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c94:	f023 0301 	bic.w	r3, r3, #1
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010ca0:	e000      	b.n	8010ca4 <embeddedCliProcess+0x11a>
        return;
 8010ca2:	bf00      	nop
    }
}
 8010ca4:	3710      	adds	r7, #16
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}

08010caa <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 8010caa:	b084      	sub	sp, #16
 8010cac:	b4b0      	push	{r4, r5, r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010cb8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d101      	bne.n	8010cd2 <embeddedCliAddBinding+0x28>
        return false;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e017      	b.n	8010d02 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010cda:	4619      	mov	r1, r3
 8010cdc:	460b      	mov	r3, r1
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	440b      	add	r3, r1
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	4413      	add	r3, r2
 8010ce6:	461d      	mov	r5, r3
 8010ce8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cf0:	6823      	ldr	r3, [r4, #0]
 8010cf2:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8010d00:	2301      	movs	r3, #1
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bcb0      	pop	{r4, r5, r7}
 8010d0a:	b004      	add	sp, #16
 8010d0c:	4770      	bx	lr
	...

08010d10 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d031      	beq.n	8010d86 <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d2e:	f003 0310 	and.w	r3, r3, #16
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d102      	bne.n	8010d3c <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 fe22 	bl	8011980 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8010d3c:	6839      	ldr	r1, [r7, #0]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 fe50 	bl	80119e4 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8010d44:	4b12      	ldr	r3, [pc, #72]	; (8010d90 <embeddedCliPrint+0x80>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 fe4a 	bl	80119e4 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d56:	f003 0310 	and.w	r3, r3, #16
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d114      	bne.n	8010d88 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 fe3d 	bl	80119e4 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	69db      	ldr	r3, [r3, #28]
 8010d6e:	4619      	mov	r1, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 fe37 	bl	80119e4 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	8c1a      	ldrh	r2, [r3, #32]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 fd19 	bl	80117b6 <printLiveAutocompletion>
 8010d84:	e000      	b.n	8010d88 <embeddedCliPrint+0x78>
        return;
 8010d86:	bf00      	nop
    }
}
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	20000024 	.word	0x20000024

08010d94 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b088      	sub	sp, #32
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d066      	beq.n	8010e70 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8010da2:	4b35      	ldr	r3, [pc, #212]	; (8010e78 <embeddedCliTokenizeArgs+0xe4>)
 8010da4:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8010da6:	2300      	movs	r3, #0
 8010da8:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8010daa:	2300      	movs	r3, #0
 8010dac:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8010db6:	e047      	b.n	8010e48 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8010dbe:	7fbb      	ldrb	r3, [r7, #30]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d002      	beq.n	8010dca <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	77bb      	strb	r3, [r7, #30]
 8010dc8:	e029      	b.n	8010e1e <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8010dca:	7cfb      	ldrb	r3, [r7, #19]
 8010dcc:	2b5c      	cmp	r3, #92	; 0x5c
 8010dce:	d102      	bne.n	8010dd6 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	77bb      	strb	r3, [r7, #30]
            continue;
 8010dd4:	e038      	b.n	8010e48 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8010dd6:	7cfb      	ldrb	r3, [r7, #19]
 8010dd8:	2b22      	cmp	r3, #34	; 0x22
 8010dda:	d110      	bne.n	8010dfe <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8010ddc:	7ffb      	ldrb	r3, [r7, #31]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bf14      	ite	ne
 8010de2:	2301      	movne	r3, #1
 8010de4:	2300      	moveq	r3, #0
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	f083 0301 	eor.w	r3, r3, #1
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	77fb      	strb	r3, [r7, #31]
 8010df0:	7ffb      	ldrb	r3, [r7, #31]
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8010df8:	2300      	movs	r3, #0
 8010dfa:	74fb      	strb	r3, [r7, #19]
 8010dfc:	e00f      	b.n	8010e1e <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8010dfe:	7ffb      	ldrb	r3, [r7, #31]
 8010e00:	f083 0301 	eor.w	r3, r3, #1
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d009      	beq.n	8010e1e <embeddedCliTokenizeArgs+0x8a>
 8010e0a:	7cfb      	ldrb	r3, [r7, #19]
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	68f8      	ldr	r0, [r7, #12]
 8010e10:	f00b fbaa 	bl	801c568 <strchr>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d001      	beq.n	8010e1e <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8010e1e:	7cfb      	ldrb	r3, [r7, #19]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d109      	bne.n	8010e38 <embeddedCliTokenizeArgs+0xa4>
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	dd0e      	ble.n	8010e48 <embeddedCliTokenizeArgs+0xb4>
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	4413      	add	r3, r2
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d007      	beq.n	8010e48 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	7cfa      	ldrb	r2, [r7, #19]
 8010e40:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	3301      	adds	r3, #1
 8010e46:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	74fb      	strb	r3, [r7, #19]
 8010e52:	7cfb      	ldrb	r3, [r7, #19]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1af      	bne.n	8010db8 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	2200      	movs	r2, #0
 8010e60:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	3301      	adds	r3, #1
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	4413      	add	r3, r2
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	701a      	strb	r2, [r3, #0]
 8010e6e:	e000      	b.n	8010e72 <embeddedCliTokenizeArgs+0xde>
        return;
 8010e70:	bf00      	nop
}
 8010e72:	3720      	adds	r7, #32
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	08021148 	.word	0x08021148

08010e7c <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	460b      	mov	r3, r1
 8010e86:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010e88:	887b      	ldrh	r3, [r7, #2]
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f000 ff51 	bl	8011d34 <getTokenPosition>
 8010e92:	4603      	mov	r3, r0
 8010e94:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010e96:	89fb      	ldrh	r3, [r7, #14]
 8010e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d003      	beq.n	8010ea8 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8010ea0:	89fb      	ldrh	r3, [r7, #14]
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	e000      	b.n	8010eaa <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b084      	sub	sp, #16
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
 8010eba:	460b      	mov	r3, r1
 8010ebc:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010ebe:	887b      	ldrh	r3, [r7, #2]
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 ff36 	bl	8011d34 <getTokenPosition>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010ecc:	89fb      	ldrh	r3, [r7, #14]
 8010ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d003      	beq.n	8010ede <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8010ed6:	89fb      	ldrh	r3, [r7, #14]
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	4413      	add	r3, r2
 8010edc:	e000      	b.n	8010ee0 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d003      	beq.n	8010efe <embeddedCliGetTokenCount+0x16>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d101      	bne.n	8010f02 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	e019      	b.n	8010f36 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8010f02:	2300      	movs	r3, #0
 8010f04:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8010f06:	2301      	movs	r3, #1
 8010f08:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	4413      	add	r3, r2
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d109      	bne.n	8010f2a <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d006      	beq.n	8010f32 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8010f24:	897b      	ldrh	r3, [r7, #10]
 8010f26:	3301      	adds	r3, #1
 8010f28:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8010f30:	e7eb      	b.n	8010f0a <embeddedCliGetTokenCount+0x22>
                break;
 8010f32:	bf00      	nop
    }

    return tokenCount;
 8010f34:	897b      	ldrh	r3, [r7, #10]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3714      	adds	r7, #20
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
	...

08010f44 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b086      	sub	sp, #24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	899b      	ldrh	r3, [r3, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d05c      	beq.n	8011018 <navigateHistory+0xd4>
 8010f5e:	78fb      	ldrb	r3, [r7, #3]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d005      	beq.n	8010f70 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	895a      	ldrh	r2, [r3, #10]
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	899b      	ldrh	r3, [r3, #12]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d053      	beq.n	8011018 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8010f70:	78fb      	ldrb	r3, [r7, #3]
 8010f72:	f083 0301 	eor.w	r3, r3, #1
 8010f76:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d003      	beq.n	8010f84 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	895b      	ldrh	r3, [r3, #10]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d049      	beq.n	8011018 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fcfb 	bl	8011980 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 fd27 	bl	80119e4 <writeToOutput>

    if (navigateUp)
 8010f96:	78fb      	ldrb	r3, [r7, #3]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d006      	beq.n	8010faa <navigateHistory+0x66>
        ++impl->history.current;
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	895b      	ldrh	r3, [r3, #10]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	b29a      	uxth	r2, r3
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	815a      	strh	r2, [r3, #10]
 8010fa8:	e005      	b.n	8010fb6 <navigateHistory+0x72>
    else
        --impl->history.current;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	895b      	ldrh	r3, [r3, #10]
 8010fae:	3b01      	subs	r3, #1
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	1d1a      	adds	r2, r3, #4
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	895b      	ldrh	r3, [r3, #10]
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	4610      	mov	r0, r2
 8010fc2:	f000 fe3e 	bl	8011c42 <historyGet>
 8010fc6:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d101      	bne.n	8010fd2 <navigateHistory+0x8e>
        item = "";
 8010fce:	4b14      	ldr	r3, [pc, #80]	; (8011020 <navigateHistory+0xdc>)
 8010fd0:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8010fd2:	6978      	ldr	r0, [r7, #20]
 8010fd4:	f7ef f90e 	bl	80001f4 <strlen>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	69db      	ldr	r3, [r3, #28]
 8010fe0:	89fa      	ldrh	r2, [r7, #14]
 8010fe2:	6979      	ldr	r1, [r7, #20]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f00a fa71 	bl	801b4cc <memcpy>
    impl->cmdBuffer[len] = '\0';
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	69da      	ldr	r2, [r3, #28]
 8010fee:	89fb      	ldrh	r3, [r7, #14]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	89fa      	ldrh	r2, [r7, #14]
 8010ffa:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	69db      	ldr	r3, [r3, #28]
 8011000:	4619      	mov	r1, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fcee 	bl	80119e4 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	8c1a      	ldrh	r2, [r3, #32]
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 fbd0 	bl	80117b6 <printLiveAutocompletion>
 8011016:	e000      	b.n	801101a <navigateHistory+0xd6>
        return;
 8011018:	bf00      	nop
}
 801101a:	3718      	adds	r7, #24
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}
 8011020:	0802114c 	.word	0x0802114c

08011024 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8011036:	78fb      	ldrb	r3, [r7, #3]
 8011038:	2b3f      	cmp	r3, #63	; 0x3f
 801103a:	d91b      	bls.n	8011074 <onEscapedInput+0x50>
 801103c:	78fb      	ldrb	r3, [r7, #3]
 801103e:	2b7e      	cmp	r3, #126	; 0x7e
 8011040:	d818      	bhi.n	8011074 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011048:	f023 0308 	bic.w	r3, r3, #8
 801104c:	b2da      	uxtb	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 8011054:	78fb      	ldrb	r3, [r7, #3]
 8011056:	2b41      	cmp	r3, #65	; 0x41
 8011058:	d002      	beq.n	8011060 <onEscapedInput+0x3c>
 801105a:	78fb      	ldrb	r3, [r7, #3]
 801105c:	2b42      	cmp	r3, #66	; 0x42
 801105e:	d109      	bne.n	8011074 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8011060:	78fb      	ldrb	r3, [r7, #3]
 8011062:	2b41      	cmp	r3, #65	; 0x41
 8011064:	bf0c      	ite	eq
 8011066:	2301      	moveq	r3, #1
 8011068:	2300      	movne	r3, #0
 801106a:	b2db      	uxtb	r3, r3
 801106c:	4619      	mov	r1, r3
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ff ff68 	bl	8010f44 <navigateHistory>
        }
    }
}
 8011074:	bf00      	nop
 8011076:	3710      	adds	r7, #16
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	460b      	mov	r3, r1
 8011086:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	8c1b      	ldrh	r3, [r3, #32]
 8011092:	3302      	adds	r3, #2
 8011094:	68fa      	ldr	r2, [r7, #12]
 8011096:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8011098:	4293      	cmp	r3, r2
 801109a:	da1a      	bge.n	80110d2 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	69db      	ldr	r3, [r3, #28]
 80110a0:	68fa      	ldr	r2, [r7, #12]
 80110a2:	8c12      	ldrh	r2, [r2, #32]
 80110a4:	4413      	add	r3, r2
 80110a6:	78fa      	ldrb	r2, [r7, #3]
 80110a8:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	8c1b      	ldrh	r3, [r3, #32]
 80110ae:	3301      	adds	r3, #1
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	69db      	ldr	r3, [r3, #28]
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	8c12      	ldrh	r2, [r2, #32]
 80110be:	4413      	add	r3, r2
 80110c0:	2200      	movs	r2, #0
 80110c2:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	78fa      	ldrb	r2, [r7, #3]
 80110ca:	4611      	mov	r1, r2
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	4798      	blx	r3
 80110d0:	e000      	b.n	80110d4 <onCharInput+0x58>
        return;
 80110d2:	bf00      	nop
}
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80110f4:	2b0d      	cmp	r3, #13
 80110f6:	d102      	bne.n	80110fe <onControlInput+0x22>
 80110f8:	78fb      	ldrb	r3, [r7, #3]
 80110fa:	2b0a      	cmp	r3, #10
 80110fc:	d062      	beq.n	80111c4 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8011104:	2b0a      	cmp	r3, #10
 8011106:	d102      	bne.n	801110e <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8011108:	78fb      	ldrb	r3, [r7, #3]
 801110a:	2b0d      	cmp	r3, #13
 801110c:	d05a      	beq.n	80111c4 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 801110e:	78fb      	ldrb	r3, [r7, #3]
 8011110:	2b0d      	cmp	r3, #13
 8011112:	d002      	beq.n	801111a <onControlInput+0x3e>
 8011114:	78fb      	ldrb	r3, [r7, #3]
 8011116:	2b0a      	cmp	r3, #10
 8011118:	d126      	bne.n	8011168 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fba6 	bl	801186c <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8011120:	4b2a      	ldr	r3, [pc, #168]	; (80111cc <onControlInput+0xf0>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4619      	mov	r1, r3
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fc5c 	bl	80119e4 <writeToOutput>

        if (impl->cmdSize > 0)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	8c1b      	ldrh	r3, [r3, #32]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d002      	beq.n	801113a <onControlInput+0x5e>
            parseCommand(cli);
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f000 f84b 	bl	80111d0 <parseCommand>
        impl->cmdSize = 0;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2200      	movs	r2, #0
 801113e:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	69db      	ldr	r3, [r3, #28]
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	8c12      	ldrh	r2, [r2, #32]
 8011148:	4413      	add	r3, r2
 801114a:	2200      	movs	r2, #0
 801114c:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2200      	movs	r2, #0
 8011158:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4619      	mov	r1, r3
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 fc3f 	bl	80119e4 <writeToOutput>
 8011166:	e02e      	b.n	80111c6 <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8011168:	78fb      	ldrb	r3, [r7, #3]
 801116a:	2b08      	cmp	r3, #8
 801116c:	d002      	beq.n	8011174 <onControlInput+0x98>
 801116e:	78fb      	ldrb	r3, [r7, #3]
 8011170:	2b7f      	cmp	r3, #127	; 0x7f
 8011172:	d120      	bne.n	80111b6 <onControlInput+0xda>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	8c1b      	ldrh	r3, [r3, #32]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d01c      	beq.n	80111b6 <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2108      	movs	r1, #8
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2120      	movs	r1, #32
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2108      	movs	r1, #8
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	8c1b      	ldrh	r3, [r3, #32]
 801119e:	3b01      	subs	r3, #1
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	69db      	ldr	r3, [r3, #28]
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	8c12      	ldrh	r2, [r2, #32]
 80111ae:	4413      	add	r3, r2
 80111b0:	2200      	movs	r2, #0
 80111b2:	701a      	strb	r2, [r3, #0]
 80111b4:	e007      	b.n	80111c6 <onControlInput+0xea>
    } else if (c == '\t') {
 80111b6:	78fb      	ldrb	r3, [r7, #3]
 80111b8:	2b09      	cmp	r3, #9
 80111ba:	d104      	bne.n	80111c6 <onControlInput+0xea>
        onAutocompleteRequest(cli);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fb55 	bl	801186c <onAutocompleteRequest>
 80111c2:	e000      	b.n	80111c6 <onControlInput+0xea>
        return;
 80111c4:	bf00      	nop
    }

}
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	20000024 	.word	0x20000024

080111d0 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b08f      	sub	sp, #60	; 0x3c
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 80111de:	2301      	movs	r3, #1
 80111e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 80111e4:	2300      	movs	r3, #0
 80111e6:	633b      	str	r3, [r7, #48]	; 0x30
 80111e8:	e00d      	b.n	8011206 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	69da      	ldr	r2, [r3, #28]
 80111ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f0:	4413      	add	r3, r2
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b20      	cmp	r3, #32
 80111f6:	d003      	beq.n	8011200 <parseCommand+0x30>
            isEmpty = false;
 80111f8:	2300      	movs	r3, #0
 80111fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 80111fe:	e008      	b.n	8011212 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011202:	3301      	adds	r3, #1
 8011204:	633b      	str	r3, [r7, #48]	; 0x30
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	8c1b      	ldrh	r3, [r3, #32]
 801120a:	461a      	mov	r2, r3
 801120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120e:	4293      	cmp	r3, r2
 8011210:	dbeb      	blt.n	80111ea <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8011212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011216:	2b00      	cmp	r3, #0
 8011218:	f040 80dc 	bne.w	80113d4 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	1d1a      	adds	r2, r3, #4
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	69db      	ldr	r3, [r3, #28]
 8011224:	4619      	mov	r1, r3
 8011226:	4610      	mov	r0, r2
 8011228:	f000 fca7 	bl	8011b7a <historyPut>

    char *cmdName = NULL;
 801122c:	2300      	movs	r3, #0
 801122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8011230:	2300      	movs	r3, #0
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8011234:	2300      	movs	r3, #0
 8011236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 801123a:	2300      	movs	r3, #0
 801123c:	623b      	str	r3, [r7, #32]
 801123e:	e030      	b.n	80112a2 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	69da      	ldr	r2, [r3, #28]
 8011244:	6a3b      	ldr	r3, [r7, #32]
 8011246:	4413      	add	r3, r2
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 801124c:	7dfb      	ldrb	r3, [r7, #23]
 801124e:	2b20      	cmp	r3, #32
 8011250:	d10f      	bne.n	8011272 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8011252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011254:	2b00      	cmp	r3, #0
 8011256:	d105      	bne.n	8011264 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	69da      	ldr	r2, [r3, #28]
 801125c:	6a3b      	ldr	r3, [r7, #32]
 801125e:	4413      	add	r3, r2
 8011260:	2200      	movs	r2, #0
 8011262:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8011264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011266:	2b00      	cmp	r3, #0
 8011268:	d018      	beq.n	801129c <parseCommand+0xcc>
                nameFinished = true;
 801126a:	2301      	movs	r3, #1
 801126c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011270:	e014      	b.n	801129c <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8011272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011274:	2b00      	cmp	r3, #0
 8011276:	d105      	bne.n	8011284 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	69da      	ldr	r2, [r3, #28]
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	4413      	add	r3, r2
 8011280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011282:	e00b      	b.n	801129c <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8011284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011286:	2b00      	cmp	r3, #0
 8011288:	d108      	bne.n	801129c <parseCommand+0xcc>
 801128a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801128e:	2b00      	cmp	r3, #0
 8011290:	d004      	beq.n	801129c <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	69da      	ldr	r2, [r3, #28]
 8011296:	6a3b      	ldr	r3, [r7, #32]
 8011298:	4413      	add	r3, r2
 801129a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	3301      	adds	r3, #1
 80112a0:	623b      	str	r3, [r7, #32]
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	8c1b      	ldrh	r3, [r3, #32]
 80112a6:	461a      	mov	r2, r3
 80112a8:	6a3b      	ldr	r3, [r7, #32]
 80112aa:	4293      	cmp	r3, r2
 80112ac:	dbc8      	blt.n	8011240 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	69da      	ldr	r2, [r3, #28]
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	8c1b      	ldrh	r3, [r3, #32]
 80112b6:	3301      	adds	r3, #1
 80112b8:	4413      	add	r3, r2
 80112ba:	2200      	movs	r2, #0
 80112bc:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 80112be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 8089 	beq.w	80113d8 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80112c6:	2300      	movs	r3, #0
 80112c8:	61fb      	str	r3, [r7, #28]
 80112ca:	e054      	b.n	8011376 <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80112d0:	69fa      	ldr	r2, [r7, #28]
 80112d2:	4613      	mov	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	440b      	add	r3, r1
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4619      	mov	r1, r3
 80112e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112e2:	f7ee ff7d 	bl	80001e0 <strcmp>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d141      	bne.n	8011370 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80112f0:	69fa      	ldr	r2, [r7, #28]
 80112f2:	4613      	mov	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	440b      	add	r3, r1
 80112fc:	691b      	ldr	r3, [r3, #16]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d040      	beq.n	8011384 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011306:	69fa      	ldr	r2, [r7, #28]
 8011308:	4613      	mov	r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4413      	add	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	440b      	add	r3, r1
 8011312:	7a1b      	ldrb	r3, [r3, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d002      	beq.n	801131e <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8011318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801131a:	f7ff fd3b 	bl	8010d94 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011324:	f043 0310 	orr.w	r3, r3, #16
 8011328:	b2da      	uxtb	r2, r3
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8011330:	69bb      	ldr	r3, [r7, #24]
 8011332:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011334:	69fa      	ldr	r2, [r7, #28]
 8011336:	4613      	mov	r3, r2
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4413      	add	r3, r2
 801133c:	009b      	lsls	r3, r3, #2
 801133e:	440b      	add	r3, r1
 8011340:	691c      	ldr	r4, [r3, #16]
 8011342:	69bb      	ldr	r3, [r7, #24]
 8011344:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011346:	69fa      	ldr	r2, [r7, #28]
 8011348:	4613      	mov	r3, r2
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	4413      	add	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	440b      	add	r3, r1
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	461a      	mov	r2, r3
 8011356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011362:	f023 0310 	bic.w	r3, r3, #16
 8011366:	b2da      	uxtb	r2, r3
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 801136e:	e034      	b.n	80113da <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	3301      	adds	r3, #1
 8011374:	61fb      	str	r3, [r7, #28]
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801137a:	461a      	mov	r2, r3
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	4293      	cmp	r3, r2
 8011380:	dba4      	blt.n	80112cc <parseCommand+0xfc>
 8011382:	e000      	b.n	8011386 <parseCommand+0x1b6>
                break;
 8011384:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d01d      	beq.n	80113ca <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 801138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011390:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8011392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011394:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801139c:	f043 0310 	orr.w	r3, r3, #16
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	f107 020c 	add.w	r2, r7, #12
 80113b0:	4611      	mov	r1, r2
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80113bc:	f023 0310 	bic.w	r3, r3, #16
 80113c0:	b2da      	uxtb	r2, r3
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80113c8:	e007      	b.n	80113da <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 80113ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 f913 	bl	80115f8 <onUnknownCommand>
 80113d2:	e002      	b.n	80113da <parseCommand+0x20a>
        return;
 80113d4:	bf00      	nop
 80113d6:	e000      	b.n	80113da <parseCommand+0x20a>
        return;
 80113d8:	bf00      	nop
    }
}
 80113da:	373c      	adds	r7, #60	; 0x3c
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd90      	pop	{r4, r7, pc}

080113e0 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 80113e0:	b5b0      	push	{r4, r5, r7, lr}
 80113e2:	b08a      	sub	sp, #40	; 0x28
 80113e4:	af02      	add	r7, sp, #8
 80113e6:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 80113e8:	4b0c      	ldr	r3, [pc, #48]	; (801141c <initInternalBindings+0x3c>)
 80113ea:	f107 040c 	add.w	r4, r7, #12
 80113ee:	461d      	mov	r5, r3
 80113f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 80113f8:	466a      	mov	r2, sp
 80113fa:	f107 0318 	add.w	r3, r7, #24
 80113fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011402:	e882 0003 	stmia.w	r2, {r0, r1}
 8011406:	f107 030c 	add.w	r3, r7, #12
 801140a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff fc4c 	bl	8010caa <embeddedCliAddBinding>
}
 8011412:	bf00      	nop
 8011414:	3720      	adds	r7, #32
 8011416:	46bd      	mov	sp, r7
 8011418:	bdb0      	pop	{r4, r5, r7, pc}
 801141a:	bf00      	nop
 801141c:	08021150 	.word	0x08021150

08011420 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8011420:	b580      	push	{r7, lr}
 8011422:	b08c      	sub	sp, #48	; 0x30
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011436:	2b00      	cmp	r3, #0
 8011438:	d10a      	bne.n	8011450 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 801143a:	496b      	ldr	r1, [pc, #428]	; (80115e8 <onHelp+0x1c8>)
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f000 fad1 	bl	80119e4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011442:	4b6a      	ldr	r3, [pc, #424]	; (80115ec <onHelp+0x1cc>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4619      	mov	r1, r3
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f000 facb 	bl	80119e4 <writeToOutput>
        return;
 801144e:	e0c8      	b.n	80115e2 <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8011450:	68b8      	ldr	r0, [r7, #8]
 8011452:	f7ff fd49 	bl	8010ee8 <embeddedCliGetTokenCount>
 8011456:	4603      	mov	r3, r0
 8011458:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 801145a:	8b7b      	ldrh	r3, [r7, #26]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d146      	bne.n	80114ee <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011460:	2300      	movs	r3, #0
 8011462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011464:	e03c      	b.n	80114e0 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 8011466:	4962      	ldr	r1, [pc, #392]	; (80115f0 <onHelp+0x1d0>)
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f000 fabb 	bl	80119e4 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011474:	4613      	mov	r3, r2
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	440b      	add	r3, r1
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4619      	mov	r1, r3
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f000 faae 	bl	80119e4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011488:	4b58      	ldr	r3, [pc, #352]	; (80115ec <onHelp+0x1cc>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4619      	mov	r1, r3
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f000 faa8 	bl	80119e4 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801149a:	4613      	mov	r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	4413      	add	r3, r2
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	440b      	add	r3, r1
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d017      	beq.n	80114da <onHelp+0xba>
                cli->writeChar(cli, '\t');
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2109      	movs	r1, #9
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80114b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114ba:	4613      	mov	r3, r2
 80114bc:	009b      	lsls	r3, r3, #2
 80114be:	4413      	add	r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	440b      	add	r3, r1
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	4619      	mov	r1, r3
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	f000 fa8b 	bl	80119e4 <writeToOutput>
                writeToOutput(cli, lineBreak);
 80114ce:	4b47      	ldr	r3, [pc, #284]	; (80115ec <onHelp+0x1cc>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4619      	mov	r1, r3
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f000 fa85 	bl	80119e4 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80114da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114dc:	3301      	adds	r3, #1
 80114de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80114e4:	461a      	mov	r2, r3
 80114e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e8:	4293      	cmp	r3, r2
 80114ea:	dbbc      	blt.n	8011466 <onHelp+0x46>
 80114ec:	e079      	b.n	80115e2 <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 80114ee:	8b7b      	ldrh	r3, [r7, #26]
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d16c      	bne.n	80115ce <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 80114f4:	2300      	movs	r3, #0
 80114f6:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 80114f8:	2101      	movs	r1, #1
 80114fa:	68b8      	ldr	r0, [r7, #8]
 80114fc:	f7ff fcbe 	bl	8010e7c <embeddedCliGetToken>
 8011500:	6178      	str	r0, [r7, #20]
        bool found = false;
 8011502:	2300      	movs	r3, #0
 8011504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011508:	2300      	movs	r3, #0
 801150a:	623b      	str	r3, [r7, #32]
 801150c:	e020      	b.n	8011550 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011512:	6a3a      	ldr	r2, [r7, #32]
 8011514:	4613      	mov	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	440b      	add	r3, r1
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	6979      	ldr	r1, [r7, #20]
 8011522:	4618      	mov	r0, r3
 8011524:	f7ee fe5c 	bl	80001e0 <strcmp>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d10d      	bne.n	801154a <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011532:	6a3a      	ldr	r2, [r7, #32]
 8011534:	4613      	mov	r3, r2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8011542:	2301      	movs	r3, #1
 8011544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8011548:	e008      	b.n	801155c <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801154a:	6a3b      	ldr	r3, [r7, #32]
 801154c:	3301      	adds	r3, #1
 801154e:	623b      	str	r3, [r7, #32]
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011554:	461a      	mov	r2, r3
 8011556:	6a3b      	ldr	r3, [r7, #32]
 8011558:	4293      	cmp	r3, r2
 801155a:	dbd8      	blt.n	801150e <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 801155c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011560:	2b00      	cmp	r3, #0
 8011562:	d020      	beq.n	80115a6 <onHelp+0x186>
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	2b00      	cmp	r3, #0
 8011568:	d01d      	beq.n	80115a6 <onHelp+0x186>
            writeToOutput(cli, " * ");
 801156a:	4921      	ldr	r1, [pc, #132]	; (80115f0 <onHelp+0x1d0>)
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f000 fa39 	bl	80119e4 <writeToOutput>
            writeToOutput(cli, cmdName);
 8011572:	6979      	ldr	r1, [r7, #20]
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f000 fa35 	bl	80119e4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801157a:	4b1c      	ldr	r3, [pc, #112]	; (80115ec <onHelp+0x1cc>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	4619      	mov	r1, r3
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	f000 fa2f 	bl	80119e4 <writeToOutput>
            cli->writeChar(cli, '\t');
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2109      	movs	r1, #9
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f000 fa26 	bl	80119e4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011598:	4b14      	ldr	r3, [pc, #80]	; (80115ec <onHelp+0x1cc>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4619      	mov	r1, r3
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	f000 fa20 	bl	80119e4 <writeToOutput>
 80115a4:	e01d      	b.n	80115e2 <onHelp+0x1c2>
        } else if (found) {
 80115a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00a      	beq.n	80115c4 <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 80115ae:	490e      	ldr	r1, [pc, #56]	; (80115e8 <onHelp+0x1c8>)
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	f000 fa17 	bl	80119e4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80115b6:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <onHelp+0x1cc>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4619      	mov	r1, r3
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f000 fa11 	bl	80119e4 <writeToOutput>
 80115c2:	e00e      	b.n	80115e2 <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 80115c4:	6979      	ldr	r1, [r7, #20]
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f000 f816 	bl	80115f8 <onUnknownCommand>
 80115cc:	e009      	b.n	80115e2 <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80115ce:	4909      	ldr	r1, [pc, #36]	; (80115f4 <onHelp+0x1d4>)
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f000 fa07 	bl	80119e4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80115d6:	4b05      	ldr	r3, [pc, #20]	; (80115ec <onHelp+0x1cc>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4619      	mov	r1, r3
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f000 fa01 	bl	80119e4 <writeToOutput>
    }
}
 80115e2:	3730      	adds	r7, #48	; 0x30
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	08021164 	.word	0x08021164
 80115ec:	20000024 	.word	0x20000024
 80115f0:	0802117c 	.word	0x0802117c
 80115f4:	08021180 	.word	0x08021180

080115f8 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8011602:	490b      	ldr	r1, [pc, #44]	; (8011630 <onUnknownCommand+0x38>)
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 f9ed 	bl	80119e4 <writeToOutput>
    writeToOutput(cli, name);
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 f9e9 	bl	80119e4 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8011612:	4908      	ldr	r1, [pc, #32]	; (8011634 <onUnknownCommand+0x3c>)
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 f9e5 	bl	80119e4 <writeToOutput>
    writeToOutput(cli, lineBreak);
 801161a:	4b07      	ldr	r3, [pc, #28]	; (8011638 <onUnknownCommand+0x40>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4619      	mov	r1, r3
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 f9df 	bl	80119e4 <writeToOutput>
}
 8011626:	bf00      	nop
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	080211b0 	.word	0x080211b0
 8011634:	080211c4 	.word	0x080211c4
 8011638:	20000024 	.word	0x20000024

0801163c <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 801163c:	b580      	push	{r7, lr}
 801163e:	b08e      	sub	sp, #56	; 0x38
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8011648:	2300      	movs	r3, #0
 801164a:	613b      	str	r3, [r7, #16]
 801164c:	2300      	movs	r3, #0
 801164e:	82bb      	strh	r3, [r7, #20]
 8011650:	2300      	movs	r3, #0
 8011652:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f7ee fdcd 	bl	80001f4 <strlen>
 801165a:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8011662:	6a3b      	ldr	r3, [r7, #32]
 8011664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011666:	2b00      	cmp	r3, #0
 8011668:	d002      	beq.n	8011670 <getAutocompletedCommand+0x34>
 801166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166c:	2b00      	cmp	r3, #0
 801166e:	d108      	bne.n	8011682 <getAutocompletedCommand+0x46>
        return cmd;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	461a      	mov	r2, r3
 8011674:	f107 0310 	add.w	r3, r7, #16
 8011678:	e893 0003 	ldmia.w	r3, {r0, r1}
 801167c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011680:	e095      	b.n	80117ae <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011682:	2300      	movs	r3, #0
 8011684:	637b      	str	r3, [r7, #52]	; 0x34
 8011686:	e083      	b.n	8011790 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8011688:	6a3b      	ldr	r3, [r7, #32]
 801168a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801168c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801168e:	4613      	mov	r3, r2
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	4413      	add	r3, r2
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	440b      	add	r3, r1
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 801169c:	69f8      	ldr	r0, [r7, #28]
 801169e:	f7ee fda9 	bl	80001f4 <strlen>
 80116a2:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116aa:	4413      	add	r3, r2
 80116ac:	781a      	ldrb	r2, [r3, #0]
 80116ae:	6a3b      	ldr	r3, [r7, #32]
 80116b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80116b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b4:	440b      	add	r3, r1
 80116b6:	f022 0201 	bic.w	r2, r2, #1
 80116ba:	b2d2      	uxtb	r2, r2
 80116bc:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80116be:	69ba      	ldr	r2, [r7, #24]
 80116c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d35e      	bcc.n	8011784 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80116c6:	2301      	movs	r3, #1
 80116c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80116cc:	2300      	movs	r3, #0
 80116ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116d0:	e010      	b.n	80116f4 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	4413      	add	r3, r2
 80116d8:	781a      	ldrb	r2, [r3, #0]
 80116da:	69f9      	ldr	r1, [r7, #28]
 80116dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116de:	440b      	add	r3, r1
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d003      	beq.n	80116ee <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80116e6:	2300      	movs	r3, #0
 80116e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 80116ec:	e006      	b.n	80116fc <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80116ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f0:	3301      	adds	r3, #1
 80116f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d3ea      	bcc.n	80116d2 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 80116fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011700:	f083 0301 	eor.w	r3, r3, #1
 8011704:	b2db      	uxtb	r3, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	d13e      	bne.n	8011788 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801170e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011710:	4413      	add	r3, r2
 8011712:	781a      	ldrb	r2, [r3, #0]
 8011714:	6a3b      	ldr	r3, [r7, #32]
 8011716:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801171a:	440b      	add	r3, r1
 801171c:	f042 0201 	orr.w	r2, r2, #1
 8011720:	b2d2      	uxtb	r2, r2
 8011722:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8011724:	8afb      	ldrh	r3, [r7, #22]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d004      	beq.n	8011734 <getAutocompletedCommand+0xf8>
 801172a:	8abb      	ldrh	r3, [r7, #20]
 801172c:	461a      	mov	r2, r3
 801172e:	69bb      	ldr	r3, [r7, #24]
 8011730:	4293      	cmp	r3, r2
 8011732:	d202      	bcs.n	801173a <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	b29b      	uxth	r3, r3
 8011738:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 801173a:	8afb      	ldrh	r3, [r7, #22]
 801173c:	3301      	adds	r3, #1
 801173e:	b29b      	uxth	r3, r3
 8011740:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011742:	8afb      	ldrh	r3, [r7, #22]
 8011744:	2b01      	cmp	r3, #1
 8011746:	d102      	bne.n	801174e <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	613b      	str	r3, [r7, #16]
            continue;
 801174c:	e01d      	b.n	801178a <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	8c1b      	ldrh	r3, [r3, #32]
 8011752:	62bb      	str	r3, [r7, #40]	; 0x28
 8011754:	e010      	b.n	8011778 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8011756:	693a      	ldr	r2, [r7, #16]
 8011758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175a:	4413      	add	r3, r2
 801175c:	781a      	ldrb	r2, [r3, #0]
 801175e:	69f9      	ldr	r1, [r7, #28]
 8011760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011762:	440b      	add	r3, r1
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d003      	beq.n	8011772 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 801176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176c:	b29b      	uxth	r3, r3
 801176e:	82bb      	strh	r3, [r7, #20]
                break;
 8011770:	e00b      	b.n	801178a <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	3301      	adds	r3, #1
 8011776:	62bb      	str	r3, [r7, #40]	; 0x28
 8011778:	8abb      	ldrh	r3, [r7, #20]
 801177a:	461a      	mov	r2, r3
 801177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177e:	4293      	cmp	r3, r2
 8011780:	d3e9      	bcc.n	8011756 <getAutocompletedCommand+0x11a>
 8011782:	e002      	b.n	801178a <getAutocompletedCommand+0x14e>
            continue;
 8011784:	bf00      	nop
 8011786:	e000      	b.n	801178a <getAutocompletedCommand+0x14e>
            continue;
 8011788:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178c:	3301      	adds	r3, #1
 801178e:	637b      	str	r3, [r7, #52]	; 0x34
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011794:	461a      	mov	r2, r3
 8011796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011798:	4293      	cmp	r3, r2
 801179a:	f6ff af75 	blt.w	8011688 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	461a      	mov	r2, r3
 80117a2:	f107 0310 	add.w	r3, r7, #16
 80117a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80117aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80117ae:	68f8      	ldr	r0, [r7, #12]
 80117b0:	3738      	adds	r7, #56	; 0x38
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b088      	sub	sp, #32
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80117ca:	f003 0320 	and.w	r3, r3, #32
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d048      	beq.n	8011864 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	69da      	ldr	r2, [r3, #28]
 80117d6:	f107 030c 	add.w	r3, r7, #12
 80117da:	6879      	ldr	r1, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff ff2d 	bl	801163c <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 80117e2:	8a7b      	ldrh	r3, [r7, #18]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d102      	bne.n	80117ee <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	8c1b      	ldrh	r3, [r3, #32]
 80117ec:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	8c1b      	ldrh	r3, [r3, #32]
 80117f2:	61fb      	str	r3, [r7, #28]
 80117f4:	e00b      	b.n	801180e <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	68f9      	ldr	r1, [r7, #12]
 80117fc:	69fa      	ldr	r2, [r7, #28]
 80117fe:	440a      	add	r2, r1
 8011800:	7812      	ldrb	r2, [r2, #0]
 8011802:	4611      	mov	r1, r2
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	3301      	adds	r3, #1
 801180c:	61fb      	str	r3, [r7, #28]
 801180e:	8a3b      	ldrh	r3, [r7, #16]
 8011810:	461a      	mov	r2, r3
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	4293      	cmp	r3, r2
 8011816:	d3ee      	bcc.n	80117f6 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011818:	8a3b      	ldrh	r3, [r7, #16]
 801181a:	61bb      	str	r3, [r7, #24]
 801181c:	e007      	b.n	801182e <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2120      	movs	r1, #32
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	3301      	adds	r3, #1
 801182c:	61bb      	str	r3, [r7, #24]
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011832:	461a      	mov	r2, r3
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	4293      	cmp	r3, r2
 8011838:	d3f1      	bcc.n	801181e <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 801183a:	8a3a      	ldrh	r2, [r7, #16]
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	210d      	movs	r1, #13
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4619      	mov	r1, r3
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f000 f8c7 	bl	80119e4 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	69db      	ldr	r3, [r3, #28]
 801185a:	4619      	mov	r1, r3
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f000 f8c1 	bl	80119e4 <writeToOutput>
 8011862:	e000      	b.n	8011866 <printLiveAutocompletion+0xb0>
        return;
 8011864:	bf00      	nop
}
 8011866:	3720      	adds	r7, #32
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 801186c:	b580      	push	{r7, lr}
 801186e:	b088      	sub	sp, #32
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	69da      	ldr	r2, [r3, #28]
 801187e:	f107 030c 	add.w	r3, r7, #12
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff fed9 	bl	801163c <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 801188a:	8a7b      	ldrh	r3, [r7, #18]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d071      	beq.n	8011974 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8011890:	8a7b      	ldrh	r3, [r7, #18]
 8011892:	2b01      	cmp	r3, #1
 8011894:	d004      	beq.n	80118a0 <onAutocompleteRequest+0x34>
 8011896:	8a3a      	ldrh	r2, [r7, #16]
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	8c1b      	ldrh	r3, [r3, #32]
 801189c:	429a      	cmp	r2, r3
 801189e:	d92a      	bls.n	80118f6 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	69db      	ldr	r3, [r3, #28]
 80118a4:	68f9      	ldr	r1, [r7, #12]
 80118a6:	8a3a      	ldrh	r2, [r7, #16]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f009 fe0f 	bl	801b4cc <memcpy>
        if (cmd.candidateCount == 1) {
 80118ae:	8a7b      	ldrh	r3, [r7, #18]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d109      	bne.n	80118c8 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80118b4:	69bb      	ldr	r3, [r7, #24]
 80118b6:	69db      	ldr	r3, [r3, #28]
 80118b8:	8a3a      	ldrh	r2, [r7, #16]
 80118ba:	4413      	add	r3, r2
 80118bc:	2220      	movs	r2, #32
 80118be:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 80118c0:	8a3b      	ldrh	r3, [r7, #16]
 80118c2:	3301      	adds	r3, #1
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	69db      	ldr	r3, [r3, #28]
 80118cc:	8a3a      	ldrh	r2, [r7, #16]
 80118ce:	4413      	add	r3, r2
 80118d0:	2200      	movs	r2, #0
 80118d2:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	69db      	ldr	r3, [r3, #28]
 80118d8:	69ba      	ldr	r2, [r7, #24]
 80118da:	8c12      	ldrh	r2, [r2, #32]
 80118dc:	4413      	add	r3, r2
 80118de:	4619      	mov	r1, r3
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 f87f 	bl	80119e4 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80118e6:	8a3a      	ldrh	r2, [r7, #16]
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	8c1a      	ldrh	r2, [r3, #32]
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 80118f4:	e03f      	b.n	8011976 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 f842 	bl	8011980 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80118fc:	2300      	movs	r3, #0
 80118fe:	61fb      	str	r3, [r7, #28]
 8011900:	e021      	b.n	8011946 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	4413      	add	r3, r2
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	f003 0301 	and.w	r3, r3, #1
 8011910:	2b00      	cmp	r3, #0
 8011912:	d014      	beq.n	801193e <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011918:	69fa      	ldr	r2, [r7, #28]
 801191a:	4613      	mov	r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4413      	add	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	440b      	add	r3, r1
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8011928:	6979      	ldr	r1, [r7, #20]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 f85a 	bl	80119e4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011930:	4b12      	ldr	r3, [pc, #72]	; (801197c <onAutocompleteRequest+0x110>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4619      	mov	r1, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 f854 	bl	80119e4 <writeToOutput>
 801193c:	e000      	b.n	8011940 <onAutocompleteRequest+0xd4>
            continue;
 801193e:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	3301      	adds	r3, #1
 8011944:	61fb      	str	r3, [r7, #28]
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801194a:	461a      	mov	r2, r3
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	4293      	cmp	r3, r2
 8011950:	dbd7      	blt.n	8011902 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8011952:	69bb      	ldr	r3, [r7, #24]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4619      	mov	r1, r3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f000 f843 	bl	80119e4 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	69db      	ldr	r3, [r3, #28]
 8011962:	4619      	mov	r1, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f000 f83d 	bl	80119e4 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	8c1a      	ldrh	r2, [r3, #32]
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	861a      	strh	r2, [r3, #48]	; 0x30
 8011972:	e000      	b.n	8011976 <onAutocompleteRequest+0x10a>
        return;
 8011974:	bf00      	nop
}
 8011976:	3720      	adds	r7, #32
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	20000024 	.word	0x20000024

08011980 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8011980:	b590      	push	{r4, r7, lr}
 8011982:	b087      	sub	sp, #28
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011992:	461c      	mov	r4, r3
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4618      	mov	r0, r3
 801199a:	f7ee fc2b 	bl	80001f4 <strlen>
 801199e:	4603      	mov	r3, r0
 80119a0:	4423      	add	r3, r4
 80119a2:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	210d      	movs	r1, #13
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80119ae:	2300      	movs	r3, #0
 80119b0:	617b      	str	r3, [r7, #20]
 80119b2:	e007      	b.n	80119c4 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2120      	movs	r1, #32
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	3301      	adds	r3, #1
 80119c2:	617b      	str	r3, [r7, #20]
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d3f3      	bcc.n	80119b4 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	210d      	movs	r1, #13
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	4798      	blx	r3
    impl->inputLineLength = 0;
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	2200      	movs	r2, #0
 80119da:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80119dc:	bf00      	nop
 80119de:	371c      	adds	r7, #28
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd90      	pop	{r4, r7, pc}

080119e4 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80119ee:	6838      	ldr	r0, [r7, #0]
 80119f0:	f7ee fc00 	bl	80001f4 <strlen>
 80119f4:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80119f6:	2300      	movs	r3, #0
 80119f8:	60fb      	str	r3, [r7, #12]
 80119fa:	e00b      	b.n	8011a14 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	440a      	add	r2, r1
 8011a06:	7812      	ldrb	r2, [r2, #0]
 8011a08:	4611      	mov	r1, r2
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	3301      	adds	r3, #1
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d3ef      	bcc.n	80119fc <writeToOutput+0x18>
    }
}
 8011a1c:	bf00      	nop
 8011a1e:	bf00      	nop
 8011a20:	3710      	adds	r7, #16
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <isControlChar>:

static bool isControlChar(char c) {
 8011a26:	b480      	push	{r7}
 8011a28:	b083      	sub	sp, #12
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8011a30:	79fb      	ldrb	r3, [r7, #7]
 8011a32:	2b0d      	cmp	r3, #13
 8011a34:	d00b      	beq.n	8011a4e <isControlChar+0x28>
 8011a36:	79fb      	ldrb	r3, [r7, #7]
 8011a38:	2b0a      	cmp	r3, #10
 8011a3a:	d008      	beq.n	8011a4e <isControlChar+0x28>
 8011a3c:	79fb      	ldrb	r3, [r7, #7]
 8011a3e:	2b08      	cmp	r3, #8
 8011a40:	d005      	beq.n	8011a4e <isControlChar+0x28>
 8011a42:	79fb      	ldrb	r3, [r7, #7]
 8011a44:	2b09      	cmp	r3, #9
 8011a46:	d002      	beq.n	8011a4e <isControlChar+0x28>
 8011a48:	79fb      	ldrb	r3, [r7, #7]
 8011a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8011a4c:	d101      	bne.n	8011a52 <isControlChar+0x2c>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e000      	b.n	8011a54 <isControlChar+0x2e>
 8011a52:	2300      	movs	r3, #0
 8011a54:	f003 0301 	and.w	r3, r3, #1
 8011a58:	b2db      	uxtb	r3, r3
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	370c      	adds	r7, #12
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr

08011a66 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8011a66:	b480      	push	{r7}
 8011a68:	b083      	sub	sp, #12
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8011a70:	79fb      	ldrb	r3, [r7, #7]
 8011a72:	2b1f      	cmp	r3, #31
 8011a74:	d904      	bls.n	8011a80 <isDisplayableChar+0x1a>
 8011a76:	79fb      	ldrb	r3, [r7, #7]
 8011a78:	2b7e      	cmp	r3, #126	; 0x7e
 8011a7a:	d801      	bhi.n	8011a80 <isDisplayableChar+0x1a>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e000      	b.n	8011a82 <isDisplayableChar+0x1c>
 8011a80:	2300      	movs	r3, #0
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	b2db      	uxtb	r3, r3
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	370c      	adds	r7, #12
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr

08011a94 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	88da      	ldrh	r2, [r3, #6]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	889b      	ldrh	r3, [r3, #4]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d306      	bcc.n	8011ab6 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	88da      	ldrh	r2, [r3, #6]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	889b      	ldrh	r3, [r3, #4]
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	e009      	b.n	8011aca <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	891a      	ldrh	r2, [r3, #8]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	889b      	ldrh	r3, [r3, #4]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	88db      	ldrh	r3, [r3, #6]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	b29b      	uxth	r3, r3
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr

08011ad6 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8011ad6:	b480      	push	{r7}
 8011ad8:	b085      	sub	sp, #20
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8011ade:	2300      	movs	r3, #0
 8011ae0:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	889a      	ldrh	r2, [r3, #4]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	88db      	ldrh	r3, [r3, #6]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d014      	beq.n	8011b18 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	8892      	ldrh	r2, [r2, #4]
 8011af6:	4413      	add	r3, r2
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	889b      	ldrh	r3, [r3, #4]
 8011b00:	3301      	adds	r3, #1
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	8912      	ldrh	r2, [r2, #8]
 8011b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b0c:	fb01 f202 	mul.w	r2, r1, r2
 8011b10:	1a9b      	subs	r3, r3, r2
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8011b26:	b480      	push	{r7}
 8011b28:	b085      	sub	sp, #20
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	460b      	mov	r3, r1
 8011b30:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	88db      	ldrh	r3, [r3, #6]
 8011b36:	3301      	adds	r3, #1
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	8912      	ldrh	r2, [r2, #8]
 8011b3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b42:	fb01 f202 	mul.w	r2, r1, r2
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	889b      	ldrh	r3, [r3, #4]
 8011b4e:	89fa      	ldrh	r2, [r7, #14]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d00b      	beq.n	8011b6c <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	88d2      	ldrh	r2, [r2, #6]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	78fa      	ldrb	r2, [r7, #3]
 8011b60:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	89fa      	ldrh	r2, [r7, #14]
 8011b66:	80da      	strh	r2, [r3, #6]
        return true;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	e000      	b.n	8011b6e <fifoBufPush+0x48>
    }
    return false;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b088      	sub	sp, #32
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
 8011b82:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011b84:	6838      	ldr	r0, [r7, #0]
 8011b86:	f7ee fb35 	bl	80001f4 <strlen>
 8011b8a:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	889b      	ldrh	r3, [r3, #4]
 8011b90:	461a      	mov	r2, r3
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	3301      	adds	r3, #1
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d201      	bcs.n	8011b9e <historyPut+0x24>
        return false;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	e04d      	b.n	8011c3a <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8011b9e:	6839      	ldr	r1, [r7, #0]
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f000 f86a 	bl	8011c7a <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8011ba6:	e024      	b.n	8011bf2 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	891b      	ldrh	r3, [r3, #8]
 8011bac:	4619      	mov	r1, r3
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 f847 	bl	8011c42 <historyGet>
 8011bb4:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8011bb6:	6978      	ldr	r0, [r7, #20]
 8011bb8:	f7ee fb1c 	bl	80001f4 <strlen>
 8011bbc:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	697a      	ldr	r2, [r7, #20]
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	4413      	add	r3, r2
 8011bcc:	3301      	adds	r3, #1
 8011bce:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	889b      	ldrh	r3, [r3, #4]
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	3301      	adds	r3, #1
 8011be0:	68fa      	ldr	r2, [r7, #12]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d20a      	bcs.n	8011bfc <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	891b      	ldrh	r3, [r3, #8]
 8011bea:	3b01      	subs	r3, #1
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	891b      	ldrh	r3, [r3, #8]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1d6      	bne.n	8011ba8 <historyPut+0x2e>
 8011bfa:	e000      	b.n	8011bfe <historyPut+0x84>
            break;
 8011bfc:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	891b      	ldrh	r3, [r3, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00a      	beq.n	8011c1c <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	18d0      	adds	r0, r2, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	69fa      	ldr	r2, [r7, #28]
 8011c16:	4619      	mov	r1, r3
 8011c18:	f009 fc66 	bl	801b4e8 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6818      	ldr	r0, [r3, #0]
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	3301      	adds	r3, #1
 8011c24:	461a      	mov	r2, r3
 8011c26:	6839      	ldr	r1, [r7, #0]
 8011c28:	f009 fc50 	bl	801b4cc <memcpy>
    ++history->itemsCount;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	891b      	ldrh	r3, [r3, #8]
 8011c30:	3301      	adds	r3, #1
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	811a      	strh	r2, [r3, #8]

    return true;
 8011c38:	2301      	movs	r3, #1
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3720      	adds	r7, #32
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}

08011c42 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8011c42:	b580      	push	{r7, lr}
 8011c44:	b082      	sub	sp, #8
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8011c4e:	887b      	ldrh	r3, [r7, #2]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d004      	beq.n	8011c5e <historyGet+0x1c>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	891b      	ldrh	r3, [r3, #8]
 8011c58:	887a      	ldrh	r2, [r7, #2]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d901      	bls.n	8011c62 <historyGet+0x20>
        return NULL;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	e007      	b.n	8011c72 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	887a      	ldrh	r2, [r7, #2]
 8011c68:	4611      	mov	r1, r2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7ff f906 	bl	8010e7c <embeddedCliGetToken>
 8011c70:	4603      	mov	r3, r0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b086      	sub	sp, #24
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d04c      	beq.n	8011d24 <historyRemove+0xaa>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	891b      	ldrh	r3, [r3, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d048      	beq.n	8011d24 <historyRemove+0xaa>
        return;
    char *item = NULL;
 8011c92:	2300      	movs	r3, #0
 8011c94:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011c96:	2301      	movs	r3, #1
 8011c98:	827b      	strh	r3, [r7, #18]
 8011c9a:	e013      	b.n	8011cc4 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	8a7a      	ldrh	r2, [r7, #18]
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff f904 	bl	8010eb2 <embeddedCliGetTokenVariable>
 8011caa:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8011cac:	6839      	ldr	r1, [r7, #0]
 8011cae:	6978      	ldr	r0, [r7, #20]
 8011cb0:	f7ee fa96 	bl	80001e0 <strcmp>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00a      	beq.n	8011cd0 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011cbe:	8a7b      	ldrh	r3, [r7, #18]
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	827b      	strh	r3, [r7, #18]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	891b      	ldrh	r3, [r3, #8]
 8011cc8:	8a7a      	ldrh	r2, [r7, #18]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d9e6      	bls.n	8011c9c <historyRemove+0x22>
 8011cce:	e000      	b.n	8011cd2 <historyRemove+0x58>
            break;
 8011cd0:	bf00      	nop
    }
    if (item == NULL)
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d027      	beq.n	8011d28 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	891b      	ldrh	r3, [r3, #8]
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8011ce4:	8a7a      	ldrh	r2, [r7, #18]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	891b      	ldrh	r3, [r3, #8]
 8011cea:	3301      	adds	r3, #1
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d01d      	beq.n	8011d2c <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8011cf0:	6978      	ldr	r0, [r7, #20]
 8011cf2:	f7ee fa7f 	bl	80001f4 <strlen>
 8011cf6:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	889b      	ldrh	r3, [r3, #4]
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3301      	adds	r3, #1
 8011d02:	697a      	ldr	r2, [r7, #20]
 8011d04:	441a      	add	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	1acb      	subs	r3, r1, r3
 8011d0e:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	3301      	adds	r3, #1
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	4413      	add	r3, r2
 8011d18:	68ba      	ldr	r2, [r7, #8]
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	6978      	ldr	r0, [r7, #20]
 8011d1e:	f009 fbe3 	bl	801b4e8 <memmove>
 8011d22:	e004      	b.n	8011d2e <historyRemove+0xb4>
        return;
 8011d24:	bf00      	nop
 8011d26:	e002      	b.n	8011d2e <historyRemove+0xb4>
        return;
 8011d28:	bf00      	nop
 8011d2a:	e000      	b.n	8011d2e <historyRemove+0xb4>
        return;
 8011d2c:	bf00      	nop
}
 8011d2e:	3718      	adds	r7, #24
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d002      	beq.n	8011d4c <getTokenPosition+0x18>
 8011d46:	887b      	ldrh	r3, [r7, #2]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d102      	bne.n	8011d52 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8011d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d50:	e028      	b.n	8011da4 <getTokenPosition+0x70>
    uint16_t i = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8011d56:	2301      	movs	r3, #1
 8011d58:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8011d5a:	89ba      	ldrh	r2, [r7, #12]
 8011d5c:	887b      	ldrh	r3, [r7, #2]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d013      	beq.n	8011d8a <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8011d62:	89fb      	ldrh	r3, [r7, #14]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	4413      	add	r3, r2
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d109      	bne.n	8011d82 <getTokenPosition+0x4e>
            ++tokenCount;
 8011d6e:	89bb      	ldrh	r3, [r7, #12]
 8011d70:	3301      	adds	r3, #1
 8011d72:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8011d74:	89fb      	ldrh	r3, [r7, #14]
 8011d76:	3301      	adds	r3, #1
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d005      	beq.n	8011d8e <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8011d82:	89fb      	ldrh	r3, [r7, #14]
 8011d84:	3301      	adds	r3, #1
 8011d86:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8011d88:	e7e7      	b.n	8011d5a <getTokenPosition+0x26>
            break;
 8011d8a:	bf00      	nop
 8011d8c:	e000      	b.n	8011d90 <getTokenPosition+0x5c>
                break;
 8011d8e:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8011d90:	89fb      	ldrh	r3, [r7, #14]
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	4413      	add	r3, r2
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d001      	beq.n	8011da0 <getTokenPosition+0x6c>
        return i;
 8011d9c:	89fb      	ldrh	r3, [r7, #14]
 8011d9e:	e001      	b.n	8011da4 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8011da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3714      	adds	r7, #20
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011db4:	4904      	ldr	r1, [pc, #16]	; (8011dc8 <MX_FATFS_Init+0x18>)
 8011db6:	4805      	ldr	r0, [pc, #20]	; (8011dcc <MX_FATFS_Init+0x1c>)
 8011db8:	f007 fefc 	bl	8019bb4 <FATFS_LinkDriver>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	4b03      	ldr	r3, [pc, #12]	; (8011dd0 <MX_FATFS_Init+0x20>)
 8011dc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011dc4:	bf00      	nop
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	20001a7c 	.word	0x20001a7c
 8011dcc:	08021a38 	.word	0x08021a38
 8011dd0:	20001a78 	.word	0x20001a78

08011dd4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011dd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr

08011de4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011dea:	2300      	movs	r3, #0
 8011dec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011dee:	f000 f86b 	bl	8011ec8 <BSP_SD_IsDetected>
 8011df2:	4603      	mov	r3, r0
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d001      	beq.n	8011dfc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e005      	b.n	8011e08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011dfc:	4804      	ldr	r0, [pc, #16]	; (8011e10 <BSP_SD_Init+0x2c>)
 8011dfe:	f7f7 fc70 	bl	80096e2 <HAL_SD_Init>
 8011e02:	4603      	mov	r3, r0
 8011e04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8011e06:	79fb      	ldrb	r3, [r7, #7]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	200017e4 	.word	0x200017e4

08011e14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b088      	sub	sp, #32
 8011e18:	af02      	add	r7, sp, #8
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
 8011e20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	9300      	str	r3, [sp, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	68f9      	ldr	r1, [r7, #12]
 8011e30:	4806      	ldr	r0, [pc, #24]	; (8011e4c <BSP_SD_ReadBlocks+0x38>)
 8011e32:	f7f7 fd07 	bl	8009844 <HAL_SD_ReadBlocks>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3718      	adds	r7, #24
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	200017e4 	.word	0x200017e4

08011e50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b088      	sub	sp, #32
 8011e54:	af02      	add	r7, sp, #8
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
 8011e5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	68f9      	ldr	r1, [r7, #12]
 8011e6c:	4806      	ldr	r0, [pc, #24]	; (8011e88 <BSP_SD_WriteBlocks+0x38>)
 8011e6e:	f7f7 fec7 	bl	8009c00 <HAL_SD_WriteBlocks>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d001      	beq.n	8011e7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011e78:	2301      	movs	r3, #1
 8011e7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3718      	adds	r7, #24
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	200017e4 	.word	0x200017e4

08011e8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011e90:	4805      	ldr	r0, [pc, #20]	; (8011ea8 <BSP_SD_GetCardState+0x1c>)
 8011e92:	f7f8 fa0b 	bl	800a2ac <HAL_SD_GetCardState>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b04      	cmp	r3, #4
 8011e9a:	bf14      	ite	ne
 8011e9c:	2301      	movne	r3, #1
 8011e9e:	2300      	moveq	r3, #0
 8011ea0:	b2db      	uxtb	r3, r3
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	200017e4 	.word	0x200017e4

08011eac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011eb4:	6879      	ldr	r1, [r7, #4]
 8011eb6:	4803      	ldr	r0, [pc, #12]	; (8011ec4 <BSP_SD_GetCardInfo+0x18>)
 8011eb8:	f7f8 f9cc 	bl	800a254 <HAL_SD_GetCardInfo>
}
 8011ebc:	bf00      	nop
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	200017e4 	.word	0x200017e4

08011ec8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b083      	sub	sp, #12
 8011ecc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8011ed2:	79fb      	ldrb	r3, [r7, #7]
 8011ed4:	b2db      	uxtb	r3, r3
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	370c      	adds	r7, #12
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
	...

08011ee4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	4603      	mov	r3, r0
 8011eec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011eee:	4b0b      	ldr	r3, [pc, #44]	; (8011f1c <SD_CheckStatus+0x38>)
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011ef4:	f7ff ffca 	bl	8011e8c <BSP_SD_GetCardState>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d107      	bne.n	8011f0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011efe:	4b07      	ldr	r3, [pc, #28]	; (8011f1c <SD_CheckStatus+0x38>)
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	f023 0301 	bic.w	r3, r3, #1
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	4b04      	ldr	r3, [pc, #16]	; (8011f1c <SD_CheckStatus+0x38>)
 8011f0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011f0e:	4b03      	ldr	r3, [pc, #12]	; (8011f1c <SD_CheckStatus+0x38>)
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	b2db      	uxtb	r3, r3
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	20000028 	.word	0x20000028

08011f20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	4603      	mov	r3, r0
 8011f28:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011f2a:	4b0b      	ldr	r3, [pc, #44]	; (8011f58 <SD_initialize+0x38>)
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011f30:	f7ff ff58 	bl	8011de4 <BSP_SD_Init>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d107      	bne.n	8011f4a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011f3a:	79fb      	ldrb	r3, [r7, #7]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7ff ffd1 	bl	8011ee4 <SD_CheckStatus>
 8011f42:	4603      	mov	r3, r0
 8011f44:	461a      	mov	r2, r3
 8011f46:	4b04      	ldr	r3, [pc, #16]	; (8011f58 <SD_initialize+0x38>)
 8011f48:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011f4a:	4b03      	ldr	r3, [pc, #12]	; (8011f58 <SD_initialize+0x38>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	b2db      	uxtb	r3, r3
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	20000028 	.word	0x20000028

08011f5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	4603      	mov	r3, r0
 8011f64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011f66:	79fb      	ldrb	r3, [r7, #7]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7ff ffbb 	bl	8011ee4 <SD_CheckStatus>
 8011f6e:	4603      	mov	r3, r0
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60b9      	str	r1, [r7, #8]
 8011f80:	607a      	str	r2, [r7, #4]
 8011f82:	603b      	str	r3, [r7, #0]
 8011f84:	4603      	mov	r3, r0
 8011f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f90:	683a      	ldr	r2, [r7, #0]
 8011f92:	6879      	ldr	r1, [r7, #4]
 8011f94:	68b8      	ldr	r0, [r7, #8]
 8011f96:	f7ff ff3d 	bl	8011e14 <BSP_SD_ReadBlocks>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d107      	bne.n	8011fb0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011fa0:	bf00      	nop
 8011fa2:	f7ff ff73 	bl	8011e8c <BSP_SD_GetCardState>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1fa      	bne.n	8011fa2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011fac:	2300      	movs	r3, #0
 8011fae:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3718      	adds	r7, #24
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}

08011fba <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011fba:	b580      	push	{r7, lr}
 8011fbc:	b086      	sub	sp, #24
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	60b9      	str	r1, [r7, #8]
 8011fc2:	607a      	str	r2, [r7, #4]
 8011fc4:	603b      	str	r3, [r7, #0]
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011fce:	f04f 33ff 	mov.w	r3, #4294967295
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	6879      	ldr	r1, [r7, #4]
 8011fd6:	68b8      	ldr	r0, [r7, #8]
 8011fd8:	f7ff ff3a 	bl	8011e50 <BSP_SD_WriteBlocks>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d107      	bne.n	8011ff2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011fe2:	bf00      	nop
 8011fe4:	f7ff ff52 	bl	8011e8c <BSP_SD_GetCardState>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d1fa      	bne.n	8011fe4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3718      	adds	r7, #24
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08c      	sub	sp, #48	; 0x30
 8012000:	af00      	add	r7, sp, #0
 8012002:	4603      	mov	r3, r0
 8012004:	603a      	str	r2, [r7, #0]
 8012006:	71fb      	strb	r3, [r7, #7]
 8012008:	460b      	mov	r3, r1
 801200a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801200c:	2301      	movs	r3, #1
 801200e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012012:	4b25      	ldr	r3, [pc, #148]	; (80120a8 <SD_ioctl+0xac>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	b2db      	uxtb	r3, r3
 8012018:	f003 0301 	and.w	r3, r3, #1
 801201c:	2b00      	cmp	r3, #0
 801201e:	d001      	beq.n	8012024 <SD_ioctl+0x28>
 8012020:	2303      	movs	r3, #3
 8012022:	e03c      	b.n	801209e <SD_ioctl+0xa2>

  switch (cmd)
 8012024:	79bb      	ldrb	r3, [r7, #6]
 8012026:	2b03      	cmp	r3, #3
 8012028:	d834      	bhi.n	8012094 <SD_ioctl+0x98>
 801202a:	a201      	add	r2, pc, #4	; (adr r2, 8012030 <SD_ioctl+0x34>)
 801202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012030:	08012041 	.word	0x08012041
 8012034:	08012049 	.word	0x08012049
 8012038:	08012061 	.word	0x08012061
 801203c:	0801207b 	.word	0x0801207b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012040:	2300      	movs	r3, #0
 8012042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012046:	e028      	b.n	801209a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012048:	f107 030c 	add.w	r3, r7, #12
 801204c:	4618      	mov	r0, r3
 801204e:	f7ff ff2d 	bl	8011eac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801205e:	e01c      	b.n	801209a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012060:	f107 030c 	add.w	r3, r7, #12
 8012064:	4618      	mov	r0, r3
 8012066:	f7ff ff21 	bl	8011eac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	b29a      	uxth	r2, r3
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012072:	2300      	movs	r3, #0
 8012074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012078:	e00f      	b.n	801209a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801207a:	f107 030c 	add.w	r3, r7, #12
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff ff14 	bl	8011eac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012086:	0a5a      	lsrs	r2, r3, #9
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801208c:	2300      	movs	r3, #0
 801208e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012092:	e002      	b.n	801209a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012094:	2304      	movs	r3, #4
 8012096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801209a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3730      	adds	r7, #48	; 0x30
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	20000028 	.word	0x20000028

080120ac <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;

void RtcInt()
{
 80120ac:	b480      	push	{r7}
 80120ae:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 80120b0:	4b03      	ldr	r3, [pc, #12]	; (80120c0 <RtcInt+0x14>)
 80120b2:	2201      	movs	r2, #1
 80120b4:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 80120b6:	bf00      	nop
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	20000029 	.word	0x20000029

080120c4 <Set_Date>:

void Set_Date(char *Datebuffer) {
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b088      	sub	sp, #32
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 80120cc:	f107 030c 	add.w	r3, r7, #12
 80120d0:	4619      	mov	r1, r3
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f000 f8c8 	bl	8012268 <Parse_Date>
 80120d8:	4603      	mov	r3, r0
 80120da:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 80120dc:	7ffb      	ldrb	r3, [r7, #31]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d10c      	bne.n	80120fc <Set_Date+0x38>
		sDate.Date = date[0];
 80120e2:	7b3b      	ldrb	r3, [r7, #12]
 80120e4:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 80120e6:	7b7b      	ldrb	r3, [r7, #13]
 80120e8:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 80120ea:	7bbb      	ldrb	r3, [r7, #14]
 80120ec:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80120ee:	f107 0318 	add.w	r3, r7, #24
 80120f2:	2200      	movs	r2, #0
 80120f4:	4619      	mov	r1, r3
 80120f6:	4805      	ldr	r0, [pc, #20]	; (801210c <Set_Date+0x48>)
 80120f8:	f7f6 ffd0 	bl	800909c <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 80120fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012100:	f7f1 fce8 	bl	8003ad4 <HAL_Delay>
}
 8012104:	bf00      	nop
 8012106:	3720      	adds	r7, #32
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	200017c4 	.word	0x200017c4

08012110 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b092      	sub	sp, #72	; 0x48
 8012114:	af00      	add	r7, sp, #0
uint16_t minute;



if(set_alarm_Time)
 8012116:	4b38      	ldr	r3, [pc, #224]	; (80121f8 <Rtc_set_alarm+0xe8>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d068      	beq.n	80121f0 <Rtc_set_alarm+0xe0>
{
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 801211e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012122:	2200      	movs	r2, #0
 8012124:	4619      	mov	r1, r3
 8012126:	4835      	ldr	r0, [pc, #212]	; (80121fc <Rtc_set_alarm+0xec>)
 8012128:	f7f6 ff5a 	bl	8008fe0 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801212c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012130:	2200      	movs	r2, #0
 8012132:	4619      	mov	r1, r3
 8012134:	4831      	ldr	r0, [pc, #196]	; (80121fc <Rtc_set_alarm+0xec>)
 8012136:	f7f7 f835 	bl	80091a4 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 801213a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 801213e:	b29a      	uxth	r2, r3
 8012140:	4b2f      	ldr	r3, [pc, #188]	; (8012200 <Rtc_set_alarm+0xf0>)
 8012142:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012146:	b29b      	uxth	r3, r3
 8012148:	4413      	add	r3, r2
 801214a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(minute > 59)
 801214e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012152:	2b3b      	cmp	r3, #59	; 0x3b
 8012154:	d912      	bls.n	801217c <Rtc_set_alarm+0x6c>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8012156:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801215a:	4a29      	ldr	r2, [pc, #164]	; (8012200 <Rtc_set_alarm+0xf0>)
 801215c:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8012160:	fbb3 f1f2 	udiv	r1, r3, r2
 8012164:	fb01 f202 	mul.w	r2, r1, r2
 8012168:	1a9b      	subs	r3, r3, r2
 801216a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	if(minute == 0)
 801216e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012172:	2b00      	cmp	r3, #0
 8012174:	d102      	bne.n	801217c <Rtc_set_alarm+0x6c>
    	{
    		minute = 1;
 8012176:	2301      	movs	r3, #1
 8012178:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	}
    }

      RTC_AlarmTypeDef sAlarm = {0};
 801217c:	1d3b      	adds	r3, r7, #4
 801217e:	2228      	movs	r2, #40	; 0x28
 8012180:	2100      	movs	r1, #0
 8012182:	4618      	mov	r0, r3
 8012184:	f009 f9ca 	bl	801b51c <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8012188:	2300      	movs	r3, #0
 801218a:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 801218c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012190:	b2db      	uxtb	r3, r3
 8012192:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8012194:	2300      	movs	r3, #0
 8012196:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8012198:	2300      	movs	r3, #0
 801219a:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801219c:	2300      	movs	r3, #0
 801219e:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80121a0:	2300      	movs	r3, #0
 80121a2:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 80121a4:	4b17      	ldr	r3, [pc, #92]	; (8012204 <Rtc_set_alarm+0xf4>)
 80121a6:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80121ac:	2300      	movs	r3, #0
 80121ae:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 80121b0:	2301      	movs	r3, #1
 80121b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 80121b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ba:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80121bc:	1d3b      	adds	r3, r7, #4
 80121be:	2200      	movs	r2, #0
 80121c0:	4619      	mov	r1, r3
 80121c2:	480e      	ldr	r0, [pc, #56]	; (80121fc <Rtc_set_alarm+0xec>)
 80121c4:	f7f7 f83e 	bl	8009244 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 80121c8:	4b0c      	ldr	r3, [pc, #48]	; (80121fc <Rtc_set_alarm+0xec>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	689a      	ldr	r2, [r3, #8]
 80121ce:	4b0b      	ldr	r3, [pc, #44]	; (80121fc <Rtc_set_alarm+0xec>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80121d6:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 80121d8:	4b08      	ldr	r3, [pc, #32]	; (80121fc <Rtc_set_alarm+0xec>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	4b06      	ldr	r3, [pc, #24]	; (80121fc <Rtc_set_alarm+0xec>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80121e8:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 80121ea:	4b03      	ldr	r3, [pc, #12]	; (80121f8 <Rtc_set_alarm+0xe8>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 80121f0:	bf00      	nop
 80121f2:	3748      	adds	r7, #72	; 0x48
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	20000029 	.word	0x20000029
 80121fc:	200017c4 	.word	0x200017c4
 8012200:	200012dc 	.word	0x200012dc
 8012204:	80800080 	.word	0x80800080

08012208 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8012208:	b580      	push	{r7, lr}
 801220a:	b08c      	sub	sp, #48	; 0x30
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8012210:	f107 030c 	add.w	r3, r7, #12
 8012214:	4619      	mov	r1, r3
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 f890 	bl	801233c <Parse_Time>
 801221c:	4603      	mov	r3, r0
 801221e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8012222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012226:	2b00      	cmp	r3, #0
 8012228:	d113      	bne.n	8012252 <Set_Time+0x4a>
		sTime.Hours = time[0];
 801222a:	7b3b      	ldrb	r3, [r7, #12]
 801222c:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 801222e:	7b7b      	ldrb	r3, [r7, #13]
 8012230:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8012232:	7bbb      	ldrb	r3, [r7, #14]
 8012234:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012236:	2300      	movs	r3, #0
 8012238:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801223a:	2300      	movs	r3, #0
 801223c:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801223e:	f107 0318 	add.w	r3, r7, #24
 8012242:	2200      	movs	r2, #0
 8012244:	4619      	mov	r1, r3
 8012246:	4807      	ldr	r0, [pc, #28]	; (8012264 <Set_Time+0x5c>)
 8012248:	f7f6 fe30 	bl	8008eac <HAL_RTC_SetTime>
 801224c:	4603      	mov	r3, r0
 801224e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 8012252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012256:	f7f1 fc3d 	bl	8003ad4 <HAL_Delay>

}
 801225a:	bf00      	nop
 801225c:	3730      	adds	r7, #48	; 0x30
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	200017c4 	.word	0x200017c4

08012268 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012272:	2300      	movs	r3, #0
 8012274:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8012276:	2300      	movs	r3, #0
 8012278:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 801227a:	492e      	ldr	r1, [pc, #184]	; (8012334 <Parse_Date+0xcc>)
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f00a ffc7 	bl	801d210 <strtok>
 8012282:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d14b      	bne.n	8012322 <Parse_Date+0xba>
		{
			return 1;
 801228a:	2301      	movs	r3, #1
 801228c:	e04d      	b.n	801232a <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 801228e:	68b8      	ldr	r0, [r7, #8]
 8012290:	f009 f874 	bl	801b37c <atoi>
 8012294:	4603      	mov	r3, r0
 8012296:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8012298:	89fb      	ldrh	r3, [r7, #14]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d10a      	bne.n	80122b4 <Parse_Date+0x4c>
 801229e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80122a2:	2b1f      	cmp	r3, #31
 80122a4:	dc03      	bgt.n	80122ae <Parse_Date+0x46>
 80122a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dc02      	bgt.n	80122b4 <Parse_Date+0x4c>
			{
				val= 1;
 80122ae:	2301      	movs	r3, #1
 80122b0:	81bb      	strh	r3, [r7, #12]
 80122b2:	e028      	b.n	8012306 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 80122b4:	89fb      	ldrh	r3, [r7, #14]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d10a      	bne.n	80122d0 <Parse_Date+0x68>
 80122ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80122be:	2b0c      	cmp	r3, #12
 80122c0:	dc03      	bgt.n	80122ca <Parse_Date+0x62>
 80122c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	dc02      	bgt.n	80122d0 <Parse_Date+0x68>
			{
				val= 1;
 80122ca:	2301      	movs	r3, #1
 80122cc:	81bb      	strh	r3, [r7, #12]
 80122ce:	e01a      	b.n	8012306 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 80122d0:	89fb      	ldrh	r3, [r7, #14]
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	d112      	bne.n	80122fc <Parse_Date+0x94>
 80122d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80122da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80122de:	dd0d      	ble.n	80122fc <Parse_Date+0x94>
			{
				val=val%100;
 80122e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80122e4:	4a14      	ldr	r2, [pc, #80]	; (8012338 <Parse_Date+0xd0>)
 80122e6:	fb82 1203 	smull	r1, r2, r2, r3
 80122ea:	1151      	asrs	r1, r2, #5
 80122ec:	17da      	asrs	r2, r3, #31
 80122ee:	1a8a      	subs	r2, r1, r2
 80122f0:	2164      	movs	r1, #100	; 0x64
 80122f2:	fb01 f202 	mul.w	r2, r1, r2
 80122f6:	1a9b      	subs	r3, r3, r2
 80122f8:	81bb      	strh	r3, [r7, #12]
 80122fa:	e004      	b.n	8012306 <Parse_Date+0x9e>
			}
			else if(i > 2)
 80122fc:	89fb      	ldrh	r3, [r7, #14]
 80122fe:	2b02      	cmp	r3, #2
 8012300:	d901      	bls.n	8012306 <Parse_Date+0x9e>
			{
				return 1;
 8012302:	2301      	movs	r3, #1
 8012304:	e011      	b.n	801232a <Parse_Date+0xc2>
			}


		   date[i] =val;
 8012306:	89fb      	ldrh	r3, [r7, #14]
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	4413      	add	r3, r2
 801230c:	89ba      	ldrh	r2, [r7, #12]
 801230e:	b2d2      	uxtb	r2, r2
 8012310:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8012312:	4908      	ldr	r1, [pc, #32]	; (8012334 <Parse_Date+0xcc>)
 8012314:	2000      	movs	r0, #0
 8012316:	f00a ff7b 	bl	801d210 <strtok>
 801231a:	60b8      	str	r0, [r7, #8]
		i++;
 801231c:	89fb      	ldrh	r3, [r7, #14]
 801231e:	3301      	adds	r3, #1
 8012320:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d1b2      	bne.n	801228e <Parse_Date+0x26>
	}

	}

	return 0;
 8012328:	2300      	movs	r3, #0

}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	080211f8 	.word	0x080211f8
 8012338:	51eb851f 	.word	0x51eb851f

0801233c <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012346:	2300      	movs	r3, #0
 8012348:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 801234e:	492a      	ldr	r1, [pc, #168]	; (80123f8 <Parse_Time+0xbc>)
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f00a ff5d 	bl	801d210 <strtok>
 8012356:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d143      	bne.n	80123e6 <Parse_Time+0xaa>
			{
				return 1;
 801235e:	2301      	movs	r3, #1
 8012360:	e045      	b.n	80123ee <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8012362:	68b8      	ldr	r0, [r7, #8]
 8012364:	f009 f80a 	bl	801b37c <atoi>
 8012368:	4603      	mov	r3, r0
 801236a:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 801236c:	89fb      	ldrh	r3, [r7, #14]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d10a      	bne.n	8012388 <Parse_Time+0x4c>
 8012372:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012376:	2b18      	cmp	r3, #24
 8012378:	dc03      	bgt.n	8012382 <Parse_Time+0x46>
 801237a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	da02      	bge.n	8012388 <Parse_Time+0x4c>
				{
					val= 24;
 8012382:	2318      	movs	r3, #24
 8012384:	81bb      	strh	r3, [r7, #12]
 8012386:	e020      	b.n	80123ca <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8012388:	89fb      	ldrh	r3, [r7, #14]
 801238a:	2b01      	cmp	r3, #1
 801238c:	d10a      	bne.n	80123a4 <Parse_Time+0x68>
 801238e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012392:	2b3b      	cmp	r3, #59	; 0x3b
 8012394:	dc03      	bgt.n	801239e <Parse_Time+0x62>
 8012396:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	da02      	bge.n	80123a4 <Parse_Time+0x68>
				{
					val= 59;
 801239e:	233b      	movs	r3, #59	; 0x3b
 80123a0:	81bb      	strh	r3, [r7, #12]
 80123a2:	e012      	b.n	80123ca <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 80123a4:	89fb      	ldrh	r3, [r7, #14]
 80123a6:	2b02      	cmp	r3, #2
 80123a8:	d10a      	bne.n	80123c0 <Parse_Time+0x84>
 80123aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80123ae:	2b3b      	cmp	r3, #59	; 0x3b
 80123b0:	dc03      	bgt.n	80123ba <Parse_Time+0x7e>
 80123b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	da02      	bge.n	80123c0 <Parse_Time+0x84>
				{
					val=59;
 80123ba:	233b      	movs	r3, #59	; 0x3b
 80123bc:	81bb      	strh	r3, [r7, #12]
 80123be:	e004      	b.n	80123ca <Parse_Time+0x8e>
				}
				else if(i > 2)
 80123c0:	89fb      	ldrh	r3, [r7, #14]
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	d901      	bls.n	80123ca <Parse_Time+0x8e>
				{
					return 1;
 80123c6:	2301      	movs	r3, #1
 80123c8:	e011      	b.n	80123ee <Parse_Time+0xb2>
				}


				time[i] =val;
 80123ca:	89fb      	ldrh	r3, [r7, #14]
 80123cc:	683a      	ldr	r2, [r7, #0]
 80123ce:	4413      	add	r3, r2
 80123d0:	89ba      	ldrh	r2, [r7, #12]
 80123d2:	b2d2      	uxtb	r2, r2
 80123d4:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 80123d6:	4908      	ldr	r1, [pc, #32]	; (80123f8 <Parse_Time+0xbc>)
 80123d8:	2000      	movs	r0, #0
 80123da:	f00a ff19 	bl	801d210 <strtok>
 80123de:	60b8      	str	r0, [r7, #8]
			i++;
 80123e0:	89fb      	ldrh	r3, [r7, #14]
 80123e2:	3301      	adds	r3, #1
 80123e4:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1ba      	bne.n	8012362 <Parse_Time+0x26>
		}

		}

		return 0;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	080211f8 	.word	0x080211f8

080123fc <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	460b      	mov	r3, r1
 8012406:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8012408:	78fb      	ldrb	r3, [r7, #3]
 801240a:	091b      	lsrs	r3, r3, #4
 801240c:	b2db      	uxtb	r3, r3
 801240e:	4619      	mov	r1, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	1c5a      	adds	r2, r3, #1
 8012414:	607a      	str	r2, [r7, #4]
 8012416:	4a08      	ldr	r2, [pc, #32]	; (8012438 <CharToHexasc+0x3c>)
 8012418:	5c52      	ldrb	r2, [r2, r1]
 801241a:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 801241c:	78fb      	ldrb	r3, [r7, #3]
 801241e:	f003 030f 	and.w	r3, r3, #15
 8012422:	4a05      	ldr	r2, [pc, #20]	; (8012438 <CharToHexasc+0x3c>)
 8012424:	5cd2      	ldrb	r2, [r2, r3]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	701a      	strb	r2, [r3, #0]
}
 801242a:	bf00      	nop
 801242c:	370c      	adds	r7, #12
 801242e:	46bd      	mov	sp, r7
 8012430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012434:	4770      	bx	lr
 8012436:	bf00      	nop
 8012438:	08021a4c 	.word	0x08021a4c

0801243c <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b088      	sub	sp, #32
 8012440:	af00      	add	r7, sp, #0
	adc_Disable();
 8012442:	4830      	ldr	r0, [pc, #192]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012444:	f7f1 fbf1 	bl	8003c2a <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8012448:	f107 0314 	add.w	r3, r7, #20
 801244c:	2200      	movs	r2, #0
 801244e:	601a      	str	r2, [r3, #0]
 8012450:	605a      	str	r2, [r3, #4]
 8012452:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8012454:	4b2b      	ldr	r3, [pc, #172]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012456:	4a2c      	ldr	r2, [pc, #176]	; (8012508 <adc_InitOneShotMode+0xcc>)
 8012458:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801245a:	4b2a      	ldr	r3, [pc, #168]	; (8012504 <adc_InitOneShotMode+0xc8>)
 801245c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012460:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012462:	4b28      	ldr	r3, [pc, #160]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012464:	2200      	movs	r2, #0
 8012466:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8012468:	4b26      	ldr	r3, [pc, #152]	; (8012504 <adc_InitOneShotMode+0xc8>)
 801246a:	2200      	movs	r2, #0
 801246c:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 801246e:	4b25      	ldr	r3, [pc, #148]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012470:	2200      	movs	r2, #0
 8012472:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012474:	4b23      	ldr	r3, [pc, #140]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012476:	2200      	movs	r2, #0
 8012478:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801247c:	4b21      	ldr	r3, [pc, #132]	; (8012504 <adc_InitOneShotMode+0xc8>)
 801247e:	2200      	movs	r2, #0
 8012480:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012482:	4b20      	ldr	r3, [pc, #128]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012484:	4a21      	ldr	r2, [pc, #132]	; (801250c <adc_InitOneShotMode+0xd0>)
 8012486:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012488:	4b1e      	ldr	r3, [pc, #120]	; (8012504 <adc_InitOneShotMode+0xc8>)
 801248a:	2200      	movs	r2, #0
 801248c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 801248e:	4b1d      	ldr	r3, [pc, #116]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012490:	2201      	movs	r2, #1
 8012492:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8012494:	4b1b      	ldr	r3, [pc, #108]	; (8012504 <adc_InitOneShotMode+0xc8>)
 8012496:	2200      	movs	r2, #0
 8012498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801249c:	4b19      	ldr	r3, [pc, #100]	; (8012504 <adc_InitOneShotMode+0xc8>)
 801249e:	2201      	movs	r2, #1
 80124a0:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80124a2:	4818      	ldr	r0, [pc, #96]	; (8012504 <adc_InitOneShotMode+0xc8>)
 80124a4:	f7f1 fb7e 	bl	8003ba4 <HAL_ADC_Init>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d001      	beq.n	80124b2 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 80124ae:	f7f0 fdc7 	bl	8003040 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80124b2:	2300      	movs	r3, #0
 80124b4:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80124b6:	f107 0314 	add.w	r3, r7, #20
 80124ba:	4619      	mov	r1, r3
 80124bc:	4811      	ldr	r0, [pc, #68]	; (8012504 <adc_InitOneShotMode+0xc8>)
 80124be:	f7f1 ff85 	bl	80043cc <HAL_ADCEx_MultiModeConfigChannel>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d001      	beq.n	80124cc <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 80124c8:	f7f0 fdba 	bl	8003040 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 80124cc:	1d3b      	adds	r3, r7, #4
 80124ce:	2200      	movs	r2, #0
 80124d0:	601a      	str	r2, [r3, #0]
 80124d2:	605a      	str	r2, [r3, #4]
 80124d4:	609a      	str	r2, [r3, #8]
 80124d6:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 80124d8:	230a      	movs	r3, #10
 80124da:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 80124dc:	2301      	movs	r3, #1
 80124de:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80124e0:	2302      	movs	r3, #2
 80124e2:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 80124e4:	2300      	movs	r3, #0
 80124e6:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80124e8:	1d3b      	adds	r3, r7, #4
 80124ea:	4619      	mov	r1, r3
 80124ec:	4805      	ldr	r0, [pc, #20]	; (8012504 <adc_InitOneShotMode+0xc8>)
 80124ee:	f7f1 fd4f 	bl	8003f90 <HAL_ADC_ConfigChannel>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d001      	beq.n	80124fc <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 80124f8:	f7f0 fda2 	bl	8003040 <Error_Handler>
		  }



}
 80124fc:	bf00      	nop
 80124fe:	3720      	adds	r7, #32
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	20001728 	.word	0x20001728
 8012508:	40012000 	.word	0x40012000
 801250c:	0f000001 	.word	0x0f000001

08012510 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8012510:	b580      	push	{r7, lr}
 8012512:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8012514:	4802      	ldr	r0, [pc, #8]	; (8012520 <adc_Getval+0x10>)
 8012516:	f7f1 fd2d 	bl	8003f74 <HAL_ADC_GetValue>
 801251a:	4603      	mov	r3, r0

}
 801251c:	4618      	mov	r0, r3
 801251e:	bd80      	pop	{r7, pc}
 8012520:	20001728 	.word	0x20001728
 8012524:	00000000 	.word	0x00000000

08012528 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8012530:	f7ff ff84 	bl	801243c <adc_InitOneShotMode>
	HAL_Delay(1);
 8012534:	2001      	movs	r0, #1
 8012536:	f7f1 facd 	bl	8003ad4 <HAL_Delay>
	adc_Start();
 801253a:	4847      	ldr	r0, [pc, #284]	; (8012658 <adc_Measure+0x130>)
 801253c:	f7f1 fba8 	bl	8003c90 <HAL_ADC_Start>
	HAL_Delay(1);
 8012540:	2001      	movs	r0, #1
 8012542:	f7f1 fac7 	bl	8003ad4 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012546:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801254a:	4843      	ldr	r0, [pc, #268]	; (8012658 <adc_Measure+0x130>)
 801254c:	f7f1 fc87 	bl	8003e5e <HAL_ADC_PollForConversion>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d01d      	beq.n	8012592 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8012556:	2001      	movs	r0, #1
 8012558:	f7f1 fabc 	bl	8003ad4 <HAL_Delay>
		   adc_Start();
 801255c:	483e      	ldr	r0, [pc, #248]	; (8012658 <adc_Measure+0x130>)
 801255e:	f7f1 fb97 	bl	8003c90 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012562:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012566:	483c      	ldr	r0, [pc, #240]	; (8012658 <adc_Measure+0x130>)
 8012568:	f7f1 fc79 	bl	8003e5e <HAL_ADC_PollForConversion>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00f      	beq.n	8012592 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8012572:	2001      	movs	r0, #1
 8012574:	f7f1 faae 	bl	8003ad4 <HAL_Delay>
				adc_Start();
 8012578:	4837      	ldr	r0, [pc, #220]	; (8012658 <adc_Measure+0x130>)
 801257a:	f7f1 fb89 	bl	8003c90 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801257e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012582:	4835      	ldr	r0, [pc, #212]	; (8012658 <adc_Measure+0x130>)
 8012584:	f7f1 fc6b 	bl	8003e5e <HAL_ADC_PollForConversion>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <adc_Measure+0x6a>
				{
					return 0;
 801258e:	2300      	movs	r3, #0
 8012590:	e05a      	b.n	8012648 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012592:	4831      	ldr	r0, [pc, #196]	; (8012658 <adc_Measure+0x130>)
 8012594:	f7f1 fc30 	bl	8003df8 <HAL_ADC_Stop>

	val = adc_Getval();
 8012598:	f7ff ffba 	bl	8012510 <adc_Getval>
 801259c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 801259e:	2001      	movs	r0, #1
 80125a0:	f7f1 fa98 	bl	8003ad4 <HAL_Delay>
	adc_Start();
 80125a4:	482c      	ldr	r0, [pc, #176]	; (8012658 <adc_Measure+0x130>)
 80125a6:	f7f1 fb73 	bl	8003c90 <HAL_ADC_Start>
	HAL_Delay(1);
 80125aa:	2001      	movs	r0, #1
 80125ac:	f7f1 fa92 	bl	8003ad4 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80125b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80125b4:	4828      	ldr	r0, [pc, #160]	; (8012658 <adc_Measure+0x130>)
 80125b6:	f7f1 fc52 	bl	8003e5e <HAL_ADC_PollForConversion>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d01d      	beq.n	80125fc <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 80125c0:	2001      	movs	r0, #1
 80125c2:	f7f1 fa87 	bl	8003ad4 <HAL_Delay>
		   adc_Start();
 80125c6:	4824      	ldr	r0, [pc, #144]	; (8012658 <adc_Measure+0x130>)
 80125c8:	f7f1 fb62 	bl	8003c90 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80125cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80125d0:	4821      	ldr	r0, [pc, #132]	; (8012658 <adc_Measure+0x130>)
 80125d2:	f7f1 fc44 	bl	8003e5e <HAL_ADC_PollForConversion>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00f      	beq.n	80125fc <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 80125dc:	2001      	movs	r0, #1
 80125de:	f7f1 fa79 	bl	8003ad4 <HAL_Delay>
				adc_Start();
 80125e2:	481d      	ldr	r0, [pc, #116]	; (8012658 <adc_Measure+0x130>)
 80125e4:	f7f1 fb54 	bl	8003c90 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80125e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80125ec:	481a      	ldr	r0, [pc, #104]	; (8012658 <adc_Measure+0x130>)
 80125ee:	f7f1 fc36 	bl	8003e5e <HAL_ADC_PollForConversion>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d001      	beq.n	80125fc <adc_Measure+0xd4>
				{
					return 0;
 80125f8:	2300      	movs	r3, #0
 80125fa:	e025      	b.n	8012648 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80125fc:	4816      	ldr	r0, [pc, #88]	; (8012658 <adc_Measure+0x130>)
 80125fe:	f7f1 fbfb 	bl	8003df8 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8012602:	f7ff ff85 	bl	8012510 <adc_Getval>
 8012606:	4602      	mov	r2, r0
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	4413      	add	r3, r2
 801260c:	085b      	lsrs	r3, r3, #1
 801260e:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	ee07 3a90 	vmov	s15, r3
 8012616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801261a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801265c <adc_Measure+0x134>
 801261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012622:	ee17 0a90 	vmov	r0, s15
 8012626:	f7ed ffa7 	bl	8000578 <__aeabi_f2d>
 801262a:	a309      	add	r3, pc, #36	; (adr r3, 8012650 <adc_Measure+0x128>)
 801262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012630:	f7ed fffa 	bl	8000628 <__aeabi_dmul>
 8012634:	4602      	mov	r2, r0
 8012636:	460b      	mov	r3, r1
 8012638:	4610      	mov	r0, r2
 801263a:	4619      	mov	r1, r3
 801263c:	f7ee faec 	bl	8000c18 <__aeabi_d2f>
 8012640:	4602      	mov	r2, r0
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	601a      	str	r2, [r3, #0]


	return 1;
 8012646:	2301      	movs	r3, #1


}
 8012648:	4618      	mov	r0, r3
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	851eb852 	.word	0x851eb852
 8012654:	3ff451eb 	.word	0x3ff451eb
 8012658:	20001728 	.word	0x20001728
 801265c:	3a533333 	.word	0x3a533333

08012660 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012666:	2300      	movs	r3, #0
 8012668:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 801266a:	88f9      	ldrh	r1, [r7, #6]
 801266c:	463b      	mov	r3, r7
 801266e:	f242 12b1 	movw	r2, #8625	; 0x21b1
 8012672:	4618      	mov	r0, r3
 8012674:	f000 fa8d 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 8012678:	4603      	mov	r3, r0
 801267a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801267c:	88fa      	ldrh	r2, [r7, #6]
 801267e:	463b      	mov	r3, r7
 8012680:	4619      	mov	r1, r3
 8012682:	2062      	movs	r0, #98	; 0x62
 8012684:	f000 fad8 	bl	8012c38 <sensirion_i2c_write_data>
 8012688:	4603      	mov	r3, r0
 801268a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 801268c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d002      	beq.n	801269a <scd4x_start_periodic_measurement+0x3a>
        return error;
 8012694:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012698:	e004      	b.n	80126a4 <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 801269a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801269e:	f000 fbb9 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b088      	sub	sp, #32
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 80126bc:	8bf9      	ldrh	r1, [r7, #30]
 80126be:	f107 0310 	add.w	r3, r7, #16
 80126c2:	f64e 4205 	movw	r2, #60421	; 0xec05
 80126c6:	4618      	mov	r0, r3
 80126c8:	f000 fa63 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 80126cc:	4603      	mov	r3, r0
 80126ce:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80126d0:	8bfa      	ldrh	r2, [r7, #30]
 80126d2:	f107 0310 	add.w	r3, r7, #16
 80126d6:	4619      	mov	r1, r3
 80126d8:	2062      	movs	r0, #98	; 0x62
 80126da:	f000 faad 	bl	8012c38 <sensirion_i2c_write_data>
 80126de:	4603      	mov	r3, r0
 80126e0:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80126e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d002      	beq.n	80126f0 <scd4x_read_measurement_ticks+0x44>
        return error;
 80126ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80126ee:	e031      	b.n	8012754 <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80126f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126f4:	f000 fb8e 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 80126f8:	f107 0310 	add.w	r3, r7, #16
 80126fc:	2206      	movs	r2, #6
 80126fe:	4619      	mov	r1, r3
 8012700:	2062      	movs	r0, #98	; 0x62
 8012702:	f000 faad 	bl	8012c60 <sensirion_i2c_read_data_inplace>
 8012706:	4603      	mov	r3, r0
 8012708:	83bb      	strh	r3, [r7, #28]
    if (error) {
 801270a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d002      	beq.n	8012718 <scd4x_read_measurement_ticks+0x6c>
        return error;
 8012712:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012716:	e01d      	b.n	8012754 <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012718:	f107 0310 	add.w	r3, r7, #16
 801271c:	4618      	mov	r0, r3
 801271e:	f000 f9d2 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 8012722:	4603      	mov	r3, r0
 8012724:	461a      	mov	r2, r3
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 801272a:	f107 0310 	add.w	r3, r7, #16
 801272e:	3302      	adds	r3, #2
 8012730:	4618      	mov	r0, r3
 8012732:	f000 f9c8 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 8012736:	4603      	mov	r3, r0
 8012738:	461a      	mov	r2, r3
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 801273e:	f107 0310 	add.w	r3, r7, #16
 8012742:	3304      	adds	r3, #4
 8012744:	4618      	mov	r0, r3
 8012746:	f000 f9be 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 801274a:	4603      	mov	r3, r0
 801274c:	461a      	mov	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012752:	2300      	movs	r3, #0
}
 8012754:	4618      	mov	r0, r3
 8012756:	3720      	adds	r7, #32
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 801275c:	b580      	push	{r7, lr}
 801275e:	b086      	sub	sp, #24
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 8012768:	f107 0212 	add.w	r2, r7, #18
 801276c:	f107 0314 	add.w	r3, r7, #20
 8012770:	4619      	mov	r1, r3
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	f7ff ff9a 	bl	80126ac <scd4x_read_measurement_ticks>
 8012778:	4603      	mov	r3, r0
 801277a:	82fb      	strh	r3, [r7, #22]
    if (error) {
 801277c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d002      	beq.n	801278a <scd4x_read_measurement+0x2e>
        return error;
 8012784:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012788:	e015      	b.n	80127b6 <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 801278a:	8abb      	ldrh	r3, [r7, #20]
 801278c:	461a      	mov	r2, r3
 801278e:	f245 5373 	movw	r3, #21875	; 0x5573
 8012792:	fb02 f303 	mul.w	r3, r2, r3
 8012796:	135b      	asrs	r3, r3, #13
 8012798:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 801279c:	3bc8      	subs	r3, #200	; 0xc8
 801279e:	68ba      	ldr	r2, [r7, #8]
 80127a0:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 80127a2:	8a7b      	ldrh	r3, [r7, #18]
 80127a4:	461a      	mov	r2, r3
 80127a6:	f243 03d4 	movw	r3, #12500	; 0x30d4
 80127aa:	fb02 f303 	mul.w	r3, r2, r3
 80127ae:	135a      	asrs	r2, r3, #13
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 80127b4:	2300      	movs	r3, #0
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3718      	adds	r7, #24
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
	...

080127c0 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 80127ca:	88f9      	ldrh	r1, [r7, #6]
 80127cc:	463b      	mov	r3, r7
 80127ce:	f643 7286 	movw	r2, #16262	; 0x3f86
 80127d2:	4618      	mov	r0, r3
 80127d4:	f000 f9dd 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 80127d8:	4603      	mov	r3, r0
 80127da:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80127dc:	88fa      	ldrh	r2, [r7, #6]
 80127de:	463b      	mov	r3, r7
 80127e0:	4619      	mov	r1, r3
 80127e2:	2062      	movs	r0, #98	; 0x62
 80127e4:	f000 fa28 	bl	8012c38 <sensirion_i2c_write_data>
 80127e8:	4603      	mov	r3, r0
 80127ea:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80127ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <scd4x_stop_periodic_measurement+0x3a>
        return error;
 80127f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127f8:	e003      	b.n	8012802 <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 80127fa:	4804      	ldr	r0, [pc, #16]	; (801280c <scd4x_stop_periodic_measurement+0x4c>)
 80127fc:	f000 fb0a 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012800:	2300      	movs	r3, #0
}
 8012802:	4618      	mov	r0, r3
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	0007a120 	.word	0x0007a120

08012810 <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 8012810:	b580      	push	{r7, lr}
 8012812:	b086      	sub	sp, #24
 8012814:	af00      	add	r7, sp, #0
 8012816:	4603      	mov	r3, r0
 8012818:	6039      	str	r1, [r7, #0]
 801281a:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 801281c:	2300      	movs	r3, #0
 801281e:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 8012820:	8af9      	ldrh	r1, [r7, #22]
 8012822:	f107 030c 	add.w	r3, r7, #12
 8012826:	f243 622f 	movw	r2, #13871	; 0x362f
 801282a:	4618      	mov	r0, r3
 801282c:	f000 f9b1 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 8012830:	4603      	mov	r3, r0
 8012832:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 8012834:	88fa      	ldrh	r2, [r7, #6]
 8012836:	8af9      	ldrh	r1, [r7, #22]
 8012838:	f107 030c 	add.w	r3, r7, #12
 801283c:	4618      	mov	r0, r3
 801283e:	f000 f9cb 	bl	8012bd8 <sensirion_i2c_add_uint16_t_to_buffer>
 8012842:	4603      	mov	r3, r0
 8012844:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012846:	8afa      	ldrh	r2, [r7, #22]
 8012848:	f107 030c 	add.w	r3, r7, #12
 801284c:	4619      	mov	r1, r3
 801284e:	2062      	movs	r0, #98	; 0x62
 8012850:	f000 f9f2 	bl	8012c38 <sensirion_i2c_write_data>
 8012854:	4603      	mov	r3, r0
 8012856:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012858:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d002      	beq.n	8012866 <scd4x_perform_forced_recalibration+0x56>
        return error;
 8012860:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012864:	e01c      	b.n	80128a0 <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 8012866:	4810      	ldr	r0, [pc, #64]	; (80128a8 <scd4x_perform_forced_recalibration+0x98>)
 8012868:	f000 fad4 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 801286c:	f107 030c 	add.w	r3, r7, #12
 8012870:	2202      	movs	r2, #2
 8012872:	4619      	mov	r1, r3
 8012874:	2062      	movs	r0, #98	; 0x62
 8012876:	f000 f9f3 	bl	8012c60 <sensirion_i2c_read_data_inplace>
 801287a:	4603      	mov	r3, r0
 801287c:	82bb      	strh	r3, [r7, #20]
    if (error) {
 801287e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d002      	beq.n	801288c <scd4x_perform_forced_recalibration+0x7c>
        return error;
 8012886:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801288a:	e009      	b.n	80128a0 <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 801288c:	f107 030c 	add.w	r3, r7, #12
 8012890:	4618      	mov	r0, r3
 8012892:	f000 f918 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 8012896:	4603      	mov	r3, r0
 8012898:	461a      	mov	r2, r3
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	00061a80 	.word	0x00061a80

080128ac <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b086      	sub	sp, #24
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 80128b8:	2300      	movs	r3, #0
 80128ba:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 80128bc:	8af9      	ldrh	r1, [r7, #22]
 80128be:	f107 030c 	add.w	r3, r7, #12
 80128c2:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 80128c6:	4618      	mov	r0, r3
 80128c8:	f000 f963 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 80128cc:	4603      	mov	r3, r0
 80128ce:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80128d0:	8afa      	ldrh	r2, [r7, #22]
 80128d2:	f107 030c 	add.w	r3, r7, #12
 80128d6:	4619      	mov	r1, r3
 80128d8:	2062      	movs	r0, #98	; 0x62
 80128da:	f000 f9ad 	bl	8012c38 <sensirion_i2c_write_data>
 80128de:	4603      	mov	r3, r0
 80128e0:	827b      	strh	r3, [r7, #18]
    if (error) {
 80128e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d002      	beq.n	80128f0 <scd4x_get_data_ready_flag+0x44>
        return error;
 80128ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80128ee:	e025      	b.n	801293c <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80128f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80128f4:	f000 fa8e 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 80128f8:	f107 030c 	add.w	r3, r7, #12
 80128fc:	2202      	movs	r2, #2
 80128fe:	4619      	mov	r1, r3
 8012900:	2062      	movs	r0, #98	; 0x62
 8012902:	f000 f9ad 	bl	8012c60 <sensirion_i2c_read_data_inplace>
 8012906:	4603      	mov	r3, r0
 8012908:	827b      	strh	r3, [r7, #18]
    if (error) {
 801290a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d002      	beq.n	8012918 <scd4x_get_data_ready_flag+0x6c>
        return error;
 8012912:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012916:	e011      	b.n	801293c <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012918:	f107 030c 	add.w	r3, r7, #12
 801291c:	4618      	mov	r0, r3
 801291e:	f000 f8d2 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 8012922:	4603      	mov	r3, r0
 8012924:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 8012926:	8abb      	ldrh	r3, [r7, #20]
 8012928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801292c:	2b00      	cmp	r3, #0
 801292e:	bf14      	ite	ne
 8012930:	2301      	movne	r3, #1
 8012932:	2300      	moveq	r3, #0
 8012934:	b2da      	uxtb	r2, r3
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 801293a:	2300      	movs	r3, #0
}
 801293c:	4618      	mov	r0, r3
 801293e:	3718      	adds	r7, #24
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 8012944:	b580      	push	{r7, lr}
 8012946:	b088      	sub	sp, #32
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012950:	2300      	movs	r3, #0
 8012952:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 8012954:	8bf9      	ldrh	r1, [r7, #30]
 8012956:	f107 0310 	add.w	r3, r7, #16
 801295a:	f243 6282 	movw	r2, #13954	; 0x3682
 801295e:	4618      	mov	r0, r3
 8012960:	f000 f917 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 8012964:	4603      	mov	r3, r0
 8012966:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012968:	8bfa      	ldrh	r2, [r7, #30]
 801296a:	f107 0310 	add.w	r3, r7, #16
 801296e:	4619      	mov	r1, r3
 8012970:	2062      	movs	r0, #98	; 0x62
 8012972:	f000 f961 	bl	8012c38 <sensirion_i2c_write_data>
 8012976:	4603      	mov	r3, r0
 8012978:	83bb      	strh	r3, [r7, #28]
    if (error) {
 801297a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d002      	beq.n	8012988 <scd4x_get_serial_number+0x44>
        return error;
 8012982:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012986:	e031      	b.n	80129ec <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801298c:	f000 fa42 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012990:	f107 0310 	add.w	r3, r7, #16
 8012994:	2206      	movs	r2, #6
 8012996:	4619      	mov	r1, r3
 8012998:	2062      	movs	r0, #98	; 0x62
 801299a:	f000 f961 	bl	8012c60 <sensirion_i2c_read_data_inplace>
 801299e:	4603      	mov	r3, r0
 80129a0:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80129a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <scd4x_get_serial_number+0x6c>
        return error;
 80129aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80129ae:	e01d      	b.n	80129ec <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80129b0:	f107 0310 	add.w	r3, r7, #16
 80129b4:	4618      	mov	r0, r3
 80129b6:	f000 f886 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 80129ba:	4603      	mov	r3, r0
 80129bc:	461a      	mov	r2, r3
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80129c2:	f107 0310 	add.w	r3, r7, #16
 80129c6:	3302      	adds	r3, #2
 80129c8:	4618      	mov	r0, r3
 80129ca:	f000 f87c 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 80129ce:	4603      	mov	r3, r0
 80129d0:	461a      	mov	r2, r3
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80129d6:	f107 0310 	add.w	r3, r7, #16
 80129da:	3304      	adds	r3, #4
 80129dc:	4618      	mov	r0, r3
 80129de:	f000 f872 	bl	8012ac6 <sensirion_common_bytes_to_uint16_t>
 80129e2:	4603      	mov	r3, r0
 80129e4:	461a      	mov	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3720      	adds	r7, #32
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80129fa:	2300      	movs	r3, #0
 80129fc:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 80129fe:	88f9      	ldrh	r1, [r7, #6]
 8012a00:	463b      	mov	r3, r7
 8012a02:	f243 6246 	movw	r2, #13894	; 0x3646
 8012a06:	4618      	mov	r0, r3
 8012a08:	f000 f8c3 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012a10:	88fa      	ldrh	r2, [r7, #6]
 8012a12:	463b      	mov	r3, r7
 8012a14:	4619      	mov	r1, r3
 8012a16:	2062      	movs	r0, #98	; 0x62
 8012a18:	f000 f90e 	bl	8012c38 <sensirion_i2c_write_data>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012a20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d002      	beq.n	8012a2e <scd4x_reinit+0x3a>
        return error;
 8012a28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012a2c:	e004      	b.n	8012a38 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8012a2e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012a32:	f000 f9ef 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8012a4a:	88f9      	ldrh	r1, [r7, #6]
 8012a4c:	463b      	mov	r3, r7
 8012a4e:	f243 62e0 	movw	r2, #14048	; 0x36e0
 8012a52:	4618      	mov	r0, r3
 8012a54:	f000 f89d 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012a5c:	88fa      	ldrh	r2, [r7, #6]
 8012a5e:	463b      	mov	r3, r7
 8012a60:	4619      	mov	r1, r3
 8012a62:	2062      	movs	r0, #98	; 0x62
 8012a64:	f000 f8e8 	bl	8012c38 <sensirion_i2c_write_data>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012a6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d002      	beq.n	8012a7a <scd4x_power_down+0x3a>
        return error;
 8012a74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012a78:	e004      	b.n	8012a84 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8012a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012a7e:	f000 f9c9 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3708      	adds	r7, #8
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8012a96:	88f9      	ldrh	r1, [r7, #6]
 8012a98:	1d3b      	adds	r3, r7, #4
 8012a9a:	f243 62f6 	movw	r2, #14070	; 0x36f6
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f000 f877 	bl	8012b92 <sensirion_i2c_add_command_to_buffer>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012aa8:	88fa      	ldrh	r2, [r7, #6]
 8012aaa:	1d3b      	adds	r3, r7, #4
 8012aac:	4619      	mov	r1, r3
 8012aae:	2062      	movs	r0, #98	; 0x62
 8012ab0:	f000 f8c2 	bl	8012c38 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8012ab4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012ab8:	f000 f9ac 	bl	8012e14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012abc:	2300      	movs	r3, #0
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3708      	adds	r7, #8
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8012ac6:	b480      	push	{r7}
 8012ac8:	b083      	sub	sp, #12
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	021b      	lsls	r3, r3, #8
 8012ad4:	b21a      	sxth	r2, r3
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	b21b      	sxth	r3, r3
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	b21b      	sxth	r3, r3
 8012ae2:	b29b      	uxth	r3, r3
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8012af0:	b480      	push	{r7}
 8012af2:	b085      	sub	sp, #20
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	460b      	mov	r3, r1
 8012afa:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8012afc:	23ff      	movs	r3, #255	; 0xff
 8012afe:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012b00:	2300      	movs	r3, #0
 8012b02:	81fb      	strh	r3, [r7, #14]
 8012b04:	e021      	b.n	8012b4a <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8012b06:	89fb      	ldrh	r3, [r7, #14]
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	781a      	ldrb	r2, [r3, #0]
 8012b0e:	7b7b      	ldrb	r3, [r7, #13]
 8012b10:	4053      	eors	r3, r2
 8012b12:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8012b14:	2308      	movs	r3, #8
 8012b16:	733b      	strb	r3, [r7, #12]
 8012b18:	e011      	b.n	8012b3e <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8012b1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	da07      	bge.n	8012b32 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8012b22:	7b7b      	ldrb	r3, [r7, #13]
 8012b24:	005b      	lsls	r3, r3, #1
 8012b26:	b25b      	sxtb	r3, r3
 8012b28:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8012b2c:	b25b      	sxtb	r3, r3
 8012b2e:	737b      	strb	r3, [r7, #13]
 8012b30:	e002      	b.n	8012b38 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8012b32:	7b7b      	ldrb	r3, [r7, #13]
 8012b34:	005b      	lsls	r3, r3, #1
 8012b36:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8012b38:	7b3b      	ldrb	r3, [r7, #12]
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	733b      	strb	r3, [r7, #12]
 8012b3e:	7b3b      	ldrb	r3, [r7, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d1ea      	bne.n	8012b1a <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012b44:	89fb      	ldrh	r3, [r7, #14]
 8012b46:	3301      	adds	r3, #1
 8012b48:	81fb      	strh	r3, [r7, #14]
 8012b4a:	89fa      	ldrh	r2, [r7, #14]
 8012b4c:	887b      	ldrh	r3, [r7, #2]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d3d9      	bcc.n	8012b06 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8012b52:	7b7b      	ldrb	r3, [r7, #13]
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3714      	adds	r7, #20
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	460b      	mov	r3, r1
 8012b6a:	807b      	strh	r3, [r7, #2]
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8012b70:	887b      	ldrh	r3, [r7, #2]
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7ff ffbb 	bl	8012af0 <sensirion_i2c_generate_crc>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	787b      	ldrb	r3, [r7, #1]
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d001      	beq.n	8012b88 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8012b84:	2301      	movs	r3, #1
 8012b86:	e000      	b.n	8012b8a <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8012b88:	2300      	movs	r3, #0
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3708      	adds	r7, #8
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}

08012b92 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8012b92:	b480      	push	{r7}
 8012b94:	b083      	sub	sp, #12
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	807b      	strh	r3, [r7, #2]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8012ba2:	883b      	ldrh	r3, [r7, #0]
 8012ba4:	0a1b      	lsrs	r3, r3, #8
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	887b      	ldrh	r3, [r7, #2]
 8012baa:	1c59      	adds	r1, r3, #1
 8012bac:	8079      	strh	r1, [r7, #2]
 8012bae:	4619      	mov	r1, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	440b      	add	r3, r1
 8012bb4:	b2d2      	uxtb	r2, r2
 8012bb6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8012bb8:	887b      	ldrh	r3, [r7, #2]
 8012bba:	1c5a      	adds	r2, r3, #1
 8012bbc:	807a      	strh	r2, [r7, #2]
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	883a      	ldrh	r2, [r7, #0]
 8012bc6:	b2d2      	uxtb	r2, r2
 8012bc8:	701a      	strb	r2, [r3, #0]
    return offset;
 8012bca:	887b      	ldrh	r3, [r7, #2]
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8012bd8:	b590      	push	{r4, r7, lr}
 8012bda:	b083      	sub	sp, #12
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	460b      	mov	r3, r1
 8012be2:	807b      	strh	r3, [r7, #2]
 8012be4:	4613      	mov	r3, r2
 8012be6:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8012be8:	883b      	ldrh	r3, [r7, #0]
 8012bea:	0a1b      	lsrs	r3, r3, #8
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	887b      	ldrh	r3, [r7, #2]
 8012bf0:	1c59      	adds	r1, r3, #1
 8012bf2:	8079      	strh	r1, [r7, #2]
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	440b      	add	r3, r1
 8012bfa:	b2d2      	uxtb	r2, r2
 8012bfc:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8012bfe:	887b      	ldrh	r3, [r7, #2]
 8012c00:	1c5a      	adds	r2, r3, #1
 8012c02:	807a      	strh	r2, [r7, #2]
 8012c04:	461a      	mov	r2, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	4413      	add	r3, r2
 8012c0a:	883a      	ldrh	r2, [r7, #0]
 8012c0c:	b2d2      	uxtb	r2, r2
 8012c0e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8012c10:	887b      	ldrh	r3, [r7, #2]
 8012c12:	3b02      	subs	r3, #2
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8012c18:	887b      	ldrh	r3, [r7, #2]
 8012c1a:	687a      	ldr	r2, [r7, #4]
 8012c1c:	18d4      	adds	r4, r2, r3
 8012c1e:	2102      	movs	r1, #2
 8012c20:	f7ff ff66 	bl	8012af0 <sensirion_i2c_generate_crc>
 8012c24:	4603      	mov	r3, r0
 8012c26:	7023      	strb	r3, [r4, #0]
    offset++;
 8012c28:	887b      	ldrh	r3, [r7, #2]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	807b      	strh	r3, [r7, #2]

    return offset;
 8012c2e:	887b      	ldrh	r3, [r7, #2]
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	370c      	adds	r7, #12
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd90      	pop	{r4, r7, pc}

08012c38 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	4603      	mov	r3, r0
 8012c40:	6039      	str	r1, [r7, #0]
 8012c42:	71fb      	strb	r3, [r7, #7]
 8012c44:	4613      	mov	r3, r2
 8012c46:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8012c48:	88ba      	ldrh	r2, [r7, #4]
 8012c4a:	79fb      	ldrb	r3, [r7, #7]
 8012c4c:	6839      	ldr	r1, [r7, #0]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f000 f8c4 	bl	8012ddc <sensirion_i2c_hal_write>
 8012c54:	4603      	mov	r3, r0
 8012c56:	b21b      	sxth	r3, r3
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3708      	adds	r7, #8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	6039      	str	r1, [r7, #0]
 8012c6a:	71fb      	strb	r3, [r7, #7]
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8012c70:	88bb      	ldrh	r3, [r7, #4]
 8012c72:	085b      	lsrs	r3, r3, #1
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	461a      	mov	r2, r3
 8012c78:	0052      	lsls	r2, r2, #1
 8012c7a:	4413      	add	r3, r2
 8012c7c:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8012c7e:	88bb      	ldrh	r3, [r7, #4]
 8012c80:	f003 0301 	and.w	r3, r3, #1
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8012c8a:	2304      	movs	r3, #4
 8012c8c:	e047      	b.n	8012d1e <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8012c8e:	897a      	ldrh	r2, [r7, #10]
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	6839      	ldr	r1, [r7, #0]
 8012c94:	4618      	mov	r0, r3
 8012c96:	f000 f885 	bl	8012da4 <sensirion_i2c_hal_read>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	813b      	strh	r3, [r7, #8]
    if (error) {
 8012c9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d002      	beq.n	8012cac <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8012ca6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012caa:	e038      	b.n	8012d1e <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012cac:	2300      	movs	r3, #0
 8012cae:	81fb      	strh	r3, [r7, #14]
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	81bb      	strh	r3, [r7, #12]
 8012cb4:	e02e      	b.n	8012d14 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8012cb6:	89fb      	ldrh	r3, [r7, #14]
 8012cb8:	683a      	ldr	r2, [r7, #0]
 8012cba:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8012cbc:	89fb      	ldrh	r3, [r7, #14]
 8012cbe:	3302      	adds	r3, #2
 8012cc0:	683a      	ldr	r2, [r7, #0]
 8012cc2:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	2102      	movs	r1, #2
 8012cca:	f7ff ff49 	bl	8012b60 <sensirion_i2c_check_crc>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	813b      	strh	r3, [r7, #8]
        if (error) {
 8012cd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d002      	beq.n	8012ce0 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8012cda:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012cde:	e01e      	b.n	8012d1e <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8012ce0:	89fb      	ldrh	r3, [r7, #14]
 8012ce2:	683a      	ldr	r2, [r7, #0]
 8012ce4:	441a      	add	r2, r3
 8012ce6:	89bb      	ldrh	r3, [r7, #12]
 8012ce8:	1c59      	adds	r1, r3, #1
 8012cea:	81b9      	strh	r1, [r7, #12]
 8012cec:	4619      	mov	r1, r3
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	440b      	add	r3, r1
 8012cf2:	7812      	ldrb	r2, [r2, #0]
 8012cf4:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8012cf6:	89fb      	ldrh	r3, [r7, #14]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	683a      	ldr	r2, [r7, #0]
 8012cfc:	441a      	add	r2, r3
 8012cfe:	89bb      	ldrh	r3, [r7, #12]
 8012d00:	1c59      	adds	r1, r3, #1
 8012d02:	81b9      	strh	r1, [r7, #12]
 8012d04:	4619      	mov	r1, r3
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	440b      	add	r3, r1
 8012d0a:	7812      	ldrb	r2, [r2, #0]
 8012d0c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012d0e:	89fb      	ldrh	r3, [r7, #14]
 8012d10:	3303      	adds	r3, #3
 8012d12:	81fb      	strh	r3, [r7, #14]
 8012d14:	89fa      	ldrh	r2, [r7, #14]
 8012d16:	897b      	ldrh	r3, [r7, #10]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d3cc      	bcc.n	8012cb6 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8012d1c:	2300      	movs	r3, #0
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
	...

08012d28 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8012d2c:	4814      	ldr	r0, [pc, #80]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d2e:	f7f3 f81f 	bl	8005d70 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8012d32:	4b13      	ldr	r3, [pc, #76]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d34:	4a13      	ldr	r2, [pc, #76]	; (8012d84 <sensirion_i2c_hal_init+0x5c>)
 8012d36:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8012d38:	4b11      	ldr	r3, [pc, #68]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d3a:	4a13      	ldr	r2, [pc, #76]	; (8012d88 <sensirion_i2c_hal_init+0x60>)
 8012d3c:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012d3e:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d40:	2200      	movs	r2, #0
 8012d42:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8012d44:	4b0e      	ldr	r3, [pc, #56]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012d4a:	4b0d      	ldr	r3, [pc, #52]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012d50:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012d52:	4b0b      	ldr	r3, [pc, #44]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d54:	2200      	movs	r2, #0
 8012d56:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8012d58:	4b09      	ldr	r3, [pc, #36]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012d5e:	4b08      	ldr	r3, [pc, #32]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d60:	2200      	movs	r2, #0
 8012d62:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012d64:	4b06      	ldr	r3, [pc, #24]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d66:	2200      	movs	r2, #0
 8012d68:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012d6a:	4805      	ldr	r0, [pc, #20]	; (8012d80 <sensirion_i2c_hal_init+0x58>)
 8012d6c:	f7f2 febc 	bl	8005ae8 <HAL_I2C_Init>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d001      	beq.n	8012d7a <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8012d76:	f7f0 f963 	bl	8003040 <Error_Handler>
	  }
}
 8012d7a:	bf00      	nop
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	20001770 	.word	0x20001770
 8012d84:	40005400 	.word	0x40005400
 8012d88:	00061a80 	.word	0x00061a80

08012d8c <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8012d90:	4803      	ldr	r0, [pc, #12]	; (8012da0 <sensirion_i2c_hal_free+0x14>)
 8012d92:	f7f2 ffed 	bl	8005d70 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8012d96:	4802      	ldr	r0, [pc, #8]	; (8012da0 <sensirion_i2c_hal_free+0x14>)
 8012d98:	f7f0 fa2a 	bl	80031f0 <HAL_I2C_MspDeInit>
}
 8012d9c:	bf00      	nop
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20001770 	.word	0x20001770

08012da4 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af02      	add	r7, sp, #8
 8012daa:	4603      	mov	r3, r0
 8012dac:	6039      	str	r1, [r7, #0]
 8012dae:	71fb      	strb	r3, [r7, #7]
 8012db0:	4613      	mov	r3, r2
 8012db2:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012db4:	79fb      	ldrb	r3, [r7, #7]
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	b299      	uxth	r1, r3
 8012dbc:	88bb      	ldrh	r3, [r7, #4]
 8012dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc2:	9200      	str	r2, [sp, #0]
 8012dc4:	683a      	ldr	r2, [r7, #0]
 8012dc6:	4804      	ldr	r0, [pc, #16]	; (8012dd8 <sensirion_i2c_hal_read+0x34>)
 8012dc8:	f7f3 f900 	bl	8005fcc <HAL_I2C_Master_Receive>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	20001770 	.word	0x20001770

08012ddc <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af02      	add	r7, sp, #8
 8012de2:	4603      	mov	r3, r0
 8012de4:	6039      	str	r1, [r7, #0]
 8012de6:	71fb      	strb	r3, [r7, #7]
 8012de8:	4613      	mov	r3, r2
 8012dea:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012dec:	79fb      	ldrb	r3, [r7, #7]
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	005b      	lsls	r3, r3, #1
 8012df2:	b299      	uxth	r1, r3
 8012df4:	88bb      	ldrh	r3, [r7, #4]
 8012df6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dfa:	9200      	str	r2, [sp, #0]
 8012dfc:	683a      	ldr	r2, [r7, #0]
 8012dfe:	4804      	ldr	r0, [pc, #16]	; (8012e10 <sensirion_i2c_hal_write+0x34>)
 8012e00:	f7f2 ffe6 	bl	8005dd0 <HAL_I2C_Master_Transmit>
 8012e04:	4603      	mov	r3, r0
 8012e06:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	20001770 	.word	0x20001770

08012e14 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	4a05      	ldr	r2, [pc, #20]	; (8012e34 <sensirion_i2c_hal_sleep_usec+0x20>)
 8012e20:	fba2 2303 	umull	r2, r3, r2, r3
 8012e24:	099b      	lsrs	r3, r3, #6
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f0 fe54 	bl	8003ad4 <HAL_Delay>
}
 8012e2c:	bf00      	nop
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	10624dd3 	.word	0x10624dd3

08012e38 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8012e38:	b480      	push	{r7}
 8012e3a:	b083      	sub	sp, #12
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	061a      	lsls	r2, r3, #24
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	041b      	lsls	r3, r3, #16
 8012e4e:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	3302      	adds	r3, #2
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012e58:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	3203      	adds	r2, #3
 8012e5e:	7812      	ldrb	r2, [r2, #0]
 8012e60:	4313      	orrs	r3, r2
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	370c      	adds	r7, #12
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b084      	sub	sp, #16
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7ff ffde 	bl	8012e38 <sensirion_bytes_to_uint32_t>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	ee07 3a90 	vmov	s15, r3
}
 8012e86:	eeb0 0a67 	vmov.f32	s0, s15
 8012e8a:	3710      	adds	r7, #16
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	603a      	str	r2, [r7, #0]
 8012e9a:	71fb      	strb	r3, [r7, #7]
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8012ea0:	79fa      	ldrb	r2, [r7, #7]
 8012ea2:	79bb      	ldrb	r3, [r7, #6]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8012ea8:	e006      	b.n	8012eb8 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	1c5a      	adds	r2, r3, #1
 8012eae:	603a      	str	r2, [r7, #0]
 8012eb0:	781a      	ldrb	r2, [r3, #0]
 8012eb2:	79fb      	ldrb	r3, [r7, #7]
 8012eb4:	4413      	add	r3, r2
 8012eb6:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8012eb8:	79bb      	ldrb	r3, [r7, #6]
 8012eba:	1e5a      	subs	r2, r3, #1
 8012ebc:	71ba      	strb	r2, [r7, #6]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d1f3      	bne.n	8012eaa <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8012ec2:	79fb      	ldrb	r3, [r7, #7]
 8012ec4:	43db      	mvns	r3, r3
 8012ec6:	b2db      	uxtb	r3, r3
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	370c      	adds	r7, #12
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr

08012ed4 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8012ed4:	b480      	push	{r7}
 8012ed6:	b087      	sub	sp, #28
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	4603      	mov	r3, r0
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
 8012ee0:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8012ee6:	e026      	b.n	8012f36 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	1c5a      	adds	r2, r3, #1
 8012eec:	60ba      	str	r2, [r7, #8]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	757b      	strb	r3, [r7, #21]
        switch (c) {
 8012ef2:	7d7b      	ldrb	r3, [r7, #21]
 8012ef4:	2b7e      	cmp	r3, #126	; 0x7e
 8012ef6:	dc16      	bgt.n	8012f26 <sensirion_shdlc_stuff_data+0x52>
 8012ef8:	2b7d      	cmp	r3, #125	; 0x7d
 8012efa:	da03      	bge.n	8012f04 <sensirion_shdlc_stuff_data+0x30>
 8012efc:	2b11      	cmp	r3, #17
 8012efe:	d001      	beq.n	8012f04 <sensirion_shdlc_stuff_data+0x30>
 8012f00:	2b13      	cmp	r3, #19
 8012f02:	d110      	bne.n	8012f26 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	1c5a      	adds	r2, r3, #1
 8012f08:	607a      	str	r2, [r7, #4]
 8012f0a:	227d      	movs	r2, #125	; 0x7d
 8012f0c:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	1c5a      	adds	r2, r3, #1
 8012f12:	607a      	str	r2, [r7, #4]
 8012f14:	7d7a      	ldrb	r2, [r7, #21]
 8012f16:	f082 0220 	eor.w	r2, r2, #32
 8012f1a:	b2d2      	uxtb	r2, r2
 8012f1c:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8012f1e:	8afb      	ldrh	r3, [r7, #22]
 8012f20:	3302      	adds	r3, #2
 8012f22:	82fb      	strh	r3, [r7, #22]
                break;
 8012f24:	e007      	b.n	8012f36 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	1c5a      	adds	r2, r3, #1
 8012f2a:	607a      	str	r2, [r7, #4]
 8012f2c:	7d7a      	ldrb	r2, [r7, #21]
 8012f2e:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8012f30:	8afb      	ldrh	r3, [r7, #22]
 8012f32:	3301      	adds	r3, #1
 8012f34:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8012f36:	7bfb      	ldrb	r3, [r7, #15]
 8012f38:	1e5a      	subs	r2, r3, #1
 8012f3a:	73fa      	strb	r2, [r7, #15]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d1d3      	bne.n	8012ee8 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8012f40:	8afb      	ldrh	r3, [r7, #22]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	371c      	adds	r7, #28
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr

08012f4e <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8012f4e:	b480      	push	{r7}
 8012f50:	b083      	sub	sp, #12
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	4603      	mov	r3, r0
 8012f56:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8012f58:	79fb      	ldrb	r3, [r7, #7]
 8012f5a:	2b7d      	cmp	r3, #125	; 0x7d
 8012f5c:	bf0c      	ite	eq
 8012f5e:	2301      	moveq	r3, #1
 8012f60:	2300      	movne	r3, #0
 8012f62:	b2db      	uxtb	r3, r3
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	370c      	adds	r7, #12
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr

08012f70 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	4603      	mov	r3, r0
 8012f78:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8012f7a:	79fb      	ldrb	r3, [r7, #7]
 8012f7c:	2b5e      	cmp	r3, #94	; 0x5e
 8012f7e:	d010      	beq.n	8012fa2 <sensirion_shdlc_unstuff_byte+0x32>
 8012f80:	2b5e      	cmp	r3, #94	; 0x5e
 8012f82:	dc10      	bgt.n	8012fa6 <sensirion_shdlc_unstuff_byte+0x36>
 8012f84:	2b5d      	cmp	r3, #93	; 0x5d
 8012f86:	d00a      	beq.n	8012f9e <sensirion_shdlc_unstuff_byte+0x2e>
 8012f88:	2b5d      	cmp	r3, #93	; 0x5d
 8012f8a:	dc0c      	bgt.n	8012fa6 <sensirion_shdlc_unstuff_byte+0x36>
 8012f8c:	2b31      	cmp	r3, #49	; 0x31
 8012f8e:	d002      	beq.n	8012f96 <sensirion_shdlc_unstuff_byte+0x26>
 8012f90:	2b33      	cmp	r3, #51	; 0x33
 8012f92:	d002      	beq.n	8012f9a <sensirion_shdlc_unstuff_byte+0x2a>
 8012f94:	e007      	b.n	8012fa6 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8012f96:	2311      	movs	r3, #17
 8012f98:	e006      	b.n	8012fa8 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8012f9a:	2313      	movs	r3, #19
 8012f9c:	e004      	b.n	8012fa8 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8012f9e:	237d      	movs	r3, #125	; 0x7d
 8012fa0:	e002      	b.n	8012fa8 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8012fa2:	237e      	movs	r3, #126	; 0x7e
 8012fa4:	e000      	b.n	8012fa8 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8012fa6:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	370c      	adds	r7, #12
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr

08012fb4 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	603b      	str	r3, [r7, #0]
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	71fb      	strb	r3, [r7, #7]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	71bb      	strb	r3, [r7, #6]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8012fc8:	797a      	ldrb	r2, [r7, #5]
 8012fca:	79b9      	ldrb	r1, [r7, #6]
 8012fcc:	79f8      	ldrb	r0, [r7, #7]
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	f000 f818 	bl	8013004 <sensirion_shdlc_tx>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8012fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <sensirion_shdlc_xcv+0x32>
        return ret;
 8012fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012fe4:	e00a      	b.n	8012ffc <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8012fe6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012fea:	f000 fb07 	bl	80135fc <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 8012fee:	7e3b      	ldrb	r3, [r7, #24]
 8012ff0:	6a3a      	ldr	r2, [r7, #32]
 8012ff2:	69f9      	ldr	r1, [r7, #28]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f000 f8d7 	bl	80131a8 <sensirion_shdlc_rx>
 8012ffa:	4603      	mov	r3, r0
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3710      	adds	r7, #16
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8013004:	b590      	push	{r4, r7, lr}
 8013006:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 801300a:	af00      	add	r7, sp, #0
 801300c:	4604      	mov	r4, r0
 801300e:	4608      	mov	r0, r1
 8013010:	4611      	mov	r1, r2
 8013012:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8013016:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801301a:	6013      	str	r3, [r2, #0]
 801301c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013020:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8013024:	4622      	mov	r2, r4
 8013026:	701a      	strb	r2, [r3, #0]
 8013028:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801302c:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8013030:	4602      	mov	r2, r0
 8013032:	701a      	strb	r2, [r3, #0]
 8013034:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013038:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 801303c:	460a      	mov	r2, r1
 801303e:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8013040:	2300      	movs	r3, #0
 8013042:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8013046:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801304a:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 801304e:	781a      	ldrb	r2, [r3, #0]
 8013050:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013054:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	4413      	add	r3, r2
 801305c:	b2d8      	uxtb	r0, r3
 801305e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013062:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8013066:	7819      	ldrb	r1, [r3, #0]
 8013068:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801306c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	f7ff ff0d 	bl	8012e90 <sensirion_shdlc_crc>
 8013076:	4603      	mov	r3, r0
 8013078:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 801307c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013080:	1c5a      	adds	r2, r3, #1
 8013082:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8013086:	461a      	mov	r2, r3
 8013088:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801308c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8013090:	217e      	movs	r1, #126	; 0x7e
 8013092:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8013094:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013098:	f107 0208 	add.w	r2, r7, #8
 801309c:	441a      	add	r2, r3
 801309e:	1dfb      	adds	r3, r7, #7
 80130a0:	4619      	mov	r1, r3
 80130a2:	2001      	movs	r0, #1
 80130a4:	f7ff ff16 	bl	8012ed4 <sensirion_shdlc_stuff_data>
 80130a8:	4603      	mov	r3, r0
 80130aa:	461a      	mov	r2, r3
 80130ac:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80130b0:	4413      	add	r3, r2
 80130b2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 80130b6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80130ba:	f107 0208 	add.w	r2, r7, #8
 80130be:	441a      	add	r2, r3
 80130c0:	1dbb      	adds	r3, r7, #6
 80130c2:	4619      	mov	r1, r3
 80130c4:	2001      	movs	r0, #1
 80130c6:	f7ff ff05 	bl	8012ed4 <sensirion_shdlc_stuff_data>
 80130ca:	4603      	mov	r3, r0
 80130cc:	461a      	mov	r2, r3
 80130ce:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80130d2:	4413      	add	r3, r2
 80130d4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 80130d8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80130dc:	f107 0208 	add.w	r2, r7, #8
 80130e0:	441a      	add	r2, r3
 80130e2:	1d7b      	adds	r3, r7, #5
 80130e4:	4619      	mov	r1, r3
 80130e6:	2001      	movs	r0, #1
 80130e8:	f7ff fef4 	bl	8012ed4 <sensirion_shdlc_stuff_data>
 80130ec:	4603      	mov	r3, r0
 80130ee:	461a      	mov	r2, r3
 80130f0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80130f4:	4413      	add	r3, r2
 80130f6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 80130fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80130fe:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8013102:	7818      	ldrb	r0, [r3, #0]
 8013104:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013108:	f107 0208 	add.w	r2, r7, #8
 801310c:	441a      	add	r2, r3
 801310e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013112:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8013116:	6819      	ldr	r1, [r3, #0]
 8013118:	f7ff fedc 	bl	8012ed4 <sensirion_shdlc_stuff_data>
 801311c:	4603      	mov	r3, r0
 801311e:	461a      	mov	r2, r3
 8013120:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013124:	4413      	add	r3, r2
 8013126:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 801312a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801312e:	f107 0208 	add.w	r2, r7, #8
 8013132:	441a      	add	r2, r3
 8013134:	f207 2313 	addw	r3, r7, #531	; 0x213
 8013138:	4619      	mov	r1, r3
 801313a:	2001      	movs	r0, #1
 801313c:	f7ff feca 	bl	8012ed4 <sensirion_shdlc_stuff_data>
 8013140:	4603      	mov	r3, r0
 8013142:	461a      	mov	r2, r3
 8013144:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013148:	4413      	add	r3, r2
 801314a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 801314e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013152:	1c5a      	adds	r2, r3, #1
 8013154:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8013158:	461a      	mov	r2, r3
 801315a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801315e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8013162:	217e      	movs	r1, #126	; 0x7e
 8013164:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8013166:	f107 0208 	add.w	r2, r7, #8
 801316a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801316e:	4611      	mov	r1, r2
 8013170:	4618      	mov	r0, r3
 8013172:	f000 f9db 	bl	801352c <sensirion_uart_tx>
 8013176:	4603      	mov	r3, r0
 8013178:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 801317c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8013180:	2b00      	cmp	r3, #0
 8013182:	da02      	bge.n	801318a <sensirion_shdlc_tx+0x186>
        return ret;
 8013184:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8013188:	e009      	b.n	801319e <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 801318a:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 801318e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013192:	429a      	cmp	r2, r3
 8013194:	d002      	beq.n	801319c <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8013196:	f06f 0305 	mvn.w	r3, #5
 801319a:	e000      	b.n	801319e <sensirion_shdlc_tx+0x19a>
    return 0;
 801319c:	2300      	movs	r3, #0
}
 801319e:	4618      	mov	r0, r3
 80131a0:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd90      	pop	{r4, r7, pc}

080131a8 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 80131a8:	b590      	push	{r4, r7, lr}
 80131aa:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80131b4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80131b8:	6019      	str	r1, [r3, #0]
 80131ba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80131be:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80131c2:	601a      	str	r2, [r3, #0]
 80131c4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80131c8:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80131cc:	4602      	mov	r2, r0
 80131ce:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 80131d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80131d4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 80131de:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80131e2:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	3306      	adds	r3, #6
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	f107 0210 	add.w	r2, r7, #16
 80131f4:	4611      	mov	r1, r2
 80131f6:	4618      	mov	r0, r3
 80131f8:	f000 f9d2 	bl	80135a0 <sensirion_uart_rx>
 80131fc:	4603      	mov	r3, r0
 80131fe:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8013202:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8013206:	2b00      	cmp	r3, #0
 8013208:	dd03      	ble.n	8013212 <sensirion_shdlc_rx+0x6a>
 801320a:	4ba0      	ldr	r3, [pc, #640]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	2b7e      	cmp	r3, #126	; 0x7e
 8013210:	d002      	beq.n	8013218 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8013212:	f06f 0301 	mvn.w	r3, #1
 8013216:	e133      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013218:	2300      	movs	r3, #0
 801321a:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 801321e:	2301      	movs	r3, #1
 8013220:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8013224:	2300      	movs	r3, #0
 8013226:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 801322a:	e03a      	b.n	80132a2 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 801322c:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013230:	2b00      	cmp	r3, #0
 8013232:	d015      	beq.n	8013260 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013234:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013238:	4a94      	ldr	r2, [pc, #592]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 801323a:	5cd2      	ldrb	r2, [r2, r3]
 801323c:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013240:	1c59      	adds	r1, r3, #1
 8013242:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013246:	4619      	mov	r1, r3
 8013248:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801324c:	185c      	adds	r4, r3, r1
 801324e:	4610      	mov	r0, r2
 8013250:	f7ff fe8e 	bl	8012f70 <sensirion_shdlc_unstuff_byte>
 8013254:	4603      	mov	r3, r0
 8013256:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 801325e:	e01b      	b.n	8013298 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013260:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013264:	4a89      	ldr	r2, [pc, #548]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 8013266:	5cd3      	ldrb	r3, [r2, r3]
 8013268:	4618      	mov	r0, r3
 801326a:	f7ff fe70 	bl	8012f4e <sensirion_shdlc_check_unstuff>
 801326e:	4603      	mov	r3, r0
 8013270:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8013274:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013278:	2b00      	cmp	r3, #0
 801327a:	d10d      	bne.n	8013298 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 801327c:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013280:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013284:	1c59      	adds	r1, r3, #1
 8013286:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 801328a:	4619      	mov	r1, r3
 801328c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013290:	440b      	add	r3, r1
 8013292:	497e      	ldr	r1, [pc, #504]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 8013294:	5c8a      	ldrb	r2, [r1, r2]
 8013296:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013298:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 801329c:	3301      	adds	r3, #1
 801329e:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 80132a2:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80132a6:	2b03      	cmp	r3, #3
 80132a8:	d806      	bhi.n	80132b8 <sensirion_shdlc_rx+0x110>
 80132aa:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 80132ae:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80132b2:	3b02      	subs	r3, #2
 80132b4:	429a      	cmp	r2, r3
 80132b6:	dbb9      	blt.n	801322c <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 80132b8:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80132bc:	2b04      	cmp	r3, #4
 80132be:	d103      	bne.n	80132c8 <sensirion_shdlc_rx+0x120>
 80132c0:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80132c8:	f06f 0304 	mvn.w	r3, #4
 80132cc:	e0d8      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 80132ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80132d2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	78db      	ldrb	r3, [r3, #3]
 80132da:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80132de:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 80132e2:	7812      	ldrb	r2, [r2, #0]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d202      	bcs.n	80132ee <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80132e8:	f06f 0306 	mvn.w	r3, #6
 80132ec:	e0c8      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80132ee:	2300      	movs	r3, #0
 80132f0:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80132f4:	2300      	movs	r3, #0
 80132f6:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 80132fa:	e040      	b.n	801337e <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 80132fc:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013300:	2b00      	cmp	r3, #0
 8013302:	d018      	beq.n	8013336 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013304:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013308:	4a60      	ldr	r2, [pc, #384]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 801330a:	5cd2      	ldrb	r2, [r2, r3]
 801330c:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013310:	1c59      	adds	r1, r3, #1
 8013312:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013316:	4619      	mov	r1, r3
 8013318:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801331c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	185c      	adds	r4, r3, r1
 8013324:	4610      	mov	r0, r2
 8013326:	f7ff fe23 	bl	8012f70 <sensirion_shdlc_unstuff_byte>
 801332a:	4603      	mov	r3, r0
 801332c:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 801332e:	2300      	movs	r3, #0
 8013330:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8013334:	e01e      	b.n	8013374 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013336:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 801333a:	4a54      	ldr	r2, [pc, #336]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 801333c:	5cd3      	ldrb	r3, [r2, r3]
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff fe05 	bl	8012f4e <sensirion_shdlc_check_unstuff>
 8013344:	4603      	mov	r3, r0
 8013346:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 801334a:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 801334e:	2b00      	cmp	r3, #0
 8013350:	d110      	bne.n	8013374 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8013352:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013356:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 801335a:	1c59      	adds	r1, r3, #1
 801335c:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013360:	4619      	mov	r1, r3
 8013362:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013366:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	440b      	add	r3, r1
 801336e:	4947      	ldr	r1, [pc, #284]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 8013370:	5c8a      	ldrb	r2, [r1, r2]
 8013372:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8013374:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013378:	3301      	adds	r3, #1
 801337a:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 801337e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013382:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	78db      	ldrb	r3, [r3, #3]
 801338a:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 801338e:	429a      	cmp	r2, r3
 8013390:	d206      	bcs.n	80133a0 <sensirion_shdlc_rx+0x1f8>
 8013392:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013396:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 801339a:	3b02      	subs	r3, #2
 801339c:	429a      	cmp	r2, r3
 801339e:	dbad      	blt.n	80132fc <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 80133a0:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d002      	beq.n	80133ae <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80133a8:	f06f 0304 	mvn.w	r3, #4
 80133ac:	e068      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 80133ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80133b2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	78db      	ldrb	r3, [r3, #3]
 80133ba:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 80133be:	429a      	cmp	r2, r3
 80133c0:	d202      	bcs.n	80133c8 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80133c2:	f06f 0304 	mvn.w	r3, #4
 80133c6:	e05b      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 80133c8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80133cc:	1c5a      	adds	r2, r3, #1
 80133ce:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 80133d2:	461a      	mov	r2, r3
 80133d4:	4b2d      	ldr	r3, [pc, #180]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 80133d6:	5c9b      	ldrb	r3, [r3, r2]
 80133d8:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 80133dc:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7ff fdb4 	bl	8012f4e <sensirion_shdlc_check_unstuff>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00d      	beq.n	8013408 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 80133ec:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80133f0:	1c5a      	adds	r2, r3, #1
 80133f2:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 80133f6:	461a      	mov	r2, r3
 80133f8:	4b24      	ldr	r3, [pc, #144]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 80133fa:	5c9b      	ldrb	r3, [r3, r2]
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7ff fdb7 	bl	8012f70 <sensirion_shdlc_unstuff_byte>
 8013402:	4603      	mov	r3, r0
 8013404:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8013408:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801340c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	781a      	ldrb	r2, [r3, #0]
 8013414:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013418:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	785b      	ldrb	r3, [r3, #1]
 8013420:	4413      	add	r3, r2
 8013422:	b2da      	uxtb	r2, r3
 8013424:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013428:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	789b      	ldrb	r3, [r3, #2]
 8013430:	4413      	add	r3, r2
 8013432:	b2d8      	uxtb	r0, r3
 8013434:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013438:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	78d9      	ldrb	r1, [r3, #3]
 8013440:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013444:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	f7ff fd21 	bl	8012e90 <sensirion_shdlc_crc>
 801344e:	4603      	mov	r3, r0
 8013450:	461a      	mov	r2, r3
 8013452:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8013456:	4293      	cmp	r3, r2
 8013458:	d002      	beq.n	8013460 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 801345a:	f06f 0303 	mvn.w	r3, #3
 801345e:	e00f      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8013460:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013464:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8013468:	429a      	cmp	r2, r3
 801346a:	da05      	bge.n	8013478 <sensirion_shdlc_rx+0x2d0>
 801346c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013470:	4a06      	ldr	r2, [pc, #24]	; (801348c <sensirion_shdlc_rx+0x2e4>)
 8013472:	5cd3      	ldrb	r3, [r2, r3]
 8013474:	2b7e      	cmp	r3, #126	; 0x7e
 8013476:	d002      	beq.n	801347e <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8013478:	f06f 0302 	mvn.w	r3, #2
 801347c:	e000      	b.n	8013480 <sensirion_shdlc_rx+0x2d8>

    return 0;
 801347e:	2300      	movs	r3, #0
}
 8013480:	4618      	mov	r0, r3
 8013482:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8013486:	46bd      	mov	sp, r7
 8013488:	bd90      	pop	{r4, r7, pc}
 801348a:	bf00      	nop
 801348c:	200014c4 	.word	0x200014c4

08013490 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8013490:	b580      	push	{r7, lr}
 8013492:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8013494:	4819      	ldr	r0, [pc, #100]	; (80134fc <sensirion_uart_open+0x6c>)
 8013496:	f7f8 f99a 	bl	800b7ce <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 801349a:	4b18      	ldr	r3, [pc, #96]	; (80134fc <sensirion_uart_open+0x6c>)
 801349c:	4a18      	ldr	r2, [pc, #96]	; (8013500 <sensirion_uart_open+0x70>)
 801349e:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80134a0:	4b16      	ldr	r3, [pc, #88]	; (80134fc <sensirion_uart_open+0x6c>)
 80134a2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80134a6:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80134a8:	4b14      	ldr	r3, [pc, #80]	; (80134fc <sensirion_uart_open+0x6c>)
 80134aa:	2200      	movs	r2, #0
 80134ac:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80134ae:	4b13      	ldr	r3, [pc, #76]	; (80134fc <sensirion_uart_open+0x6c>)
 80134b0:	2200      	movs	r2, #0
 80134b2:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 80134b4:	4b11      	ldr	r3, [pc, #68]	; (80134fc <sensirion_uart_open+0x6c>)
 80134b6:	2200      	movs	r2, #0
 80134b8:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 80134ba:	4b10      	ldr	r3, [pc, #64]	; (80134fc <sensirion_uart_open+0x6c>)
 80134bc:	220c      	movs	r2, #12
 80134be:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80134c0:	4b0e      	ldr	r3, [pc, #56]	; (80134fc <sensirion_uart_open+0x6c>)
 80134c2:	2200      	movs	r2, #0
 80134c4:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80134c6:	4b0d      	ldr	r3, [pc, #52]	; (80134fc <sensirion_uart_open+0x6c>)
 80134c8:	2200      	movs	r2, #0
 80134ca:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 80134cc:	480b      	ldr	r0, [pc, #44]	; (80134fc <sensirion_uart_open+0x6c>)
 80134ce:	f7f8 f931 	bl	800b734 <HAL_UART_Init>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d001      	beq.n	80134dc <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 80134d8:	f7ef fdb2 	bl	8003040 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 80134dc:	f240 220a 	movw	r2, #522	; 0x20a
 80134e0:	4908      	ldr	r1, [pc, #32]	; (8013504 <sensirion_uart_open+0x74>)
 80134e2:	4806      	ldr	r0, [pc, #24]	; (80134fc <sensirion_uart_open+0x6c>)
 80134e4:	f7f8 fa64 	bl	800b9b0 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 80134e8:	4b07      	ldr	r3, [pc, #28]	; (8013508 <sensirion_uart_open+0x78>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 80134ee:	4b07      	ldr	r3, [pc, #28]	; (801350c <sensirion_uart_open+0x7c>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 80134f4:	2300      	movs	r3, #0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	200019e4 	.word	0x200019e4
 8013500:	40004400 	.word	0x40004400
 8013504:	200014c4 	.word	0x200014c4
 8013508:	20001a80 	.word	0x20001a80
 801350c:	20001a82 	.word	0x20001a82

08013510 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8013510:	b580      	push	{r7, lr}
 8013512:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8013514:	4804      	ldr	r0, [pc, #16]	; (8013528 <sensirion_uart_close+0x18>)
 8013516:	f7f8 f95a 	bl	800b7ce <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 801351a:	4803      	ldr	r0, [pc, #12]	; (8013528 <sensirion_uart_close+0x18>)
 801351c:	f7f0 f8b0 	bl	8003680 <HAL_UART_MspDeInit>
    return 0;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	200019e4 	.word	0x200019e4

0801352c <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	4603      	mov	r3, r0
 8013534:	6039      	str	r1, [r7, #0]
 8013536:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013538:	88fa      	ldrh	r2, [r7, #6]
 801353a:	f04f 33ff 	mov.w	r3, #4294967295
 801353e:	6839      	ldr	r1, [r7, #0]
 8013540:	4807      	ldr	r0, [pc, #28]	; (8013560 <sensirion_uart_tx+0x34>)
 8013542:	f7f8 f973 	bl	800b82c <HAL_UART_Transmit>
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d102      	bne.n	8013552 <sensirion_uart_tx+0x26>
		{
			return data_len;
 801354c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013550:	e001      	b.n	8013556 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8013552:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8013556:	4618      	mov	r0, r3
 8013558:	3708      	adds	r7, #8
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	200019e4 	.word	0x200019e4

08013564 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013570:	4a07      	ldr	r2, [pc, #28]	; (8013590 <HAL_UARTEx_RxEventCallback+0x2c>)
 8013572:	887b      	ldrh	r3, [r7, #2]
 8013574:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8013576:	4b07      	ldr	r3, [pc, #28]	; (8013594 <HAL_UARTEx_RxEventCallback+0x30>)
 8013578:	2201      	movs	r2, #1
 801357a:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 801357c:	f240 220a 	movw	r2, #522	; 0x20a
 8013580:	4905      	ldr	r1, [pc, #20]	; (8013598 <HAL_UARTEx_RxEventCallback+0x34>)
 8013582:	4806      	ldr	r0, [pc, #24]	; (801359c <HAL_UARTEx_RxEventCallback+0x38>)
 8013584:	f7f8 fa14 	bl	800b9b0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013588:	bf00      	nop
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	20001a80 	.word	0x20001a80
 8013594:	20001a84 	.word	0x20001a84
 8013598:	200014c4 	.word	0x200014c4
 801359c:	200019e4 	.word	0x200019e4

080135a0 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	6039      	str	r1, [r7, #0]
 80135aa:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 80135b0:	e005      	b.n	80135be <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	3301      	adds	r3, #1
 80135b6:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 80135b8:	200a      	movs	r0, #10
 80135ba:	f7f0 fa8b 	bl	8003ad4 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 80135be:	4b0b      	ldr	r3, [pc, #44]	; (80135ec <sensirion_uart_rx+0x4c>)
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d102      	bne.n	80135cc <sensirion_uart_rx+0x2c>
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d9f2      	bls.n	80135b2 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 80135cc:	4b07      	ldr	r3, [pc, #28]	; (80135ec <sensirion_uart_rx+0x4c>)
 80135ce:	2200      	movs	r2, #0
 80135d0:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 80135d2:	4b07      	ldr	r3, [pc, #28]	; (80135f0 <sensirion_uart_rx+0x50>)
 80135d4:	2200      	movs	r2, #0
 80135d6:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 80135d8:	4b06      	ldr	r3, [pc, #24]	; (80135f4 <sensirion_uart_rx+0x54>)
 80135da:	2200      	movs	r2, #0
 80135dc:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 80135de:	4b06      	ldr	r3, [pc, #24]	; (80135f8 <sensirion_uart_rx+0x58>)
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	b21b      	sxth	r3, r3
	//return i;
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	20001a84 	.word	0x20001a84
 80135f0:	20001a86 	.word	0x20001a86
 80135f4:	20001a82 	.word	0x20001a82
 80135f8:	20001a80 	.word	0x20001a80

080135fc <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	4a06      	ldr	r2, [pc, #24]	; (8013620 <sensirion_sleep_usec+0x24>)
 8013608:	fba2 2303 	umull	r2, r3, r2, r3
 801360c:	099b      	lsrs	r3, r3, #6
 801360e:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f7f0 fa5f 	bl	8003ad4 <HAL_Delay>
}
 8013616:	bf00      	nop
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	10624dd3 	.word	0x10624dd3

08013624 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8013624:	b580      	push	{r7, lr}
 8013626:	b08a      	sub	sp, #40	; 0x28
 8013628:	af04      	add	r7, sp, #16
 801362a:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 801362c:	2303      	movs	r3, #3
 801362e:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8013630:	f107 020c 	add.w	r2, r7, #12
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	9302      	str	r3, [sp, #8]
 8013638:	f107 0310 	add.w	r3, r7, #16
 801363c:	9301      	str	r3, [sp, #4]
 801363e:	2320      	movs	r3, #32
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	4613      	mov	r3, r2
 8013644:	2201      	movs	r2, #1
 8013646:	21d0      	movs	r1, #208	; 0xd0
 8013648:	2000      	movs	r0, #0
 801364a:	f7ff fcb3 	bl	8012fb4 <sensirion_shdlc_xcv>
 801364e:	4603      	mov	r3, r0
 8013650:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8013652:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013656:	2b00      	cmp	r3, #0
 8013658:	da02      	bge.n	8013660 <sps30_get_serial+0x3c>
        return ret;
 801365a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801365e:	e009      	b.n	8013674 <sps30_get_serial+0x50>

    if (header.state)
 8013660:	7cbb      	ldrb	r3, [r7, #18]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d005      	beq.n	8013672 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8013666:	7cbb      	ldrb	r3, [r7, #18]
 8013668:	b21b      	sxth	r3, r3
 801366a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801366e:	b21b      	sxth	r3, r3
 8013670:	e000      	b.n	8013674 <sps30_get_serial+0x50>

    return 0;
 8013672:	2300      	movs	r3, #0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3718      	adds	r7, #24
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8013682:	f240 3301 	movw	r3, #769	; 0x301
 8013686:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8013688:	463a      	mov	r2, r7
 801368a:	2300      	movs	r3, #0
 801368c:	9302      	str	r3, [sp, #8]
 801368e:	1d3b      	adds	r3, r7, #4
 8013690:	9301      	str	r3, [sp, #4]
 8013692:	2300      	movs	r3, #0
 8013694:	9300      	str	r3, [sp, #0]
 8013696:	4613      	mov	r3, r2
 8013698:	2202      	movs	r2, #2
 801369a:	2100      	movs	r1, #0
 801369c:	2000      	movs	r0, #0
 801369e:	f7ff fc89 	bl	8012fb4 <sensirion_shdlc_xcv>
 80136a2:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3708      	adds	r7, #8
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b086      	sub	sp, #24
 80136b0:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 80136b2:	2300      	movs	r3, #0
 80136b4:	9302      	str	r3, [sp, #8]
 80136b6:	1d3b      	adds	r3, r7, #4
 80136b8:	9301      	str	r3, [sp, #4]
 80136ba:	2300      	movs	r3, #0
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	2300      	movs	r3, #0
 80136c0:	2200      	movs	r2, #0
 80136c2:	2101      	movs	r1, #1
 80136c4:	2000      	movs	r0, #0
 80136c6:	f7ff fc75 	bl	8012fb4 <sensirion_shdlc_xcv>
 80136ca:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b092      	sub	sp, #72	; 0x48
 80136d8:	af04      	add	r7, sp, #16
 80136da:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 80136dc:	f107 0308 	add.w	r3, r7, #8
 80136e0:	9302      	str	r3, [sp, #8]
 80136e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80136e6:	9301      	str	r3, [sp, #4]
 80136e8:	2328      	movs	r3, #40	; 0x28
 80136ea:	9300      	str	r3, [sp, #0]
 80136ec:	2300      	movs	r3, #0
 80136ee:	2200      	movs	r2, #0
 80136f0:	2103      	movs	r1, #3
 80136f2:	2000      	movs	r0, #0
 80136f4:	f7ff fc5e 	bl	8012fb4 <sensirion_shdlc_xcv>
 80136f8:	4603      	mov	r3, r0
 80136fa:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 80136fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013700:	2b00      	cmp	r3, #0
 8013702:	d002      	beq.n	801370a <sps30_read_measurement+0x36>
        return error;
 8013704:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013708:	e07f      	b.n	801380a <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 801370a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801370e:	2b28      	cmp	r3, #40	; 0x28
 8013710:	d002      	beq.n	8013718 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013712:	f04f 33ff 	mov.w	r3, #4294967295
 8013716:	e078      	b.n	801380a <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8013718:	f107 0308 	add.w	r3, r7, #8
 801371c:	4618      	mov	r0, r3
 801371e:	f7ff fba6 	bl	8012e6e <sensirion_bytes_to_float>
 8013722:	eef0 7a40 	vmov.f32	s15, s0
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 801372c:	f107 0308 	add.w	r3, r7, #8
 8013730:	3304      	adds	r3, #4
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff fb9b 	bl	8012e6e <sensirion_bytes_to_float>
 8013738:	eef0 7a40 	vmov.f32	s15, s0
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8013742:	f107 0308 	add.w	r3, r7, #8
 8013746:	3308      	adds	r3, #8
 8013748:	4618      	mov	r0, r3
 801374a:	f7ff fb90 	bl	8012e6e <sensirion_bytes_to_float>
 801374e:	eef0 7a40 	vmov.f32	s15, s0
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8013758:	f107 0308 	add.w	r3, r7, #8
 801375c:	330c      	adds	r3, #12
 801375e:	4618      	mov	r0, r3
 8013760:	f7ff fb85 	bl	8012e6e <sensirion_bytes_to_float>
 8013764:	eef0 7a40 	vmov.f32	s15, s0
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 801376e:	f107 0308 	add.w	r3, r7, #8
 8013772:	3310      	adds	r3, #16
 8013774:	4618      	mov	r0, r3
 8013776:	f7ff fb7a 	bl	8012e6e <sensirion_bytes_to_float>
 801377a:	eef0 7a40 	vmov.f32	s15, s0
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8013784:	f107 0308 	add.w	r3, r7, #8
 8013788:	3314      	adds	r3, #20
 801378a:	4618      	mov	r0, r3
 801378c:	f7ff fb6f 	bl	8012e6e <sensirion_bytes_to_float>
 8013790:	eef0 7a40 	vmov.f32	s15, s0
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 801379a:	f107 0308 	add.w	r3, r7, #8
 801379e:	3318      	adds	r3, #24
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7ff fb64 	bl	8012e6e <sensirion_bytes_to_float>
 80137a6:	eef0 7a40 	vmov.f32	s15, s0
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 80137b0:	f107 0308 	add.w	r3, r7, #8
 80137b4:	331c      	adds	r3, #28
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff fb59 	bl	8012e6e <sensirion_bytes_to_float>
 80137bc:	eef0 7a40 	vmov.f32	s15, s0
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 80137c6:	f107 0308 	add.w	r3, r7, #8
 80137ca:	3320      	adds	r3, #32
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff fb4e 	bl	8012e6e <sensirion_bytes_to_float>
 80137d2:	eef0 7a40 	vmov.f32	s15, s0
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 80137dc:	f107 0308 	add.w	r3, r7, #8
 80137e0:	3324      	adds	r3, #36	; 0x24
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff fb43 	bl	8012e6e <sensirion_bytes_to_float>
 80137e8:	eef0 7a40 	vmov.f32	s15, s0
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 80137f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d006      	beq.n	8013808 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 80137fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80137fe:	b21b      	sxth	r3, r3
 8013800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013804:	b21b      	sxth	r3, r3
 8013806:	e000      	b.n	801380a <sps30_read_measurement+0x136>
    }

    return 0;
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	3738      	adds	r7, #56	; 0x38
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8013812:	b580      	push	{r7, lr}
 8013814:	b086      	sub	sp, #24
 8013816:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8013818:	2300      	movs	r3, #0
 801381a:	9302      	str	r3, [sp, #8]
 801381c:	1d3b      	adds	r3, r7, #4
 801381e:	9301      	str	r3, [sp, #4]
 8013820:	2300      	movs	r3, #0
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	2300      	movs	r3, #0
 8013826:	2200      	movs	r2, #0
 8013828:	2156      	movs	r1, #86	; 0x56
 801382a:	2000      	movs	r0, #0
 801382c:	f7ff fbc2 	bl	8012fb4 <sensirion_shdlc_xcv>
 8013830:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013832:	4618      	mov	r0, r3
 8013834:	3708      	adds	r7, #8
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 801383a:	b580      	push	{r7, lr}
 801383c:	b08a      	sub	sp, #40	; 0x28
 801383e:	af04      	add	r7, sp, #16
 8013840:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8013842:	f107 0308 	add.w	r3, r7, #8
 8013846:	9302      	str	r3, [sp, #8]
 8013848:	f107 0310 	add.w	r3, r7, #16
 801384c:	9301      	str	r3, [sp, #4]
 801384e:	2307      	movs	r3, #7
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	2300      	movs	r3, #0
 8013854:	2200      	movs	r2, #0
 8013856:	21d1      	movs	r1, #209	; 0xd1
 8013858:	2000      	movs	r0, #0
 801385a:	f7ff fbab 	bl	8012fb4 <sensirion_shdlc_xcv>
 801385e:	4603      	mov	r3, r0
 8013860:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8013862:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d002      	beq.n	8013870 <sps30_read_version+0x36>
        return error;
 801386a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801386e:	e01f      	b.n	80138b0 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8013870:	7cfb      	ldrb	r3, [r7, #19]
 8013872:	2b07      	cmp	r3, #7
 8013874:	d002      	beq.n	801387c <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013876:	f04f 33ff 	mov.w	r3, #4294967295
 801387a:	e019      	b.n	80138b0 <sps30_read_version+0x76>
    }

    if (header.state) {
 801387c:	7cbb      	ldrb	r3, [r7, #18]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d005      	beq.n	801388e <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8013882:	7cbb      	ldrb	r3, [r7, #18]
 8013884:	b21b      	sxth	r3, r3
 8013886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801388a:	b21b      	sxth	r3, r3
 801388c:	e010      	b.n	80138b0 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 801388e:	7a3a      	ldrb	r2, [r7, #8]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8013894:	7a7a      	ldrb	r2, [r7, #9]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 801389a:	7afa      	ldrb	r2, [r7, #11]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 80138a0:	7b7a      	ldrb	r2, [r7, #13]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 80138a6:	7bba      	ldrb	r2, [r7, #14]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	711a      	strb	r2, [r3, #4]

    return error;
 80138ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	460b      	mov	r3, r1
 80138c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80138c4:	f640 0074 	movw	r0, #2164	; 0x874
 80138c8:	f007 fd14 	bl	801b2f4 <USBD_static_malloc>
 80138cc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d109      	bne.n	80138e8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	32b0      	adds	r2, #176	; 0xb0
 80138de:	2100      	movs	r1, #0
 80138e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80138e4:	2302      	movs	r3, #2
 80138e6:	e06e      	b.n	80139c6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	32b0      	adds	r2, #176	; 0xb0
 80138f2:	68f9      	ldr	r1, [r7, #12]
 80138f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	32b0      	adds	r2, #176	; 0xb0
 8013902:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	7c1b      	ldrb	r3, [r3, #16]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d12b      	bne.n	801396c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013914:	4b2e      	ldr	r3, [pc, #184]	; (80139d0 <USBD_MSC_Init+0x118>)
 8013916:	7819      	ldrb	r1, [r3, #0]
 8013918:	f44f 7300 	mov.w	r3, #512	; 0x200
 801391c:	2202      	movs	r2, #2
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f007 fba5 	bl	801b06e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8013924:	4b2a      	ldr	r3, [pc, #168]	; (80139d0 <USBD_MSC_Init+0x118>)
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	f003 020f 	and.w	r2, r3, #15
 801392c:	6879      	ldr	r1, [r7, #4]
 801392e:	4613      	mov	r3, r2
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	4413      	add	r3, r2
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	440b      	add	r3, r1
 8013938:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801393c:	2201      	movs	r2, #1
 801393e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013940:	4b24      	ldr	r3, [pc, #144]	; (80139d4 <USBD_MSC_Init+0x11c>)
 8013942:	7819      	ldrb	r1, [r3, #0]
 8013944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013948:	2202      	movs	r2, #2
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f007 fb8f 	bl	801b06e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013950:	4b20      	ldr	r3, [pc, #128]	; (80139d4 <USBD_MSC_Init+0x11c>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	f003 020f 	and.w	r2, r3, #15
 8013958:	6879      	ldr	r1, [r7, #4]
 801395a:	4613      	mov	r3, r2
 801395c:	009b      	lsls	r3, r3, #2
 801395e:	4413      	add	r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	440b      	add	r3, r1
 8013964:	3324      	adds	r3, #36	; 0x24
 8013966:	2201      	movs	r2, #1
 8013968:	801a      	strh	r2, [r3, #0]
 801396a:	e028      	b.n	80139be <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801396c:	4b18      	ldr	r3, [pc, #96]	; (80139d0 <USBD_MSC_Init+0x118>)
 801396e:	7819      	ldrb	r1, [r3, #0]
 8013970:	2340      	movs	r3, #64	; 0x40
 8013972:	2202      	movs	r2, #2
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f007 fb7a 	bl	801b06e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801397a:	4b15      	ldr	r3, [pc, #84]	; (80139d0 <USBD_MSC_Init+0x118>)
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	f003 020f 	and.w	r2, r3, #15
 8013982:	6879      	ldr	r1, [r7, #4]
 8013984:	4613      	mov	r3, r2
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	4413      	add	r3, r2
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	440b      	add	r3, r1
 801398e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013992:	2201      	movs	r2, #1
 8013994:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013996:	4b0f      	ldr	r3, [pc, #60]	; (80139d4 <USBD_MSC_Init+0x11c>)
 8013998:	7819      	ldrb	r1, [r3, #0]
 801399a:	2340      	movs	r3, #64	; 0x40
 801399c:	2202      	movs	r2, #2
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f007 fb65 	bl	801b06e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80139a4:	4b0b      	ldr	r3, [pc, #44]	; (80139d4 <USBD_MSC_Init+0x11c>)
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	f003 020f 	and.w	r2, r3, #15
 80139ac:	6879      	ldr	r1, [r7, #4]
 80139ae:	4613      	mov	r3, r2
 80139b0:	009b      	lsls	r3, r3, #2
 80139b2:	4413      	add	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	440b      	add	r3, r1
 80139b8:	3324      	adds	r3, #36	; 0x24
 80139ba:	2201      	movs	r2, #1
 80139bc:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f000 fa2c 	bl	8013e1c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	2000008f 	.word	0x2000008f
 80139d4:	2000008e 	.word	0x2000008e

080139d8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	460b      	mov	r3, r1
 80139e2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80139e4:	4b26      	ldr	r3, [pc, #152]	; (8013a80 <USBD_MSC_DeInit+0xa8>)
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	4619      	mov	r1, r3
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f007 fb65 	bl	801b0ba <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80139f0:	4b23      	ldr	r3, [pc, #140]	; (8013a80 <USBD_MSC_DeInit+0xa8>)
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	f003 020f 	and.w	r2, r3, #15
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	4613      	mov	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	4413      	add	r3, r2
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	440b      	add	r3, r1
 8013a04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013a08:	2200      	movs	r2, #0
 8013a0a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8013a0c:	4b1d      	ldr	r3, [pc, #116]	; (8013a84 <USBD_MSC_DeInit+0xac>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	4619      	mov	r1, r3
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f007 fb51 	bl	801b0ba <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8013a18:	4b1a      	ldr	r3, [pc, #104]	; (8013a84 <USBD_MSC_DeInit+0xac>)
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	f003 020f 	and.w	r2, r3, #15
 8013a20:	6879      	ldr	r1, [r7, #4]
 8013a22:	4613      	mov	r3, r2
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	4413      	add	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	440b      	add	r3, r1
 8013a2c:	3324      	adds	r3, #36	; 0x24
 8013a2e:	2200      	movs	r2, #0
 8013a30:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	32b0      	adds	r2, #176	; 0xb0
 8013a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d018      	beq.n	8013a76 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f000 fa67 	bl	8013f18 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	32b0      	adds	r2, #176	; 0xb0
 8013a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f007 fc59 	bl	801b310 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	32b0      	adds	r2, #176	; 0xb0
 8013a68:	2100      	movs	r1, #0
 8013a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013a76:	2300      	movs	r3, #0
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	2000008f 	.word	0x2000008f
 8013a84:	2000008e 	.word	0x2000008e

08013a88 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b086      	sub	sp, #24
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	32b0      	adds	r2, #176	; 0xb0
 8013a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aa0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d101      	bne.n	8013ab4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013ab0:	2303      	movs	r3, #3
 8013ab2:	e0e1      	b.n	8013c78 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d053      	beq.n	8013b68 <USBD_MSC_Setup+0xe0>
 8013ac0:	2b20      	cmp	r3, #32
 8013ac2:	f040 80d1 	bne.w	8013c68 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	785b      	ldrb	r3, [r3, #1]
 8013aca:	2bfe      	cmp	r3, #254	; 0xfe
 8013acc:	d002      	beq.n	8013ad4 <USBD_MSC_Setup+0x4c>
 8013ace:	2bff      	cmp	r3, #255	; 0xff
 8013ad0:	d02a      	beq.n	8013b28 <USBD_MSC_Setup+0xa0>
 8013ad2:	e041      	b.n	8013b58 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	885b      	ldrh	r3, [r3, #2]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d11e      	bne.n	8013b1a <USBD_MSC_Setup+0x92>
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	88db      	ldrh	r3, [r3, #6]
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d11a      	bne.n	8013b1a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	781b      	ldrb	r3, [r3, #0]
 8013ae8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	da15      	bge.n	8013b1a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	33b0      	adds	r3, #176	; 0xb0
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	4413      	add	r3, r2
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	699b      	ldr	r3, [r3, #24]
 8013b00:	4798      	blx	r3
 8013b02:	4603      	mov	r3, r0
 8013b04:	461a      	mov	r2, r3
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	4619      	mov	r1, r3
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f003 f949 	bl	8016da8 <USBD_CtlSendData>
 8013b16:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b18:	e025      	b.n	8013b66 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f003 f8d2 	bl	8016cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013b22:	2303      	movs	r3, #3
 8013b24:	75fb      	strb	r3, [r7, #23]
          break;
 8013b26:	e01e      	b.n	8013b66 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	885b      	ldrh	r3, [r3, #2]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10c      	bne.n	8013b4a <USBD_MSC_Setup+0xc2>
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	88db      	ldrh	r3, [r3, #6]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d108      	bne.n	8013b4a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	db03      	blt.n	8013b4a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 f9b4 	bl	8013eb0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b48:	e00d      	b.n	8013b66 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8013b4a:	6839      	ldr	r1, [r7, #0]
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f003 f8ba 	bl	8016cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013b52:	2303      	movs	r3, #3
 8013b54:	75fb      	strb	r3, [r7, #23]
          break;
 8013b56:	e006      	b.n	8013b66 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8013b58:	6839      	ldr	r1, [r7, #0]
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f003 f8b3 	bl	8016cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013b60:	2303      	movs	r3, #3
 8013b62:	75fb      	strb	r3, [r7, #23]
          break;
 8013b64:	bf00      	nop
      }
      break;
 8013b66:	e086      	b.n	8013c76 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	785b      	ldrb	r3, [r3, #1]
 8013b6c:	2b0b      	cmp	r3, #11
 8013b6e:	d872      	bhi.n	8013c56 <USBD_MSC_Setup+0x1ce>
 8013b70:	a201      	add	r2, pc, #4	; (adr r2, 8013b78 <USBD_MSC_Setup+0xf0>)
 8013b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b76:	bf00      	nop
 8013b78:	08013ba9 	.word	0x08013ba9
 8013b7c:	08013c25 	.word	0x08013c25
 8013b80:	08013c57 	.word	0x08013c57
 8013b84:	08013c57 	.word	0x08013c57
 8013b88:	08013c57 	.word	0x08013c57
 8013b8c:	08013c57 	.word	0x08013c57
 8013b90:	08013c57 	.word	0x08013c57
 8013b94:	08013c57 	.word	0x08013c57
 8013b98:	08013c57 	.word	0x08013c57
 8013b9c:	08013c57 	.word	0x08013c57
 8013ba0:	08013bd3 	.word	0x08013bd3
 8013ba4:	08013bfd 	.word	0x08013bfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	2b03      	cmp	r3, #3
 8013bb2:	d107      	bne.n	8013bc4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013bb4:	f107 030e 	add.w	r3, r7, #14
 8013bb8:	2202      	movs	r2, #2
 8013bba:	4619      	mov	r1, r3
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f003 f8f3 	bl	8016da8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013bc2:	e050      	b.n	8013c66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013bc4:	6839      	ldr	r1, [r7, #0]
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f003 f87d 	bl	8016cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013bcc:	2303      	movs	r3, #3
 8013bce:	75fb      	strb	r3, [r7, #23]
          break;
 8013bd0:	e049      	b.n	8013c66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b03      	cmp	r3, #3
 8013bdc:	d107      	bne.n	8013bee <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	3304      	adds	r3, #4
 8013be2:	2201      	movs	r2, #1
 8013be4:	4619      	mov	r1, r3
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f003 f8de 	bl	8016da8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013bec:	e03b      	b.n	8013c66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013bee:	6839      	ldr	r1, [r7, #0]
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f003 f868 	bl	8016cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8013bfa:	e034      	b.n	8013c66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	2b03      	cmp	r3, #3
 8013c06:	d106      	bne.n	8013c16 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	885b      	ldrh	r3, [r3, #2]
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	461a      	mov	r2, r3
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013c14:	e027      	b.n	8013c66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013c16:	6839      	ldr	r1, [r7, #0]
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f003 f854 	bl	8016cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013c1e:	2303      	movs	r3, #3
 8013c20:	75fb      	strb	r3, [r7, #23]
          break;
 8013c22:	e020      	b.n	8013c66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	2b03      	cmp	r3, #3
 8013c2e:	d119      	bne.n	8013c64 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	885b      	ldrh	r3, [r3, #2]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d115      	bne.n	8013c64 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	889b      	ldrh	r3, [r3, #4]
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	4619      	mov	r1, r3
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f007 fa59 	bl	801b0f8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	889b      	ldrh	r3, [r3, #4]
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f000 fb2e 	bl	80142b0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8013c54:	e006      	b.n	8013c64 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8013c56:	6839      	ldr	r1, [r7, #0]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f003 f834 	bl	8016cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013c5e:	2303      	movs	r3, #3
 8013c60:	75fb      	strb	r3, [r7, #23]
          break;
 8013c62:	e000      	b.n	8013c66 <USBD_MSC_Setup+0x1de>
          break;
 8013c64:	bf00      	nop
      }
      break;
 8013c66:	e006      	b.n	8013c76 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f003 f82b 	bl	8016cc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8013c70:	2303      	movs	r3, #3
 8013c72:	75fb      	strb	r3, [r7, #23]
      break;
 8013c74:	bf00      	nop
  }

  return (uint8_t)ret;
 8013c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3718      	adds	r7, #24
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	460b      	mov	r3, r1
 8013c8a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013c8c:	78fb      	ldrb	r3, [r7, #3]
 8013c8e:	4619      	mov	r1, r3
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 f959 	bl	8013f48 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013c96:	2300      	movs	r3, #0
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3708      	adds	r7, #8
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013cac:	78fb      	ldrb	r3, [r7, #3]
 8013cae:	4619      	mov	r1, r3
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f000 f983 	bl	8013fbc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013cb6:	2300      	movs	r3, #0
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3708      	adds	r7, #8
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b084      	sub	sp, #16
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013cc8:	2181      	movs	r1, #129	; 0x81
 8013cca:	4812      	ldr	r0, [pc, #72]	; (8013d14 <USBD_MSC_GetHSCfgDesc+0x54>)
 8013ccc:	f002 f9c3 	bl	8016056 <USBD_GetEpDesc>
 8013cd0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013cd2:	2101      	movs	r1, #1
 8013cd4:	480f      	ldr	r0, [pc, #60]	; (8013d14 <USBD_MSC_GetHSCfgDesc+0x54>)
 8013cd6:	f002 f9be 	bl	8016056 <USBD_GetEpDesc>
 8013cda:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d006      	beq.n	8013cf0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	711a      	strb	r2, [r3, #4]
 8013ce8:	2200      	movs	r2, #0
 8013cea:	f042 0202 	orr.w	r2, r2, #2
 8013cee:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d006      	beq.n	8013d04 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	711a      	strb	r2, [r3, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f042 0202 	orr.w	r2, r2, #2
 8013d02:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2220      	movs	r2, #32
 8013d08:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013d0a:	4b02      	ldr	r3, [pc, #8]	; (8013d14 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	20000064 	.word	0x20000064

08013d18 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b084      	sub	sp, #16
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013d20:	2181      	movs	r1, #129	; 0x81
 8013d22:	4812      	ldr	r0, [pc, #72]	; (8013d6c <USBD_MSC_GetFSCfgDesc+0x54>)
 8013d24:	f002 f997 	bl	8016056 <USBD_GetEpDesc>
 8013d28:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013d2a:	2101      	movs	r1, #1
 8013d2c:	480f      	ldr	r0, [pc, #60]	; (8013d6c <USBD_MSC_GetFSCfgDesc+0x54>)
 8013d2e:	f002 f992 	bl	8016056 <USBD_GetEpDesc>
 8013d32:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d006      	beq.n	8013d48 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d42:	711a      	strb	r2, [r3, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d006      	beq.n	8013d5c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	2200      	movs	r2, #0
 8013d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d56:	711a      	strb	r2, [r3, #4]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2220      	movs	r2, #32
 8013d60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013d62:	4b02      	ldr	r3, [pc, #8]	; (8013d6c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3710      	adds	r7, #16
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	20000064 	.word	0x20000064

08013d70 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013d78:	2181      	movs	r1, #129	; 0x81
 8013d7a:	4812      	ldr	r0, [pc, #72]	; (8013dc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013d7c:	f002 f96b 	bl	8016056 <USBD_GetEpDesc>
 8013d80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013d82:	2101      	movs	r1, #1
 8013d84:	480f      	ldr	r0, [pc, #60]	; (8013dc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013d86:	f002 f966 	bl	8016056 <USBD_GetEpDesc>
 8013d8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d006      	beq.n	8013da0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2200      	movs	r2, #0
 8013d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d9a:	711a      	strb	r2, [r3, #4]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d006      	beq.n	8013db4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2200      	movs	r2, #0
 8013daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013dae:	711a      	strb	r2, [r3, #4]
 8013db0:	2200      	movs	r2, #0
 8013db2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2220      	movs	r2, #32
 8013db8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013dba:	4b02      	ldr	r3, [pc, #8]	; (8013dc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3710      	adds	r7, #16
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}
 8013dc4:	20000064 	.word	0x20000064

08013dc8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	220a      	movs	r2, #10
 8013dd4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013dd6:	4b03      	ldr	r3, [pc, #12]	; (8013de4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	370c      	adds	r7, #12
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr
 8013de4:	20000084 	.word	0x20000084

08013de8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d101      	bne.n	8013dfc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013df8:	2303      	movs	r3, #3
 8013dfa:	e009      	b.n	8013e10 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	33b0      	adds	r3, #176	; 0xb0
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	4413      	add	r3, r2
 8013e0a:	683a      	ldr	r2, [r7, #0]
 8013e0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	370c      	adds	r7, #12
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	32b0      	adds	r2, #176	; 0xb0
 8013e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e32:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d032      	beq.n	8013ea0 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2200      	movs	r2, #0
 8013e44:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2200      	movs	r2, #0
 8013e52:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	33b0      	adds	r3, #176	; 0xb0
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	4413      	add	r3, r2
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2000      	movs	r0, #0
 8013e72:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013e74:	4b0c      	ldr	r3, [pc, #48]	; (8013ea8 <MSC_BOT_Init+0x8c>)
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	4619      	mov	r1, r3
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f007 f93c 	bl	801b0f8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013e80:	4b0a      	ldr	r3, [pc, #40]	; (8013eac <MSC_BOT_Init+0x90>)
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	4619      	mov	r1, r3
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f007 f936 	bl	801b0f8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013e8c:	4b06      	ldr	r3, [pc, #24]	; (8013ea8 <MSC_BOT_Init+0x8c>)
 8013e8e:	7819      	ldrb	r1, [r3, #0]
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013e96:	231f      	movs	r3, #31
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f007 f9f6 	bl	801b28a <USBD_LL_PrepareReceive>
 8013e9e:	e000      	b.n	8013ea2 <MSC_BOT_Init+0x86>
    return;
 8013ea0:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	2000008f 	.word	0x2000008f
 8013eac:	2000008e 	.word	0x2000008e

08013eb0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	32b0      	adds	r2, #176	; 0xb0
 8013ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01b      	beq.n	8013f06 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8013eda:	4b0d      	ldr	r3, [pc, #52]	; (8013f10 <MSC_BOT_Reset+0x60>)
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	4619      	mov	r1, r3
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f007 f947 	bl	801b174 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8013ee6:	4b0b      	ldr	r3, [pc, #44]	; (8013f14 <MSC_BOT_Reset+0x64>)
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	4619      	mov	r1, r3
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f007 f941 	bl	801b174 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013ef2:	4b08      	ldr	r3, [pc, #32]	; (8013f14 <MSC_BOT_Reset+0x64>)
 8013ef4:	7819      	ldrb	r1, [r3, #0]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013efc:	231f      	movs	r3, #31
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f007 f9c3 	bl	801b28a <USBD_LL_PrepareReceive>
 8013f04:	e000      	b.n	8013f08 <MSC_BOT_Reset+0x58>
    return;
 8013f06:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013f08:	3710      	adds	r7, #16
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	2000008e 	.word	0x2000008e
 8013f14:	2000008f 	.word	0x2000008f

08013f18 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	32b0      	adds	r2, #176	; 0xb0
 8013f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f2e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d002      	beq.n	8013f3c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	721a      	strb	r2, [r3, #8]
  }
}
 8013f3c:	bf00      	nop
 8013f3e:	3714      	adds	r7, #20
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	460b      	mov	r3, r1
 8013f52:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	32b0      	adds	r2, #176	; 0xb0
 8013f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f62:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d020      	beq.n	8013fac <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	7a1b      	ldrb	r3, [r3, #8]
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d005      	beq.n	8013f7e <MSC_BOT_DataIn+0x36>
 8013f72:	2b02      	cmp	r3, #2
 8013f74:	db1c      	blt.n	8013fb0 <MSC_BOT_DataIn+0x68>
 8013f76:	3b03      	subs	r3, #3
 8013f78:	2b01      	cmp	r3, #1
 8013f7a:	d819      	bhi.n	8013fb0 <MSC_BOT_DataIn+0x68>
 8013f7c:	e011      	b.n	8013fa2 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f000 f9c9 	bl	8014324 <SCSI_ProcessCmd>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	da0d      	bge.n	8013fb4 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013f98:	2101      	movs	r1, #1
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f000 f90c 	bl	80141b8 <MSC_BOT_SendCSW>
      }
      break;
 8013fa0:	e008      	b.n	8013fb4 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013fa2:	2100      	movs	r1, #0
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f000 f907 	bl	80141b8 <MSC_BOT_SendCSW>
      break;
 8013faa:	e004      	b.n	8013fb6 <MSC_BOT_DataIn+0x6e>
    return;
 8013fac:	bf00      	nop
 8013fae:	e002      	b.n	8013fb6 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8013fb0:	bf00      	nop
 8013fb2:	e000      	b.n	8013fb6 <MSC_BOT_DataIn+0x6e>
      break;
 8013fb4:	bf00      	nop
  }
}
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	32b0      	adds	r2, #176	; 0xb0
 8013fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d01c      	beq.n	8014018 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	7a1b      	ldrb	r3, [r3, #8]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d002      	beq.n	8013fec <MSC_BOT_DataOut+0x30>
 8013fe6:	2b01      	cmp	r3, #1
 8013fe8:	d004      	beq.n	8013ff4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013fea:	e018      	b.n	801401e <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f819 	bl	8014024 <MSC_BOT_CBW_Decode>
      break;
 8013ff2:	e014      	b.n	801401e <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8014000:	461a      	mov	r2, r3
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f98e 	bl	8014324 <SCSI_ProcessCmd>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	da06      	bge.n	801401c <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801400e:	2101      	movs	r1, #1
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 f8d1 	bl	80141b8 <MSC_BOT_SendCSW>
      break;
 8014016:	e001      	b.n	801401c <MSC_BOT_DataOut+0x60>
    return;
 8014018:	bf00      	nop
 801401a:	e000      	b.n	801401e <MSC_BOT_DataOut+0x62>
      break;
 801401c:	bf00      	nop
  }
}
 801401e:	3710      	adds	r7, #16
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	32b0      	adds	r2, #176	; 0xb0
 8014036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801403a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d079      	beq.n	8014136 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801405a:	4b3a      	ldr	r3, [pc, #232]	; (8014144 <MSC_BOT_CBW_Decode+0x120>)
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	4619      	mov	r1, r3
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f007 f933 	bl	801b2cc <USBD_LL_GetRxDataSize>
 8014066:	4603      	mov	r3, r0
 8014068:	2b1f      	cmp	r3, #31
 801406a:	d114      	bne.n	8014096 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014072:	4a35      	ldr	r2, [pc, #212]	; (8014148 <MSC_BOT_CBW_Decode+0x124>)
 8014074:	4293      	cmp	r3, r2
 8014076:	d10e      	bne.n	8014096 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801407e:	2b01      	cmp	r3, #1
 8014080:	d809      	bhi.n	8014096 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8014088:	2b00      	cmp	r3, #0
 801408a:	d004      	beq.n	8014096 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014092:	2b10      	cmp	r3, #16
 8014094:	d90e      	bls.n	80140b4 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801409c:	2320      	movs	r3, #32
 801409e:	2205      	movs	r2, #5
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f000 fe2b 	bl	8014cfc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2202      	movs	r2, #2
 80140aa:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f000 f8bd 	bl	801422c <MSC_BOT_Abort>
 80140b2:	e043      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 80140c0:	461a      	mov	r2, r3
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 f92e 	bl	8014324 <SCSI_ProcessCmd>
 80140c8:	4603      	mov	r3, r0
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	da0c      	bge.n	80140e8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	7a1b      	ldrb	r3, [r3, #8]
 80140d2:	2b05      	cmp	r3, #5
 80140d4:	d104      	bne.n	80140e0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80140d6:	2101      	movs	r1, #1
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f000 f86d 	bl	80141b8 <MSC_BOT_SendCSW>
 80140de:	e02d      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 f8a3 	bl	801422c <MSC_BOT_Abort>
 80140e6:	e029      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	7a1b      	ldrb	r3, [r3, #8]
 80140ec:	2b02      	cmp	r3, #2
 80140ee:	d024      	beq.n	801413a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d020      	beq.n	801413a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80140fc:	2b03      	cmp	r3, #3
 80140fe:	d01c      	beq.n	801413a <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d009      	beq.n	801411c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	f103 0110 	add.w	r1, r3, #16
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	461a      	mov	r2, r3
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 f819 	bl	801414c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801411a:	e00f      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d104      	bne.n	801412e <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014124:	2100      	movs	r1, #0
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 f846 	bl	80141b8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801412c:	e006      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 f87c 	bl	801422c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014134:	e002      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
    return;
 8014136:	bf00      	nop
 8014138:	e000      	b.n	801413c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 801413a:	bf00      	nop
    }
  }
}
 801413c:	3710      	adds	r7, #16
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	2000008f 	.word	0x2000008f
 8014148:	43425355 	.word	0x43425355

0801414c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b086      	sub	sp, #24
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	32b0      	adds	r2, #176	; 0xb0
 8014162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014166:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d01e      	beq.n	80141ac <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	4293      	cmp	r3, r2
 8014178:	bf28      	it	cs
 801417a:	4613      	movcs	r3, r2
 801417c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	1ad2      	subs	r2, r2, r3
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	2200      	movs	r2, #0
 8014192:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	2204      	movs	r2, #4
 801419a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801419c:	4b05      	ldr	r3, [pc, #20]	; (80141b4 <MSC_BOT_SendData+0x68>)
 801419e:	7819      	ldrb	r1, [r3, #0]
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	f007 f84f 	bl	801b248 <USBD_LL_Transmit>
 80141aa:	e000      	b.n	80141ae <MSC_BOT_SendData+0x62>
    return;
 80141ac:	bf00      	nop
}
 80141ae:	3718      	adds	r7, #24
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	2000008e 	.word	0x2000008e

080141b8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	460b      	mov	r3, r1
 80141c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	32b0      	adds	r2, #176	; 0xb0
 80141ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d01d      	beq.n	8014216 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	4a10      	ldr	r2, [pc, #64]	; (8014220 <MSC_BOT_SendCSW+0x68>)
 80141de:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	78fa      	ldrb	r2, [r7, #3]
 80141e6:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2200      	movs	r2, #0
 80141ee:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80141f0:	4b0c      	ldr	r3, [pc, #48]	; (8014224 <MSC_BOT_SendCSW+0x6c>)
 80141f2:	7819      	ldrb	r1, [r3, #0]
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 80141fa:	230d      	movs	r3, #13
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f007 f823 	bl	801b248 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014202:	4b09      	ldr	r3, [pc, #36]	; (8014228 <MSC_BOT_SendCSW+0x70>)
 8014204:	7819      	ldrb	r1, [r3, #0]
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 801420c:	231f      	movs	r3, #31
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f007 f83b 	bl	801b28a <USBD_LL_PrepareReceive>
 8014214:	e000      	b.n	8014218 <MSC_BOT_SendCSW+0x60>
    return;
 8014216:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	53425355 	.word	0x53425355
 8014224:	2000008e 	.word	0x2000008e
 8014228:	2000008f 	.word	0x2000008f

0801422c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	32b0      	adds	r2, #176	; 0xb0
 801423e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014242:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d02a      	beq.n	80142a0 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014250:	2b00      	cmp	r3, #0
 8014252:	d10e      	bne.n	8014272 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 801425a:	2b00      	cmp	r3, #0
 801425c:	d009      	beq.n	8014272 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8014262:	2b00      	cmp	r3, #0
 8014264:	d105      	bne.n	8014272 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014266:	4b10      	ldr	r3, [pc, #64]	; (80142a8 <MSC_BOT_Abort+0x7c>)
 8014268:	781b      	ldrb	r3, [r3, #0]
 801426a:	4619      	mov	r1, r3
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f006 ff62 	bl	801b136 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014272:	4b0e      	ldr	r3, [pc, #56]	; (80142ac <MSC_BOT_Abort+0x80>)
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	4619      	mov	r1, r3
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f006 ff5c 	bl	801b136 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	7a5b      	ldrb	r3, [r3, #9]
 8014282:	2b02      	cmp	r3, #2
 8014284:	d10d      	bne.n	80142a2 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014286:	4b09      	ldr	r3, [pc, #36]	; (80142ac <MSC_BOT_Abort+0x80>)
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	4619      	mov	r1, r3
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f006 ff52 	bl	801b136 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014292:	4b05      	ldr	r3, [pc, #20]	; (80142a8 <MSC_BOT_Abort+0x7c>)
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	4619      	mov	r1, r3
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f006 ff4c 	bl	801b136 <USBD_LL_StallEP>
 801429e:	e000      	b.n	80142a2 <MSC_BOT_Abort+0x76>
    return;
 80142a0:	bf00      	nop
  }
}
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	2000008f 	.word	0x2000008f
 80142ac:	2000008e 	.word	0x2000008e

080142b0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	460b      	mov	r3, r1
 80142ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	32b0      	adds	r2, #176	; 0xb0
 80142c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d01d      	beq.n	801430e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	7a5b      	ldrb	r3, [r3, #9]
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	d10c      	bne.n	80142f4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80142da:	4b10      	ldr	r3, [pc, #64]	; (801431c <MSC_BOT_CplClrFeature+0x6c>)
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	4619      	mov	r1, r3
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f006 ff28 	bl	801b136 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80142e6:	4b0e      	ldr	r3, [pc, #56]	; (8014320 <MSC_BOT_CplClrFeature+0x70>)
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	4619      	mov	r1, r3
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f006 ff22 	bl	801b136 <USBD_LL_StallEP>
 80142f2:	e00f      	b.n	8014314 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80142f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	da0a      	bge.n	8014312 <MSC_BOT_CplClrFeature+0x62>
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	7a5b      	ldrb	r3, [r3, #9]
 8014300:	2b01      	cmp	r3, #1
 8014302:	d006      	beq.n	8014312 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014304:	2101      	movs	r1, #1
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f7ff ff56 	bl	80141b8 <MSC_BOT_SendCSW>
 801430c:	e002      	b.n	8014314 <MSC_BOT_CplClrFeature+0x64>
    return;
 801430e:	bf00      	nop
 8014310:	e000      	b.n	8014314 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8014312:	bf00      	nop
  }
}
 8014314:	3710      	adds	r7, #16
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	2000008e 	.word	0x2000008e
 8014320:	2000008f 	.word	0x2000008f

08014324 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b086      	sub	sp, #24
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	460b      	mov	r3, r1
 801432e:	607a      	str	r2, [r7, #4]
 8014330:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	32b0      	adds	r2, #176	; 0xb0
 801433c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014340:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d102      	bne.n	801434e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014348:	f04f 33ff 	mov.w	r3, #4294967295
 801434c:	e168      	b.n	8014620 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2baa      	cmp	r3, #170	; 0xaa
 8014354:	f000 8144 	beq.w	80145e0 <SCSI_ProcessCmd+0x2bc>
 8014358:	2baa      	cmp	r3, #170	; 0xaa
 801435a:	f300 8153 	bgt.w	8014604 <SCSI_ProcessCmd+0x2e0>
 801435e:	2ba8      	cmp	r3, #168	; 0xa8
 8014360:	f000 812c 	beq.w	80145bc <SCSI_ProcessCmd+0x298>
 8014364:	2ba8      	cmp	r3, #168	; 0xa8
 8014366:	f300 814d 	bgt.w	8014604 <SCSI_ProcessCmd+0x2e0>
 801436a:	2b5a      	cmp	r3, #90	; 0x5a
 801436c:	f300 80c0 	bgt.w	80144f0 <SCSI_ProcessCmd+0x1cc>
 8014370:	2b00      	cmp	r3, #0
 8014372:	f2c0 8147 	blt.w	8014604 <SCSI_ProcessCmd+0x2e0>
 8014376:	2b5a      	cmp	r3, #90	; 0x5a
 8014378:	f200 8144 	bhi.w	8014604 <SCSI_ProcessCmd+0x2e0>
 801437c:	a201      	add	r2, pc, #4	; (adr r2, 8014384 <SCSI_ProcessCmd+0x60>)
 801437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014382:	bf00      	nop
 8014384:	080144f7 	.word	0x080144f7
 8014388:	08014605 	.word	0x08014605
 801438c:	08014605 	.word	0x08014605
 8014390:	08014509 	.word	0x08014509
 8014394:	08014605 	.word	0x08014605
 8014398:	08014605 	.word	0x08014605
 801439c:	08014605 	.word	0x08014605
 80143a0:	08014605 	.word	0x08014605
 80143a4:	08014605 	.word	0x08014605
 80143a8:	08014605 	.word	0x08014605
 80143ac:	08014605 	.word	0x08014605
 80143b0:	08014605 	.word	0x08014605
 80143b4:	08014605 	.word	0x08014605
 80143b8:	08014605 	.word	0x08014605
 80143bc:	08014605 	.word	0x08014605
 80143c0:	08014605 	.word	0x08014605
 80143c4:	08014605 	.word	0x08014605
 80143c8:	08014605 	.word	0x08014605
 80143cc:	0801451b 	.word	0x0801451b
 80143d0:	08014605 	.word	0x08014605
 80143d4:	08014605 	.word	0x08014605
 80143d8:	08014605 	.word	0x08014605
 80143dc:	08014605 	.word	0x08014605
 80143e0:	08014605 	.word	0x08014605
 80143e4:	08014605 	.word	0x08014605
 80143e8:	08014605 	.word	0x08014605
 80143ec:	08014551 	.word	0x08014551
 80143f0:	0801452d 	.word	0x0801452d
 80143f4:	08014605 	.word	0x08014605
 80143f8:	08014605 	.word	0x08014605
 80143fc:	0801453f 	.word	0x0801453f
 8014400:	08014605 	.word	0x08014605
 8014404:	08014605 	.word	0x08014605
 8014408:	08014605 	.word	0x08014605
 801440c:	08014605 	.word	0x08014605
 8014410:	08014575 	.word	0x08014575
 8014414:	08014605 	.word	0x08014605
 8014418:	08014587 	.word	0x08014587
 801441c:	08014605 	.word	0x08014605
 8014420:	08014605 	.word	0x08014605
 8014424:	080145ab 	.word	0x080145ab
 8014428:	08014605 	.word	0x08014605
 801442c:	080145cf 	.word	0x080145cf
 8014430:	08014605 	.word	0x08014605
 8014434:	08014605 	.word	0x08014605
 8014438:	08014605 	.word	0x08014605
 801443c:	08014605 	.word	0x08014605
 8014440:	080145f3 	.word	0x080145f3
 8014444:	08014605 	.word	0x08014605
 8014448:	08014605 	.word	0x08014605
 801444c:	08014605 	.word	0x08014605
 8014450:	08014605 	.word	0x08014605
 8014454:	08014605 	.word	0x08014605
 8014458:	08014605 	.word	0x08014605
 801445c:	08014605 	.word	0x08014605
 8014460:	08014605 	.word	0x08014605
 8014464:	08014605 	.word	0x08014605
 8014468:	08014605 	.word	0x08014605
 801446c:	08014605 	.word	0x08014605
 8014470:	08014605 	.word	0x08014605
 8014474:	08014605 	.word	0x08014605
 8014478:	08014605 	.word	0x08014605
 801447c:	08014605 	.word	0x08014605
 8014480:	08014605 	.word	0x08014605
 8014484:	08014605 	.word	0x08014605
 8014488:	08014605 	.word	0x08014605
 801448c:	08014605 	.word	0x08014605
 8014490:	08014605 	.word	0x08014605
 8014494:	08014605 	.word	0x08014605
 8014498:	08014605 	.word	0x08014605
 801449c:	08014605 	.word	0x08014605
 80144a0:	08014605 	.word	0x08014605
 80144a4:	08014605 	.word	0x08014605
 80144a8:	08014605 	.word	0x08014605
 80144ac:	08014605 	.word	0x08014605
 80144b0:	08014605 	.word	0x08014605
 80144b4:	08014605 	.word	0x08014605
 80144b8:	08014605 	.word	0x08014605
 80144bc:	08014605 	.word	0x08014605
 80144c0:	08014605 	.word	0x08014605
 80144c4:	08014605 	.word	0x08014605
 80144c8:	08014605 	.word	0x08014605
 80144cc:	08014605 	.word	0x08014605
 80144d0:	08014605 	.word	0x08014605
 80144d4:	08014605 	.word	0x08014605
 80144d8:	08014605 	.word	0x08014605
 80144dc:	08014605 	.word	0x08014605
 80144e0:	08014605 	.word	0x08014605
 80144e4:	08014605 	.word	0x08014605
 80144e8:	08014605 	.word	0x08014605
 80144ec:	08014563 	.word	0x08014563
 80144f0:	2b9e      	cmp	r3, #158	; 0x9e
 80144f2:	d051      	beq.n	8014598 <SCSI_ProcessCmd+0x274>
 80144f4:	e086      	b.n	8014604 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80144f6:	7afb      	ldrb	r3, [r7, #11]
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	4619      	mov	r1, r3
 80144fc:	68f8      	ldr	r0, [r7, #12]
 80144fe:	f000 f893 	bl	8014628 <SCSI_TestUnitReady>
 8014502:	4603      	mov	r3, r0
 8014504:	75fb      	strb	r3, [r7, #23]
      break;
 8014506:	e089      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014508:	7afb      	ldrb	r3, [r7, #11]
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	4619      	mov	r1, r3
 801450e:	68f8      	ldr	r0, [r7, #12]
 8014510:	f000 fb6e 	bl	8014bf0 <SCSI_RequestSense>
 8014514:	4603      	mov	r3, r0
 8014516:	75fb      	strb	r3, [r7, #23]
      break;
 8014518:	e080      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801451a:	7afb      	ldrb	r3, [r7, #11]
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	4619      	mov	r1, r3
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f000 f8db 	bl	80146dc <SCSI_Inquiry>
 8014526:	4603      	mov	r3, r0
 8014528:	75fb      	strb	r3, [r7, #23]
      break;
 801452a:	e077      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801452c:	7afb      	ldrb	r3, [r7, #11]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	4619      	mov	r1, r3
 8014532:	68f8      	ldr	r0, [r7, #12]
 8014534:	f000 fc30 	bl	8014d98 <SCSI_StartStopUnit>
 8014538:	4603      	mov	r3, r0
 801453a:	75fb      	strb	r3, [r7, #23]
      break;
 801453c:	e06e      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801453e:	7afb      	ldrb	r3, [r7, #11]
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	4619      	mov	r1, r3
 8014544:	68f8      	ldr	r0, [r7, #12]
 8014546:	f000 fc7c 	bl	8014e42 <SCSI_AllowPreventRemovable>
 801454a:	4603      	mov	r3, r0
 801454c:	75fb      	strb	r3, [r7, #23]
      break;
 801454e:	e065      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014550:	7afb      	ldrb	r3, [r7, #11]
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	4619      	mov	r1, r3
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	f000 faea 	bl	8014b30 <SCSI_ModeSense6>
 801455c:	4603      	mov	r3, r0
 801455e:	75fb      	strb	r3, [r7, #23]
      break;
 8014560:	e05c      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014562:	7afb      	ldrb	r3, [r7, #11]
 8014564:	687a      	ldr	r2, [r7, #4]
 8014566:	4619      	mov	r1, r3
 8014568:	68f8      	ldr	r0, [r7, #12]
 801456a:	f000 fb11 	bl	8014b90 <SCSI_ModeSense10>
 801456e:	4603      	mov	r3, r0
 8014570:	75fb      	strb	r3, [r7, #23]
      break;
 8014572:	e053      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014574:	7afb      	ldrb	r3, [r7, #11]
 8014576:	687a      	ldr	r2, [r7, #4]
 8014578:	4619      	mov	r1, r3
 801457a:	68f8      	ldr	r0, [r7, #12]
 801457c:	f000 fa5d 	bl	8014a3a <SCSI_ReadFormatCapacity>
 8014580:	4603      	mov	r3, r0
 8014582:	75fb      	strb	r3, [r7, #23]
      break;
 8014584:	e04a      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014586:	7afb      	ldrb	r3, [r7, #11]
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	4619      	mov	r1, r3
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f000 f923 	bl	80147d8 <SCSI_ReadCapacity10>
 8014592:	4603      	mov	r3, r0
 8014594:	75fb      	strb	r3, [r7, #23]
      break;
 8014596:	e041      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014598:	7afb      	ldrb	r3, [r7, #11]
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	4619      	mov	r1, r3
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f000 f998 	bl	80148d4 <SCSI_ReadCapacity16>
 80145a4:	4603      	mov	r3, r0
 80145a6:	75fb      	strb	r3, [r7, #23]
      break;
 80145a8:	e038      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80145aa:	7afb      	ldrb	r3, [r7, #11]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	4619      	mov	r1, r3
 80145b0:	68f8      	ldr	r0, [r7, #12]
 80145b2:	f000 fc73 	bl	8014e9c <SCSI_Read10>
 80145b6:	4603      	mov	r3, r0
 80145b8:	75fb      	strb	r3, [r7, #23]
      break;
 80145ba:	e02f      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80145bc:	7afb      	ldrb	r3, [r7, #11]
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	4619      	mov	r1, r3
 80145c2:	68f8      	ldr	r0, [r7, #12]
 80145c4:	f000 fd14 	bl	8014ff0 <SCSI_Read12>
 80145c8:	4603      	mov	r3, r0
 80145ca:	75fb      	strb	r3, [r7, #23]
      break;
 80145cc:	e026      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80145ce:	7afb      	ldrb	r3, [r7, #11]
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	4619      	mov	r1, r3
 80145d4:	68f8      	ldr	r0, [r7, #12]
 80145d6:	f000 fdbf 	bl	8015158 <SCSI_Write10>
 80145da:	4603      	mov	r3, r0
 80145dc:	75fb      	strb	r3, [r7, #23]
      break;
 80145de:	e01d      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80145e0:	7afb      	ldrb	r3, [r7, #11]
 80145e2:	687a      	ldr	r2, [r7, #4]
 80145e4:	4619      	mov	r1, r3
 80145e6:	68f8      	ldr	r0, [r7, #12]
 80145e8:	f000 fe8c 	bl	8015304 <SCSI_Write12>
 80145ec:	4603      	mov	r3, r0
 80145ee:	75fb      	strb	r3, [r7, #23]
      break;
 80145f0:	e014      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80145f2:	7afb      	ldrb	r3, [r7, #11]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	4619      	mov	r1, r3
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f000 ff69 	bl	80154d0 <SCSI_Verify10>
 80145fe:	4603      	mov	r3, r0
 8014600:	75fb      	strb	r3, [r7, #23]
      break;
 8014602:	e00b      	b.n	801461c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014604:	7af9      	ldrb	r1, [r7, #11]
 8014606:	2320      	movs	r3, #32
 8014608:	2205      	movs	r2, #5
 801460a:	68f8      	ldr	r0, [r7, #12]
 801460c:	f000 fb76 	bl	8014cfc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	2202      	movs	r2, #2
 8014614:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8014616:	23ff      	movs	r3, #255	; 0xff
 8014618:	75fb      	strb	r3, [r7, #23]
      break;
 801461a:	bf00      	nop
  }

  return ret;
 801461c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014620:	4618      	mov	r0, r3
 8014622:	3718      	adds	r7, #24
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b086      	sub	sp, #24
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	460b      	mov	r3, r1
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	32b0      	adds	r2, #176	; 0xb0
 8014640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014644:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d102      	bne.n	8014652 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 801464c:	f04f 33ff 	mov.w	r3, #4294967295
 8014650:	e03f      	b.n	80146d2 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00a      	beq.n	8014672 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014662:	2320      	movs	r3, #32
 8014664:	2205      	movs	r2, #5
 8014666:	68f8      	ldr	r0, [r7, #12]
 8014668:	f000 fb48 	bl	8014cfc <SCSI_SenseCode>

    return -1;
 801466c:	f04f 33ff 	mov.w	r3, #4294967295
 8014670:	e02f      	b.n	80146d2 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014678:	2b02      	cmp	r3, #2
 801467a:	d10b      	bne.n	8014694 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801467c:	7af9      	ldrb	r1, [r7, #11]
 801467e:	233a      	movs	r3, #58	; 0x3a
 8014680:	2202      	movs	r2, #2
 8014682:	68f8      	ldr	r0, [r7, #12]
 8014684:	f000 fb3a 	bl	8014cfc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	2205      	movs	r2, #5
 801468c:	721a      	strb	r2, [r3, #8]
    return -1;
 801468e:	f04f 33ff 	mov.w	r3, #4294967295
 8014692:	e01e      	b.n	80146d2 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	33b0      	adds	r3, #176	; 0xb0
 801469e:	009b      	lsls	r3, r3, #2
 80146a0:	4413      	add	r3, r2
 80146a2:	685b      	ldr	r3, [r3, #4]
 80146a4:	689b      	ldr	r3, [r3, #8]
 80146a6:	7afa      	ldrb	r2, [r7, #11]
 80146a8:	4610      	mov	r0, r2
 80146aa:	4798      	blx	r3
 80146ac:	4603      	mov	r3, r0
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d00b      	beq.n	80146ca <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80146b2:	7af9      	ldrb	r1, [r7, #11]
 80146b4:	233a      	movs	r3, #58	; 0x3a
 80146b6:	2202      	movs	r2, #2
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f000 fb1f 	bl	8014cfc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	2205      	movs	r2, #5
 80146c2:	721a      	strb	r2, [r3, #8]

    return -1;
 80146c4:	f04f 33ff 	mov.w	r3, #4294967295
 80146c8:	e003      	b.n	80146d2 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	2200      	movs	r2, #0
 80146ce:	60da      	str	r2, [r3, #12]

  return 0;
 80146d0:	2300      	movs	r3, #0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3718      	adds	r7, #24
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
	...

080146dc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b088      	sub	sp, #32
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	460b      	mov	r3, r1
 80146e6:	607a      	str	r2, [r7, #4]
 80146e8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	32b0      	adds	r2, #176	; 0xb0
 80146f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146f8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80146fa:	69bb      	ldr	r3, [r7, #24]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d102      	bne.n	8014706 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8014700:	f04f 33ff 	mov.w	r3, #4294967295
 8014704:	e05f      	b.n	80147c6 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801470c:	2b00      	cmp	r3, #0
 801470e:	d10a      	bne.n	8014726 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014716:	2320      	movs	r3, #32
 8014718:	2205      	movs	r2, #5
 801471a:	68f8      	ldr	r0, [r7, #12]
 801471c:	f000 faee 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8014720:	f04f 33ff 	mov.w	r3, #4294967295
 8014724:	e04f      	b.n	80147c6 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	3301      	adds	r3, #1
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	f003 0301 	and.w	r3, r3, #1
 8014730:	2b00      	cmp	r3, #0
 8014732:	d020      	beq.n	8014776 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	3302      	adds	r3, #2
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d105      	bne.n	801474a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801473e:	2206      	movs	r2, #6
 8014740:	4923      	ldr	r1, [pc, #140]	; (80147d0 <SCSI_Inquiry+0xf4>)
 8014742:	69b8      	ldr	r0, [r7, #24]
 8014744:	f001 f84a 	bl	80157dc <SCSI_UpdateBotData>
 8014748:	e03c      	b.n	80147c4 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	3302      	adds	r3, #2
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	2b80      	cmp	r3, #128	; 0x80
 8014752:	d105      	bne.n	8014760 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014754:	2208      	movs	r2, #8
 8014756:	491f      	ldr	r1, [pc, #124]	; (80147d4 <SCSI_Inquiry+0xf8>)
 8014758:	69b8      	ldr	r0, [r7, #24]
 801475a:	f001 f83f 	bl	80157dc <SCSI_UpdateBotData>
 801475e:	e031      	b.n	80147c4 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014760:	69bb      	ldr	r3, [r7, #24]
 8014762:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014766:	2324      	movs	r3, #36	; 0x24
 8014768:	2205      	movs	r2, #5
 801476a:	68f8      	ldr	r0, [r7, #12]
 801476c:	f000 fac6 	bl	8014cfc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014770:	f04f 33ff 	mov.w	r3, #4294967295
 8014774:	e027      	b.n	80147c6 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	33b0      	adds	r3, #176	; 0xb0
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	4413      	add	r3, r2
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	69d9      	ldr	r1, [r3, #28]
 8014788:	7afa      	ldrb	r2, [r7, #11]
 801478a:	4613      	mov	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	4413      	add	r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	440b      	add	r3, r1
 8014794:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	3304      	adds	r3, #4
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	b29b      	uxth	r3, r3
 801479e:	3305      	adds	r3, #5
 80147a0:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	3304      	adds	r3, #4
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	8bfa      	ldrh	r2, [r7, #30]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d303      	bcc.n	80147b8 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	3304      	adds	r3, #4
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80147b8:	8bfb      	ldrh	r3, [r7, #30]
 80147ba:	461a      	mov	r2, r3
 80147bc:	6979      	ldr	r1, [r7, #20]
 80147be:	69b8      	ldr	r0, [r7, #24]
 80147c0:	f001 f80c 	bl	80157dc <SCSI_UpdateBotData>
  }

  return 0;
 80147c4:	2300      	movs	r3, #0
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3720      	adds	r7, #32
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	20000090 	.word	0x20000090
 80147d4:	20000098 	.word	0x20000098

080147d8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b086      	sub	sp, #24
 80147dc:	af00      	add	r7, sp, #0
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	460b      	mov	r3, r1
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	32b0      	adds	r2, #176	; 0xb0
 80147f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d102      	bne.n	8014802 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80147fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014800:	e064      	b.n	80148cc <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	33b0      	adds	r3, #176	; 0xb0
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	4413      	add	r3, r2
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	697a      	ldr	r2, [r7, #20]
 8014816:	f602 0168 	addw	r1, r2, #2152	; 0x868
 801481a:	697a      	ldr	r2, [r7, #20]
 801481c:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8014820:	7af8      	ldrb	r0, [r7, #11]
 8014822:	4798      	blx	r3
 8014824:	4603      	mov	r3, r0
 8014826:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d104      	bne.n	801483a <SCSI_ReadCapacity10+0x62>
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014836:	2b02      	cmp	r3, #2
 8014838:	d108      	bne.n	801484c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801483a:	7af9      	ldrb	r1, [r7, #11]
 801483c:	233a      	movs	r3, #58	; 0x3a
 801483e:	2202      	movs	r2, #2
 8014840:	68f8      	ldr	r0, [r7, #12]
 8014842:	f000 fa5b 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8014846:	f04f 33ff 	mov.w	r3, #4294967295
 801484a:	e03f      	b.n	80148cc <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014852:	3b01      	subs	r3, #1
 8014854:	0e1b      	lsrs	r3, r3, #24
 8014856:	b2da      	uxtb	r2, r3
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014862:	3b01      	subs	r3, #1
 8014864:	0c1b      	lsrs	r3, r3, #16
 8014866:	b2da      	uxtb	r2, r3
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014872:	3b01      	subs	r3, #1
 8014874:	0a1b      	lsrs	r3, r3, #8
 8014876:	b2da      	uxtb	r2, r3
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014882:	b2db      	uxtb	r3, r3
 8014884:	3b01      	subs	r3, #1
 8014886:	b2da      	uxtb	r2, r3
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014892:	161b      	asrs	r3, r3, #24
 8014894:	b2da      	uxtb	r2, r3
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80148a0:	141b      	asrs	r3, r3, #16
 80148a2:	b2da      	uxtb	r2, r3
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80148ae:	0a1b      	lsrs	r3, r3, #8
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	b2da      	uxtb	r2, r3
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2208      	movs	r2, #8
 80148c8:	60da      	str	r2, [r3, #12]

  return 0;
 80148ca:	2300      	movs	r3, #0

}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3718      	adds	r7, #24
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b088      	sub	sp, #32
 80148d8:	af00      	add	r7, sp, #0
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	460b      	mov	r3, r1
 80148de:	607a      	str	r2, [r7, #4]
 80148e0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	32b0      	adds	r2, #176	; 0xb0
 80148ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d102      	bne.n	80148fe <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80148f8:	f04f 33ff 	mov.w	r3, #4294967295
 80148fc:	e099      	b.n	8014a32 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	33b0      	adds	r3, #176	; 0xb0
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	4413      	add	r3, r2
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	69ba      	ldr	r2, [r7, #24]
 8014912:	f602 0168 	addw	r1, r2, #2152	; 0x868
 8014916:	69ba      	ldr	r2, [r7, #24]
 8014918:	f602 0264 	addw	r2, r2, #2148	; 0x864
 801491c:	7af8      	ldrb	r0, [r7, #11]
 801491e:	4798      	blx	r3
 8014920:	4603      	mov	r3, r0
 8014922:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d104      	bne.n	8014936 <SCSI_ReadCapacity16+0x62>
 801492c:	69bb      	ldr	r3, [r7, #24]
 801492e:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014932:	2b02      	cmp	r3, #2
 8014934:	d108      	bne.n	8014948 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014936:	7af9      	ldrb	r1, [r7, #11]
 8014938:	233a      	movs	r3, #58	; 0x3a
 801493a:	2202      	movs	r2, #2
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f000 f9dd 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8014942:	f04f 33ff 	mov.w	r3, #4294967295
 8014946:	e074      	b.n	8014a32 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	330a      	adds	r3, #10
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	330b      	adds	r3, #11
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014958:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	330c      	adds	r3, #12
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014962:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	320d      	adds	r2, #13
 8014968:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801496a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801496c:	69bb      	ldr	r3, [r7, #24]
 801496e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014970:	2300      	movs	r3, #0
 8014972:	77fb      	strb	r3, [r7, #31]
 8014974:	e007      	b.n	8014986 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8014976:	7ffb      	ldrb	r3, [r7, #31]
 8014978:	69ba      	ldr	r2, [r7, #24]
 801497a:	4413      	add	r3, r2
 801497c:	2200      	movs	r2, #0
 801497e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014980:	7ffb      	ldrb	r3, [r7, #31]
 8014982:	3301      	adds	r3, #1
 8014984:	77fb      	strb	r3, [r7, #31]
 8014986:	7ffa      	ldrb	r2, [r7, #31]
 8014988:	69bb      	ldr	r3, [r7, #24]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	429a      	cmp	r2, r3
 801498e:	d3f2      	bcc.n	8014976 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014996:	3b01      	subs	r3, #1
 8014998:	0e1b      	lsrs	r3, r3, #24
 801499a:	b2da      	uxtb	r2, r3
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80149a6:	3b01      	subs	r3, #1
 80149a8:	0c1b      	lsrs	r3, r3, #16
 80149aa:	b2da      	uxtb	r2, r3
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80149b6:	3b01      	subs	r3, #1
 80149b8:	0a1b      	lsrs	r3, r3, #8
 80149ba:	b2da      	uxtb	r2, r3
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80149c0:	69bb      	ldr	r3, [r7, #24]
 80149c2:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	3b01      	subs	r3, #1
 80149ca:	b2da      	uxtb	r2, r3
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80149d6:	161b      	asrs	r3, r3, #24
 80149d8:	b2da      	uxtb	r2, r3
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80149e4:	141b      	asrs	r3, r3, #16
 80149e6:	b2da      	uxtb	r2, r3
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80149ec:	69bb      	ldr	r3, [r7, #24]
 80149ee:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80149f2:	0a1b      	lsrs	r3, r3, #8
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	b2da      	uxtb	r2, r3
 80149f8:	69bb      	ldr	r3, [r7, #24]
 80149fa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014a02:	b2da      	uxtb	r2, r3
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	330a      	adds	r3, #10
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	330b      	adds	r3, #11
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014a18:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	330c      	adds	r3, #12
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014a22:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	320d      	adds	r2, #13
 8014a28:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014a2a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	60da      	str	r2, [r3, #12]

  return 0;
 8014a30:	2300      	movs	r3, #0
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3720      	adds	r7, #32
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014a3a:	b580      	push	{r7, lr}
 8014a3c:	b088      	sub	sp, #32
 8014a3e:	af00      	add	r7, sp, #0
 8014a40:	60f8      	str	r0, [r7, #12]
 8014a42:	460b      	mov	r3, r1
 8014a44:	607a      	str	r2, [r7, #4]
 8014a46:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	32b0      	adds	r2, #176	; 0xb0
 8014a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a56:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014a58:	69bb      	ldr	r3, [r7, #24]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d102      	bne.n	8014a64 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8014a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a62:	e061      	b.n	8014b28 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a6a:	68fa      	ldr	r2, [r7, #12]
 8014a6c:	33b0      	adds	r3, #176	; 0xb0
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4413      	add	r3, r2
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	f107 0214 	add.w	r2, r7, #20
 8014a7a:	f107 0110 	add.w	r1, r7, #16
 8014a7e:	7af8      	ldrb	r0, [r7, #11]
 8014a80:	4798      	blx	r3
 8014a82:	4603      	mov	r3, r0
 8014a84:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d104      	bne.n	8014a98 <SCSI_ReadFormatCapacity+0x5e>
 8014a8e:	69bb      	ldr	r3, [r7, #24]
 8014a90:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d108      	bne.n	8014aaa <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a98:	7af9      	ldrb	r1, [r7, #11]
 8014a9a:	233a      	movs	r3, #58	; 0x3a
 8014a9c:	2202      	movs	r2, #2
 8014a9e:	68f8      	ldr	r0, [r7, #12]
 8014aa0:	f000 f92c 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8014aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa8:	e03e      	b.n	8014b28 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8014aaa:	2300      	movs	r3, #0
 8014aac:	83fb      	strh	r3, [r7, #30]
 8014aae:	e007      	b.n	8014ac0 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014ab0:	8bfb      	ldrh	r3, [r7, #30]
 8014ab2:	69ba      	ldr	r2, [r7, #24]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014aba:	8bfb      	ldrh	r3, [r7, #30]
 8014abc:	3301      	adds	r3, #1
 8014abe:	83fb      	strh	r3, [r7, #30]
 8014ac0:	8bfb      	ldrh	r3, [r7, #30]
 8014ac2:	2b0b      	cmp	r3, #11
 8014ac4:	d9f4      	bls.n	8014ab0 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	2208      	movs	r2, #8
 8014aca:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8014acc:	693b      	ldr	r3, [r7, #16]
 8014ace:	3b01      	subs	r3, #1
 8014ad0:	0e1b      	lsrs	r3, r3, #24
 8014ad2:	b2da      	uxtb	r2, r3
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	3b01      	subs	r3, #1
 8014adc:	0c1b      	lsrs	r3, r3, #16
 8014ade:	b2da      	uxtb	r2, r3
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014ae4:	693b      	ldr	r3, [r7, #16]
 8014ae6:	3b01      	subs	r3, #1
 8014ae8:	0a1b      	lsrs	r3, r3, #8
 8014aea:	b2da      	uxtb	r2, r3
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	3b01      	subs	r3, #1
 8014af6:	b2da      	uxtb	r2, r3
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014afc:	69bb      	ldr	r3, [r7, #24]
 8014afe:	2202      	movs	r2, #2
 8014b00:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014b02:	8abb      	ldrh	r3, [r7, #20]
 8014b04:	141b      	asrs	r3, r3, #16
 8014b06:	b2da      	uxtb	r2, r3
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014b0c:	8abb      	ldrh	r3, [r7, #20]
 8014b0e:	0a1b      	lsrs	r3, r3, #8
 8014b10:	b29b      	uxth	r3, r3
 8014b12:	b2da      	uxtb	r2, r3
 8014b14:	69bb      	ldr	r3, [r7, #24]
 8014b16:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8014b18:	8abb      	ldrh	r3, [r7, #20]
 8014b1a:	b2da      	uxtb	r2, r3
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	220c      	movs	r2, #12
 8014b24:	60da      	str	r2, [r3, #12]

  return 0;
 8014b26:	2300      	movs	r3, #0
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3720      	adds	r7, #32
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b086      	sub	sp, #24
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	60f8      	str	r0, [r7, #12]
 8014b38:	460b      	mov	r3, r1
 8014b3a:	607a      	str	r2, [r7, #4]
 8014b3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	32b0      	adds	r2, #176	; 0xb0
 8014b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b4c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014b4e:	2317      	movs	r3, #23
 8014b50:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d102      	bne.n	8014b5e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8014b58:	f04f 33ff 	mov.w	r3, #4294967295
 8014b5c:	e011      	b.n	8014b82 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	3304      	adds	r3, #4
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	8afa      	ldrh	r2, [r7, #22]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d303      	bcc.n	8014b74 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	3304      	adds	r3, #4
 8014b70:	781b      	ldrb	r3, [r3, #0]
 8014b72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014b74:	8afb      	ldrh	r3, [r7, #22]
 8014b76:	461a      	mov	r2, r3
 8014b78:	4904      	ldr	r1, [pc, #16]	; (8014b8c <SCSI_ModeSense6+0x5c>)
 8014b7a:	6938      	ldr	r0, [r7, #16]
 8014b7c:	f000 fe2e 	bl	80157dc <SCSI_UpdateBotData>

  return 0;
 8014b80:	2300      	movs	r3, #0
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3718      	adds	r7, #24
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	200000a0 	.word	0x200000a0

08014b90 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b086      	sub	sp, #24
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	607a      	str	r2, [r7, #4]
 8014b9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	32b0      	adds	r2, #176	; 0xb0
 8014ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8014bae:	231b      	movs	r3, #27
 8014bb0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d102      	bne.n	8014bbe <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8014bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bbc:	e011      	b.n	8014be2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	3308      	adds	r3, #8
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	8afa      	ldrh	r2, [r7, #22]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d303      	bcc.n	8014bd4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014bd4:	8afb      	ldrh	r3, [r7, #22]
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	4904      	ldr	r1, [pc, #16]	; (8014bec <SCSI_ModeSense10+0x5c>)
 8014bda:	6938      	ldr	r0, [r7, #16]
 8014bdc:	f000 fdfe 	bl	80157dc <SCSI_UpdateBotData>

  return 0;
 8014be0:	2300      	movs	r3, #0
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3718      	adds	r7, #24
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	200000b8 	.word	0x200000b8

08014bf0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b086      	sub	sp, #24
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	607a      	str	r2, [r7, #4]
 8014bfc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	32b0      	adds	r2, #176	; 0xb0
 8014c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c0c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d102      	bne.n	8014c1a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
 8014c18:	e06c      	b.n	8014cf4 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d10a      	bne.n	8014c3a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c2a:	2320      	movs	r3, #32
 8014c2c:	2205      	movs	r2, #5
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	f000 f864 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8014c34:	f04f 33ff 	mov.w	r3, #4294967295
 8014c38:	e05c      	b.n	8014cf4 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	75fb      	strb	r3, [r7, #23]
 8014c3e:	e007      	b.n	8014c50 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8014c40:	7dfb      	ldrb	r3, [r7, #23]
 8014c42:	693a      	ldr	r2, [r7, #16]
 8014c44:	4413      	add	r3, r2
 8014c46:	2200      	movs	r2, #0
 8014c48:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014c4a:	7dfb      	ldrb	r3, [r7, #23]
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	75fb      	strb	r3, [r7, #23]
 8014c50:	7dfb      	ldrb	r3, [r7, #23]
 8014c52:	2b11      	cmp	r3, #17
 8014c54:	d9f4      	bls.n	8014c40 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	2270      	movs	r2, #112	; 0x70
 8014c5a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	220c      	movs	r2, #12
 8014c60:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d031      	beq.n	8014cd6 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014c78:	461a      	mov	r2, r3
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014c80:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014c8e:	693a      	ldr	r2, [r7, #16]
 8014c90:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014c94:	00db      	lsls	r3, r3, #3
 8014c96:	4413      	add	r3, r2
 8014c98:	791a      	ldrb	r2, [r3, #4]
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014ca4:	693a      	ldr	r2, [r7, #16]
 8014ca6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014caa:	00db      	lsls	r3, r3, #3
 8014cac:	4413      	add	r3, r2
 8014cae:	795a      	ldrb	r2, [r3, #5]
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014cba:	3301      	adds	r3, #1
 8014cbc:	b2da      	uxtb	r2, r3
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014cca:	2b04      	cmp	r3, #4
 8014ccc:	d103      	bne.n	8014cd6 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	2212      	movs	r2, #18
 8014cda:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	3304      	adds	r3, #4
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	2b12      	cmp	r3, #18
 8014ce4:	d805      	bhi.n	8014cf2 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3304      	adds	r3, #4
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	461a      	mov	r2, r3
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3718      	adds	r7, #24
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b085      	sub	sp, #20
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	4608      	mov	r0, r1
 8014d06:	4611      	mov	r1, r2
 8014d08:	461a      	mov	r2, r3
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	70fb      	strb	r3, [r7, #3]
 8014d0e:	460b      	mov	r3, r1
 8014d10:	70bb      	strb	r3, [r7, #2]
 8014d12:	4613      	mov	r3, r2
 8014d14:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	32b0      	adds	r2, #176	; 0xb0
 8014d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d24:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d02f      	beq.n	8014d8c <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014d32:	461a      	mov	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014d3a:	78b9      	ldrb	r1, [r7, #2]
 8014d3c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014d4c:	00db      	lsls	r3, r3, #3
 8014d4e:	4413      	add	r3, r2
 8014d50:	787a      	ldrb	r2, [r7, #1]
 8014d52:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014d5a:	68fa      	ldr	r2, [r7, #12]
 8014d5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014d60:	00db      	lsls	r3, r3, #3
 8014d62:	4413      	add	r3, r2
 8014d64:	2200      	movs	r2, #0
 8014d66:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014d6e:	3301      	adds	r3, #1
 8014d70:	b2da      	uxtb	r2, r3
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014d7e:	2b04      	cmp	r3, #4
 8014d80:	d105      	bne.n	8014d8e <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2200      	movs	r2, #0
 8014d86:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8014d8a:	e000      	b.n	8014d8e <SCSI_SenseCode+0x92>
    return;
 8014d8c:	bf00      	nop
  }
}
 8014d8e:	3714      	adds	r7, #20
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr

08014d98 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	460b      	mov	r3, r1
 8014da2:	607a      	str	r2, [r7, #4]
 8014da4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	32b0      	adds	r2, #176	; 0xb0
 8014db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014db4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d102      	bne.n	8014dc2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8014dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc0:	e03b      	b.n	8014e3a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d10f      	bne.n	8014dec <SCSI_StartStopUnit+0x54>
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	3304      	adds	r3, #4
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	f003 0303 	and.w	r3, r3, #3
 8014dd6:	2b02      	cmp	r3, #2
 8014dd8:	d108      	bne.n	8014dec <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014dda:	7af9      	ldrb	r1, [r7, #11]
 8014ddc:	2324      	movs	r3, #36	; 0x24
 8014dde:	2205      	movs	r2, #5
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f7ff ff8b 	bl	8014cfc <SCSI_SenseCode>

    return -1;
 8014de6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dea:	e026      	b.n	8014e3a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	3304      	adds	r3, #4
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	f003 0303 	and.w	r3, r3, #3
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d104      	bne.n	8014e04 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014e02:	e016      	b.n	8014e32 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3304      	adds	r3, #4
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	f003 0303 	and.w	r3, r3, #3
 8014e0e:	2b02      	cmp	r3, #2
 8014e10:	d104      	bne.n	8014e1c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	2202      	movs	r2, #2
 8014e16:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014e1a:	e00a      	b.n	8014e32 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	3304      	adds	r3, #4
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	f003 0303 	and.w	r3, r3, #3
 8014e26:	2b03      	cmp	r3, #3
 8014e28:	d103      	bne.n	8014e32 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	2200      	movs	r2, #0
 8014e36:	60da      	str	r2, [r3, #12]

  return 0;
 8014e38:	2300      	movs	r3, #0
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3718      	adds	r7, #24
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e42:	b480      	push	{r7}
 8014e44:	b087      	sub	sp, #28
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	60f8      	str	r0, [r7, #12]
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	607a      	str	r2, [r7, #4]
 8014e4e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	32b0      	adds	r2, #176	; 0xb0
 8014e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e5e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d102      	bne.n	8014e6c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8014e66:	f04f 33ff 	mov.w	r3, #4294967295
 8014e6a:	e011      	b.n	8014e90 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	3304      	adds	r3, #4
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d104      	bne.n	8014e80 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014e76:	697b      	ldr	r3, [r7, #20]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014e7e:	e003      	b.n	8014e88 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	2201      	movs	r2, #1
 8014e84:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	60da      	str	r2, [r3, #12]

  return 0;
 8014e8e:	2300      	movs	r3, #0
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	371c      	adds	r7, #28
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b086      	sub	sp, #24
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	32b0      	adds	r2, #176	; 0xb0
 8014eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eb8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d102      	bne.n	8014ec6 <SCSI_Read10+0x2a>
  {
    return -1;
 8014ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec4:	e090      	b.n	8014fe8 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	7a1b      	ldrb	r3, [r3, #8]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	f040 8082 	bne.w	8014fd4 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014ed6:	b25b      	sxtb	r3, r3
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	db0a      	blt.n	8014ef2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014ee2:	2320      	movs	r3, #32
 8014ee4:	2205      	movs	r2, #5
 8014ee6:	68f8      	ldr	r0, [r7, #12]
 8014ee8:	f7ff ff08 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8014eec:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef0:	e07a      	b.n	8014fe8 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014ef8:	2b02      	cmp	r3, #2
 8014efa:	d108      	bne.n	8014f0e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014efc:	7af9      	ldrb	r1, [r7, #11]
 8014efe:	233a      	movs	r3, #58	; 0x3a
 8014f00:	2202      	movs	r2, #2
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	f7ff fefa 	bl	8014cfc <SCSI_SenseCode>

      return -1;
 8014f08:	f04f 33ff 	mov.w	r3, #4294967295
 8014f0c:	e06c      	b.n	8014fe8 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f14:	68fa      	ldr	r2, [r7, #12]
 8014f16:	33b0      	adds	r3, #176	; 0xb0
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	4413      	add	r3, r2
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	689b      	ldr	r3, [r3, #8]
 8014f20:	7afa      	ldrb	r2, [r7, #11]
 8014f22:	4610      	mov	r0, r2
 8014f24:	4798      	blx	r3
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d008      	beq.n	8014f3e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014f2c:	7af9      	ldrb	r1, [r7, #11]
 8014f2e:	233a      	movs	r3, #58	; 0x3a
 8014f30:	2202      	movs	r2, #2
 8014f32:	68f8      	ldr	r0, [r7, #12]
 8014f34:	f7ff fee2 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8014f38:	f04f 33ff 	mov.w	r3, #4294967295
 8014f3c:	e054      	b.n	8014fe8 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	3302      	adds	r3, #2
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	3303      	adds	r3, #3
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014f4e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	3304      	adds	r3, #4
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014f58:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	3205      	adds	r2, #5
 8014f5e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014f60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	3307      	adds	r3, #7
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	021b      	lsls	r3, r3, #8
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	3208      	adds	r2, #8
 8014f74:	7812      	ldrb	r2, [r2, #0]
 8014f76:	431a      	orrs	r2, r3
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014f8a:	7af9      	ldrb	r1, [r7, #11]
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f000 fadc 	bl	801554a <SCSI_CheckAddressRange>
 8014f92:	4603      	mov	r3, r0
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	da02      	bge.n	8014f9e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014f98:	f04f 33ff 	mov.w	r3, #4294967295
 8014f9c:	e024      	b.n	8014fe8 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014faa:	6979      	ldr	r1, [r7, #20]
 8014fac:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014fb0:	fb01 f303 	mul.w	r3, r1, r3
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d00a      	beq.n	8014fce <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014fbe:	2320      	movs	r3, #32
 8014fc0:	2205      	movs	r2, #5
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	f7ff fe9a 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8014fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fcc:	e00c      	b.n	8014fe8 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	2202      	movs	r2, #2
 8014fd2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014fda:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014fdc:	7afb      	ldrb	r3, [r7, #11]
 8014fde:	4619      	mov	r1, r3
 8014fe0:	68f8      	ldr	r0, [r7, #12]
 8014fe2:	f000 fadf 	bl	80155a4 <SCSI_ProcessRead>
 8014fe6:	4603      	mov	r3, r0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	607a      	str	r2, [r7, #4]
 8014ffc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	32b0      	adds	r2, #176	; 0xb0
 8015008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801500c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d102      	bne.n	801501a <SCSI_Read12+0x2a>
  {
    return -1;
 8015014:	f04f 33ff 	mov.w	r3, #4294967295
 8015018:	e09a      	b.n	8015150 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	7a1b      	ldrb	r3, [r3, #8]
 801501e:	2b00      	cmp	r3, #0
 8015020:	f040 808c 	bne.w	801513c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 801502a:	b25b      	sxtb	r3, r3
 801502c:	2b00      	cmp	r3, #0
 801502e:	db0a      	blt.n	8015046 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015036:	2320      	movs	r3, #32
 8015038:	2205      	movs	r2, #5
 801503a:	68f8      	ldr	r0, [r7, #12]
 801503c:	f7ff fe5e 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8015040:	f04f 33ff 	mov.w	r3, #4294967295
 8015044:	e084      	b.n	8015150 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 801504c:	2b02      	cmp	r3, #2
 801504e:	d108      	bne.n	8015062 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015050:	7af9      	ldrb	r1, [r7, #11]
 8015052:	233a      	movs	r3, #58	; 0x3a
 8015054:	2202      	movs	r2, #2
 8015056:	68f8      	ldr	r0, [r7, #12]
 8015058:	f7ff fe50 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 801505c:	f04f 33ff 	mov.w	r3, #4294967295
 8015060:	e076      	b.n	8015150 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015068:	68fa      	ldr	r2, [r7, #12]
 801506a:	33b0      	adds	r3, #176	; 0xb0
 801506c:	009b      	lsls	r3, r3, #2
 801506e:	4413      	add	r3, r2
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	7afa      	ldrb	r2, [r7, #11]
 8015076:	4610      	mov	r0, r2
 8015078:	4798      	blx	r3
 801507a:	4603      	mov	r3, r0
 801507c:	2b00      	cmp	r3, #0
 801507e:	d008      	beq.n	8015092 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015080:	7af9      	ldrb	r1, [r7, #11]
 8015082:	233a      	movs	r3, #58	; 0x3a
 8015084:	2202      	movs	r2, #2
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7ff fe38 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 801508c:	f04f 33ff 	mov.w	r3, #4294967295
 8015090:	e05e      	b.n	8015150 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	3302      	adds	r3, #2
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	3303      	adds	r3, #3
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80150a2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	3304      	adds	r3, #4
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80150ac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	3205      	adds	r2, #5
 80150b2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80150b4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	3306      	adds	r3, #6
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3307      	adds	r3, #7
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80150cc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3308      	adds	r3, #8
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80150d6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	3209      	adds	r2, #9
 80150dc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80150de:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80150f2:	7af9      	ldrb	r1, [r7, #11]
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f000 fa28 	bl	801554a <SCSI_CheckAddressRange>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	da02      	bge.n	8015106 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015100:	f04f 33ff 	mov.w	r3, #4294967295
 8015104:	e024      	b.n	8015150 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015112:	6979      	ldr	r1, [r7, #20]
 8015114:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8015118:	fb01 f303 	mul.w	r3, r1, r3
 801511c:	429a      	cmp	r2, r3
 801511e:	d00a      	beq.n	8015136 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015126:	2320      	movs	r3, #32
 8015128:	2205      	movs	r2, #5
 801512a:	68f8      	ldr	r0, [r7, #12]
 801512c:	f7ff fde6 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8015130:	f04f 33ff 	mov.w	r3, #4294967295
 8015134:	e00c      	b.n	8015150 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	2202      	movs	r2, #2
 801513a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015142:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015144:	7afb      	ldrb	r3, [r7, #11]
 8015146:	4619      	mov	r1, r3
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f000 fa2b 	bl	80155a4 <SCSI_ProcessRead>
 801514e:	4603      	mov	r3, r0
}
 8015150:	4618      	mov	r0, r3
 8015152:	3718      	adds	r7, #24
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b086      	sub	sp, #24
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	460b      	mov	r3, r1
 8015162:	607a      	str	r2, [r7, #4]
 8015164:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	32b0      	adds	r2, #176	; 0xb0
 8015170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015174:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d102      	bne.n	8015182 <SCSI_Write10+0x2a>
  {
    return -1;
 801517c:	f04f 33ff 	mov.w	r3, #4294967295
 8015180:	e0ba      	b.n	80152f8 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	7a1b      	ldrb	r3, [r3, #8]
 8015186:	2b00      	cmp	r3, #0
 8015188:	f040 80b0 	bne.w	80152ec <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8015192:	2b00      	cmp	r3, #0
 8015194:	d10a      	bne.n	80151ac <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801519c:	2320      	movs	r3, #32
 801519e:	2205      	movs	r2, #5
 80151a0:	68f8      	ldr	r0, [r7, #12]
 80151a2:	f7ff fdab 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 80151a6:	f04f 33ff 	mov.w	r3, #4294967295
 80151aa:	e0a5      	b.n	80152f8 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80151b2:	b25b      	sxtb	r3, r3
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	da0a      	bge.n	80151ce <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80151be:	2320      	movs	r3, #32
 80151c0:	2205      	movs	r2, #5
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	f7ff fd9a 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 80151c8:	f04f 33ff 	mov.w	r3, #4294967295
 80151cc:	e094      	b.n	80152f8 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	33b0      	adds	r3, #176	; 0xb0
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	4413      	add	r3, r2
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	689b      	ldr	r3, [r3, #8]
 80151e0:	7afa      	ldrb	r2, [r7, #11]
 80151e2:	4610      	mov	r0, r2
 80151e4:	4798      	blx	r3
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d008      	beq.n	80151fe <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80151ec:	7af9      	ldrb	r1, [r7, #11]
 80151ee:	233a      	movs	r3, #58	; 0x3a
 80151f0:	2202      	movs	r2, #2
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	f7ff fd82 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 80151f8:	f04f 33ff 	mov.w	r3, #4294967295
 80151fc:	e07c      	b.n	80152f8 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015204:	68fa      	ldr	r2, [r7, #12]
 8015206:	33b0      	adds	r3, #176	; 0xb0
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	4413      	add	r3, r2
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	7afa      	ldrb	r2, [r7, #11]
 8015212:	4610      	mov	r0, r2
 8015214:	4798      	blx	r3
 8015216:	4603      	mov	r3, r0
 8015218:	2b00      	cmp	r3, #0
 801521a:	d008      	beq.n	801522e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801521c:	7af9      	ldrb	r1, [r7, #11]
 801521e:	2327      	movs	r3, #39	; 0x27
 8015220:	2202      	movs	r2, #2
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f7ff fd6a 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8015228:	f04f 33ff 	mov.w	r3, #4294967295
 801522c:	e064      	b.n	80152f8 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	3302      	adds	r3, #2
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	3303      	adds	r3, #3
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801523e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	3304      	adds	r3, #4
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015248:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	3205      	adds	r2, #5
 801524e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015250:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	3307      	adds	r3, #7
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	3208      	adds	r2, #8
 8015264:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015266:	431a      	orrs	r2, r3
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801527a:	7af9      	ldrb	r1, [r7, #11]
 801527c:	68f8      	ldr	r0, [r7, #12]
 801527e:	f000 f964 	bl	801554a <SCSI_CheckAddressRange>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	da02      	bge.n	801528e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015288:	f04f 33ff 	mov.w	r3, #4294967295
 801528c:	e034      	b.n	80152f8 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015294:	697a      	ldr	r2, [r7, #20]
 8015296:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801529a:	fb02 f303 	mul.w	r3, r2, r3
 801529e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80152a6:	693a      	ldr	r2, [r7, #16]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d00a      	beq.n	80152c2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80152b2:	2320      	movs	r3, #32
 80152b4:	2205      	movs	r2, #5
 80152b6:	68f8      	ldr	r0, [r7, #12]
 80152b8:	f7ff fd20 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 80152bc:	f04f 33ff 	mov.w	r3, #4294967295
 80152c0:	e01a      	b.n	80152f8 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152c8:	bf28      	it	cs
 80152ca:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80152ce:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	2201      	movs	r2, #1
 80152d4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80152d6:	4b0a      	ldr	r3, [pc, #40]	; (8015300 <SCSI_Write10+0x1a8>)
 80152d8:	7819      	ldrb	r1, [r3, #0]
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	f103 0210 	add.w	r2, r3, #16
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	68f8      	ldr	r0, [r7, #12]
 80152e4:	f005 ffd1 	bl	801b28a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	e005      	b.n	80152f8 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80152ec:	7afb      	ldrb	r3, [r7, #11]
 80152ee:	4619      	mov	r1, r3
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f000 f9dd 	bl	80156b0 <SCSI_ProcessWrite>
 80152f6:	4603      	mov	r3, r0
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3718      	adds	r7, #24
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}
 8015300:	2000008f 	.word	0x2000008f

08015304 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b086      	sub	sp, #24
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	460b      	mov	r3, r1
 801530e:	607a      	str	r2, [r7, #4]
 8015310:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	32b0      	adds	r2, #176	; 0xb0
 801531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015320:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d102      	bne.n	801532e <SCSI_Write12+0x2a>
  {
    return -1;
 8015328:	f04f 33ff 	mov.w	r3, #4294967295
 801532c:	e0ca      	b.n	80154c4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	7a1b      	ldrb	r3, [r3, #8]
 8015332:	2b00      	cmp	r3, #0
 8015334:	f040 80c0 	bne.w	80154b8 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801533e:	2b00      	cmp	r3, #0
 8015340:	d10a      	bne.n	8015358 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015348:	2320      	movs	r3, #32
 801534a:	2205      	movs	r2, #5
 801534c:	68f8      	ldr	r0, [r7, #12]
 801534e:	f7ff fcd5 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8015352:	f04f 33ff 	mov.w	r3, #4294967295
 8015356:	e0b5      	b.n	80154c4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 801535e:	b25b      	sxtb	r3, r3
 8015360:	2b00      	cmp	r3, #0
 8015362:	da0a      	bge.n	801537a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801536a:	2320      	movs	r3, #32
 801536c:	2205      	movs	r2, #5
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f7ff fcc4 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8015374:	f04f 33ff 	mov.w	r3, #4294967295
 8015378:	e0a4      	b.n	80154c4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015380:	68fa      	ldr	r2, [r7, #12]
 8015382:	33b0      	adds	r3, #176	; 0xb0
 8015384:	009b      	lsls	r3, r3, #2
 8015386:	4413      	add	r3, r2
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	689b      	ldr	r3, [r3, #8]
 801538c:	7afa      	ldrb	r2, [r7, #11]
 801538e:	4610      	mov	r0, r2
 8015390:	4798      	blx	r3
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00b      	beq.n	80153b0 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015398:	7af9      	ldrb	r1, [r7, #11]
 801539a:	233a      	movs	r3, #58	; 0x3a
 801539c:	2202      	movs	r2, #2
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	f7ff fcac 	bl	8014cfc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	2205      	movs	r2, #5
 80153a8:	721a      	strb	r2, [r3, #8]
      return -1;
 80153aa:	f04f 33ff 	mov.w	r3, #4294967295
 80153ae:	e089      	b.n	80154c4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80153b6:	68fa      	ldr	r2, [r7, #12]
 80153b8:	33b0      	adds	r3, #176	; 0xb0
 80153ba:	009b      	lsls	r3, r3, #2
 80153bc:	4413      	add	r3, r2
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	7afa      	ldrb	r2, [r7, #11]
 80153c4:	4610      	mov	r0, r2
 80153c6:	4798      	blx	r3
 80153c8:	4603      	mov	r3, r0
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00b      	beq.n	80153e6 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80153ce:	7af9      	ldrb	r1, [r7, #11]
 80153d0:	2327      	movs	r3, #39	; 0x27
 80153d2:	2202      	movs	r2, #2
 80153d4:	68f8      	ldr	r0, [r7, #12]
 80153d6:	f7ff fc91 	bl	8014cfc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	2205      	movs	r2, #5
 80153de:	721a      	strb	r2, [r3, #8]
      return -1;
 80153e0:	f04f 33ff 	mov.w	r3, #4294967295
 80153e4:	e06e      	b.n	80154c4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	3302      	adds	r3, #2
 80153ea:	781b      	ldrb	r3, [r3, #0]
 80153ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	3303      	adds	r3, #3
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80153f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	3304      	adds	r3, #4
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015400:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	3205      	adds	r2, #5
 8015406:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015408:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3306      	adds	r3, #6
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	3307      	adds	r3, #7
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015420:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	3308      	adds	r3, #8
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801542a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	3209      	adds	r2, #9
 8015430:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015432:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015446:	7af9      	ldrb	r1, [r7, #11]
 8015448:	68f8      	ldr	r0, [r7, #12]
 801544a:	f000 f87e 	bl	801554a <SCSI_CheckAddressRange>
 801544e:	4603      	mov	r3, r0
 8015450:	2b00      	cmp	r3, #0
 8015452:	da02      	bge.n	801545a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015454:	f04f 33ff 	mov.w	r3, #4294967295
 8015458:	e034      	b.n	80154c4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015460:	697a      	ldr	r2, [r7, #20]
 8015462:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015466:	fb02 f303 	mul.w	r3, r2, r3
 801546a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8015472:	693a      	ldr	r2, [r7, #16]
 8015474:	429a      	cmp	r2, r3
 8015476:	d00a      	beq.n	801548e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801547e:	2320      	movs	r3, #32
 8015480:	2205      	movs	r2, #5
 8015482:	68f8      	ldr	r0, [r7, #12]
 8015484:	f7ff fc3a 	bl	8014cfc <SCSI_SenseCode>
      return -1;
 8015488:	f04f 33ff 	mov.w	r3, #4294967295
 801548c:	e01a      	b.n	80154c4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015494:	bf28      	it	cs
 8015496:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 801549a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	2201      	movs	r2, #1
 80154a0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80154a2:	4b0a      	ldr	r3, [pc, #40]	; (80154cc <SCSI_Write12+0x1c8>)
 80154a4:	7819      	ldrb	r1, [r3, #0]
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	f103 0210 	add.w	r2, r3, #16
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	68f8      	ldr	r0, [r7, #12]
 80154b0:	f005 feeb 	bl	801b28a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80154b4:	2300      	movs	r3, #0
 80154b6:	e005      	b.n	80154c4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80154b8:	7afb      	ldrb	r3, [r7, #11]
 80154ba:	4619      	mov	r1, r3
 80154bc:	68f8      	ldr	r0, [r7, #12]
 80154be:	f000 f8f7 	bl	80156b0 <SCSI_ProcessWrite>
 80154c2:	4603      	mov	r3, r0
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3718      	adds	r7, #24
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	2000008f 	.word	0x2000008f

080154d0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b086      	sub	sp, #24
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	460b      	mov	r3, r1
 80154da:	607a      	str	r2, [r7, #4]
 80154dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	32b0      	adds	r2, #176	; 0xb0
 80154e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d102      	bne.n	80154fa <SCSI_Verify10+0x2a>
  {
    return -1;
 80154f4:	f04f 33ff 	mov.w	r3, #4294967295
 80154f8:	e023      	b.n	8015542 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	3301      	adds	r3, #1
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	f003 0302 	and.w	r3, r3, #2
 8015504:	2b00      	cmp	r3, #0
 8015506:	d008      	beq.n	801551a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015508:	7af9      	ldrb	r1, [r7, #11]
 801550a:	2324      	movs	r3, #36	; 0x24
 801550c:	2205      	movs	r2, #5
 801550e:	68f8      	ldr	r0, [r7, #12]
 8015510:	f7ff fbf4 	bl	8014cfc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015514:	f04f 33ff 	mov.w	r3, #4294967295
 8015518:	e013      	b.n	8015542 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015526:	7af9      	ldrb	r1, [r7, #11]
 8015528:	68f8      	ldr	r0, [r7, #12]
 801552a:	f000 f80e 	bl	801554a <SCSI_CheckAddressRange>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	da02      	bge.n	801553a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8015534:	f04f 33ff 	mov.w	r3, #4294967295
 8015538:	e003      	b.n	8015542 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	2200      	movs	r2, #0
 801553e:	60da      	str	r2, [r3, #12]

  return 0;
 8015540:	2300      	movs	r3, #0
}
 8015542:	4618      	mov	r0, r3
 8015544:	3718      	adds	r7, #24
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801554a:	b580      	push	{r7, lr}
 801554c:	b086      	sub	sp, #24
 801554e:	af00      	add	r7, sp, #0
 8015550:	60f8      	str	r0, [r7, #12]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	603b      	str	r3, [r7, #0]
 8015556:	460b      	mov	r3, r1
 8015558:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	32b0      	adds	r2, #176	; 0xb0
 8015564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015568:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d102      	bne.n	8015576 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015570:	f04f 33ff 	mov.w	r3, #4294967295
 8015574:	e011      	b.n	801559a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015576:	687a      	ldr	r2, [r7, #4]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	441a      	add	r2, r3
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8015582:	429a      	cmp	r2, r3
 8015584:	d908      	bls.n	8015598 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015586:	7af9      	ldrb	r1, [r7, #11]
 8015588:	2321      	movs	r3, #33	; 0x21
 801558a:	2205      	movs	r2, #5
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	f7ff fbb5 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8015592:	f04f 33ff 	mov.w	r3, #4294967295
 8015596:	e000      	b.n	801559a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015598:	2300      	movs	r3, #0
}
 801559a:	4618      	mov	r0, r3
 801559c:	3718      	adds	r7, #24
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
	...

080155a4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80155a4:	b590      	push	{r4, r7, lr}
 80155a6:	b085      	sub	sp, #20
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	460b      	mov	r3, r1
 80155ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	32b0      	adds	r2, #176	; 0xb0
 80155ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155be:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d102      	bne.n	80155cc <SCSI_ProcessRead+0x28>
  {
    return -1;
 80155c6:	f04f 33ff 	mov.w	r3, #4294967295
 80155ca:	e06a      	b.n	80156a2 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80155d2:	68fa      	ldr	r2, [r7, #12]
 80155d4:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80155d8:	fb02 f303 	mul.w	r3, r2, r3
 80155dc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80155e4:	bf28      	it	cs
 80155e6:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80155ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	33b0      	adds	r3, #176	; 0xb0
 80155f6:	009b      	lsls	r3, r3, #2
 80155f8:	4413      	add	r3, r2
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	691c      	ldr	r4, [r3, #16]
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	f103 0110 	add.w	r1, r3, #16
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015610:	4618      	mov	r0, r3
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015618:	b29b      	uxth	r3, r3
 801561a:	78f8      	ldrb	r0, [r7, #3]
 801561c:	47a0      	blx	r4
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	da08      	bge.n	8015636 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015624:	78f9      	ldrb	r1, [r7, #3]
 8015626:	2311      	movs	r3, #17
 8015628:	2204      	movs	r2, #4
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	f7ff fb66 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 8015630:	f04f 33ff 	mov.w	r3, #4294967295
 8015634:	e035      	b.n	80156a2 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8015636:	4b1d      	ldr	r3, [pc, #116]	; (80156ac <SCSI_ProcessRead+0x108>)
 8015638:	7819      	ldrb	r1, [r3, #0]
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	f103 0210 	add.w	r2, r3, #16
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f005 fe00 	bl	801b248 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015654:	4619      	mov	r1, r3
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	fbb3 f3f1 	udiv	r3, r3, r1
 801565c:	441a      	add	r2, r3
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015670:	4619      	mov	r1, r3
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	fbb3 f3f1 	udiv	r3, r3, r1
 8015678:	1ad2      	subs	r2, r2, r3
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	1ad2      	subs	r2, r2, r3
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015696:	2b00      	cmp	r3, #0
 8015698:	d102      	bne.n	80156a0 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2203      	movs	r2, #3
 801569e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3714      	adds	r7, #20
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd90      	pop	{r4, r7, pc}
 80156aa:	bf00      	nop
 80156ac:	2000008e 	.word	0x2000008e

080156b0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80156b0:	b590      	push	{r4, r7, lr}
 80156b2:	b085      	sub	sp, #20
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	460b      	mov	r3, r1
 80156ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	32b0      	adds	r2, #176	; 0xb0
 80156c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156ca:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d102      	bne.n	80156d8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80156d2:	f04f 33ff 	mov.w	r3, #4294967295
 80156d6:	e07a      	b.n	80157ce <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80156de:	68fa      	ldr	r2, [r7, #12]
 80156e0:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80156e4:	fb02 f303 	mul.w	r3, r2, r3
 80156e8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156f0:	bf28      	it	cs
 80156f2:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80156f6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	33b0      	adds	r3, #176	; 0xb0
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	4413      	add	r3, r2
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	695c      	ldr	r4, [r3, #20]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	f103 0110 	add.w	r1, r3, #16
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801571c:	4618      	mov	r0, r3
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015724:	b29b      	uxth	r3, r3
 8015726:	78f8      	ldrb	r0, [r7, #3]
 8015728:	47a0      	blx	r4
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	da08      	bge.n	8015742 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015730:	78f9      	ldrb	r1, [r7, #3]
 8015732:	2303      	movs	r3, #3
 8015734:	2204      	movs	r2, #4
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f7ff fae0 	bl	8014cfc <SCSI_SenseCode>
    return -1;
 801573c:	f04f 33ff 	mov.w	r3, #4294967295
 8015740:	e045      	b.n	80157ce <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801574e:	4619      	mov	r1, r3
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	fbb3 f3f1 	udiv	r3, r3, r1
 8015756:	441a      	add	r2, r3
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801576a:	4619      	mov	r1, r3
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015772:	1ad2      	subs	r2, r2, r3
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	1ad2      	subs	r2, r2, r3
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015790:	2b00      	cmp	r3, #0
 8015792:	d104      	bne.n	801579e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015794:	2100      	movs	r1, #0
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f7fe fd0e 	bl	80141b8 <MSC_BOT_SendCSW>
 801579c:	e016      	b.n	80157cc <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80157a4:	68fa      	ldr	r2, [r7, #12]
 80157a6:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80157aa:	fb02 f303 	mul.w	r3, r2, r3
 80157ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80157b2:	bf28      	it	cs
 80157b4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80157b8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80157ba:	4b07      	ldr	r3, [pc, #28]	; (80157d8 <SCSI_ProcessWrite+0x128>)
 80157bc:	7819      	ldrb	r1, [r3, #0]
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	f103 0210 	add.w	r2, r3, #16
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f005 fd5f 	bl	801b28a <USBD_LL_PrepareReceive>
  }

  return 0;
 80157cc:	2300      	movs	r3, #0
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3714      	adds	r7, #20
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd90      	pop	{r4, r7, pc}
 80157d6:	bf00      	nop
 80157d8:	2000008f 	.word	0x2000008f

080157dc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80157dc:	b480      	push	{r7}
 80157de:	b087      	sub	sp, #28
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	4613      	mov	r3, r2
 80157e8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80157ea:	88fb      	ldrh	r3, [r7, #6]
 80157ec:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d102      	bne.n	80157fa <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80157f4:	f04f 33ff 	mov.w	r3, #4294967295
 80157f8:	e013      	b.n	8015822 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80157fa:	8afa      	ldrh	r2, [r7, #22]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015800:	e00b      	b.n	801581a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8015802:	8afb      	ldrh	r3, [r7, #22]
 8015804:	3b01      	subs	r3, #1
 8015806:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015808:	8afb      	ldrh	r3, [r7, #22]
 801580a:	68ba      	ldr	r2, [r7, #8]
 801580c:	441a      	add	r2, r3
 801580e:	8afb      	ldrh	r3, [r7, #22]
 8015810:	7811      	ldrb	r1, [r2, #0]
 8015812:	68fa      	ldr	r2, [r7, #12]
 8015814:	4413      	add	r3, r2
 8015816:	460a      	mov	r2, r1
 8015818:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801581a:	8afb      	ldrh	r3, [r7, #22]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d1f0      	bne.n	8015802 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8015820:	2300      	movs	r3, #0
}
 8015822:	4618      	mov	r0, r3
 8015824:	371c      	adds	r7, #28
 8015826:	46bd      	mov	sp, r7
 8015828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582c:	4770      	bx	lr

0801582e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b086      	sub	sp, #24
 8015832:	af00      	add	r7, sp, #0
 8015834:	60f8      	str	r0, [r7, #12]
 8015836:	60b9      	str	r1, [r7, #8]
 8015838:	4613      	mov	r3, r2
 801583a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d101      	bne.n	8015846 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015842:	2303      	movs	r3, #3
 8015844:	e01f      	b.n	8015886 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2200      	movs	r2, #0
 801584a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2200      	movs	r2, #0
 8015852:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	2200      	movs	r2, #0
 801585a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d003      	beq.n	801586c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	68ba      	ldr	r2, [r7, #8]
 8015868:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	2201      	movs	r2, #1
 8015870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	79fa      	ldrb	r2, [r7, #7]
 8015878:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f005 fb5a 	bl	801af34 <USBD_LL_Init>
 8015880:	4603      	mov	r3, r0
 8015882:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015884:	7dfb      	ldrb	r3, [r7, #23]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3718      	adds	r7, #24
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 801588e:	b580      	push	{r7, lr}
 8015890:	b084      	sub	sp, #16
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f005 fbce 	bl	801b038 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2201      	movs	r2, #1
 80158a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d009      	beq.n	80158c2 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	6852      	ldr	r2, [r2, #4]
 80158ba:	b2d2      	uxtb	r2, r2
 80158bc:	4611      	mov	r1, r2
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2200      	movs	r2, #0
 80158c6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2200      	movs	r2, #0
 80158ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2200      	movs	r2, #0
 80158d6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f005 fb76 	bl	801afcc <USBD_LL_DeInit>
 80158e0:	4603      	mov	r3, r0
 80158e2:	73fb      	strb	r3, [r7, #15]

  return ret;
 80158e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}

080158ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80158ee:	b580      	push	{r7, lr}
 80158f0:	b084      	sub	sp, #16
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
 80158f6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80158f8:	2300      	movs	r3, #0
 80158fa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d101      	bne.n	8015906 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015902:	2303      	movs	r3, #3
 8015904:	e025      	b.n	8015952 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	683a      	ldr	r2, [r7, #0]
 801590a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	32ae      	adds	r2, #174	; 0xae
 8015918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801591e:	2b00      	cmp	r3, #0
 8015920:	d00f      	beq.n	8015942 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	32ae      	adds	r2, #174	; 0xae
 801592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015932:	f107 020e 	add.w	r2, r7, #14
 8015936:	4610      	mov	r0, r2
 8015938:	4798      	blx	r3
 801593a:	4602      	mov	r2, r0
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015948:	1c5a      	adds	r2, r3, #1
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015950:	2300      	movs	r3, #0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3710      	adds	r7, #16
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b082      	sub	sp, #8
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f005 fb4d 	bl	801b002 <USBD_LL_Start>
 8015968:	4603      	mov	r3, r0
}
 801596a:	4618      	mov	r0, r3
 801596c:	3708      	adds	r7, #8
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}

08015972 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015972:	b580      	push	{r7, lr}
 8015974:	b082      	sub	sp, #8
 8015976:	af00      	add	r7, sp, #0
 8015978:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f005 fb5c 	bl	801b038 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015986:	2b00      	cmp	r3, #0
 8015988:	d009      	beq.n	801599e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015990:	685b      	ldr	r3, [r3, #4]
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	6852      	ldr	r2, [r2, #4]
 8015996:	b2d2      	uxtb	r2, r2
 8015998:	4611      	mov	r1, r2
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 801599e:	2300      	movs	r3, #0
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	3708      	adds	r7, #8
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}

080159a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80159a8:	b480      	push	{r7}
 80159aa:	b083      	sub	sp, #12
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80159b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	370c      	adds	r7, #12
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b084      	sub	sp, #16
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
 80159c6:	460b      	mov	r3, r1
 80159c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80159ca:	2300      	movs	r3, #0
 80159cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d009      	beq.n	80159ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	78fa      	ldrb	r2, [r7, #3]
 80159e2:	4611      	mov	r1, r2
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	4798      	blx	r3
 80159e8:	4603      	mov	r3, r0
 80159ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80159ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3710      	adds	r7, #16
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b084      	sub	sp, #16
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
 80159fe:	460b      	mov	r3, r1
 8015a00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a02:	2300      	movs	r3, #0
 8015a04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	78fa      	ldrb	r2, [r7, #3]
 8015a10:	4611      	mov	r1, r2
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	4798      	blx	r3
 8015a16:	4603      	mov	r3, r0
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d001      	beq.n	8015a20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015a1c:	2303      	movs	r3, #3
 8015a1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3710      	adds	r7, #16
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}

08015a2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015a2a:	b580      	push	{r7, lr}
 8015a2c:	b084      	sub	sp, #16
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
 8015a32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015a3a:	6839      	ldr	r1, [r7, #0]
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f001 f908 	bl	8016c52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2201      	movs	r2, #1
 8015a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015a50:	461a      	mov	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015a5e:	f003 031f 	and.w	r3, r3, #31
 8015a62:	2b02      	cmp	r3, #2
 8015a64:	d01a      	beq.n	8015a9c <USBD_LL_SetupStage+0x72>
 8015a66:	2b02      	cmp	r3, #2
 8015a68:	d822      	bhi.n	8015ab0 <USBD_LL_SetupStage+0x86>
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d002      	beq.n	8015a74 <USBD_LL_SetupStage+0x4a>
 8015a6e:	2b01      	cmp	r3, #1
 8015a70:	d00a      	beq.n	8015a88 <USBD_LL_SetupStage+0x5e>
 8015a72:	e01d      	b.n	8015ab0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015a7a:	4619      	mov	r1, r3
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f000 fb5f 	bl	8016140 <USBD_StdDevReq>
 8015a82:	4603      	mov	r3, r0
 8015a84:	73fb      	strb	r3, [r7, #15]
      break;
 8015a86:	e020      	b.n	8015aca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015a8e:	4619      	mov	r1, r3
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 fbc7 	bl	8016224 <USBD_StdItfReq>
 8015a96:	4603      	mov	r3, r0
 8015a98:	73fb      	strb	r3, [r7, #15]
      break;
 8015a9a:	e016      	b.n	8015aca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f000 fc29 	bl	80162fc <USBD_StdEPReq>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	73fb      	strb	r3, [r7, #15]
      break;
 8015aae:	e00c      	b.n	8015aca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015ab6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	4619      	mov	r1, r3
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f005 fb39 	bl	801b136 <USBD_LL_StallEP>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8015ac8:	bf00      	nop
  }

  return ret;
 8015aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b086      	sub	sp, #24
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	460b      	mov	r3, r1
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015ae6:	7afb      	ldrb	r3, [r7, #11]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d16e      	bne.n	8015bca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015af2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015afa:	2b03      	cmp	r3, #3
 8015afc:	f040 8098 	bne.w	8015c30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	689a      	ldr	r2, [r3, #8]
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	68db      	ldr	r3, [r3, #12]
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d913      	bls.n	8015b34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015b0c:	693b      	ldr	r3, [r7, #16]
 8015b0e:	689a      	ldr	r2, [r3, #8]
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	1ad2      	subs	r2, r2, r3
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	68da      	ldr	r2, [r3, #12]
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	4293      	cmp	r3, r2
 8015b24:	bf28      	it	cs
 8015b26:	4613      	movcs	r3, r2
 8015b28:	461a      	mov	r2, r3
 8015b2a:	6879      	ldr	r1, [r7, #4]
 8015b2c:	68f8      	ldr	r0, [r7, #12]
 8015b2e:	f001 f967 	bl	8016e00 <USBD_CtlContinueRx>
 8015b32:	e07d      	b.n	8015c30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015b3a:	f003 031f 	and.w	r3, r3, #31
 8015b3e:	2b02      	cmp	r3, #2
 8015b40:	d014      	beq.n	8015b6c <USBD_LL_DataOutStage+0x98>
 8015b42:	2b02      	cmp	r3, #2
 8015b44:	d81d      	bhi.n	8015b82 <USBD_LL_DataOutStage+0xae>
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d002      	beq.n	8015b50 <USBD_LL_DataOutStage+0x7c>
 8015b4a:	2b01      	cmp	r3, #1
 8015b4c:	d003      	beq.n	8015b56 <USBD_LL_DataOutStage+0x82>
 8015b4e:	e018      	b.n	8015b82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015b50:	2300      	movs	r3, #0
 8015b52:	75bb      	strb	r3, [r7, #22]
            break;
 8015b54:	e018      	b.n	8015b88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	4619      	mov	r1, r3
 8015b60:	68f8      	ldr	r0, [r7, #12]
 8015b62:	f000 fa5e 	bl	8016022 <USBD_CoreFindIF>
 8015b66:	4603      	mov	r3, r0
 8015b68:	75bb      	strb	r3, [r7, #22]
            break;
 8015b6a:	e00d      	b.n	8015b88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015b72:	b2db      	uxtb	r3, r3
 8015b74:	4619      	mov	r1, r3
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	f000 fa60 	bl	801603c <USBD_CoreFindEP>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8015b80:	e002      	b.n	8015b88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015b82:	2300      	movs	r3, #0
 8015b84:	75bb      	strb	r3, [r7, #22]
            break;
 8015b86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015b88:	7dbb      	ldrb	r3, [r7, #22]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d119      	bne.n	8015bc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	2b03      	cmp	r3, #3
 8015b98:	d113      	bne.n	8015bc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015b9a:	7dba      	ldrb	r2, [r7, #22]
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	32ae      	adds	r2, #174	; 0xae
 8015ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba4:	691b      	ldr	r3, [r3, #16]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d00b      	beq.n	8015bc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015baa:	7dba      	ldrb	r2, [r7, #22]
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015bb2:	7dba      	ldrb	r2, [r7, #22]
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	32ae      	adds	r2, #174	; 0xae
 8015bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bbc:	691b      	ldr	r3, [r3, #16]
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015bc2:	68f8      	ldr	r0, [r7, #12]
 8015bc4:	f001 f92d 	bl	8016e22 <USBD_CtlSendStatus>
 8015bc8:	e032      	b.n	8015c30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015bca:	7afb      	ldrb	r3, [r7, #11]
 8015bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bd0:	b2db      	uxtb	r3, r3
 8015bd2:	4619      	mov	r1, r3
 8015bd4:	68f8      	ldr	r0, [r7, #12]
 8015bd6:	f000 fa31 	bl	801603c <USBD_CoreFindEP>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015bde:	7dbb      	ldrb	r3, [r7, #22]
 8015be0:	2bff      	cmp	r3, #255	; 0xff
 8015be2:	d025      	beq.n	8015c30 <USBD_LL_DataOutStage+0x15c>
 8015be4:	7dbb      	ldrb	r3, [r7, #22]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d122      	bne.n	8015c30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	2b03      	cmp	r3, #3
 8015bf4:	d117      	bne.n	8015c26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015bf6:	7dba      	ldrb	r2, [r7, #22]
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	32ae      	adds	r2, #174	; 0xae
 8015bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c00:	699b      	ldr	r3, [r3, #24]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00f      	beq.n	8015c26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015c06:	7dba      	ldrb	r2, [r7, #22]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015c0e:	7dba      	ldrb	r2, [r7, #22]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	32ae      	adds	r2, #174	; 0xae
 8015c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c18:	699b      	ldr	r3, [r3, #24]
 8015c1a:	7afa      	ldrb	r2, [r7, #11]
 8015c1c:	4611      	mov	r1, r2
 8015c1e:	68f8      	ldr	r0, [r7, #12]
 8015c20:	4798      	blx	r3
 8015c22:	4603      	mov	r3, r0
 8015c24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015c26:	7dfb      	ldrb	r3, [r7, #23]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d001      	beq.n	8015c30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015c2c:	7dfb      	ldrb	r3, [r7, #23]
 8015c2e:	e000      	b.n	8015c32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3718      	adds	r7, #24
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}

08015c3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015c3a:	b580      	push	{r7, lr}
 8015c3c:	b086      	sub	sp, #24
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	60f8      	str	r0, [r7, #12]
 8015c42:	460b      	mov	r3, r1
 8015c44:	607a      	str	r2, [r7, #4]
 8015c46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015c48:	7afb      	ldrb	r3, [r7, #11]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d16f      	bne.n	8015d2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	3314      	adds	r3, #20
 8015c52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c5a:	2b02      	cmp	r3, #2
 8015c5c:	d15a      	bne.n	8015d14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	689a      	ldr	r2, [r3, #8]
 8015c62:	693b      	ldr	r3, [r7, #16]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d914      	bls.n	8015c94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	689a      	ldr	r2, [r3, #8]
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	68db      	ldr	r3, [r3, #12]
 8015c72:	1ad2      	subs	r2, r2, r3
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	6879      	ldr	r1, [r7, #4]
 8015c80:	68f8      	ldr	r0, [r7, #12]
 8015c82:	f001 f8ac 	bl	8016dde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015c86:	2300      	movs	r3, #0
 8015c88:	2200      	movs	r2, #0
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	68f8      	ldr	r0, [r7, #12]
 8015c8e:	f005 fafc 	bl	801b28a <USBD_LL_PrepareReceive>
 8015c92:	e03f      	b.n	8015d14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	68da      	ldr	r2, [r3, #12]
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	689b      	ldr	r3, [r3, #8]
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	d11c      	bne.n	8015cda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	685a      	ldr	r2, [r3, #4]
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d316      	bcc.n	8015cda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	685a      	ldr	r2, [r3, #4]
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d20f      	bcs.n	8015cda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015cba:	2200      	movs	r2, #0
 8015cbc:	2100      	movs	r1, #0
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f001 f88d 	bl	8016dde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ccc:	2300      	movs	r3, #0
 8015cce:	2200      	movs	r2, #0
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f005 fad9 	bl	801b28a <USBD_LL_PrepareReceive>
 8015cd8:	e01c      	b.n	8015d14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	2b03      	cmp	r3, #3
 8015ce4:	d10f      	bne.n	8015d06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cec:	68db      	ldr	r3, [r3, #12]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d009      	beq.n	8015d06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	68f8      	ldr	r0, [r7, #12]
 8015d04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d06:	2180      	movs	r1, #128	; 0x80
 8015d08:	68f8      	ldr	r0, [r7, #12]
 8015d0a:	f005 fa14 	bl	801b136 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	f001 f89a 	bl	8016e48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d03a      	beq.n	8015d94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015d1e:	68f8      	ldr	r0, [r7, #12]
 8015d20:	f7ff fe42 	bl	80159a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	2200      	movs	r2, #0
 8015d28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015d2c:	e032      	b.n	8015d94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015d2e:	7afb      	ldrb	r3, [r7, #11]
 8015d30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	4619      	mov	r1, r3
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f000 f97f 	bl	801603c <USBD_CoreFindEP>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d42:	7dfb      	ldrb	r3, [r7, #23]
 8015d44:	2bff      	cmp	r3, #255	; 0xff
 8015d46:	d025      	beq.n	8015d94 <USBD_LL_DataInStage+0x15a>
 8015d48:	7dfb      	ldrb	r3, [r7, #23]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d122      	bne.n	8015d94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	2b03      	cmp	r3, #3
 8015d58:	d11c      	bne.n	8015d94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015d5a:	7dfa      	ldrb	r2, [r7, #23]
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	32ae      	adds	r2, #174	; 0xae
 8015d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d64:	695b      	ldr	r3, [r3, #20]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d014      	beq.n	8015d94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015d6a:	7dfa      	ldrb	r2, [r7, #23]
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015d72:	7dfa      	ldrb	r2, [r7, #23]
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	32ae      	adds	r2, #174	; 0xae
 8015d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d7c:	695b      	ldr	r3, [r3, #20]
 8015d7e:	7afa      	ldrb	r2, [r7, #11]
 8015d80:	4611      	mov	r1, r2
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	4798      	blx	r3
 8015d86:	4603      	mov	r3, r0
 8015d88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015d8a:	7dbb      	ldrb	r3, [r7, #22]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d001      	beq.n	8015d94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015d90:	7dbb      	ldrb	r3, [r7, #22]
 8015d92:	e000      	b.n	8015d96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015d94:	2300      	movs	r3, #0
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3718      	adds	r7, #24
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015d9e:	b580      	push	{r7, lr}
 8015da0:	b084      	sub	sp, #16
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015da6:	2300      	movs	r3, #0
 8015da8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2201      	movs	r2, #1
 8015dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2200      	movs	r2, #0
 8015db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d014      	beq.n	8015e04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00e      	beq.n	8015e04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dec:	685b      	ldr	r3, [r3, #4]
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	6852      	ldr	r2, [r2, #4]
 8015df2:	b2d2      	uxtb	r2, r2
 8015df4:	4611      	mov	r1, r2
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	4798      	blx	r3
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d001      	beq.n	8015e04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015e00:	2303      	movs	r3, #3
 8015e02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e04:	2340      	movs	r3, #64	; 0x40
 8015e06:	2200      	movs	r2, #0
 8015e08:	2100      	movs	r1, #0
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f005 f92f 	bl	801b06e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2201      	movs	r2, #1
 8015e14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2240      	movs	r2, #64	; 0x40
 8015e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e20:	2340      	movs	r3, #64	; 0x40
 8015e22:	2200      	movs	r2, #0
 8015e24:	2180      	movs	r1, #128	; 0x80
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f005 f921 	bl	801b06e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2201      	movs	r2, #1
 8015e30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2240      	movs	r2, #64	; 0x40
 8015e36:	621a      	str	r2, [r3, #32]

  return ret;
 8015e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015e42:	b480      	push	{r7}
 8015e44:	b083      	sub	sp, #12
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	6078      	str	r0, [r7, #4]
 8015e4a:	460b      	mov	r3, r1
 8015e4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	78fa      	ldrb	r2, [r7, #3]
 8015e52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015e54:	2300      	movs	r3, #0
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	370c      	adds	r7, #12
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e60:	4770      	bx	lr

08015e62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015e62:	b480      	push	{r7}
 8015e64:	b083      	sub	sp, #12
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e70:	b2da      	uxtb	r2, r3
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2204      	movs	r2, #4
 8015e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015e80:	2300      	movs	r3, #0
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	370c      	adds	r7, #12
 8015e86:	46bd      	mov	sp, r7
 8015e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8c:	4770      	bx	lr

08015e8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015e8e:	b480      	push	{r7}
 8015e90:	b083      	sub	sp, #12
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	2b04      	cmp	r3, #4
 8015ea0:	d106      	bne.n	8015eb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015ea8:	b2da      	uxtb	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015eb0:	2300      	movs	r3, #0
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	370c      	adds	r7, #12
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr

08015ebe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b082      	sub	sp, #8
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	2b03      	cmp	r3, #3
 8015ed0:	d110      	bne.n	8015ef4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d00b      	beq.n	8015ef4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ee2:	69db      	ldr	r3, [r3, #28]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d005      	beq.n	8015ef4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eee:	69db      	ldr	r3, [r3, #28]
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015ef4:	2300      	movs	r3, #0
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3708      	adds	r7, #8
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}

08015efe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015efe:	b580      	push	{r7, lr}
 8015f00:	b082      	sub	sp, #8
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	6078      	str	r0, [r7, #4]
 8015f06:	460b      	mov	r3, r1
 8015f08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	32ae      	adds	r2, #174	; 0xae
 8015f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d101      	bne.n	8015f20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015f1c:	2303      	movs	r3, #3
 8015f1e:	e01c      	b.n	8015f5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	2b03      	cmp	r3, #3
 8015f2a:	d115      	bne.n	8015f58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	32ae      	adds	r2, #174	; 0xae
 8015f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f3a:	6a1b      	ldr	r3, [r3, #32]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d00b      	beq.n	8015f58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	32ae      	adds	r2, #174	; 0xae
 8015f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f4e:	6a1b      	ldr	r3, [r3, #32]
 8015f50:	78fa      	ldrb	r2, [r7, #3]
 8015f52:	4611      	mov	r1, r2
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f58:	2300      	movs	r3, #0
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3708      	adds	r7, #8
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b082      	sub	sp, #8
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	6078      	str	r0, [r7, #4]
 8015f6a:	460b      	mov	r3, r1
 8015f6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	32ae      	adds	r2, #174	; 0xae
 8015f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d101      	bne.n	8015f84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015f80:	2303      	movs	r3, #3
 8015f82:	e01c      	b.n	8015fbe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	2b03      	cmp	r3, #3
 8015f8e:	d115      	bne.n	8015fbc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	32ae      	adds	r2, #174	; 0xae
 8015f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00b      	beq.n	8015fbc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	32ae      	adds	r2, #174	; 0xae
 8015fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb4:	78fa      	ldrb	r2, [r7, #3]
 8015fb6:	4611      	mov	r1, r2
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015fbc:	2300      	movs	r3, #0
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3708      	adds	r7, #8
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015fc6:	b480      	push	{r7}
 8015fc8:	b083      	sub	sp, #12
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015fce:	2300      	movs	r3, #0
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	370c      	adds	r7, #12
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr

08015fdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2201      	movs	r2, #1
 8015fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d00e      	beq.n	8016018 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016000:	685b      	ldr	r3, [r3, #4]
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	6852      	ldr	r2, [r2, #4]
 8016006:	b2d2      	uxtb	r2, r2
 8016008:	4611      	mov	r1, r2
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	4798      	blx	r3
 801600e:	4603      	mov	r3, r0
 8016010:	2b00      	cmp	r3, #0
 8016012:	d001      	beq.n	8016018 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016014:	2303      	movs	r3, #3
 8016016:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016018:	7bfb      	ldrb	r3, [r7, #15]
}
 801601a:	4618      	mov	r0, r3
 801601c:	3710      	adds	r7, #16
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}

08016022 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016022:	b480      	push	{r7}
 8016024:	b083      	sub	sp, #12
 8016026:	af00      	add	r7, sp, #0
 8016028:	6078      	str	r0, [r7, #4]
 801602a:	460b      	mov	r3, r1
 801602c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801602e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016030:	4618      	mov	r0, r3
 8016032:	370c      	adds	r7, #12
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr

0801603c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801603c:	b480      	push	{r7}
 801603e:	b083      	sub	sp, #12
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	460b      	mov	r3, r1
 8016046:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016048:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801604a:	4618      	mov	r0, r3
 801604c:	370c      	adds	r7, #12
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr

08016056 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016056:	b580      	push	{r7, lr}
 8016058:	b086      	sub	sp, #24
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]
 801605e:	460b      	mov	r3, r1
 8016060:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801606a:	2300      	movs	r3, #0
 801606c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	885b      	ldrh	r3, [r3, #2]
 8016072:	b29a      	uxth	r2, r3
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	b29b      	uxth	r3, r3
 801607a:	429a      	cmp	r2, r3
 801607c:	d920      	bls.n	80160c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	b29b      	uxth	r3, r3
 8016084:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016086:	e013      	b.n	80160b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016088:	f107 030a 	add.w	r3, r7, #10
 801608c:	4619      	mov	r1, r3
 801608e:	6978      	ldr	r0, [r7, #20]
 8016090:	f000 f81b 	bl	80160ca <USBD_GetNextDesc>
 8016094:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	785b      	ldrb	r3, [r3, #1]
 801609a:	2b05      	cmp	r3, #5
 801609c:	d108      	bne.n	80160b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	789b      	ldrb	r3, [r3, #2]
 80160a6:	78fa      	ldrb	r2, [r7, #3]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d008      	beq.n	80160be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80160ac:	2300      	movs	r3, #0
 80160ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	885b      	ldrh	r3, [r3, #2]
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	897b      	ldrh	r3, [r7, #10]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d8e5      	bhi.n	8016088 <USBD_GetEpDesc+0x32>
 80160bc:	e000      	b.n	80160c0 <USBD_GetEpDesc+0x6a>
          break;
 80160be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80160c0:	693b      	ldr	r3, [r7, #16]
}
 80160c2:	4618      	mov	r0, r3
 80160c4:	3718      	adds	r7, #24
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}

080160ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80160ca:	b480      	push	{r7}
 80160cc:	b085      	sub	sp, #20
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
 80160d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	881a      	ldrh	r2, [r3, #0]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	4413      	add	r3, r2
 80160e4:	b29a      	uxth	r2, r3
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	461a      	mov	r2, r3
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	4413      	add	r3, r2
 80160f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80160f6:	68fb      	ldr	r3, [r7, #12]
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	3714      	adds	r7, #20
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr

08016104 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016104:	b480      	push	{r7}
 8016106:	b087      	sub	sp, #28
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	3301      	adds	r3, #1
 801611a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016122:	8a3b      	ldrh	r3, [r7, #16]
 8016124:	021b      	lsls	r3, r3, #8
 8016126:	b21a      	sxth	r2, r3
 8016128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801612c:	4313      	orrs	r3, r2
 801612e:	b21b      	sxth	r3, r3
 8016130:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016132:	89fb      	ldrh	r3, [r7, #14]
}
 8016134:	4618      	mov	r0, r3
 8016136:	371c      	adds	r7, #28
 8016138:	46bd      	mov	sp, r7
 801613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613e:	4770      	bx	lr

08016140 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801614a:	2300      	movs	r3, #0
 801614c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016156:	2b40      	cmp	r3, #64	; 0x40
 8016158:	d005      	beq.n	8016166 <USBD_StdDevReq+0x26>
 801615a:	2b40      	cmp	r3, #64	; 0x40
 801615c:	d857      	bhi.n	801620e <USBD_StdDevReq+0xce>
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00f      	beq.n	8016182 <USBD_StdDevReq+0x42>
 8016162:	2b20      	cmp	r3, #32
 8016164:	d153      	bne.n	801620e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	32ae      	adds	r2, #174	; 0xae
 8016170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016174:	689b      	ldr	r3, [r3, #8]
 8016176:	6839      	ldr	r1, [r7, #0]
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	4798      	blx	r3
 801617c:	4603      	mov	r3, r0
 801617e:	73fb      	strb	r3, [r7, #15]
      break;
 8016180:	e04a      	b.n	8016218 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	785b      	ldrb	r3, [r3, #1]
 8016186:	2b09      	cmp	r3, #9
 8016188:	d83b      	bhi.n	8016202 <USBD_StdDevReq+0xc2>
 801618a:	a201      	add	r2, pc, #4	; (adr r2, 8016190 <USBD_StdDevReq+0x50>)
 801618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016190:	080161e5 	.word	0x080161e5
 8016194:	080161f9 	.word	0x080161f9
 8016198:	08016203 	.word	0x08016203
 801619c:	080161ef 	.word	0x080161ef
 80161a0:	08016203 	.word	0x08016203
 80161a4:	080161c3 	.word	0x080161c3
 80161a8:	080161b9 	.word	0x080161b9
 80161ac:	08016203 	.word	0x08016203
 80161b0:	080161db 	.word	0x080161db
 80161b4:	080161cd 	.word	0x080161cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80161b8:	6839      	ldr	r1, [r7, #0]
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f000 fa3c 	bl	8016638 <USBD_GetDescriptor>
          break;
 80161c0:	e024      	b.n	801620c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 fba1 	bl	801690c <USBD_SetAddress>
          break;
 80161ca:	e01f      	b.n	801620c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80161cc:	6839      	ldr	r1, [r7, #0]
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 fbe0 	bl	8016994 <USBD_SetConfig>
 80161d4:	4603      	mov	r3, r0
 80161d6:	73fb      	strb	r3, [r7, #15]
          break;
 80161d8:	e018      	b.n	801620c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80161da:	6839      	ldr	r1, [r7, #0]
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f000 fc83 	bl	8016ae8 <USBD_GetConfig>
          break;
 80161e2:	e013      	b.n	801620c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80161e4:	6839      	ldr	r1, [r7, #0]
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 fcb4 	bl	8016b54 <USBD_GetStatus>
          break;
 80161ec:	e00e      	b.n	801620c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80161ee:	6839      	ldr	r1, [r7, #0]
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f000 fce3 	bl	8016bbc <USBD_SetFeature>
          break;
 80161f6:	e009      	b.n	801620c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80161f8:	6839      	ldr	r1, [r7, #0]
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f000 fd07 	bl	8016c0e <USBD_ClrFeature>
          break;
 8016200:	e004      	b.n	801620c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016202:	6839      	ldr	r1, [r7, #0]
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 fd5e 	bl	8016cc6 <USBD_CtlError>
          break;
 801620a:	bf00      	nop
      }
      break;
 801620c:	e004      	b.n	8016218 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f000 fd58 	bl	8016cc6 <USBD_CtlError>
      break;
 8016216:	bf00      	nop
  }

  return ret;
 8016218:	7bfb      	ldrb	r3, [r7, #15]
}
 801621a:	4618      	mov	r0, r3
 801621c:	3710      	adds	r7, #16
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
 8016222:	bf00      	nop

08016224 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801622e:	2300      	movs	r3, #0
 8016230:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801623a:	2b40      	cmp	r3, #64	; 0x40
 801623c:	d005      	beq.n	801624a <USBD_StdItfReq+0x26>
 801623e:	2b40      	cmp	r3, #64	; 0x40
 8016240:	d852      	bhi.n	80162e8 <USBD_StdItfReq+0xc4>
 8016242:	2b00      	cmp	r3, #0
 8016244:	d001      	beq.n	801624a <USBD_StdItfReq+0x26>
 8016246:	2b20      	cmp	r3, #32
 8016248:	d14e      	bne.n	80162e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016250:	b2db      	uxtb	r3, r3
 8016252:	3b01      	subs	r3, #1
 8016254:	2b02      	cmp	r3, #2
 8016256:	d840      	bhi.n	80162da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	889b      	ldrh	r3, [r3, #4]
 801625c:	b2db      	uxtb	r3, r3
 801625e:	2b01      	cmp	r3, #1
 8016260:	d836      	bhi.n	80162d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	889b      	ldrh	r3, [r3, #4]
 8016266:	b2db      	uxtb	r3, r3
 8016268:	4619      	mov	r1, r3
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7ff fed9 	bl	8016022 <USBD_CoreFindIF>
 8016270:	4603      	mov	r3, r0
 8016272:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016274:	7bbb      	ldrb	r3, [r7, #14]
 8016276:	2bff      	cmp	r3, #255	; 0xff
 8016278:	d01d      	beq.n	80162b6 <USBD_StdItfReq+0x92>
 801627a:	7bbb      	ldrb	r3, [r7, #14]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d11a      	bne.n	80162b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016280:	7bba      	ldrb	r2, [r7, #14]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	32ae      	adds	r2, #174	; 0xae
 8016286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801628a:	689b      	ldr	r3, [r3, #8]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d00f      	beq.n	80162b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016290:	7bba      	ldrb	r2, [r7, #14]
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016298:	7bba      	ldrb	r2, [r7, #14]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	32ae      	adds	r2, #174	; 0xae
 801629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162a2:	689b      	ldr	r3, [r3, #8]
 80162a4:	6839      	ldr	r1, [r7, #0]
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	4798      	blx	r3
 80162aa:	4603      	mov	r3, r0
 80162ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80162ae:	e004      	b.n	80162ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80162b0:	2303      	movs	r3, #3
 80162b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80162b4:	e001      	b.n	80162ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80162b6:	2303      	movs	r3, #3
 80162b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	88db      	ldrh	r3, [r3, #6]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d110      	bne.n	80162e4 <USBD_StdItfReq+0xc0>
 80162c2:	7bfb      	ldrb	r3, [r7, #15]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d10d      	bne.n	80162e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80162c8:	6878      	ldr	r0, [r7, #4]
 80162ca:	f000 fdaa 	bl	8016e22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80162ce:	e009      	b.n	80162e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80162d0:	6839      	ldr	r1, [r7, #0]
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 fcf7 	bl	8016cc6 <USBD_CtlError>
          break;
 80162d8:	e004      	b.n	80162e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80162da:	6839      	ldr	r1, [r7, #0]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f000 fcf2 	bl	8016cc6 <USBD_CtlError>
          break;
 80162e2:	e000      	b.n	80162e6 <USBD_StdItfReq+0xc2>
          break;
 80162e4:	bf00      	nop
      }
      break;
 80162e6:	e004      	b.n	80162f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80162e8:	6839      	ldr	r1, [r7, #0]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 fceb 	bl	8016cc6 <USBD_CtlError>
      break;
 80162f0:	bf00      	nop
  }

  return ret;
 80162f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3710      	adds	r7, #16
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}

080162fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016306:	2300      	movs	r3, #0
 8016308:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	889b      	ldrh	r3, [r3, #4]
 801630e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016318:	2b40      	cmp	r3, #64	; 0x40
 801631a:	d007      	beq.n	801632c <USBD_StdEPReq+0x30>
 801631c:	2b40      	cmp	r3, #64	; 0x40
 801631e:	f200 817f 	bhi.w	8016620 <USBD_StdEPReq+0x324>
 8016322:	2b00      	cmp	r3, #0
 8016324:	d02a      	beq.n	801637c <USBD_StdEPReq+0x80>
 8016326:	2b20      	cmp	r3, #32
 8016328:	f040 817a 	bne.w	8016620 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801632c:	7bbb      	ldrb	r3, [r7, #14]
 801632e:	4619      	mov	r1, r3
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f7ff fe83 	bl	801603c <USBD_CoreFindEP>
 8016336:	4603      	mov	r3, r0
 8016338:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801633a:	7b7b      	ldrb	r3, [r7, #13]
 801633c:	2bff      	cmp	r3, #255	; 0xff
 801633e:	f000 8174 	beq.w	801662a <USBD_StdEPReq+0x32e>
 8016342:	7b7b      	ldrb	r3, [r7, #13]
 8016344:	2b00      	cmp	r3, #0
 8016346:	f040 8170 	bne.w	801662a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801634a:	7b7a      	ldrb	r2, [r7, #13]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016352:	7b7a      	ldrb	r2, [r7, #13]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	32ae      	adds	r2, #174	; 0xae
 8016358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801635c:	689b      	ldr	r3, [r3, #8]
 801635e:	2b00      	cmp	r3, #0
 8016360:	f000 8163 	beq.w	801662a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016364:	7b7a      	ldrb	r2, [r7, #13]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	32ae      	adds	r2, #174	; 0xae
 801636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801636e:	689b      	ldr	r3, [r3, #8]
 8016370:	6839      	ldr	r1, [r7, #0]
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	4798      	blx	r3
 8016376:	4603      	mov	r3, r0
 8016378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801637a:	e156      	b.n	801662a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	785b      	ldrb	r3, [r3, #1]
 8016380:	2b03      	cmp	r3, #3
 8016382:	d008      	beq.n	8016396 <USBD_StdEPReq+0x9a>
 8016384:	2b03      	cmp	r3, #3
 8016386:	f300 8145 	bgt.w	8016614 <USBD_StdEPReq+0x318>
 801638a:	2b00      	cmp	r3, #0
 801638c:	f000 809b 	beq.w	80164c6 <USBD_StdEPReq+0x1ca>
 8016390:	2b01      	cmp	r3, #1
 8016392:	d03c      	beq.n	801640e <USBD_StdEPReq+0x112>
 8016394:	e13e      	b.n	8016614 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801639c:	b2db      	uxtb	r3, r3
 801639e:	2b02      	cmp	r3, #2
 80163a0:	d002      	beq.n	80163a8 <USBD_StdEPReq+0xac>
 80163a2:	2b03      	cmp	r3, #3
 80163a4:	d016      	beq.n	80163d4 <USBD_StdEPReq+0xd8>
 80163a6:	e02c      	b.n	8016402 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80163a8:	7bbb      	ldrb	r3, [r7, #14]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d00d      	beq.n	80163ca <USBD_StdEPReq+0xce>
 80163ae:	7bbb      	ldrb	r3, [r7, #14]
 80163b0:	2b80      	cmp	r3, #128	; 0x80
 80163b2:	d00a      	beq.n	80163ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80163b4:	7bbb      	ldrb	r3, [r7, #14]
 80163b6:	4619      	mov	r1, r3
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f004 febc 	bl	801b136 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80163be:	2180      	movs	r1, #128	; 0x80
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f004 feb8 	bl	801b136 <USBD_LL_StallEP>
 80163c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80163c8:	e020      	b.n	801640c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80163ca:	6839      	ldr	r1, [r7, #0]
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f000 fc7a 	bl	8016cc6 <USBD_CtlError>
              break;
 80163d2:	e01b      	b.n	801640c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	885b      	ldrh	r3, [r3, #2]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d10e      	bne.n	80163fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80163dc:	7bbb      	ldrb	r3, [r7, #14]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d00b      	beq.n	80163fa <USBD_StdEPReq+0xfe>
 80163e2:	7bbb      	ldrb	r3, [r7, #14]
 80163e4:	2b80      	cmp	r3, #128	; 0x80
 80163e6:	d008      	beq.n	80163fa <USBD_StdEPReq+0xfe>
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	88db      	ldrh	r3, [r3, #6]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d104      	bne.n	80163fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80163f0:	7bbb      	ldrb	r3, [r7, #14]
 80163f2:	4619      	mov	r1, r3
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f004 fe9e 	bl	801b136 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f000 fd11 	bl	8016e22 <USBD_CtlSendStatus>

              break;
 8016400:	e004      	b.n	801640c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016402:	6839      	ldr	r1, [r7, #0]
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f000 fc5e 	bl	8016cc6 <USBD_CtlError>
              break;
 801640a:	bf00      	nop
          }
          break;
 801640c:	e107      	b.n	801661e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016414:	b2db      	uxtb	r3, r3
 8016416:	2b02      	cmp	r3, #2
 8016418:	d002      	beq.n	8016420 <USBD_StdEPReq+0x124>
 801641a:	2b03      	cmp	r3, #3
 801641c:	d016      	beq.n	801644c <USBD_StdEPReq+0x150>
 801641e:	e04b      	b.n	80164b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016420:	7bbb      	ldrb	r3, [r7, #14]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d00d      	beq.n	8016442 <USBD_StdEPReq+0x146>
 8016426:	7bbb      	ldrb	r3, [r7, #14]
 8016428:	2b80      	cmp	r3, #128	; 0x80
 801642a:	d00a      	beq.n	8016442 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801642c:	7bbb      	ldrb	r3, [r7, #14]
 801642e:	4619      	mov	r1, r3
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f004 fe80 	bl	801b136 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016436:	2180      	movs	r1, #128	; 0x80
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f004 fe7c 	bl	801b136 <USBD_LL_StallEP>
 801643e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016440:	e040      	b.n	80164c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016442:	6839      	ldr	r1, [r7, #0]
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	f000 fc3e 	bl	8016cc6 <USBD_CtlError>
              break;
 801644a:	e03b      	b.n	80164c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	885b      	ldrh	r3, [r3, #2]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d136      	bne.n	80164c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016454:	7bbb      	ldrb	r3, [r7, #14]
 8016456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801645a:	2b00      	cmp	r3, #0
 801645c:	d004      	beq.n	8016468 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801645e:	7bbb      	ldrb	r3, [r7, #14]
 8016460:	4619      	mov	r1, r3
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f004 fe86 	bl	801b174 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f000 fcda 	bl	8016e22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801646e:	7bbb      	ldrb	r3, [r7, #14]
 8016470:	4619      	mov	r1, r3
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff fde2 	bl	801603c <USBD_CoreFindEP>
 8016478:	4603      	mov	r3, r0
 801647a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801647c:	7b7b      	ldrb	r3, [r7, #13]
 801647e:	2bff      	cmp	r3, #255	; 0xff
 8016480:	d01f      	beq.n	80164c2 <USBD_StdEPReq+0x1c6>
 8016482:	7b7b      	ldrb	r3, [r7, #13]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d11c      	bne.n	80164c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016488:	7b7a      	ldrb	r2, [r7, #13]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016490:	7b7a      	ldrb	r2, [r7, #13]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	32ae      	adds	r2, #174	; 0xae
 8016496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d010      	beq.n	80164c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80164a0:	7b7a      	ldrb	r2, [r7, #13]
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	32ae      	adds	r2, #174	; 0xae
 80164a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164aa:	689b      	ldr	r3, [r3, #8]
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	4798      	blx	r3
 80164b2:	4603      	mov	r3, r0
 80164b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80164b6:	e004      	b.n	80164c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80164b8:	6839      	ldr	r1, [r7, #0]
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 fc03 	bl	8016cc6 <USBD_CtlError>
              break;
 80164c0:	e000      	b.n	80164c4 <USBD_StdEPReq+0x1c8>
              break;
 80164c2:	bf00      	nop
          }
          break;
 80164c4:	e0ab      	b.n	801661e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164cc:	b2db      	uxtb	r3, r3
 80164ce:	2b02      	cmp	r3, #2
 80164d0:	d002      	beq.n	80164d8 <USBD_StdEPReq+0x1dc>
 80164d2:	2b03      	cmp	r3, #3
 80164d4:	d032      	beq.n	801653c <USBD_StdEPReq+0x240>
 80164d6:	e097      	b.n	8016608 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80164d8:	7bbb      	ldrb	r3, [r7, #14]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d007      	beq.n	80164ee <USBD_StdEPReq+0x1f2>
 80164de:	7bbb      	ldrb	r3, [r7, #14]
 80164e0:	2b80      	cmp	r3, #128	; 0x80
 80164e2:	d004      	beq.n	80164ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80164e4:	6839      	ldr	r1, [r7, #0]
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 fbed 	bl	8016cc6 <USBD_CtlError>
                break;
 80164ec:	e091      	b.n	8016612 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80164ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	da0b      	bge.n	801650e <USBD_StdEPReq+0x212>
 80164f6:	7bbb      	ldrb	r3, [r7, #14]
 80164f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80164fc:	4613      	mov	r3, r2
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	4413      	add	r3, r2
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	3310      	adds	r3, #16
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	4413      	add	r3, r2
 801650a:	3304      	adds	r3, #4
 801650c:	e00b      	b.n	8016526 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801650e:	7bbb      	ldrb	r3, [r7, #14]
 8016510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016514:	4613      	mov	r3, r2
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	4413      	add	r3, r2
 801651a:	009b      	lsls	r3, r3, #2
 801651c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	4413      	add	r3, r2
 8016524:	3304      	adds	r3, #4
 8016526:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	2200      	movs	r2, #0
 801652c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	2202      	movs	r2, #2
 8016532:	4619      	mov	r1, r3
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f000 fc37 	bl	8016da8 <USBD_CtlSendData>
              break;
 801653a:	e06a      	b.n	8016612 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801653c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016540:	2b00      	cmp	r3, #0
 8016542:	da11      	bge.n	8016568 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016544:	7bbb      	ldrb	r3, [r7, #14]
 8016546:	f003 020f 	and.w	r2, r3, #15
 801654a:	6879      	ldr	r1, [r7, #4]
 801654c:	4613      	mov	r3, r2
 801654e:	009b      	lsls	r3, r3, #2
 8016550:	4413      	add	r3, r2
 8016552:	009b      	lsls	r3, r3, #2
 8016554:	440b      	add	r3, r1
 8016556:	3324      	adds	r3, #36	; 0x24
 8016558:	881b      	ldrh	r3, [r3, #0]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d117      	bne.n	801658e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801655e:	6839      	ldr	r1, [r7, #0]
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f000 fbb0 	bl	8016cc6 <USBD_CtlError>
                  break;
 8016566:	e054      	b.n	8016612 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016568:	7bbb      	ldrb	r3, [r7, #14]
 801656a:	f003 020f 	and.w	r2, r3, #15
 801656e:	6879      	ldr	r1, [r7, #4]
 8016570:	4613      	mov	r3, r2
 8016572:	009b      	lsls	r3, r3, #2
 8016574:	4413      	add	r3, r2
 8016576:	009b      	lsls	r3, r3, #2
 8016578:	440b      	add	r3, r1
 801657a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801657e:	881b      	ldrh	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d104      	bne.n	801658e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016584:	6839      	ldr	r1, [r7, #0]
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f000 fb9d 	bl	8016cc6 <USBD_CtlError>
                  break;
 801658c:	e041      	b.n	8016612 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801658e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016592:	2b00      	cmp	r3, #0
 8016594:	da0b      	bge.n	80165ae <USBD_StdEPReq+0x2b2>
 8016596:	7bbb      	ldrb	r3, [r7, #14]
 8016598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801659c:	4613      	mov	r3, r2
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	4413      	add	r3, r2
 80165a2:	009b      	lsls	r3, r3, #2
 80165a4:	3310      	adds	r3, #16
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	4413      	add	r3, r2
 80165aa:	3304      	adds	r3, #4
 80165ac:	e00b      	b.n	80165c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80165ae:	7bbb      	ldrb	r3, [r7, #14]
 80165b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80165b4:	4613      	mov	r3, r2
 80165b6:	009b      	lsls	r3, r3, #2
 80165b8:	4413      	add	r3, r2
 80165ba:	009b      	lsls	r3, r3, #2
 80165bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	4413      	add	r3, r2
 80165c4:	3304      	adds	r3, #4
 80165c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80165c8:	7bbb      	ldrb	r3, [r7, #14]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d002      	beq.n	80165d4 <USBD_StdEPReq+0x2d8>
 80165ce:	7bbb      	ldrb	r3, [r7, #14]
 80165d0:	2b80      	cmp	r3, #128	; 0x80
 80165d2:	d103      	bne.n	80165dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	2200      	movs	r2, #0
 80165d8:	601a      	str	r2, [r3, #0]
 80165da:	e00e      	b.n	80165fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80165dc:	7bbb      	ldrb	r3, [r7, #14]
 80165de:	4619      	mov	r1, r3
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f004 fde6 	bl	801b1b2 <USBD_LL_IsStallEP>
 80165e6:	4603      	mov	r3, r0
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d003      	beq.n	80165f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	2201      	movs	r2, #1
 80165f0:	601a      	str	r2, [r3, #0]
 80165f2:	e002      	b.n	80165fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	2200      	movs	r2, #0
 80165f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	2202      	movs	r2, #2
 80165fe:	4619      	mov	r1, r3
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f000 fbd1 	bl	8016da8 <USBD_CtlSendData>
              break;
 8016606:	e004      	b.n	8016612 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fb5b 	bl	8016cc6 <USBD_CtlError>
              break;
 8016610:	bf00      	nop
          }
          break;
 8016612:	e004      	b.n	801661e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016614:	6839      	ldr	r1, [r7, #0]
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f000 fb55 	bl	8016cc6 <USBD_CtlError>
          break;
 801661c:	bf00      	nop
      }
      break;
 801661e:	e005      	b.n	801662c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016620:	6839      	ldr	r1, [r7, #0]
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f000 fb4f 	bl	8016cc6 <USBD_CtlError>
      break;
 8016628:	e000      	b.n	801662c <USBD_StdEPReq+0x330>
      break;
 801662a:	bf00      	nop
  }

  return ret;
 801662c:	7bfb      	ldrb	r3, [r7, #15]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
	...

08016638 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b084      	sub	sp, #16
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016642:	2300      	movs	r3, #0
 8016644:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016646:	2300      	movs	r3, #0
 8016648:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801664a:	2300      	movs	r3, #0
 801664c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	885b      	ldrh	r3, [r3, #2]
 8016652:	0a1b      	lsrs	r3, r3, #8
 8016654:	b29b      	uxth	r3, r3
 8016656:	3b01      	subs	r3, #1
 8016658:	2b06      	cmp	r3, #6
 801665a:	f200 8128 	bhi.w	80168ae <USBD_GetDescriptor+0x276>
 801665e:	a201      	add	r2, pc, #4	; (adr r2, 8016664 <USBD_GetDescriptor+0x2c>)
 8016660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016664:	08016681 	.word	0x08016681
 8016668:	08016699 	.word	0x08016699
 801666c:	080166d9 	.word	0x080166d9
 8016670:	080168af 	.word	0x080168af
 8016674:	080168af 	.word	0x080168af
 8016678:	0801684f 	.word	0x0801684f
 801667c:	0801687b 	.word	0x0801687b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	7c12      	ldrb	r2, [r2, #16]
 801668c:	f107 0108 	add.w	r1, r7, #8
 8016690:	4610      	mov	r0, r2
 8016692:	4798      	blx	r3
 8016694:	60f8      	str	r0, [r7, #12]
      break;
 8016696:	e112      	b.n	80168be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	7c1b      	ldrb	r3, [r3, #16]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d10d      	bne.n	80166bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166a8:	f107 0208 	add.w	r2, r7, #8
 80166ac:	4610      	mov	r0, r2
 80166ae:	4798      	blx	r3
 80166b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	3301      	adds	r3, #1
 80166b6:	2202      	movs	r2, #2
 80166b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80166ba:	e100      	b.n	80168be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166c4:	f107 0208 	add.w	r2, r7, #8
 80166c8:	4610      	mov	r0, r2
 80166ca:	4798      	blx	r3
 80166cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	3301      	adds	r3, #1
 80166d2:	2202      	movs	r2, #2
 80166d4:	701a      	strb	r2, [r3, #0]
      break;
 80166d6:	e0f2      	b.n	80168be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	885b      	ldrh	r3, [r3, #2]
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	2b05      	cmp	r3, #5
 80166e0:	f200 80ac 	bhi.w	801683c <USBD_GetDescriptor+0x204>
 80166e4:	a201      	add	r2, pc, #4	; (adr r2, 80166ec <USBD_GetDescriptor+0xb4>)
 80166e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166ea:	bf00      	nop
 80166ec:	08016705 	.word	0x08016705
 80166f0:	08016739 	.word	0x08016739
 80166f4:	0801676d 	.word	0x0801676d
 80166f8:	080167a1 	.word	0x080167a1
 80166fc:	080167d5 	.word	0x080167d5
 8016700:	08016809 	.word	0x08016809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d00b      	beq.n	8016728 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016716:	685b      	ldr	r3, [r3, #4]
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	7c12      	ldrb	r2, [r2, #16]
 801671c:	f107 0108 	add.w	r1, r7, #8
 8016720:	4610      	mov	r0, r2
 8016722:	4798      	blx	r3
 8016724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016726:	e091      	b.n	801684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f000 facb 	bl	8016cc6 <USBD_CtlError>
            err++;
 8016730:	7afb      	ldrb	r3, [r7, #11]
 8016732:	3301      	adds	r3, #1
 8016734:	72fb      	strb	r3, [r7, #11]
          break;
 8016736:	e089      	b.n	801684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801673e:	689b      	ldr	r3, [r3, #8]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d00b      	beq.n	801675c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801674a:	689b      	ldr	r3, [r3, #8]
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	7c12      	ldrb	r2, [r2, #16]
 8016750:	f107 0108 	add.w	r1, r7, #8
 8016754:	4610      	mov	r0, r2
 8016756:	4798      	blx	r3
 8016758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801675a:	e077      	b.n	801684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801675c:	6839      	ldr	r1, [r7, #0]
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 fab1 	bl	8016cc6 <USBD_CtlError>
            err++;
 8016764:	7afb      	ldrb	r3, [r7, #11]
 8016766:	3301      	adds	r3, #1
 8016768:	72fb      	strb	r3, [r7, #11]
          break;
 801676a:	e06f      	b.n	801684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016772:	68db      	ldr	r3, [r3, #12]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d00b      	beq.n	8016790 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801677e:	68db      	ldr	r3, [r3, #12]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	7c12      	ldrb	r2, [r2, #16]
 8016784:	f107 0108 	add.w	r1, r7, #8
 8016788:	4610      	mov	r0, r2
 801678a:	4798      	blx	r3
 801678c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801678e:	e05d      	b.n	801684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 fa97 	bl	8016cc6 <USBD_CtlError>
            err++;
 8016798:	7afb      	ldrb	r3, [r7, #11]
 801679a:	3301      	adds	r3, #1
 801679c:	72fb      	strb	r3, [r7, #11]
          break;
 801679e:	e055      	b.n	801684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167a6:	691b      	ldr	r3, [r3, #16]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00b      	beq.n	80167c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167b2:	691b      	ldr	r3, [r3, #16]
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	7c12      	ldrb	r2, [r2, #16]
 80167b8:	f107 0108 	add.w	r1, r7, #8
 80167bc:	4610      	mov	r0, r2
 80167be:	4798      	blx	r3
 80167c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80167c2:	e043      	b.n	801684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80167c4:	6839      	ldr	r1, [r7, #0]
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f000 fa7d 	bl	8016cc6 <USBD_CtlError>
            err++;
 80167cc:	7afb      	ldrb	r3, [r7, #11]
 80167ce:	3301      	adds	r3, #1
 80167d0:	72fb      	strb	r3, [r7, #11]
          break;
 80167d2:	e03b      	b.n	801684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167da:	695b      	ldr	r3, [r3, #20]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d00b      	beq.n	80167f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167e6:	695b      	ldr	r3, [r3, #20]
 80167e8:	687a      	ldr	r2, [r7, #4]
 80167ea:	7c12      	ldrb	r2, [r2, #16]
 80167ec:	f107 0108 	add.w	r1, r7, #8
 80167f0:	4610      	mov	r0, r2
 80167f2:	4798      	blx	r3
 80167f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80167f6:	e029      	b.n	801684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80167f8:	6839      	ldr	r1, [r7, #0]
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f000 fa63 	bl	8016cc6 <USBD_CtlError>
            err++;
 8016800:	7afb      	ldrb	r3, [r7, #11]
 8016802:	3301      	adds	r3, #1
 8016804:	72fb      	strb	r3, [r7, #11]
          break;
 8016806:	e021      	b.n	801684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801680e:	699b      	ldr	r3, [r3, #24]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00b      	beq.n	801682c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801681a:	699b      	ldr	r3, [r3, #24]
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	7c12      	ldrb	r2, [r2, #16]
 8016820:	f107 0108 	add.w	r1, r7, #8
 8016824:	4610      	mov	r0, r2
 8016826:	4798      	blx	r3
 8016828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801682a:	e00f      	b.n	801684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801682c:	6839      	ldr	r1, [r7, #0]
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 fa49 	bl	8016cc6 <USBD_CtlError>
            err++;
 8016834:	7afb      	ldrb	r3, [r7, #11]
 8016836:	3301      	adds	r3, #1
 8016838:	72fb      	strb	r3, [r7, #11]
          break;
 801683a:	e007      	b.n	801684c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801683c:	6839      	ldr	r1, [r7, #0]
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	f000 fa41 	bl	8016cc6 <USBD_CtlError>
          err++;
 8016844:	7afb      	ldrb	r3, [r7, #11]
 8016846:	3301      	adds	r3, #1
 8016848:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801684a:	bf00      	nop
      }
      break;
 801684c:	e037      	b.n	80168be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	7c1b      	ldrb	r3, [r3, #16]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d109      	bne.n	801686a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801685e:	f107 0208 	add.w	r2, r7, #8
 8016862:	4610      	mov	r0, r2
 8016864:	4798      	blx	r3
 8016866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016868:	e029      	b.n	80168be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 fa2a 	bl	8016cc6 <USBD_CtlError>
        err++;
 8016872:	7afb      	ldrb	r3, [r7, #11]
 8016874:	3301      	adds	r3, #1
 8016876:	72fb      	strb	r3, [r7, #11]
      break;
 8016878:	e021      	b.n	80168be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	7c1b      	ldrb	r3, [r3, #16]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d10d      	bne.n	801689e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801688a:	f107 0208 	add.w	r2, r7, #8
 801688e:	4610      	mov	r0, r2
 8016890:	4798      	blx	r3
 8016892:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	3301      	adds	r3, #1
 8016898:	2207      	movs	r2, #7
 801689a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801689c:	e00f      	b.n	80168be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801689e:	6839      	ldr	r1, [r7, #0]
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f000 fa10 	bl	8016cc6 <USBD_CtlError>
        err++;
 80168a6:	7afb      	ldrb	r3, [r7, #11]
 80168a8:	3301      	adds	r3, #1
 80168aa:	72fb      	strb	r3, [r7, #11]
      break;
 80168ac:	e007      	b.n	80168be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80168ae:	6839      	ldr	r1, [r7, #0]
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f000 fa08 	bl	8016cc6 <USBD_CtlError>
      err++;
 80168b6:	7afb      	ldrb	r3, [r7, #11]
 80168b8:	3301      	adds	r3, #1
 80168ba:	72fb      	strb	r3, [r7, #11]
      break;
 80168bc:	bf00      	nop
  }

  if (err != 0U)
 80168be:	7afb      	ldrb	r3, [r7, #11]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d11e      	bne.n	8016902 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	88db      	ldrh	r3, [r3, #6]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d016      	beq.n	80168fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80168cc:	893b      	ldrh	r3, [r7, #8]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d00e      	beq.n	80168f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	88da      	ldrh	r2, [r3, #6]
 80168d6:	893b      	ldrh	r3, [r7, #8]
 80168d8:	4293      	cmp	r3, r2
 80168da:	bf28      	it	cs
 80168dc:	4613      	movcs	r3, r2
 80168de:	b29b      	uxth	r3, r3
 80168e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80168e2:	893b      	ldrh	r3, [r7, #8]
 80168e4:	461a      	mov	r2, r3
 80168e6:	68f9      	ldr	r1, [r7, #12]
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f000 fa5d 	bl	8016da8 <USBD_CtlSendData>
 80168ee:	e009      	b.n	8016904 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80168f0:	6839      	ldr	r1, [r7, #0]
 80168f2:	6878      	ldr	r0, [r7, #4]
 80168f4:	f000 f9e7 	bl	8016cc6 <USBD_CtlError>
 80168f8:	e004      	b.n	8016904 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f000 fa91 	bl	8016e22 <USBD_CtlSendStatus>
 8016900:	e000      	b.n	8016904 <USBD_GetDescriptor+0x2cc>
    return;
 8016902:	bf00      	nop
  }
}
 8016904:	3710      	adds	r7, #16
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop

0801690c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016916:	683b      	ldr	r3, [r7, #0]
 8016918:	889b      	ldrh	r3, [r3, #4]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d131      	bne.n	8016982 <USBD_SetAddress+0x76>
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	88db      	ldrh	r3, [r3, #6]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d12d      	bne.n	8016982 <USBD_SetAddress+0x76>
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	885b      	ldrh	r3, [r3, #2]
 801692a:	2b7f      	cmp	r3, #127	; 0x7f
 801692c:	d829      	bhi.n	8016982 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	885b      	ldrh	r3, [r3, #2]
 8016932:	b2db      	uxtb	r3, r3
 8016934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016940:	b2db      	uxtb	r3, r3
 8016942:	2b03      	cmp	r3, #3
 8016944:	d104      	bne.n	8016950 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016946:	6839      	ldr	r1, [r7, #0]
 8016948:	6878      	ldr	r0, [r7, #4]
 801694a:	f000 f9bc 	bl	8016cc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801694e:	e01d      	b.n	801698c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	7bfa      	ldrb	r2, [r7, #15]
 8016954:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016958:	7bfb      	ldrb	r3, [r7, #15]
 801695a:	4619      	mov	r1, r3
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f004 fc54 	bl	801b20a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 fa5d 	bl	8016e22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016968:	7bfb      	ldrb	r3, [r7, #15]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d004      	beq.n	8016978 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	2202      	movs	r2, #2
 8016972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016976:	e009      	b.n	801698c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2201      	movs	r2, #1
 801697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016980:	e004      	b.n	801698c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f000 f99e 	bl	8016cc6 <USBD_CtlError>
  }
}
 801698a:	bf00      	nop
 801698c:	bf00      	nop
 801698e:	3710      	adds	r7, #16
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}

08016994 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b084      	sub	sp, #16
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
 801699c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801699e:	2300      	movs	r3, #0
 80169a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	885b      	ldrh	r3, [r3, #2]
 80169a6:	b2da      	uxtb	r2, r3
 80169a8:	4b4e      	ldr	r3, [pc, #312]	; (8016ae4 <USBD_SetConfig+0x150>)
 80169aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80169ac:	4b4d      	ldr	r3, [pc, #308]	; (8016ae4 <USBD_SetConfig+0x150>)
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	2b01      	cmp	r3, #1
 80169b2:	d905      	bls.n	80169c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80169b4:	6839      	ldr	r1, [r7, #0]
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 f985 	bl	8016cc6 <USBD_CtlError>
    return USBD_FAIL;
 80169bc:	2303      	movs	r3, #3
 80169be:	e08c      	b.n	8016ada <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169c6:	b2db      	uxtb	r3, r3
 80169c8:	2b02      	cmp	r3, #2
 80169ca:	d002      	beq.n	80169d2 <USBD_SetConfig+0x3e>
 80169cc:	2b03      	cmp	r3, #3
 80169ce:	d029      	beq.n	8016a24 <USBD_SetConfig+0x90>
 80169d0:	e075      	b.n	8016abe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80169d2:	4b44      	ldr	r3, [pc, #272]	; (8016ae4 <USBD_SetConfig+0x150>)
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d020      	beq.n	8016a1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80169da:	4b42      	ldr	r3, [pc, #264]	; (8016ae4 <USBD_SetConfig+0x150>)
 80169dc:	781b      	ldrb	r3, [r3, #0]
 80169de:	461a      	mov	r2, r3
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80169e4:	4b3f      	ldr	r3, [pc, #252]	; (8016ae4 <USBD_SetConfig+0x150>)
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	4619      	mov	r1, r3
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f7fe ffe7 	bl	80159be <USBD_SetClassConfig>
 80169f0:	4603      	mov	r3, r0
 80169f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80169f4:	7bfb      	ldrb	r3, [r7, #15]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d008      	beq.n	8016a0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80169fa:	6839      	ldr	r1, [r7, #0]
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f000 f962 	bl	8016cc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2202      	movs	r2, #2
 8016a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016a0a:	e065      	b.n	8016ad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f000 fa08 	bl	8016e22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2203      	movs	r2, #3
 8016a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016a1a:	e05d      	b.n	8016ad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f000 fa00 	bl	8016e22 <USBD_CtlSendStatus>
      break;
 8016a22:	e059      	b.n	8016ad8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016a24:	4b2f      	ldr	r3, [pc, #188]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d112      	bne.n	8016a52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2202      	movs	r2, #2
 8016a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016a34:	4b2b      	ldr	r3, [pc, #172]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	461a      	mov	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016a3e:	4b29      	ldr	r3, [pc, #164]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	4619      	mov	r1, r3
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7fe ffd6 	bl	80159f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f000 f9e9 	bl	8016e22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016a50:	e042      	b.n	8016ad8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016a52:	4b24      	ldr	r3, [pc, #144]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	461a      	mov	r2, r3
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d02a      	beq.n	8016ab6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	4619      	mov	r1, r3
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f7fe ffc4 	bl	80159f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016a6e:	4b1d      	ldr	r3, [pc, #116]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	461a      	mov	r2, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016a78:	4b1a      	ldr	r3, [pc, #104]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f7fe ff9d 	bl	80159be <USBD_SetClassConfig>
 8016a84:	4603      	mov	r3, r0
 8016a86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016a88:	7bfb      	ldrb	r3, [r7, #15]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d00f      	beq.n	8016aae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016a8e:	6839      	ldr	r1, [r7, #0]
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f000 f918 	bl	8016cc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	6878      	ldr	r0, [r7, #4]
 8016aa0:	f7fe ffa9 	bl	80159f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2202      	movs	r2, #2
 8016aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016aac:	e014      	b.n	8016ad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f000 f9b7 	bl	8016e22 <USBD_CtlSendStatus>
      break;
 8016ab4:	e010      	b.n	8016ad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f000 f9b3 	bl	8016e22 <USBD_CtlSendStatus>
      break;
 8016abc:	e00c      	b.n	8016ad8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016abe:	6839      	ldr	r1, [r7, #0]
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 f900 	bl	8016cc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016ac6:	4b07      	ldr	r3, [pc, #28]	; (8016ae4 <USBD_SetConfig+0x150>)
 8016ac8:	781b      	ldrb	r3, [r3, #0]
 8016aca:	4619      	mov	r1, r3
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f7fe ff92 	bl	80159f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016ad2:	2303      	movs	r3, #3
 8016ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8016ad6:	bf00      	nop
  }

  return ret;
 8016ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3710      	adds	r7, #16
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	20001a88 	.word	0x20001a88

08016ae8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	88db      	ldrh	r3, [r3, #6]
 8016af6:	2b01      	cmp	r3, #1
 8016af8:	d004      	beq.n	8016b04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016afa:	6839      	ldr	r1, [r7, #0]
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f000 f8e2 	bl	8016cc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016b02:	e023      	b.n	8016b4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b0a:	b2db      	uxtb	r3, r3
 8016b0c:	2b02      	cmp	r3, #2
 8016b0e:	dc02      	bgt.n	8016b16 <USBD_GetConfig+0x2e>
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	dc03      	bgt.n	8016b1c <USBD_GetConfig+0x34>
 8016b14:	e015      	b.n	8016b42 <USBD_GetConfig+0x5a>
 8016b16:	2b03      	cmp	r3, #3
 8016b18:	d00b      	beq.n	8016b32 <USBD_GetConfig+0x4a>
 8016b1a:	e012      	b.n	8016b42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	3308      	adds	r3, #8
 8016b26:	2201      	movs	r2, #1
 8016b28:	4619      	mov	r1, r3
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 f93c 	bl	8016da8 <USBD_CtlSendData>
        break;
 8016b30:	e00c      	b.n	8016b4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	3304      	adds	r3, #4
 8016b36:	2201      	movs	r2, #1
 8016b38:	4619      	mov	r1, r3
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f000 f934 	bl	8016da8 <USBD_CtlSendData>
        break;
 8016b40:	e004      	b.n	8016b4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016b42:	6839      	ldr	r1, [r7, #0]
 8016b44:	6878      	ldr	r0, [r7, #4]
 8016b46:	f000 f8be 	bl	8016cc6 <USBD_CtlError>
        break;
 8016b4a:	bf00      	nop
}
 8016b4c:	bf00      	nop
 8016b4e:	3708      	adds	r7, #8
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	3b01      	subs	r3, #1
 8016b68:	2b02      	cmp	r3, #2
 8016b6a:	d81e      	bhi.n	8016baa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	88db      	ldrh	r3, [r3, #6]
 8016b70:	2b02      	cmp	r3, #2
 8016b72:	d004      	beq.n	8016b7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016b74:	6839      	ldr	r1, [r7, #0]
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f000 f8a5 	bl	8016cc6 <USBD_CtlError>
        break;
 8016b7c:	e01a      	b.n	8016bb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	2201      	movs	r2, #1
 8016b82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d005      	beq.n	8016b9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	f043 0202 	orr.w	r2, r3, #2
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	330c      	adds	r3, #12
 8016b9e:	2202      	movs	r2, #2
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f000 f900 	bl	8016da8 <USBD_CtlSendData>
      break;
 8016ba8:	e004      	b.n	8016bb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016baa:	6839      	ldr	r1, [r7, #0]
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f000 f88a 	bl	8016cc6 <USBD_CtlError>
      break;
 8016bb2:	bf00      	nop
  }
}
 8016bb4:	bf00      	nop
 8016bb6:	3708      	adds	r7, #8
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	885b      	ldrh	r3, [r3, #2]
 8016bca:	2b01      	cmp	r3, #1
 8016bcc:	d107      	bne.n	8016bde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 f923 	bl	8016e22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016bdc:	e013      	b.n	8016c06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	885b      	ldrh	r3, [r3, #2]
 8016be2:	2b02      	cmp	r3, #2
 8016be4:	d10b      	bne.n	8016bfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	889b      	ldrh	r3, [r3, #4]
 8016bea:	0a1b      	lsrs	r3, r3, #8
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	b2da      	uxtb	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 f913 	bl	8016e22 <USBD_CtlSendStatus>
}
 8016bfc:	e003      	b.n	8016c06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016bfe:	6839      	ldr	r1, [r7, #0]
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f000 f860 	bl	8016cc6 <USBD_CtlError>
}
 8016c06:	bf00      	nop
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c1e:	b2db      	uxtb	r3, r3
 8016c20:	3b01      	subs	r3, #1
 8016c22:	2b02      	cmp	r3, #2
 8016c24:	d80b      	bhi.n	8016c3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016c26:	683b      	ldr	r3, [r7, #0]
 8016c28:	885b      	ldrh	r3, [r3, #2]
 8016c2a:	2b01      	cmp	r3, #1
 8016c2c:	d10c      	bne.n	8016c48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2200      	movs	r2, #0
 8016c32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f000 f8f3 	bl	8016e22 <USBD_CtlSendStatus>
      }
      break;
 8016c3c:	e004      	b.n	8016c48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016c3e:	6839      	ldr	r1, [r7, #0]
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f000 f840 	bl	8016cc6 <USBD_CtlError>
      break;
 8016c46:	e000      	b.n	8016c4a <USBD_ClrFeature+0x3c>
      break;
 8016c48:	bf00      	nop
  }
}
 8016c4a:	bf00      	nop
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016c52:	b580      	push	{r7, lr}
 8016c54:	b084      	sub	sp, #16
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	6078      	str	r0, [r7, #4]
 8016c5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	781a      	ldrb	r2, [r3, #0]
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	781a      	ldrb	r2, [r3, #0]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016c7c:	68f8      	ldr	r0, [r7, #12]
 8016c7e:	f7ff fa41 	bl	8016104 <SWAPBYTE>
 8016c82:	4603      	mov	r3, r0
 8016c84:	461a      	mov	r2, r3
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	3301      	adds	r3, #1
 8016c94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016c96:	68f8      	ldr	r0, [r7, #12]
 8016c98:	f7ff fa34 	bl	8016104 <SWAPBYTE>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	3301      	adds	r3, #1
 8016cae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016cb0:	68f8      	ldr	r0, [r7, #12]
 8016cb2:	f7ff fa27 	bl	8016104 <SWAPBYTE>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	461a      	mov	r2, r3
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	80da      	strh	r2, [r3, #6]
}
 8016cbe:	bf00      	nop
 8016cc0:	3710      	adds	r7, #16
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}

08016cc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cc6:	b580      	push	{r7, lr}
 8016cc8:	b082      	sub	sp, #8
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	6078      	str	r0, [r7, #4]
 8016cce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016cd0:	2180      	movs	r1, #128	; 0x80
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	f004 fa2f 	bl	801b136 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016cd8:	2100      	movs	r1, #0
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f004 fa2b 	bl	801b136 <USBD_LL_StallEP>
}
 8016ce0:	bf00      	nop
 8016ce2:	3708      	adds	r7, #8
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}

08016ce8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d036      	beq.n	8016d6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016d02:	6938      	ldr	r0, [r7, #16]
 8016d04:	f000 f836 	bl	8016d74 <USBD_GetLen>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	b29b      	uxth	r3, r3
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	b29a      	uxth	r2, r3
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016d16:	7dfb      	ldrb	r3, [r7, #23]
 8016d18:	68ba      	ldr	r2, [r7, #8]
 8016d1a:	4413      	add	r3, r2
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	7812      	ldrb	r2, [r2, #0]
 8016d20:	701a      	strb	r2, [r3, #0]
  idx++;
 8016d22:	7dfb      	ldrb	r3, [r7, #23]
 8016d24:	3301      	adds	r3, #1
 8016d26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016d28:	7dfb      	ldrb	r3, [r7, #23]
 8016d2a:	68ba      	ldr	r2, [r7, #8]
 8016d2c:	4413      	add	r3, r2
 8016d2e:	2203      	movs	r2, #3
 8016d30:	701a      	strb	r2, [r3, #0]
  idx++;
 8016d32:	7dfb      	ldrb	r3, [r7, #23]
 8016d34:	3301      	adds	r3, #1
 8016d36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016d38:	e013      	b.n	8016d62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016d3a:	7dfb      	ldrb	r3, [r7, #23]
 8016d3c:	68ba      	ldr	r2, [r7, #8]
 8016d3e:	4413      	add	r3, r2
 8016d40:	693a      	ldr	r2, [r7, #16]
 8016d42:	7812      	ldrb	r2, [r2, #0]
 8016d44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016d46:	693b      	ldr	r3, [r7, #16]
 8016d48:	3301      	adds	r3, #1
 8016d4a:	613b      	str	r3, [r7, #16]
    idx++;
 8016d4c:	7dfb      	ldrb	r3, [r7, #23]
 8016d4e:	3301      	adds	r3, #1
 8016d50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016d52:	7dfb      	ldrb	r3, [r7, #23]
 8016d54:	68ba      	ldr	r2, [r7, #8]
 8016d56:	4413      	add	r3, r2
 8016d58:	2200      	movs	r2, #0
 8016d5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8016d5c:	7dfb      	ldrb	r3, [r7, #23]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d1e7      	bne.n	8016d3a <USBD_GetString+0x52>
 8016d6a:	e000      	b.n	8016d6e <USBD_GetString+0x86>
    return;
 8016d6c:	bf00      	nop
  }
}
 8016d6e:	3718      	adds	r7, #24
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016d74:	b480      	push	{r7}
 8016d76:	b085      	sub	sp, #20
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016d84:	e005      	b.n	8016d92 <USBD_GetLen+0x1e>
  {
    len++;
 8016d86:	7bfb      	ldrb	r3, [r7, #15]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	3301      	adds	r3, #1
 8016d90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d1f5      	bne.n	8016d86 <USBD_GetLen+0x12>
  }

  return len;
 8016d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3714      	adds	r7, #20
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr

08016da8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b084      	sub	sp, #16
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	60f8      	str	r0, [r7, #12]
 8016db0:	60b9      	str	r1, [r7, #8]
 8016db2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	2202      	movs	r2, #2
 8016db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	687a      	ldr	r2, [r7, #4]
 8016dc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	68ba      	ldr	r2, [r7, #8]
 8016dcc:	2100      	movs	r1, #0
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f004 fa3a 	bl	801b248 <USBD_LL_Transmit>

  return USBD_OK;
 8016dd4:	2300      	movs	r3, #0
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3710      	adds	r7, #16
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}

08016dde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016dde:	b580      	push	{r7, lr}
 8016de0:	b084      	sub	sp, #16
 8016de2:	af00      	add	r7, sp, #0
 8016de4:	60f8      	str	r0, [r7, #12]
 8016de6:	60b9      	str	r1, [r7, #8]
 8016de8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	68ba      	ldr	r2, [r7, #8]
 8016dee:	2100      	movs	r1, #0
 8016df0:	68f8      	ldr	r0, [r7, #12]
 8016df2:	f004 fa29 	bl	801b248 <USBD_LL_Transmit>

  return USBD_OK;
 8016df6:	2300      	movs	r3, #0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3710      	adds	r7, #16
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	68ba      	ldr	r2, [r7, #8]
 8016e10:	2100      	movs	r1, #0
 8016e12:	68f8      	ldr	r0, [r7, #12]
 8016e14:	f004 fa39 	bl	801b28a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e18:	2300      	movs	r3, #0
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3710      	adds	r7, #16
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}

08016e22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016e22:	b580      	push	{r7, lr}
 8016e24:	b082      	sub	sp, #8
 8016e26:	af00      	add	r7, sp, #0
 8016e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	2204      	movs	r2, #4
 8016e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016e32:	2300      	movs	r3, #0
 8016e34:	2200      	movs	r2, #0
 8016e36:	2100      	movs	r1, #0
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f004 fa05 	bl	801b248 <USBD_LL_Transmit>

  return USBD_OK;
 8016e3e:	2300      	movs	r3, #0
}
 8016e40:	4618      	mov	r0, r3
 8016e42:	3708      	adds	r7, #8
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}

08016e48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2205      	movs	r2, #5
 8016e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e58:	2300      	movs	r3, #0
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	2100      	movs	r1, #0
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f004 fa13 	bl	801b28a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e64:	2300      	movs	r3, #0
}
 8016e66:	4618      	mov	r0, r3
 8016e68:	3708      	adds	r7, #8
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}
	...

08016e70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	4603      	mov	r3, r0
 8016e78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016e7a:	79fb      	ldrb	r3, [r7, #7]
 8016e7c:	4a08      	ldr	r2, [pc, #32]	; (8016ea0 <disk_status+0x30>)
 8016e7e:	009b      	lsls	r3, r3, #2
 8016e80:	4413      	add	r3, r2
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	79fa      	ldrb	r2, [r7, #7]
 8016e88:	4905      	ldr	r1, [pc, #20]	; (8016ea0 <disk_status+0x30>)
 8016e8a:	440a      	add	r2, r1
 8016e8c:	7a12      	ldrb	r2, [r2, #8]
 8016e8e:	4610      	mov	r0, r2
 8016e90:	4798      	blx	r3
 8016e92:	4603      	mov	r3, r0
 8016e94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3710      	adds	r7, #16
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}
 8016ea0:	20001cb4 	.word	0x20001cb4

08016ea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b084      	sub	sp, #16
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	4603      	mov	r3, r0
 8016eac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016eb2:	79fb      	ldrb	r3, [r7, #7]
 8016eb4:	4a0d      	ldr	r2, [pc, #52]	; (8016eec <disk_initialize+0x48>)
 8016eb6:	5cd3      	ldrb	r3, [r2, r3]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d111      	bne.n	8016ee0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016ebc:	79fb      	ldrb	r3, [r7, #7]
 8016ebe:	4a0b      	ldr	r2, [pc, #44]	; (8016eec <disk_initialize+0x48>)
 8016ec0:	2101      	movs	r1, #1
 8016ec2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016ec4:	79fb      	ldrb	r3, [r7, #7]
 8016ec6:	4a09      	ldr	r2, [pc, #36]	; (8016eec <disk_initialize+0x48>)
 8016ec8:	009b      	lsls	r3, r3, #2
 8016eca:	4413      	add	r3, r2
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	79fa      	ldrb	r2, [r7, #7]
 8016ed2:	4906      	ldr	r1, [pc, #24]	; (8016eec <disk_initialize+0x48>)
 8016ed4:	440a      	add	r2, r1
 8016ed6:	7a12      	ldrb	r2, [r2, #8]
 8016ed8:	4610      	mov	r0, r2
 8016eda:	4798      	blx	r3
 8016edc:	4603      	mov	r3, r0
 8016ede:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	20001cb4 	.word	0x20001cb4

08016ef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016ef0:	b590      	push	{r4, r7, lr}
 8016ef2:	b087      	sub	sp, #28
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60b9      	str	r1, [r7, #8]
 8016ef8:	607a      	str	r2, [r7, #4]
 8016efa:	603b      	str	r3, [r7, #0]
 8016efc:	4603      	mov	r3, r0
 8016efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016f00:	7bfb      	ldrb	r3, [r7, #15]
 8016f02:	4a0a      	ldr	r2, [pc, #40]	; (8016f2c <disk_read+0x3c>)
 8016f04:	009b      	lsls	r3, r3, #2
 8016f06:	4413      	add	r3, r2
 8016f08:	685b      	ldr	r3, [r3, #4]
 8016f0a:	689c      	ldr	r4, [r3, #8]
 8016f0c:	7bfb      	ldrb	r3, [r7, #15]
 8016f0e:	4a07      	ldr	r2, [pc, #28]	; (8016f2c <disk_read+0x3c>)
 8016f10:	4413      	add	r3, r2
 8016f12:	7a18      	ldrb	r0, [r3, #8]
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	47a0      	blx	r4
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8016f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	371c      	adds	r7, #28
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd90      	pop	{r4, r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	20001cb4 	.word	0x20001cb4

08016f30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016f30:	b590      	push	{r4, r7, lr}
 8016f32:	b087      	sub	sp, #28
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	60b9      	str	r1, [r7, #8]
 8016f38:	607a      	str	r2, [r7, #4]
 8016f3a:	603b      	str	r3, [r7, #0]
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016f40:	7bfb      	ldrb	r3, [r7, #15]
 8016f42:	4a0a      	ldr	r2, [pc, #40]	; (8016f6c <disk_write+0x3c>)
 8016f44:	009b      	lsls	r3, r3, #2
 8016f46:	4413      	add	r3, r2
 8016f48:	685b      	ldr	r3, [r3, #4]
 8016f4a:	68dc      	ldr	r4, [r3, #12]
 8016f4c:	7bfb      	ldrb	r3, [r7, #15]
 8016f4e:	4a07      	ldr	r2, [pc, #28]	; (8016f6c <disk_write+0x3c>)
 8016f50:	4413      	add	r3, r2
 8016f52:	7a18      	ldrb	r0, [r3, #8]
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	68b9      	ldr	r1, [r7, #8]
 8016f5a:	47a0      	blx	r4
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8016f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	371c      	adds	r7, #28
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd90      	pop	{r4, r7, pc}
 8016f6a:	bf00      	nop
 8016f6c:	20001cb4 	.word	0x20001cb4

08016f70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	4603      	mov	r3, r0
 8016f78:	603a      	str	r2, [r7, #0]
 8016f7a:	71fb      	strb	r3, [r7, #7]
 8016f7c:	460b      	mov	r3, r1
 8016f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016f80:	79fb      	ldrb	r3, [r7, #7]
 8016f82:	4a09      	ldr	r2, [pc, #36]	; (8016fa8 <disk_ioctl+0x38>)
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	4413      	add	r3, r2
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	691b      	ldr	r3, [r3, #16]
 8016f8c:	79fa      	ldrb	r2, [r7, #7]
 8016f8e:	4906      	ldr	r1, [pc, #24]	; (8016fa8 <disk_ioctl+0x38>)
 8016f90:	440a      	add	r2, r1
 8016f92:	7a10      	ldrb	r0, [r2, #8]
 8016f94:	79b9      	ldrb	r1, [r7, #6]
 8016f96:	683a      	ldr	r2, [r7, #0]
 8016f98:	4798      	blx	r3
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8016f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3710      	adds	r7, #16
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	20001cb4 	.word	0x20001cb4

08016fac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016fac:	b480      	push	{r7}
 8016fae:	b085      	sub	sp, #20
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	3301      	adds	r3, #1
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016fbc:	89fb      	ldrh	r3, [r7, #14]
 8016fbe:	021b      	lsls	r3, r3, #8
 8016fc0:	b21a      	sxth	r2, r3
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	b21b      	sxth	r3, r3
 8016fc8:	4313      	orrs	r3, r2
 8016fca:	b21b      	sxth	r3, r3
 8016fcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016fce:	89fb      	ldrh	r3, [r7, #14]
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3714      	adds	r7, #20
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fda:	4770      	bx	lr

08016fdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b085      	sub	sp, #20
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	3303      	adds	r3, #3
 8016fe8:	781b      	ldrb	r3, [r3, #0]
 8016fea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	021b      	lsls	r3, r3, #8
 8016ff0:	687a      	ldr	r2, [r7, #4]
 8016ff2:	3202      	adds	r2, #2
 8016ff4:	7812      	ldrb	r2, [r2, #0]
 8016ff6:	4313      	orrs	r3, r2
 8016ff8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	021b      	lsls	r3, r3, #8
 8016ffe:	687a      	ldr	r2, [r7, #4]
 8017000:	3201      	adds	r2, #1
 8017002:	7812      	ldrb	r2, [r2, #0]
 8017004:	4313      	orrs	r3, r2
 8017006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	021b      	lsls	r3, r3, #8
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	7812      	ldrb	r2, [r2, #0]
 8017010:	4313      	orrs	r3, r2
 8017012:	60fb      	str	r3, [r7, #12]
	return rv;
 8017014:	68fb      	ldr	r3, [r7, #12]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3714      	adds	r7, #20
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr

08017022 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017022:	b480      	push	{r7}
 8017024:	b083      	sub	sp, #12
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
 801702a:	460b      	mov	r3, r1
 801702c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	1c5a      	adds	r2, r3, #1
 8017032:	607a      	str	r2, [r7, #4]
 8017034:	887a      	ldrh	r2, [r7, #2]
 8017036:	b2d2      	uxtb	r2, r2
 8017038:	701a      	strb	r2, [r3, #0]
 801703a:	887b      	ldrh	r3, [r7, #2]
 801703c:	0a1b      	lsrs	r3, r3, #8
 801703e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	607a      	str	r2, [r7, #4]
 8017046:	887a      	ldrh	r2, [r7, #2]
 8017048:	b2d2      	uxtb	r2, r2
 801704a:	701a      	strb	r2, [r3, #0]
}
 801704c:	bf00      	nop
 801704e:	370c      	adds	r7, #12
 8017050:	46bd      	mov	sp, r7
 8017052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017056:	4770      	bx	lr

08017058 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017058:	b480      	push	{r7}
 801705a:	b083      	sub	sp, #12
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	1c5a      	adds	r2, r3, #1
 8017066:	607a      	str	r2, [r7, #4]
 8017068:	683a      	ldr	r2, [r7, #0]
 801706a:	b2d2      	uxtb	r2, r2
 801706c:	701a      	strb	r2, [r3, #0]
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	0a1b      	lsrs	r3, r3, #8
 8017072:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	1c5a      	adds	r2, r3, #1
 8017078:	607a      	str	r2, [r7, #4]
 801707a:	683a      	ldr	r2, [r7, #0]
 801707c:	b2d2      	uxtb	r2, r2
 801707e:	701a      	strb	r2, [r3, #0]
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	0a1b      	lsrs	r3, r3, #8
 8017084:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	1c5a      	adds	r2, r3, #1
 801708a:	607a      	str	r2, [r7, #4]
 801708c:	683a      	ldr	r2, [r7, #0]
 801708e:	b2d2      	uxtb	r2, r2
 8017090:	701a      	strb	r2, [r3, #0]
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	0a1b      	lsrs	r3, r3, #8
 8017096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	1c5a      	adds	r2, r3, #1
 801709c:	607a      	str	r2, [r7, #4]
 801709e:	683a      	ldr	r2, [r7, #0]
 80170a0:	b2d2      	uxtb	r2, r2
 80170a2:	701a      	strb	r2, [r3, #0]
}
 80170a4:	bf00      	nop
 80170a6:	370c      	adds	r7, #12
 80170a8:	46bd      	mov	sp, r7
 80170aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ae:	4770      	bx	lr

080170b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80170b0:	b480      	push	{r7}
 80170b2:	b087      	sub	sp, #28
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d00d      	beq.n	80170e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80170ca:	693a      	ldr	r2, [r7, #16]
 80170cc:	1c53      	adds	r3, r2, #1
 80170ce:	613b      	str	r3, [r7, #16]
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	1c59      	adds	r1, r3, #1
 80170d4:	6179      	str	r1, [r7, #20]
 80170d6:	7812      	ldrb	r2, [r2, #0]
 80170d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	3b01      	subs	r3, #1
 80170de:	607b      	str	r3, [r7, #4]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d1f1      	bne.n	80170ca <mem_cpy+0x1a>
	}
}
 80170e6:	bf00      	nop
 80170e8:	371c      	adds	r7, #28
 80170ea:	46bd      	mov	sp, r7
 80170ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f0:	4770      	bx	lr

080170f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80170f2:	b480      	push	{r7}
 80170f4:	b087      	sub	sp, #28
 80170f6:	af00      	add	r7, sp, #0
 80170f8:	60f8      	str	r0, [r7, #12]
 80170fa:	60b9      	str	r1, [r7, #8]
 80170fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	1c5a      	adds	r2, r3, #1
 8017106:	617a      	str	r2, [r7, #20]
 8017108:	68ba      	ldr	r2, [r7, #8]
 801710a:	b2d2      	uxtb	r2, r2
 801710c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	3b01      	subs	r3, #1
 8017112:	607b      	str	r3, [r7, #4]
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d1f3      	bne.n	8017102 <mem_set+0x10>
}
 801711a:	bf00      	nop
 801711c:	bf00      	nop
 801711e:	371c      	adds	r7, #28
 8017120:	46bd      	mov	sp, r7
 8017122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017126:	4770      	bx	lr

08017128 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017128:	b480      	push	{r7}
 801712a:	b089      	sub	sp, #36	; 0x24
 801712c:	af00      	add	r7, sp, #0
 801712e:	60f8      	str	r0, [r7, #12]
 8017130:	60b9      	str	r1, [r7, #8]
 8017132:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	61fb      	str	r3, [r7, #28]
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801713c:	2300      	movs	r3, #0
 801713e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017140:	69fb      	ldr	r3, [r7, #28]
 8017142:	1c5a      	adds	r2, r3, #1
 8017144:	61fa      	str	r2, [r7, #28]
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	4619      	mov	r1, r3
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	1c5a      	adds	r2, r3, #1
 801714e:	61ba      	str	r2, [r7, #24]
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	1acb      	subs	r3, r1, r3
 8017154:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	3b01      	subs	r3, #1
 801715a:	607b      	str	r3, [r7, #4]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d002      	beq.n	8017168 <mem_cmp+0x40>
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d0eb      	beq.n	8017140 <mem_cmp+0x18>

	return r;
 8017168:	697b      	ldr	r3, [r7, #20]
}
 801716a:	4618      	mov	r0, r3
 801716c:	3724      	adds	r7, #36	; 0x24
 801716e:	46bd      	mov	sp, r7
 8017170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017174:	4770      	bx	lr

08017176 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017176:	b480      	push	{r7}
 8017178:	b083      	sub	sp, #12
 801717a:	af00      	add	r7, sp, #0
 801717c:	6078      	str	r0, [r7, #4]
 801717e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017180:	e002      	b.n	8017188 <chk_chr+0x12>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	3301      	adds	r3, #1
 8017186:	607b      	str	r3, [r7, #4]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d005      	beq.n	801719c <chk_chr+0x26>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	461a      	mov	r2, r3
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	4293      	cmp	r3, r2
 801719a:	d1f2      	bne.n	8017182 <chk_chr+0xc>
	return *str;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	781b      	ldrb	r3, [r3, #0]
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	370c      	adds	r7, #12
 80171a4:	46bd      	mov	sp, r7
 80171a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171aa:	4770      	bx	lr

080171ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80171ac:	b480      	push	{r7}
 80171ae:	b085      	sub	sp, #20
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
 80171b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80171b6:	2300      	movs	r3, #0
 80171b8:	60bb      	str	r3, [r7, #8]
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	60fb      	str	r3, [r7, #12]
 80171be:	e029      	b.n	8017214 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80171c0:	4a27      	ldr	r2, [pc, #156]	; (8017260 <chk_lock+0xb4>)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	011b      	lsls	r3, r3, #4
 80171c6:	4413      	add	r3, r2
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d01d      	beq.n	801720a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80171ce:	4a24      	ldr	r2, [pc, #144]	; (8017260 <chk_lock+0xb4>)
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	011b      	lsls	r3, r3, #4
 80171d4:	4413      	add	r3, r2
 80171d6:	681a      	ldr	r2, [r3, #0]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d116      	bne.n	801720e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80171e0:	4a1f      	ldr	r2, [pc, #124]	; (8017260 <chk_lock+0xb4>)
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	011b      	lsls	r3, r3, #4
 80171e6:	4413      	add	r3, r2
 80171e8:	3304      	adds	r3, #4
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d10c      	bne.n	801720e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80171f4:	4a1a      	ldr	r2, [pc, #104]	; (8017260 <chk_lock+0xb4>)
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	011b      	lsls	r3, r3, #4
 80171fa:	4413      	add	r3, r2
 80171fc:	3308      	adds	r3, #8
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017204:	429a      	cmp	r2, r3
 8017206:	d102      	bne.n	801720e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017208:	e007      	b.n	801721a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801720a:	2301      	movs	r3, #1
 801720c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	3301      	adds	r3, #1
 8017212:	60fb      	str	r3, [r7, #12]
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	2b01      	cmp	r3, #1
 8017218:	d9d2      	bls.n	80171c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	2b02      	cmp	r3, #2
 801721e:	d109      	bne.n	8017234 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d102      	bne.n	801722c <chk_lock+0x80>
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	2b02      	cmp	r3, #2
 801722a:	d101      	bne.n	8017230 <chk_lock+0x84>
 801722c:	2300      	movs	r3, #0
 801722e:	e010      	b.n	8017252 <chk_lock+0xa6>
 8017230:	2312      	movs	r3, #18
 8017232:	e00e      	b.n	8017252 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d108      	bne.n	801724c <chk_lock+0xa0>
 801723a:	4a09      	ldr	r2, [pc, #36]	; (8017260 <chk_lock+0xb4>)
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	011b      	lsls	r3, r3, #4
 8017240:	4413      	add	r3, r2
 8017242:	330c      	adds	r3, #12
 8017244:	881b      	ldrh	r3, [r3, #0]
 8017246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801724a:	d101      	bne.n	8017250 <chk_lock+0xa4>
 801724c:	2310      	movs	r3, #16
 801724e:	e000      	b.n	8017252 <chk_lock+0xa6>
 8017250:	2300      	movs	r3, #0
}
 8017252:	4618      	mov	r0, r3
 8017254:	3714      	adds	r7, #20
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	20001a94 	.word	0x20001a94

08017264 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017264:	b480      	push	{r7}
 8017266:	b083      	sub	sp, #12
 8017268:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801726a:	2300      	movs	r3, #0
 801726c:	607b      	str	r3, [r7, #4]
 801726e:	e002      	b.n	8017276 <enq_lock+0x12>
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	3301      	adds	r3, #1
 8017274:	607b      	str	r3, [r7, #4]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2b01      	cmp	r3, #1
 801727a:	d806      	bhi.n	801728a <enq_lock+0x26>
 801727c:	4a09      	ldr	r2, [pc, #36]	; (80172a4 <enq_lock+0x40>)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	011b      	lsls	r3, r3, #4
 8017282:	4413      	add	r3, r2
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d1f2      	bne.n	8017270 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b02      	cmp	r3, #2
 801728e:	bf14      	ite	ne
 8017290:	2301      	movne	r3, #1
 8017292:	2300      	moveq	r3, #0
 8017294:	b2db      	uxtb	r3, r3
}
 8017296:	4618      	mov	r0, r3
 8017298:	370c      	adds	r7, #12
 801729a:	46bd      	mov	sp, r7
 801729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a0:	4770      	bx	lr
 80172a2:	bf00      	nop
 80172a4:	20001a94 	.word	0x20001a94

080172a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80172a8:	b480      	push	{r7}
 80172aa:	b085      	sub	sp, #20
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80172b2:	2300      	movs	r3, #0
 80172b4:	60fb      	str	r3, [r7, #12]
 80172b6:	e01f      	b.n	80172f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80172b8:	4a41      	ldr	r2, [pc, #260]	; (80173c0 <inc_lock+0x118>)
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	011b      	lsls	r3, r3, #4
 80172be:	4413      	add	r3, r2
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d113      	bne.n	80172f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80172ca:	4a3d      	ldr	r2, [pc, #244]	; (80173c0 <inc_lock+0x118>)
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	011b      	lsls	r3, r3, #4
 80172d0:	4413      	add	r3, r2
 80172d2:	3304      	adds	r3, #4
 80172d4:	681a      	ldr	r2, [r3, #0]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80172da:	429a      	cmp	r2, r3
 80172dc:	d109      	bne.n	80172f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80172de:	4a38      	ldr	r2, [pc, #224]	; (80173c0 <inc_lock+0x118>)
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	011b      	lsls	r3, r3, #4
 80172e4:	4413      	add	r3, r2
 80172e6:	3308      	adds	r3, #8
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d006      	beq.n	8017300 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	3301      	adds	r3, #1
 80172f6:	60fb      	str	r3, [r7, #12]
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d9dc      	bls.n	80172b8 <inc_lock+0x10>
 80172fe:	e000      	b.n	8017302 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017300:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	2b02      	cmp	r3, #2
 8017306:	d132      	bne.n	801736e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017308:	2300      	movs	r3, #0
 801730a:	60fb      	str	r3, [r7, #12]
 801730c:	e002      	b.n	8017314 <inc_lock+0x6c>
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	3301      	adds	r3, #1
 8017312:	60fb      	str	r3, [r7, #12]
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2b01      	cmp	r3, #1
 8017318:	d806      	bhi.n	8017328 <inc_lock+0x80>
 801731a:	4a29      	ldr	r2, [pc, #164]	; (80173c0 <inc_lock+0x118>)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	011b      	lsls	r3, r3, #4
 8017320:	4413      	add	r3, r2
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d1f2      	bne.n	801730e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2b02      	cmp	r3, #2
 801732c:	d101      	bne.n	8017332 <inc_lock+0x8a>
 801732e:	2300      	movs	r3, #0
 8017330:	e040      	b.n	80173b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681a      	ldr	r2, [r3, #0]
 8017336:	4922      	ldr	r1, [pc, #136]	; (80173c0 <inc_lock+0x118>)
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	011b      	lsls	r3, r3, #4
 801733c:	440b      	add	r3, r1
 801733e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	689a      	ldr	r2, [r3, #8]
 8017344:	491e      	ldr	r1, [pc, #120]	; (80173c0 <inc_lock+0x118>)
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	011b      	lsls	r3, r3, #4
 801734a:	440b      	add	r3, r1
 801734c:	3304      	adds	r3, #4
 801734e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	695a      	ldr	r2, [r3, #20]
 8017354:	491a      	ldr	r1, [pc, #104]	; (80173c0 <inc_lock+0x118>)
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	011b      	lsls	r3, r3, #4
 801735a:	440b      	add	r3, r1
 801735c:	3308      	adds	r3, #8
 801735e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017360:	4a17      	ldr	r2, [pc, #92]	; (80173c0 <inc_lock+0x118>)
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	011b      	lsls	r3, r3, #4
 8017366:	4413      	add	r3, r2
 8017368:	330c      	adds	r3, #12
 801736a:	2200      	movs	r2, #0
 801736c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d009      	beq.n	8017388 <inc_lock+0xe0>
 8017374:	4a12      	ldr	r2, [pc, #72]	; (80173c0 <inc_lock+0x118>)
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	011b      	lsls	r3, r3, #4
 801737a:	4413      	add	r3, r2
 801737c:	330c      	adds	r3, #12
 801737e:	881b      	ldrh	r3, [r3, #0]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d001      	beq.n	8017388 <inc_lock+0xe0>
 8017384:	2300      	movs	r3, #0
 8017386:	e015      	b.n	80173b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d108      	bne.n	80173a0 <inc_lock+0xf8>
 801738e:	4a0c      	ldr	r2, [pc, #48]	; (80173c0 <inc_lock+0x118>)
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	011b      	lsls	r3, r3, #4
 8017394:	4413      	add	r3, r2
 8017396:	330c      	adds	r3, #12
 8017398:	881b      	ldrh	r3, [r3, #0]
 801739a:	3301      	adds	r3, #1
 801739c:	b29a      	uxth	r2, r3
 801739e:	e001      	b.n	80173a4 <inc_lock+0xfc>
 80173a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80173a4:	4906      	ldr	r1, [pc, #24]	; (80173c0 <inc_lock+0x118>)
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	011b      	lsls	r3, r3, #4
 80173aa:	440b      	add	r3, r1
 80173ac:	330c      	adds	r3, #12
 80173ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	3301      	adds	r3, #1
}
 80173b4:	4618      	mov	r0, r3
 80173b6:	3714      	adds	r7, #20
 80173b8:	46bd      	mov	sp, r7
 80173ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173be:	4770      	bx	lr
 80173c0:	20001a94 	.word	0x20001a94

080173c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80173c4:	b480      	push	{r7}
 80173c6:	b085      	sub	sp, #20
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	3b01      	subs	r3, #1
 80173d0:	607b      	str	r3, [r7, #4]
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d825      	bhi.n	8017424 <dec_lock+0x60>
		n = Files[i].ctr;
 80173d8:	4a17      	ldr	r2, [pc, #92]	; (8017438 <dec_lock+0x74>)
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	011b      	lsls	r3, r3, #4
 80173de:	4413      	add	r3, r2
 80173e0:	330c      	adds	r3, #12
 80173e2:	881b      	ldrh	r3, [r3, #0]
 80173e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80173e6:	89fb      	ldrh	r3, [r7, #14]
 80173e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80173ec:	d101      	bne.n	80173f2 <dec_lock+0x2e>
 80173ee:	2300      	movs	r3, #0
 80173f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80173f2:	89fb      	ldrh	r3, [r7, #14]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d002      	beq.n	80173fe <dec_lock+0x3a>
 80173f8:	89fb      	ldrh	r3, [r7, #14]
 80173fa:	3b01      	subs	r3, #1
 80173fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80173fe:	4a0e      	ldr	r2, [pc, #56]	; (8017438 <dec_lock+0x74>)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	011b      	lsls	r3, r3, #4
 8017404:	4413      	add	r3, r2
 8017406:	330c      	adds	r3, #12
 8017408:	89fa      	ldrh	r2, [r7, #14]
 801740a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801740c:	89fb      	ldrh	r3, [r7, #14]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d105      	bne.n	801741e <dec_lock+0x5a>
 8017412:	4a09      	ldr	r2, [pc, #36]	; (8017438 <dec_lock+0x74>)
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	011b      	lsls	r3, r3, #4
 8017418:	4413      	add	r3, r2
 801741a:	2200      	movs	r2, #0
 801741c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801741e:	2300      	movs	r3, #0
 8017420:	737b      	strb	r3, [r7, #13]
 8017422:	e001      	b.n	8017428 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017424:	2302      	movs	r3, #2
 8017426:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017428:	7b7b      	ldrb	r3, [r7, #13]
}
 801742a:	4618      	mov	r0, r3
 801742c:	3714      	adds	r7, #20
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop
 8017438:	20001a94 	.word	0x20001a94

0801743c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801743c:	b480      	push	{r7}
 801743e:	b085      	sub	sp, #20
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017444:	2300      	movs	r3, #0
 8017446:	60fb      	str	r3, [r7, #12]
 8017448:	e010      	b.n	801746c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801744a:	4a0d      	ldr	r2, [pc, #52]	; (8017480 <clear_lock+0x44>)
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	011b      	lsls	r3, r3, #4
 8017450:	4413      	add	r3, r2
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	687a      	ldr	r2, [r7, #4]
 8017456:	429a      	cmp	r2, r3
 8017458:	d105      	bne.n	8017466 <clear_lock+0x2a>
 801745a:	4a09      	ldr	r2, [pc, #36]	; (8017480 <clear_lock+0x44>)
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	011b      	lsls	r3, r3, #4
 8017460:	4413      	add	r3, r2
 8017462:	2200      	movs	r2, #0
 8017464:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	3301      	adds	r3, #1
 801746a:	60fb      	str	r3, [r7, #12]
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	2b01      	cmp	r3, #1
 8017470:	d9eb      	bls.n	801744a <clear_lock+0xe>
	}
}
 8017472:	bf00      	nop
 8017474:	bf00      	nop
 8017476:	3714      	adds	r7, #20
 8017478:	46bd      	mov	sp, r7
 801747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747e:	4770      	bx	lr
 8017480:	20001a94 	.word	0x20001a94

08017484 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b086      	sub	sp, #24
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801748c:	2300      	movs	r3, #0
 801748e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	78db      	ldrb	r3, [r3, #3]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d034      	beq.n	8017502 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801749c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	7858      	ldrb	r0, [r3, #1]
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80174a8:	2301      	movs	r3, #1
 80174aa:	697a      	ldr	r2, [r7, #20]
 80174ac:	f7ff fd40 	bl	8016f30 <disk_write>
 80174b0:	4603      	mov	r3, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d002      	beq.n	80174bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80174b6:	2301      	movs	r3, #1
 80174b8:	73fb      	strb	r3, [r7, #15]
 80174ba:	e022      	b.n	8017502 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2200      	movs	r2, #0
 80174c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174c6:	697a      	ldr	r2, [r7, #20]
 80174c8:	1ad2      	subs	r2, r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	69db      	ldr	r3, [r3, #28]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d217      	bcs.n	8017502 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	789b      	ldrb	r3, [r3, #2]
 80174d6:	613b      	str	r3, [r7, #16]
 80174d8:	e010      	b.n	80174fc <sync_window+0x78>
					wsect += fs->fsize;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	69db      	ldr	r3, [r3, #28]
 80174de:	697a      	ldr	r2, [r7, #20]
 80174e0:	4413      	add	r3, r2
 80174e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	7858      	ldrb	r0, [r3, #1]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80174ee:	2301      	movs	r3, #1
 80174f0:	697a      	ldr	r2, [r7, #20]
 80174f2:	f7ff fd1d 	bl	8016f30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80174f6:	693b      	ldr	r3, [r7, #16]
 80174f8:	3b01      	subs	r3, #1
 80174fa:	613b      	str	r3, [r7, #16]
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	2b01      	cmp	r3, #1
 8017500:	d8eb      	bhi.n	80174da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017502:	7bfb      	ldrb	r3, [r7, #15]
}
 8017504:	4618      	mov	r0, r3
 8017506:	3718      	adds	r7, #24
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}

0801750c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b084      	sub	sp, #16
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017516:	2300      	movs	r3, #0
 8017518:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801751e:	683a      	ldr	r2, [r7, #0]
 8017520:	429a      	cmp	r2, r3
 8017522:	d01b      	beq.n	801755c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f7ff ffad 	bl	8017484 <sync_window>
 801752a:	4603      	mov	r3, r0
 801752c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801752e:	7bfb      	ldrb	r3, [r7, #15]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d113      	bne.n	801755c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	7858      	ldrb	r0, [r3, #1]
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801753e:	2301      	movs	r3, #1
 8017540:	683a      	ldr	r2, [r7, #0]
 8017542:	f7ff fcd5 	bl	8016ef0 <disk_read>
 8017546:	4603      	mov	r3, r0
 8017548:	2b00      	cmp	r3, #0
 801754a:	d004      	beq.n	8017556 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801754c:	f04f 33ff 	mov.w	r3, #4294967295
 8017550:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017552:	2301      	movs	r3, #1
 8017554:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	683a      	ldr	r2, [r7, #0]
 801755a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801755c:	7bfb      	ldrb	r3, [r7, #15]
}
 801755e:	4618      	mov	r0, r3
 8017560:	3710      	adds	r7, #16
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
	...

08017568 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b084      	sub	sp, #16
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f7ff ff87 	bl	8017484 <sync_window>
 8017576:	4603      	mov	r3, r0
 8017578:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801757a:	7bfb      	ldrb	r3, [r7, #15]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d158      	bne.n	8017632 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b03      	cmp	r3, #3
 8017586:	d148      	bne.n	801761a <sync_fs+0xb2>
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	791b      	ldrb	r3, [r3, #4]
 801758c:	2b01      	cmp	r3, #1
 801758e:	d144      	bne.n	801761a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	3334      	adds	r3, #52	; 0x34
 8017594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017598:	2100      	movs	r1, #0
 801759a:	4618      	mov	r0, r3
 801759c:	f7ff fda9 	bl	80170f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	3334      	adds	r3, #52	; 0x34
 80175a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80175a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7ff fd38 	bl	8017022 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	3334      	adds	r3, #52	; 0x34
 80175b6:	4921      	ldr	r1, [pc, #132]	; (801763c <sync_fs+0xd4>)
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7ff fd4d 	bl	8017058 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	3334      	adds	r3, #52	; 0x34
 80175c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80175c6:	491e      	ldr	r1, [pc, #120]	; (8017640 <sync_fs+0xd8>)
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7ff fd45 	bl	8017058 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	3334      	adds	r3, #52	; 0x34
 80175d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	695b      	ldr	r3, [r3, #20]
 80175da:	4619      	mov	r1, r3
 80175dc:	4610      	mov	r0, r2
 80175de:	f7ff fd3b 	bl	8017058 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	3334      	adds	r3, #52	; 0x34
 80175e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	691b      	ldr	r3, [r3, #16]
 80175ee:	4619      	mov	r1, r3
 80175f0:	4610      	mov	r0, r2
 80175f2:	f7ff fd31 	bl	8017058 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6a1b      	ldr	r3, [r3, #32]
 80175fa:	1c5a      	adds	r2, r3, #1
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	7858      	ldrb	r0, [r3, #1]
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801760e:	2301      	movs	r3, #1
 8017610:	f7ff fc8e 	bl	8016f30 <disk_write>
			fs->fsi_flag = 0;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2200      	movs	r2, #0
 8017618:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	785b      	ldrb	r3, [r3, #1]
 801761e:	2200      	movs	r2, #0
 8017620:	2100      	movs	r1, #0
 8017622:	4618      	mov	r0, r3
 8017624:	f7ff fca4 	bl	8016f70 <disk_ioctl>
 8017628:	4603      	mov	r3, r0
 801762a:	2b00      	cmp	r3, #0
 801762c:	d001      	beq.n	8017632 <sync_fs+0xca>
 801762e:	2301      	movs	r3, #1
 8017630:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017632:	7bfb      	ldrb	r3, [r7, #15]
}
 8017634:	4618      	mov	r0, r3
 8017636:	3710      	adds	r7, #16
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}
 801763c:	41615252 	.word	0x41615252
 8017640:	61417272 	.word	0x61417272

08017644 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	3b02      	subs	r3, #2
 8017652:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	699b      	ldr	r3, [r3, #24]
 8017658:	3b02      	subs	r3, #2
 801765a:	683a      	ldr	r2, [r7, #0]
 801765c:	429a      	cmp	r2, r3
 801765e:	d301      	bcc.n	8017664 <clust2sect+0x20>
 8017660:	2300      	movs	r3, #0
 8017662:	e008      	b.n	8017676 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	895b      	ldrh	r3, [r3, #10]
 8017668:	461a      	mov	r2, r3
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	fb03 f202 	mul.w	r2, r3, r2
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017674:	4413      	add	r3, r2
}
 8017676:	4618      	mov	r0, r3
 8017678:	370c      	adds	r7, #12
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr

08017682 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017682:	b580      	push	{r7, lr}
 8017684:	b086      	sub	sp, #24
 8017686:	af00      	add	r7, sp, #0
 8017688:	6078      	str	r0, [r7, #4]
 801768a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	2b01      	cmp	r3, #1
 8017696:	d904      	bls.n	80176a2 <get_fat+0x20>
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	699b      	ldr	r3, [r3, #24]
 801769c:	683a      	ldr	r2, [r7, #0]
 801769e:	429a      	cmp	r2, r3
 80176a0:	d302      	bcc.n	80176a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80176a2:	2301      	movs	r3, #1
 80176a4:	617b      	str	r3, [r7, #20]
 80176a6:	e08f      	b.n	80177c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80176a8:	f04f 33ff 	mov.w	r3, #4294967295
 80176ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	2b03      	cmp	r3, #3
 80176b4:	d062      	beq.n	801777c <get_fat+0xfa>
 80176b6:	2b03      	cmp	r3, #3
 80176b8:	dc7c      	bgt.n	80177b4 <get_fat+0x132>
 80176ba:	2b01      	cmp	r3, #1
 80176bc:	d002      	beq.n	80176c4 <get_fat+0x42>
 80176be:	2b02      	cmp	r3, #2
 80176c0:	d042      	beq.n	8017748 <get_fat+0xc6>
 80176c2:	e077      	b.n	80177b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	60fb      	str	r3, [r7, #12]
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	085b      	lsrs	r3, r3, #1
 80176cc:	68fa      	ldr	r2, [r7, #12]
 80176ce:	4413      	add	r3, r2
 80176d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	0a5b      	lsrs	r3, r3, #9
 80176da:	4413      	add	r3, r2
 80176dc:	4619      	mov	r1, r3
 80176de:	6938      	ldr	r0, [r7, #16]
 80176e0:	f7ff ff14 	bl	801750c <move_window>
 80176e4:	4603      	mov	r3, r0
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d167      	bne.n	80177ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	1c5a      	adds	r2, r3, #1
 80176ee:	60fa      	str	r2, [r7, #12]
 80176f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80176f4:	693a      	ldr	r2, [r7, #16]
 80176f6:	4413      	add	r3, r2
 80176f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80176fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	0a5b      	lsrs	r3, r3, #9
 8017706:	4413      	add	r3, r2
 8017708:	4619      	mov	r1, r3
 801770a:	6938      	ldr	r0, [r7, #16]
 801770c:	f7ff fefe 	bl	801750c <move_window>
 8017710:	4603      	mov	r3, r0
 8017712:	2b00      	cmp	r3, #0
 8017714:	d153      	bne.n	80177be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801771c:	693a      	ldr	r2, [r7, #16]
 801771e:	4413      	add	r3, r2
 8017720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017724:	021b      	lsls	r3, r3, #8
 8017726:	461a      	mov	r2, r3
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	4313      	orrs	r3, r2
 801772c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	f003 0301 	and.w	r3, r3, #1
 8017734:	2b00      	cmp	r3, #0
 8017736:	d002      	beq.n	801773e <get_fat+0xbc>
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	091b      	lsrs	r3, r3, #4
 801773c:	e002      	b.n	8017744 <get_fat+0xc2>
 801773e:	68bb      	ldr	r3, [r7, #8]
 8017740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017744:	617b      	str	r3, [r7, #20]
			break;
 8017746:	e03f      	b.n	80177c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	0a1b      	lsrs	r3, r3, #8
 8017750:	4413      	add	r3, r2
 8017752:	4619      	mov	r1, r3
 8017754:	6938      	ldr	r0, [r7, #16]
 8017756:	f7ff fed9 	bl	801750c <move_window>
 801775a:	4603      	mov	r3, r0
 801775c:	2b00      	cmp	r3, #0
 801775e:	d130      	bne.n	80177c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	005b      	lsls	r3, r3, #1
 801776a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801776e:	4413      	add	r3, r2
 8017770:	4618      	mov	r0, r3
 8017772:	f7ff fc1b 	bl	8016fac <ld_word>
 8017776:	4603      	mov	r3, r0
 8017778:	617b      	str	r3, [r7, #20]
			break;
 801777a:	e025      	b.n	80177c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801777c:	693b      	ldr	r3, [r7, #16]
 801777e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	09db      	lsrs	r3, r3, #7
 8017784:	4413      	add	r3, r2
 8017786:	4619      	mov	r1, r3
 8017788:	6938      	ldr	r0, [r7, #16]
 801778a:	f7ff febf 	bl	801750c <move_window>
 801778e:	4603      	mov	r3, r0
 8017790:	2b00      	cmp	r3, #0
 8017792:	d118      	bne.n	80177c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	009b      	lsls	r3, r3, #2
 801779e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80177a2:	4413      	add	r3, r2
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7ff fc19 	bl	8016fdc <ld_dword>
 80177aa:	4603      	mov	r3, r0
 80177ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80177b0:	617b      	str	r3, [r7, #20]
			break;
 80177b2:	e009      	b.n	80177c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80177b4:	2301      	movs	r3, #1
 80177b6:	617b      	str	r3, [r7, #20]
 80177b8:	e006      	b.n	80177c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80177ba:	bf00      	nop
 80177bc:	e004      	b.n	80177c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80177be:	bf00      	nop
 80177c0:	e002      	b.n	80177c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80177c2:	bf00      	nop
 80177c4:	e000      	b.n	80177c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80177c6:	bf00      	nop
		}
	}

	return val;
 80177c8:	697b      	ldr	r3, [r7, #20]
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3718      	adds	r7, #24
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bd80      	pop	{r7, pc}

080177d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80177d2:	b590      	push	{r4, r7, lr}
 80177d4:	b089      	sub	sp, #36	; 0x24
 80177d6:	af00      	add	r7, sp, #0
 80177d8:	60f8      	str	r0, [r7, #12]
 80177da:	60b9      	str	r1, [r7, #8]
 80177dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80177de:	2302      	movs	r3, #2
 80177e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	2b01      	cmp	r3, #1
 80177e6:	f240 80d2 	bls.w	801798e <put_fat+0x1bc>
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	699b      	ldr	r3, [r3, #24]
 80177ee:	68ba      	ldr	r2, [r7, #8]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	f080 80cc 	bcs.w	801798e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	2b03      	cmp	r3, #3
 80177fc:	f000 8096 	beq.w	801792c <put_fat+0x15a>
 8017800:	2b03      	cmp	r3, #3
 8017802:	f300 80cd 	bgt.w	80179a0 <put_fat+0x1ce>
 8017806:	2b01      	cmp	r3, #1
 8017808:	d002      	beq.n	8017810 <put_fat+0x3e>
 801780a:	2b02      	cmp	r3, #2
 801780c:	d06e      	beq.n	80178ec <put_fat+0x11a>
 801780e:	e0c7      	b.n	80179a0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	61bb      	str	r3, [r7, #24]
 8017814:	69bb      	ldr	r3, [r7, #24]
 8017816:	085b      	lsrs	r3, r3, #1
 8017818:	69ba      	ldr	r2, [r7, #24]
 801781a:	4413      	add	r3, r2
 801781c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017822:	69bb      	ldr	r3, [r7, #24]
 8017824:	0a5b      	lsrs	r3, r3, #9
 8017826:	4413      	add	r3, r2
 8017828:	4619      	mov	r1, r3
 801782a:	68f8      	ldr	r0, [r7, #12]
 801782c:	f7ff fe6e 	bl	801750c <move_window>
 8017830:	4603      	mov	r3, r0
 8017832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017834:	7ffb      	ldrb	r3, [r7, #31]
 8017836:	2b00      	cmp	r3, #0
 8017838:	f040 80ab 	bne.w	8017992 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017842:	69bb      	ldr	r3, [r7, #24]
 8017844:	1c59      	adds	r1, r3, #1
 8017846:	61b9      	str	r1, [r7, #24]
 8017848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801784c:	4413      	add	r3, r2
 801784e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	f003 0301 	and.w	r3, r3, #1
 8017856:	2b00      	cmp	r3, #0
 8017858:	d00d      	beq.n	8017876 <put_fat+0xa4>
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	781b      	ldrb	r3, [r3, #0]
 801785e:	b25b      	sxtb	r3, r3
 8017860:	f003 030f 	and.w	r3, r3, #15
 8017864:	b25a      	sxtb	r2, r3
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	b2db      	uxtb	r3, r3
 801786a:	011b      	lsls	r3, r3, #4
 801786c:	b25b      	sxtb	r3, r3
 801786e:	4313      	orrs	r3, r2
 8017870:	b25b      	sxtb	r3, r3
 8017872:	b2db      	uxtb	r3, r3
 8017874:	e001      	b.n	801787a <put_fat+0xa8>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	b2db      	uxtb	r3, r3
 801787a:	697a      	ldr	r2, [r7, #20]
 801787c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	2201      	movs	r2, #1
 8017882:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017888:	69bb      	ldr	r3, [r7, #24]
 801788a:	0a5b      	lsrs	r3, r3, #9
 801788c:	4413      	add	r3, r2
 801788e:	4619      	mov	r1, r3
 8017890:	68f8      	ldr	r0, [r7, #12]
 8017892:	f7ff fe3b 	bl	801750c <move_window>
 8017896:	4603      	mov	r3, r0
 8017898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801789a:	7ffb      	ldrb	r3, [r7, #31]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d17a      	bne.n	8017996 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80178a6:	69bb      	ldr	r3, [r7, #24]
 80178a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80178ac:	4413      	add	r3, r2
 80178ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80178b0:	68bb      	ldr	r3, [r7, #8]
 80178b2:	f003 0301 	and.w	r3, r3, #1
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d003      	beq.n	80178c2 <put_fat+0xf0>
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	091b      	lsrs	r3, r3, #4
 80178be:	b2db      	uxtb	r3, r3
 80178c0:	e00e      	b.n	80178e0 <put_fat+0x10e>
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	b25b      	sxtb	r3, r3
 80178c8:	f023 030f 	bic.w	r3, r3, #15
 80178cc:	b25a      	sxtb	r2, r3
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	0a1b      	lsrs	r3, r3, #8
 80178d2:	b25b      	sxtb	r3, r3
 80178d4:	f003 030f 	and.w	r3, r3, #15
 80178d8:	b25b      	sxtb	r3, r3
 80178da:	4313      	orrs	r3, r2
 80178dc:	b25b      	sxtb	r3, r3
 80178de:	b2db      	uxtb	r3, r3
 80178e0:	697a      	ldr	r2, [r7, #20]
 80178e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2201      	movs	r2, #1
 80178e8:	70da      	strb	r2, [r3, #3]
			break;
 80178ea:	e059      	b.n	80179a0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	0a1b      	lsrs	r3, r3, #8
 80178f4:	4413      	add	r3, r2
 80178f6:	4619      	mov	r1, r3
 80178f8:	68f8      	ldr	r0, [r7, #12]
 80178fa:	f7ff fe07 	bl	801750c <move_window>
 80178fe:	4603      	mov	r3, r0
 8017900:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017902:	7ffb      	ldrb	r3, [r7, #31]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d148      	bne.n	801799a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	005b      	lsls	r3, r3, #1
 8017912:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017916:	4413      	add	r3, r2
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	b292      	uxth	r2, r2
 801791c:	4611      	mov	r1, r2
 801791e:	4618      	mov	r0, r3
 8017920:	f7ff fb7f 	bl	8017022 <st_word>
			fs->wflag = 1;
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	2201      	movs	r2, #1
 8017928:	70da      	strb	r2, [r3, #3]
			break;
 801792a:	e039      	b.n	80179a0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017930:	68bb      	ldr	r3, [r7, #8]
 8017932:	09db      	lsrs	r3, r3, #7
 8017934:	4413      	add	r3, r2
 8017936:	4619      	mov	r1, r3
 8017938:	68f8      	ldr	r0, [r7, #12]
 801793a:	f7ff fde7 	bl	801750c <move_window>
 801793e:	4603      	mov	r3, r0
 8017940:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017942:	7ffb      	ldrb	r3, [r7, #31]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d12a      	bne.n	801799e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	009b      	lsls	r3, r3, #2
 8017958:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801795c:	4413      	add	r3, r2
 801795e:	4618      	mov	r0, r3
 8017960:	f7ff fb3c 	bl	8016fdc <ld_dword>
 8017964:	4603      	mov	r3, r0
 8017966:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801796a:	4323      	orrs	r3, r4
 801796c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	009b      	lsls	r3, r3, #2
 8017978:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801797c:	4413      	add	r3, r2
 801797e:	6879      	ldr	r1, [r7, #4]
 8017980:	4618      	mov	r0, r3
 8017982:	f7ff fb69 	bl	8017058 <st_dword>
			fs->wflag = 1;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	2201      	movs	r2, #1
 801798a:	70da      	strb	r2, [r3, #3]
			break;
 801798c:	e008      	b.n	80179a0 <put_fat+0x1ce>
		}
	}
 801798e:	bf00      	nop
 8017990:	e006      	b.n	80179a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017992:	bf00      	nop
 8017994:	e004      	b.n	80179a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017996:	bf00      	nop
 8017998:	e002      	b.n	80179a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801799a:	bf00      	nop
 801799c:	e000      	b.n	80179a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801799e:	bf00      	nop
	return res;
 80179a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3724      	adds	r7, #36	; 0x24
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd90      	pop	{r4, r7, pc}

080179aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b088      	sub	sp, #32
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	60f8      	str	r0, [r7, #12]
 80179b2:	60b9      	str	r1, [r7, #8]
 80179b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80179b6:	2300      	movs	r3, #0
 80179b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	2b01      	cmp	r3, #1
 80179c4:	d904      	bls.n	80179d0 <remove_chain+0x26>
 80179c6:	69bb      	ldr	r3, [r7, #24]
 80179c8:	699b      	ldr	r3, [r3, #24]
 80179ca:	68ba      	ldr	r2, [r7, #8]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d301      	bcc.n	80179d4 <remove_chain+0x2a>
 80179d0:	2302      	movs	r3, #2
 80179d2:	e04b      	b.n	8017a6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d00c      	beq.n	80179f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80179da:	f04f 32ff 	mov.w	r2, #4294967295
 80179de:	6879      	ldr	r1, [r7, #4]
 80179e0:	69b8      	ldr	r0, [r7, #24]
 80179e2:	f7ff fef6 	bl	80177d2 <put_fat>
 80179e6:	4603      	mov	r3, r0
 80179e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80179ea:	7ffb      	ldrb	r3, [r7, #31]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d001      	beq.n	80179f4 <remove_chain+0x4a>
 80179f0:	7ffb      	ldrb	r3, [r7, #31]
 80179f2:	e03b      	b.n	8017a6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80179f4:	68b9      	ldr	r1, [r7, #8]
 80179f6:	68f8      	ldr	r0, [r7, #12]
 80179f8:	f7ff fe43 	bl	8017682 <get_fat>
 80179fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80179fe:	697b      	ldr	r3, [r7, #20]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d031      	beq.n	8017a68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017a04:	697b      	ldr	r3, [r7, #20]
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	d101      	bne.n	8017a0e <remove_chain+0x64>
 8017a0a:	2302      	movs	r3, #2
 8017a0c:	e02e      	b.n	8017a6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a14:	d101      	bne.n	8017a1a <remove_chain+0x70>
 8017a16:	2301      	movs	r3, #1
 8017a18:	e028      	b.n	8017a6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	68b9      	ldr	r1, [r7, #8]
 8017a1e:	69b8      	ldr	r0, [r7, #24]
 8017a20:	f7ff fed7 	bl	80177d2 <put_fat>
 8017a24:	4603      	mov	r3, r0
 8017a26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017a28:	7ffb      	ldrb	r3, [r7, #31]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d001      	beq.n	8017a32 <remove_chain+0x88>
 8017a2e:	7ffb      	ldrb	r3, [r7, #31]
 8017a30:	e01c      	b.n	8017a6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017a32:	69bb      	ldr	r3, [r7, #24]
 8017a34:	695a      	ldr	r2, [r3, #20]
 8017a36:	69bb      	ldr	r3, [r7, #24]
 8017a38:	699b      	ldr	r3, [r3, #24]
 8017a3a:	3b02      	subs	r3, #2
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	d20b      	bcs.n	8017a58 <remove_chain+0xae>
			fs->free_clst++;
 8017a40:	69bb      	ldr	r3, [r7, #24]
 8017a42:	695b      	ldr	r3, [r3, #20]
 8017a44:	1c5a      	adds	r2, r3, #1
 8017a46:	69bb      	ldr	r3, [r7, #24]
 8017a48:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8017a4a:	69bb      	ldr	r3, [r7, #24]
 8017a4c:	791b      	ldrb	r3, [r3, #4]
 8017a4e:	f043 0301 	orr.w	r3, r3, #1
 8017a52:	b2da      	uxtb	r2, r3
 8017a54:	69bb      	ldr	r3, [r7, #24]
 8017a56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017a58:	697b      	ldr	r3, [r7, #20]
 8017a5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017a5c:	69bb      	ldr	r3, [r7, #24]
 8017a5e:	699b      	ldr	r3, [r3, #24]
 8017a60:	68ba      	ldr	r2, [r7, #8]
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d3c6      	bcc.n	80179f4 <remove_chain+0x4a>
 8017a66:	e000      	b.n	8017a6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017a68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017a6a:	2300      	movs	r3, #0
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3720      	adds	r7, #32
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b088      	sub	sp, #32
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
 8017a7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d10d      	bne.n	8017aa6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	691b      	ldr	r3, [r3, #16]
 8017a8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017a90:	69bb      	ldr	r3, [r7, #24]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d004      	beq.n	8017aa0 <create_chain+0x2c>
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	699b      	ldr	r3, [r3, #24]
 8017a9a:	69ba      	ldr	r2, [r7, #24]
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d31b      	bcc.n	8017ad8 <create_chain+0x64>
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	61bb      	str	r3, [r7, #24]
 8017aa4:	e018      	b.n	8017ad8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017aa6:	6839      	ldr	r1, [r7, #0]
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f7ff fdea 	bl	8017682 <get_fat>
 8017aae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2b01      	cmp	r3, #1
 8017ab4:	d801      	bhi.n	8017aba <create_chain+0x46>
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	e070      	b.n	8017b9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ac0:	d101      	bne.n	8017ac6 <create_chain+0x52>
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	e06a      	b.n	8017b9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017ac6:	693b      	ldr	r3, [r7, #16]
 8017ac8:	699b      	ldr	r3, [r3, #24]
 8017aca:	68fa      	ldr	r2, [r7, #12]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d201      	bcs.n	8017ad4 <create_chain+0x60>
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	e063      	b.n	8017b9c <create_chain+0x128>
		scl = clst;
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017ad8:	69bb      	ldr	r3, [r7, #24]
 8017ada:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017adc:	69fb      	ldr	r3, [r7, #28]
 8017ade:	3301      	adds	r3, #1
 8017ae0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017ae2:	693b      	ldr	r3, [r7, #16]
 8017ae4:	699b      	ldr	r3, [r3, #24]
 8017ae6:	69fa      	ldr	r2, [r7, #28]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d307      	bcc.n	8017afc <create_chain+0x88>
				ncl = 2;
 8017aec:	2302      	movs	r3, #2
 8017aee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017af0:	69fa      	ldr	r2, [r7, #28]
 8017af2:	69bb      	ldr	r3, [r7, #24]
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d901      	bls.n	8017afc <create_chain+0x88>
 8017af8:	2300      	movs	r3, #0
 8017afa:	e04f      	b.n	8017b9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017afc:	69f9      	ldr	r1, [r7, #28]
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f7ff fdbf 	bl	8017682 <get_fat>
 8017b04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d00e      	beq.n	8017b2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	2b01      	cmp	r3, #1
 8017b10:	d003      	beq.n	8017b1a <create_chain+0xa6>
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b18:	d101      	bne.n	8017b1e <create_chain+0xaa>
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	e03e      	b.n	8017b9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017b1e:	69fa      	ldr	r2, [r7, #28]
 8017b20:	69bb      	ldr	r3, [r7, #24]
 8017b22:	429a      	cmp	r2, r3
 8017b24:	d1da      	bne.n	8017adc <create_chain+0x68>
 8017b26:	2300      	movs	r3, #0
 8017b28:	e038      	b.n	8017b9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017b2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b30:	69f9      	ldr	r1, [r7, #28]
 8017b32:	6938      	ldr	r0, [r7, #16]
 8017b34:	f7ff fe4d 	bl	80177d2 <put_fat>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017b3c:	7dfb      	ldrb	r3, [r7, #23]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d109      	bne.n	8017b56 <create_chain+0xe2>
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d006      	beq.n	8017b56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017b48:	69fa      	ldr	r2, [r7, #28]
 8017b4a:	6839      	ldr	r1, [r7, #0]
 8017b4c:	6938      	ldr	r0, [r7, #16]
 8017b4e:	f7ff fe40 	bl	80177d2 <put_fat>
 8017b52:	4603      	mov	r3, r0
 8017b54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017b56:	7dfb      	ldrb	r3, [r7, #23]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d116      	bne.n	8017b8a <create_chain+0x116>
		fs->last_clst = ncl;
 8017b5c:	693b      	ldr	r3, [r7, #16]
 8017b5e:	69fa      	ldr	r2, [r7, #28]
 8017b60:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	695a      	ldr	r2, [r3, #20]
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	699b      	ldr	r3, [r3, #24]
 8017b6a:	3b02      	subs	r3, #2
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d804      	bhi.n	8017b7a <create_chain+0x106>
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	695b      	ldr	r3, [r3, #20]
 8017b74:	1e5a      	subs	r2, r3, #1
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	791b      	ldrb	r3, [r3, #4]
 8017b7e:	f043 0301 	orr.w	r3, r3, #1
 8017b82:	b2da      	uxtb	r2, r3
 8017b84:	693b      	ldr	r3, [r7, #16]
 8017b86:	711a      	strb	r2, [r3, #4]
 8017b88:	e007      	b.n	8017b9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017b8a:	7dfb      	ldrb	r3, [r7, #23]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d102      	bne.n	8017b96 <create_chain+0x122>
 8017b90:	f04f 33ff 	mov.w	r3, #4294967295
 8017b94:	e000      	b.n	8017b98 <create_chain+0x124>
 8017b96:	2301      	movs	r3, #1
 8017b98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017b9a:	69fb      	ldr	r3, [r7, #28]
}
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	3720      	adds	r7, #32
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}

08017ba4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017ba4:	b480      	push	{r7}
 8017ba6:	b087      	sub	sp, #28
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bb8:	3304      	adds	r3, #4
 8017bba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	0a5b      	lsrs	r3, r3, #9
 8017bc0:	68fa      	ldr	r2, [r7, #12]
 8017bc2:	8952      	ldrh	r2, [r2, #10]
 8017bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8017bc8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	1d1a      	adds	r2, r3, #4
 8017bce:	613a      	str	r2, [r7, #16]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d101      	bne.n	8017bde <clmt_clust+0x3a>
 8017bda:	2300      	movs	r3, #0
 8017bdc:	e010      	b.n	8017c00 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017bde:	697a      	ldr	r2, [r7, #20]
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d307      	bcc.n	8017bf6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017be6:	697a      	ldr	r2, [r7, #20]
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	1ad3      	subs	r3, r2, r3
 8017bec:	617b      	str	r3, [r7, #20]
 8017bee:	693b      	ldr	r3, [r7, #16]
 8017bf0:	3304      	adds	r3, #4
 8017bf2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017bf4:	e7e9      	b.n	8017bca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017bf6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	681a      	ldr	r2, [r3, #0]
 8017bfc:	697b      	ldr	r3, [r7, #20]
 8017bfe:	4413      	add	r3, r2
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	371c      	adds	r7, #28
 8017c04:	46bd      	mov	sp, r7
 8017c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0a:	4770      	bx	lr

08017c0c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b086      	sub	sp, #24
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017c22:	d204      	bcs.n	8017c2e <dir_sdi+0x22>
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	f003 031f 	and.w	r3, r3, #31
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d001      	beq.n	8017c32 <dir_sdi+0x26>
		return FR_INT_ERR;
 8017c2e:	2302      	movs	r3, #2
 8017c30:	e063      	b.n	8017cfa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	683a      	ldr	r2, [r7, #0]
 8017c36:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	689b      	ldr	r3, [r3, #8]
 8017c3c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017c3e:	697b      	ldr	r3, [r7, #20]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d106      	bne.n	8017c52 <dir_sdi+0x46>
 8017c44:	693b      	ldr	r3, [r7, #16]
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2b02      	cmp	r3, #2
 8017c4a:	d902      	bls.n	8017c52 <dir_sdi+0x46>
		clst = fs->dirbase;
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c50:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017c52:	697b      	ldr	r3, [r7, #20]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d10c      	bne.n	8017c72 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	095b      	lsrs	r3, r3, #5
 8017c5c:	693a      	ldr	r2, [r7, #16]
 8017c5e:	8912      	ldrh	r2, [r2, #8]
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d301      	bcc.n	8017c68 <dir_sdi+0x5c>
 8017c64:	2302      	movs	r3, #2
 8017c66:	e048      	b.n	8017cfa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	61da      	str	r2, [r3, #28]
 8017c70:	e029      	b.n	8017cc6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017c72:	693b      	ldr	r3, [r7, #16]
 8017c74:	895b      	ldrh	r3, [r3, #10]
 8017c76:	025b      	lsls	r3, r3, #9
 8017c78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017c7a:	e019      	b.n	8017cb0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6979      	ldr	r1, [r7, #20]
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7ff fcfe 	bl	8017682 <get_fat>
 8017c86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017c88:	697b      	ldr	r3, [r7, #20]
 8017c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c8e:	d101      	bne.n	8017c94 <dir_sdi+0x88>
 8017c90:	2301      	movs	r3, #1
 8017c92:	e032      	b.n	8017cfa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	2b01      	cmp	r3, #1
 8017c98:	d904      	bls.n	8017ca4 <dir_sdi+0x98>
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	699b      	ldr	r3, [r3, #24]
 8017c9e:	697a      	ldr	r2, [r7, #20]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d301      	bcc.n	8017ca8 <dir_sdi+0x9c>
 8017ca4:	2302      	movs	r3, #2
 8017ca6:	e028      	b.n	8017cfa <dir_sdi+0xee>
			ofs -= csz;
 8017ca8:	683a      	ldr	r2, [r7, #0]
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	1ad3      	subs	r3, r2, r3
 8017cae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017cb0:	683a      	ldr	r2, [r7, #0]
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d2e1      	bcs.n	8017c7c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017cb8:	6979      	ldr	r1, [r7, #20]
 8017cba:	6938      	ldr	r0, [r7, #16]
 8017cbc:	f7ff fcc2 	bl	8017644 <clust2sect>
 8017cc0:	4602      	mov	r2, r0
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	697a      	ldr	r2, [r7, #20]
 8017cca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	69db      	ldr	r3, [r3, #28]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d101      	bne.n	8017cd8 <dir_sdi+0xcc>
 8017cd4:	2302      	movs	r3, #2
 8017cd6:	e010      	b.n	8017cfa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	69da      	ldr	r2, [r3, #28]
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	0a5b      	lsrs	r3, r3, #9
 8017ce0:	441a      	add	r2, r3
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cf2:	441a      	add	r2, r3
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017cf8:	2300      	movs	r3, #0
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3718      	adds	r7, #24
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}

08017d02 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017d02:	b580      	push	{r7, lr}
 8017d04:	b086      	sub	sp, #24
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	6078      	str	r0, [r7, #4]
 8017d0a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	695b      	ldr	r3, [r3, #20]
 8017d16:	3320      	adds	r3, #32
 8017d18:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	69db      	ldr	r3, [r3, #28]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d003      	beq.n	8017d2a <dir_next+0x28>
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017d28:	d301      	bcc.n	8017d2e <dir_next+0x2c>
 8017d2a:	2304      	movs	r3, #4
 8017d2c:	e0aa      	b.n	8017e84 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017d2e:	68bb      	ldr	r3, [r7, #8]
 8017d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	f040 8098 	bne.w	8017e6a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	69db      	ldr	r3, [r3, #28]
 8017d3e:	1c5a      	adds	r2, r3, #1
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	699b      	ldr	r3, [r3, #24]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d10b      	bne.n	8017d64 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	095b      	lsrs	r3, r3, #5
 8017d50:	68fa      	ldr	r2, [r7, #12]
 8017d52:	8912      	ldrh	r2, [r2, #8]
 8017d54:	4293      	cmp	r3, r2
 8017d56:	f0c0 8088 	bcc.w	8017e6a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	61da      	str	r2, [r3, #28]
 8017d60:	2304      	movs	r3, #4
 8017d62:	e08f      	b.n	8017e84 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	0a5b      	lsrs	r3, r3, #9
 8017d68:	68fa      	ldr	r2, [r7, #12]
 8017d6a:	8952      	ldrh	r2, [r2, #10]
 8017d6c:	3a01      	subs	r2, #1
 8017d6e:	4013      	ands	r3, r2
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d17a      	bne.n	8017e6a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017d74:	687a      	ldr	r2, [r7, #4]
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	699b      	ldr	r3, [r3, #24]
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	4610      	mov	r0, r2
 8017d7e:	f7ff fc80 	bl	8017682 <get_fat>
 8017d82:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017d84:	697b      	ldr	r3, [r7, #20]
 8017d86:	2b01      	cmp	r3, #1
 8017d88:	d801      	bhi.n	8017d8e <dir_next+0x8c>
 8017d8a:	2302      	movs	r3, #2
 8017d8c:	e07a      	b.n	8017e84 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d94:	d101      	bne.n	8017d9a <dir_next+0x98>
 8017d96:	2301      	movs	r3, #1
 8017d98:	e074      	b.n	8017e84 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	699b      	ldr	r3, [r3, #24]
 8017d9e:	697a      	ldr	r2, [r7, #20]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d358      	bcc.n	8017e56 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d104      	bne.n	8017db4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2200      	movs	r2, #0
 8017dae:	61da      	str	r2, [r3, #28]
 8017db0:	2304      	movs	r3, #4
 8017db2:	e067      	b.n	8017e84 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017db4:	687a      	ldr	r2, [r7, #4]
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	699b      	ldr	r3, [r3, #24]
 8017dba:	4619      	mov	r1, r3
 8017dbc:	4610      	mov	r0, r2
 8017dbe:	f7ff fe59 	bl	8017a74 <create_chain>
 8017dc2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d101      	bne.n	8017dce <dir_next+0xcc>
 8017dca:	2307      	movs	r3, #7
 8017dcc:	e05a      	b.n	8017e84 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017dce:	697b      	ldr	r3, [r7, #20]
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d101      	bne.n	8017dd8 <dir_next+0xd6>
 8017dd4:	2302      	movs	r3, #2
 8017dd6:	e055      	b.n	8017e84 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dde:	d101      	bne.n	8017de4 <dir_next+0xe2>
 8017de0:	2301      	movs	r3, #1
 8017de2:	e04f      	b.n	8017e84 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017de4:	68f8      	ldr	r0, [r7, #12]
 8017de6:	f7ff fb4d 	bl	8017484 <sync_window>
 8017dea:	4603      	mov	r3, r0
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d001      	beq.n	8017df4 <dir_next+0xf2>
 8017df0:	2301      	movs	r3, #1
 8017df2:	e047      	b.n	8017e84 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	3334      	adds	r3, #52	; 0x34
 8017df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017dfc:	2100      	movs	r1, #0
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7ff f977 	bl	80170f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017e04:	2300      	movs	r3, #0
 8017e06:	613b      	str	r3, [r7, #16]
 8017e08:	6979      	ldr	r1, [r7, #20]
 8017e0a:	68f8      	ldr	r0, [r7, #12]
 8017e0c:	f7ff fc1a 	bl	8017644 <clust2sect>
 8017e10:	4602      	mov	r2, r0
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	631a      	str	r2, [r3, #48]	; 0x30
 8017e16:	e012      	b.n	8017e3e <dir_next+0x13c>
						fs->wflag = 1;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017e1e:	68f8      	ldr	r0, [r7, #12]
 8017e20:	f7ff fb30 	bl	8017484 <sync_window>
 8017e24:	4603      	mov	r3, r0
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d001      	beq.n	8017e2e <dir_next+0x12c>
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	e02a      	b.n	8017e84 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017e2e:	693b      	ldr	r3, [r7, #16]
 8017e30:	3301      	adds	r3, #1
 8017e32:	613b      	str	r3, [r7, #16]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e38:	1c5a      	adds	r2, r3, #1
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	895b      	ldrh	r3, [r3, #10]
 8017e42:	461a      	mov	r2, r3
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	4293      	cmp	r3, r2
 8017e48:	d3e6      	bcc.n	8017e18 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	1ad2      	subs	r2, r2, r3
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	697a      	ldr	r2, [r7, #20]
 8017e5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017e5c:	6979      	ldr	r1, [r7, #20]
 8017e5e:	68f8      	ldr	r0, [r7, #12]
 8017e60:	f7ff fbf0 	bl	8017644 <clust2sect>
 8017e64:	4602      	mov	r2, r0
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	68ba      	ldr	r2, [r7, #8]
 8017e6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017e7c:	441a      	add	r2, r3
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017e82:	2300      	movs	r3, #0
}
 8017e84:	4618      	mov	r0, r3
 8017e86:	3718      	adds	r7, #24
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	bd80      	pop	{r7, pc}

08017e8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b086      	sub	sp, #24
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
 8017e94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	6878      	ldr	r0, [r7, #4]
 8017ea0:	f7ff feb4 	bl	8017c0c <dir_sdi>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017ea8:	7dfb      	ldrb	r3, [r7, #23]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d12b      	bne.n	8017f06 <dir_alloc+0x7a>
		n = 0;
 8017eae:	2300      	movs	r3, #0
 8017eb0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	69db      	ldr	r3, [r3, #28]
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	68f8      	ldr	r0, [r7, #12]
 8017eba:	f7ff fb27 	bl	801750c <move_window>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017ec2:	7dfb      	ldrb	r3, [r7, #23]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d11d      	bne.n	8017f04 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	6a1b      	ldr	r3, [r3, #32]
 8017ecc:	781b      	ldrb	r3, [r3, #0]
 8017ece:	2be5      	cmp	r3, #229	; 0xe5
 8017ed0:	d004      	beq.n	8017edc <dir_alloc+0x50>
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6a1b      	ldr	r3, [r3, #32]
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d107      	bne.n	8017eec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	613b      	str	r3, [r7, #16]
 8017ee2:	693a      	ldr	r2, [r7, #16]
 8017ee4:	683b      	ldr	r3, [r7, #0]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d102      	bne.n	8017ef0 <dir_alloc+0x64>
 8017eea:	e00c      	b.n	8017f06 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017eec:	2300      	movs	r3, #0
 8017eee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017ef0:	2101      	movs	r1, #1
 8017ef2:	6878      	ldr	r0, [r7, #4]
 8017ef4:	f7ff ff05 	bl	8017d02 <dir_next>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017efc:	7dfb      	ldrb	r3, [r7, #23]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d0d7      	beq.n	8017eb2 <dir_alloc+0x26>
 8017f02:	e000      	b.n	8017f06 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017f04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017f06:	7dfb      	ldrb	r3, [r7, #23]
 8017f08:	2b04      	cmp	r3, #4
 8017f0a:	d101      	bne.n	8017f10 <dir_alloc+0x84>
 8017f0c:	2307      	movs	r3, #7
 8017f0e:	75fb      	strb	r3, [r7, #23]
	return res;
 8017f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3718      	adds	r7, #24
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}

08017f1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017f1a:	b580      	push	{r7, lr}
 8017f1c:	b084      	sub	sp, #16
 8017f1e:	af00      	add	r7, sp, #0
 8017f20:	6078      	str	r0, [r7, #4]
 8017f22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017f24:	683b      	ldr	r3, [r7, #0]
 8017f26:	331a      	adds	r3, #26
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7ff f83f 	bl	8016fac <ld_word>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	781b      	ldrb	r3, [r3, #0]
 8017f36:	2b03      	cmp	r3, #3
 8017f38:	d109      	bne.n	8017f4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	3314      	adds	r3, #20
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7ff f834 	bl	8016fac <ld_word>
 8017f44:	4603      	mov	r3, r0
 8017f46:	041b      	lsls	r3, r3, #16
 8017f48:	68fa      	ldr	r2, [r7, #12]
 8017f4a:	4313      	orrs	r3, r2
 8017f4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
}
 8017f50:	4618      	mov	r0, r3
 8017f52:	3710      	adds	r7, #16
 8017f54:	46bd      	mov	sp, r7
 8017f56:	bd80      	pop	{r7, pc}

08017f58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b084      	sub	sp, #16
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	60f8      	str	r0, [r7, #12]
 8017f60:	60b9      	str	r1, [r7, #8]
 8017f62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	331a      	adds	r3, #26
 8017f68:	687a      	ldr	r2, [r7, #4]
 8017f6a:	b292      	uxth	r2, r2
 8017f6c:	4611      	mov	r1, r2
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f7ff f857 	bl	8017022 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	2b03      	cmp	r3, #3
 8017f7a:	d109      	bne.n	8017f90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	f103 0214 	add.w	r2, r3, #20
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	0c1b      	lsrs	r3, r3, #16
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	4619      	mov	r1, r3
 8017f8a:	4610      	mov	r0, r2
 8017f8c:	f7ff f849 	bl	8017022 <st_word>
	}
}
 8017f90:	bf00      	nop
 8017f92:	3710      	adds	r7, #16
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}

08017f98 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017f98:	b590      	push	{r4, r7, lr}
 8017f9a:	b087      	sub	sp, #28
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	331a      	adds	r3, #26
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7ff f800 	bl	8016fac <ld_word>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d001      	beq.n	8017fb6 <cmp_lfn+0x1e>
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e059      	b.n	801806a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017fbe:	1e5a      	subs	r2, r3, #1
 8017fc0:	4613      	mov	r3, r2
 8017fc2:	005b      	lsls	r3, r3, #1
 8017fc4:	4413      	add	r3, r2
 8017fc6:	009b      	lsls	r3, r3, #2
 8017fc8:	4413      	add	r3, r2
 8017fca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017fcc:	2301      	movs	r3, #1
 8017fce:	81fb      	strh	r3, [r7, #14]
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	613b      	str	r3, [r7, #16]
 8017fd4:	e033      	b.n	801803e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8017fd6:	4a27      	ldr	r2, [pc, #156]	; (8018074 <cmp_lfn+0xdc>)
 8017fd8:	693b      	ldr	r3, [r7, #16]
 8017fda:	4413      	add	r3, r2
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	461a      	mov	r2, r3
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	4413      	add	r3, r2
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7fe ffe1 	bl	8016fac <ld_word>
 8017fea:	4603      	mov	r3, r0
 8017fec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8017fee:	89fb      	ldrh	r3, [r7, #14]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d01a      	beq.n	801802a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	2bfe      	cmp	r3, #254	; 0xfe
 8017ff8:	d812      	bhi.n	8018020 <cmp_lfn+0x88>
 8017ffa:	89bb      	ldrh	r3, [r7, #12]
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f001 fe25 	bl	8019c4c <ff_wtoupper>
 8018002:	4603      	mov	r3, r0
 8018004:	461c      	mov	r4, r3
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	1c5a      	adds	r2, r3, #1
 801800a:	617a      	str	r2, [r7, #20]
 801800c:	005b      	lsls	r3, r3, #1
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	4413      	add	r3, r2
 8018012:	881b      	ldrh	r3, [r3, #0]
 8018014:	4618      	mov	r0, r3
 8018016:	f001 fe19 	bl	8019c4c <ff_wtoupper>
 801801a:	4603      	mov	r3, r0
 801801c:	429c      	cmp	r4, r3
 801801e:	d001      	beq.n	8018024 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018020:	2300      	movs	r3, #0
 8018022:	e022      	b.n	801806a <cmp_lfn+0xd2>
			}
			wc = uc;
 8018024:	89bb      	ldrh	r3, [r7, #12]
 8018026:	81fb      	strh	r3, [r7, #14]
 8018028:	e006      	b.n	8018038 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801802a:	89bb      	ldrh	r3, [r7, #12]
 801802c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018030:	4293      	cmp	r3, r2
 8018032:	d001      	beq.n	8018038 <cmp_lfn+0xa0>
 8018034:	2300      	movs	r3, #0
 8018036:	e018      	b.n	801806a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	3301      	adds	r3, #1
 801803c:	613b      	str	r3, [r7, #16]
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	2b0c      	cmp	r3, #12
 8018042:	d9c8      	bls.n	8017fd6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801804c:	2b00      	cmp	r3, #0
 801804e:	d00b      	beq.n	8018068 <cmp_lfn+0xd0>
 8018050:	89fb      	ldrh	r3, [r7, #14]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d008      	beq.n	8018068 <cmp_lfn+0xd0>
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	4413      	add	r3, r2
 801805e:	881b      	ldrh	r3, [r3, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d001      	beq.n	8018068 <cmp_lfn+0xd0>
 8018064:	2300      	movs	r3, #0
 8018066:	e000      	b.n	801806a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018068:	2301      	movs	r3, #1
}
 801806a:	4618      	mov	r0, r3
 801806c:	371c      	adds	r7, #28
 801806e:	46bd      	mov	sp, r7
 8018070:	bd90      	pop	{r4, r7, pc}
 8018072:	bf00      	nop
 8018074:	08021adc 	.word	0x08021adc

08018078 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b088      	sub	sp, #32
 801807c:	af00      	add	r7, sp, #0
 801807e:	60f8      	str	r0, [r7, #12]
 8018080:	60b9      	str	r1, [r7, #8]
 8018082:	4611      	mov	r1, r2
 8018084:	461a      	mov	r2, r3
 8018086:	460b      	mov	r3, r1
 8018088:	71fb      	strb	r3, [r7, #7]
 801808a:	4613      	mov	r3, r2
 801808c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	330d      	adds	r3, #13
 8018092:	79ba      	ldrb	r2, [r7, #6]
 8018094:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	330b      	adds	r3, #11
 801809a:	220f      	movs	r2, #15
 801809c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	330c      	adds	r3, #12
 80180a2:	2200      	movs	r2, #0
 80180a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	331a      	adds	r3, #26
 80180aa:	2100      	movs	r1, #0
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7fe ffb8 	bl	8017022 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80180b2:	79fb      	ldrb	r3, [r7, #7]
 80180b4:	1e5a      	subs	r2, r3, #1
 80180b6:	4613      	mov	r3, r2
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	4413      	add	r3, r2
 80180bc:	009b      	lsls	r3, r3, #2
 80180be:	4413      	add	r3, r2
 80180c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80180c2:	2300      	movs	r3, #0
 80180c4:	82fb      	strh	r3, [r7, #22]
 80180c6:	2300      	movs	r3, #0
 80180c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80180ca:	8afb      	ldrh	r3, [r7, #22]
 80180cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180d0:	4293      	cmp	r3, r2
 80180d2:	d007      	beq.n	80180e4 <put_lfn+0x6c>
 80180d4:	69fb      	ldr	r3, [r7, #28]
 80180d6:	1c5a      	adds	r2, r3, #1
 80180d8:	61fa      	str	r2, [r7, #28]
 80180da:	005b      	lsls	r3, r3, #1
 80180dc:	68fa      	ldr	r2, [r7, #12]
 80180de:	4413      	add	r3, r2
 80180e0:	881b      	ldrh	r3, [r3, #0]
 80180e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80180e4:	4a17      	ldr	r2, [pc, #92]	; (8018144 <put_lfn+0xcc>)
 80180e6:	69bb      	ldr	r3, [r7, #24]
 80180e8:	4413      	add	r3, r2
 80180ea:	781b      	ldrb	r3, [r3, #0]
 80180ec:	461a      	mov	r2, r3
 80180ee:	68bb      	ldr	r3, [r7, #8]
 80180f0:	4413      	add	r3, r2
 80180f2:	8afa      	ldrh	r2, [r7, #22]
 80180f4:	4611      	mov	r1, r2
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7fe ff93 	bl	8017022 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80180fc:	8afb      	ldrh	r3, [r7, #22]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d102      	bne.n	8018108 <put_lfn+0x90>
 8018102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018106:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018108:	69bb      	ldr	r3, [r7, #24]
 801810a:	3301      	adds	r3, #1
 801810c:	61bb      	str	r3, [r7, #24]
 801810e:	69bb      	ldr	r3, [r7, #24]
 8018110:	2b0c      	cmp	r3, #12
 8018112:	d9da      	bls.n	80180ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018114:	8afb      	ldrh	r3, [r7, #22]
 8018116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801811a:	4293      	cmp	r3, r2
 801811c:	d006      	beq.n	801812c <put_lfn+0xb4>
 801811e:	69fb      	ldr	r3, [r7, #28]
 8018120:	005b      	lsls	r3, r3, #1
 8018122:	68fa      	ldr	r2, [r7, #12]
 8018124:	4413      	add	r3, r2
 8018126:	881b      	ldrh	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d103      	bne.n	8018134 <put_lfn+0xbc>
 801812c:	79fb      	ldrb	r3, [r7, #7]
 801812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018132:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	79fa      	ldrb	r2, [r7, #7]
 8018138:	701a      	strb	r2, [r3, #0]
}
 801813a:	bf00      	nop
 801813c:	3720      	adds	r7, #32
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	08021adc 	.word	0x08021adc

08018148 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b08c      	sub	sp, #48	; 0x30
 801814c:	af00      	add	r7, sp, #0
 801814e:	60f8      	str	r0, [r7, #12]
 8018150:	60b9      	str	r1, [r7, #8]
 8018152:	607a      	str	r2, [r7, #4]
 8018154:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018156:	220b      	movs	r2, #11
 8018158:	68b9      	ldr	r1, [r7, #8]
 801815a:	68f8      	ldr	r0, [r7, #12]
 801815c:	f7fe ffa8 	bl	80170b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	2b05      	cmp	r3, #5
 8018164:	d92b      	bls.n	80181be <gen_numname+0x76>
		sr = seq;
 8018166:	683b      	ldr	r3, [r7, #0]
 8018168:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801816a:	e022      	b.n	80181b2 <gen_numname+0x6a>
			wc = *lfn++;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	1c9a      	adds	r2, r3, #2
 8018170:	607a      	str	r2, [r7, #4]
 8018172:	881b      	ldrh	r3, [r3, #0]
 8018174:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018176:	2300      	movs	r3, #0
 8018178:	62bb      	str	r3, [r7, #40]	; 0x28
 801817a:	e017      	b.n	80181ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	005a      	lsls	r2, r3, #1
 8018180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018182:	f003 0301 	and.w	r3, r3, #1
 8018186:	4413      	add	r3, r2
 8018188:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801818a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801818c:	085b      	lsrs	r3, r3, #1
 801818e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018190:	69fb      	ldr	r3, [r7, #28]
 8018192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018196:	2b00      	cmp	r3, #0
 8018198:	d005      	beq.n	80181a6 <gen_numname+0x5e>
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80181a0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80181a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80181a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a8:	3301      	adds	r3, #1
 80181aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80181ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ae:	2b0f      	cmp	r3, #15
 80181b0:	d9e4      	bls.n	801817c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	881b      	ldrh	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1d8      	bne.n	801816c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80181be:	2307      	movs	r3, #7
 80181c0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	b2db      	uxtb	r3, r3
 80181c6:	f003 030f 	and.w	r3, r3, #15
 80181ca:	b2db      	uxtb	r3, r3
 80181cc:	3330      	adds	r3, #48	; 0x30
 80181ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80181d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80181d6:	2b39      	cmp	r3, #57	; 0x39
 80181d8:	d904      	bls.n	80181e4 <gen_numname+0x9c>
 80181da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80181de:	3307      	adds	r3, #7
 80181e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80181e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e6:	1e5a      	subs	r2, r3, #1
 80181e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80181ea:	3330      	adds	r3, #48	; 0x30
 80181ec:	443b      	add	r3, r7
 80181ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80181f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	091b      	lsrs	r3, r3, #4
 80181fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 80181fc:	683b      	ldr	r3, [r7, #0]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d1df      	bne.n	80181c2 <gen_numname+0x7a>
	ns[i] = '~';
 8018202:	f107 0214 	add.w	r2, r7, #20
 8018206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018208:	4413      	add	r3, r2
 801820a:	227e      	movs	r2, #126	; 0x7e
 801820c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801820e:	2300      	movs	r3, #0
 8018210:	627b      	str	r3, [r7, #36]	; 0x24
 8018212:	e002      	b.n	801821a <gen_numname+0xd2>
 8018214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018216:	3301      	adds	r3, #1
 8018218:	627b      	str	r3, [r7, #36]	; 0x24
 801821a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801821e:	429a      	cmp	r2, r3
 8018220:	d205      	bcs.n	801822e <gen_numname+0xe6>
 8018222:	68fa      	ldr	r2, [r7, #12]
 8018224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018226:	4413      	add	r3, r2
 8018228:	781b      	ldrb	r3, [r3, #0]
 801822a:	2b20      	cmp	r3, #32
 801822c:	d1f2      	bne.n	8018214 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018230:	2b07      	cmp	r3, #7
 8018232:	d807      	bhi.n	8018244 <gen_numname+0xfc>
 8018234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018236:	1c5a      	adds	r2, r3, #1
 8018238:	62ba      	str	r2, [r7, #40]	; 0x28
 801823a:	3330      	adds	r3, #48	; 0x30
 801823c:	443b      	add	r3, r7
 801823e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018242:	e000      	b.n	8018246 <gen_numname+0xfe>
 8018244:	2120      	movs	r1, #32
 8018246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018248:	1c5a      	adds	r2, r3, #1
 801824a:	627a      	str	r2, [r7, #36]	; 0x24
 801824c:	68fa      	ldr	r2, [r7, #12]
 801824e:	4413      	add	r3, r2
 8018250:	460a      	mov	r2, r1
 8018252:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018256:	2b07      	cmp	r3, #7
 8018258:	d9e9      	bls.n	801822e <gen_numname+0xe6>
}
 801825a:	bf00      	nop
 801825c:	bf00      	nop
 801825e:	3730      	adds	r7, #48	; 0x30
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018264:	b480      	push	{r7}
 8018266:	b085      	sub	sp, #20
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801826c:	2300      	movs	r3, #0
 801826e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018270:	230b      	movs	r3, #11
 8018272:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018274:	7bfb      	ldrb	r3, [r7, #15]
 8018276:	b2da      	uxtb	r2, r3
 8018278:	0852      	lsrs	r2, r2, #1
 801827a:	01db      	lsls	r3, r3, #7
 801827c:	4313      	orrs	r3, r2
 801827e:	b2da      	uxtb	r2, r3
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	1c59      	adds	r1, r3, #1
 8018284:	6079      	str	r1, [r7, #4]
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	4413      	add	r3, r2
 801828a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	3b01      	subs	r3, #1
 8018290:	60bb      	str	r3, [r7, #8]
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d1ed      	bne.n	8018274 <sum_sfn+0x10>
	return sum;
 8018298:	7bfb      	ldrb	r3, [r7, #15]
}
 801829a:	4618      	mov	r0, r3
 801829c:	3714      	adds	r7, #20
 801829e:	46bd      	mov	sp, r7
 80182a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a4:	4770      	bx	lr

080182a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80182a6:	b580      	push	{r7, lr}
 80182a8:	b086      	sub	sp, #24
 80182aa:	af00      	add	r7, sp, #0
 80182ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80182b4:	2100      	movs	r1, #0
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	f7ff fca8 	bl	8017c0c <dir_sdi>
 80182bc:	4603      	mov	r3, r0
 80182be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80182c0:	7dfb      	ldrb	r3, [r7, #23]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d001      	beq.n	80182ca <dir_find+0x24>
 80182c6:	7dfb      	ldrb	r3, [r7, #23]
 80182c8:	e0a9      	b.n	801841e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80182ca:	23ff      	movs	r3, #255	; 0xff
 80182cc:	753b      	strb	r3, [r7, #20]
 80182ce:	7d3b      	ldrb	r3, [r7, #20]
 80182d0:	757b      	strb	r3, [r7, #21]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f04f 32ff 	mov.w	r2, #4294967295
 80182d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	69db      	ldr	r3, [r3, #28]
 80182de:	4619      	mov	r1, r3
 80182e0:	6938      	ldr	r0, [r7, #16]
 80182e2:	f7ff f913 	bl	801750c <move_window>
 80182e6:	4603      	mov	r3, r0
 80182e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80182ea:	7dfb      	ldrb	r3, [r7, #23]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	f040 8090 	bne.w	8018412 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6a1b      	ldr	r3, [r3, #32]
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80182fa:	7dbb      	ldrb	r3, [r7, #22]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d102      	bne.n	8018306 <dir_find+0x60>
 8018300:	2304      	movs	r3, #4
 8018302:	75fb      	strb	r3, [r7, #23]
 8018304:	e08a      	b.n	801841c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	6a1b      	ldr	r3, [r3, #32]
 801830a:	330b      	adds	r3, #11
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018312:	73fb      	strb	r3, [r7, #15]
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	7bfa      	ldrb	r2, [r7, #15]
 8018318:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801831a:	7dbb      	ldrb	r3, [r7, #22]
 801831c:	2be5      	cmp	r3, #229	; 0xe5
 801831e:	d007      	beq.n	8018330 <dir_find+0x8a>
 8018320:	7bfb      	ldrb	r3, [r7, #15]
 8018322:	f003 0308 	and.w	r3, r3, #8
 8018326:	2b00      	cmp	r3, #0
 8018328:	d009      	beq.n	801833e <dir_find+0x98>
 801832a:	7bfb      	ldrb	r3, [r7, #15]
 801832c:	2b0f      	cmp	r3, #15
 801832e:	d006      	beq.n	801833e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018330:	23ff      	movs	r3, #255	; 0xff
 8018332:	757b      	strb	r3, [r7, #21]
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	f04f 32ff 	mov.w	r2, #4294967295
 801833a:	631a      	str	r2, [r3, #48]	; 0x30
 801833c:	e05e      	b.n	80183fc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801833e:	7bfb      	ldrb	r3, [r7, #15]
 8018340:	2b0f      	cmp	r3, #15
 8018342:	d136      	bne.n	80183b2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801834e:	2b00      	cmp	r3, #0
 8018350:	d154      	bne.n	80183fc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018352:	7dbb      	ldrb	r3, [r7, #22]
 8018354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018358:	2b00      	cmp	r3, #0
 801835a:	d00d      	beq.n	8018378 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	6a1b      	ldr	r3, [r3, #32]
 8018360:	7b5b      	ldrb	r3, [r3, #13]
 8018362:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018364:	7dbb      	ldrb	r3, [r7, #22]
 8018366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801836a:	75bb      	strb	r3, [r7, #22]
 801836c:	7dbb      	ldrb	r3, [r7, #22]
 801836e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	695a      	ldr	r2, [r3, #20]
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018378:	7dba      	ldrb	r2, [r7, #22]
 801837a:	7d7b      	ldrb	r3, [r7, #21]
 801837c:	429a      	cmp	r2, r3
 801837e:	d115      	bne.n	80183ac <dir_find+0x106>
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6a1b      	ldr	r3, [r3, #32]
 8018384:	330d      	adds	r3, #13
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	7d3a      	ldrb	r2, [r7, #20]
 801838a:	429a      	cmp	r2, r3
 801838c:	d10e      	bne.n	80183ac <dir_find+0x106>
 801838e:	693b      	ldr	r3, [r7, #16]
 8018390:	68da      	ldr	r2, [r3, #12]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6a1b      	ldr	r3, [r3, #32]
 8018396:	4619      	mov	r1, r3
 8018398:	4610      	mov	r0, r2
 801839a:	f7ff fdfd 	bl	8017f98 <cmp_lfn>
 801839e:	4603      	mov	r3, r0
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d003      	beq.n	80183ac <dir_find+0x106>
 80183a4:	7d7b      	ldrb	r3, [r7, #21]
 80183a6:	3b01      	subs	r3, #1
 80183a8:	b2db      	uxtb	r3, r3
 80183aa:	e000      	b.n	80183ae <dir_find+0x108>
 80183ac:	23ff      	movs	r3, #255	; 0xff
 80183ae:	757b      	strb	r3, [r7, #21]
 80183b0:	e024      	b.n	80183fc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80183b2:	7d7b      	ldrb	r3, [r7, #21]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d109      	bne.n	80183cc <dir_find+0x126>
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6a1b      	ldr	r3, [r3, #32]
 80183bc:	4618      	mov	r0, r3
 80183be:	f7ff ff51 	bl	8018264 <sum_sfn>
 80183c2:	4603      	mov	r3, r0
 80183c4:	461a      	mov	r2, r3
 80183c6:	7d3b      	ldrb	r3, [r7, #20]
 80183c8:	4293      	cmp	r3, r2
 80183ca:	d024      	beq.n	8018416 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80183d2:	f003 0301 	and.w	r3, r3, #1
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d10a      	bne.n	80183f0 <dir_find+0x14a>
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	6a18      	ldr	r0, [r3, #32]
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	3324      	adds	r3, #36	; 0x24
 80183e2:	220b      	movs	r2, #11
 80183e4:	4619      	mov	r1, r3
 80183e6:	f7fe fe9f 	bl	8017128 <mem_cmp>
 80183ea:	4603      	mov	r3, r0
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d014      	beq.n	801841a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80183f0:	23ff      	movs	r3, #255	; 0xff
 80183f2:	757b      	strb	r3, [r7, #21]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f04f 32ff 	mov.w	r2, #4294967295
 80183fa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80183fc:	2100      	movs	r1, #0
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f7ff fc7f 	bl	8017d02 <dir_next>
 8018404:	4603      	mov	r3, r0
 8018406:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018408:	7dfb      	ldrb	r3, [r7, #23]
 801840a:	2b00      	cmp	r3, #0
 801840c:	f43f af65 	beq.w	80182da <dir_find+0x34>
 8018410:	e004      	b.n	801841c <dir_find+0x176>
		if (res != FR_OK) break;
 8018412:	bf00      	nop
 8018414:	e002      	b.n	801841c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018416:	bf00      	nop
 8018418:	e000      	b.n	801841c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801841a:	bf00      	nop

	return res;
 801841c:	7dfb      	ldrb	r3, [r7, #23]
}
 801841e:	4618      	mov	r0, r3
 8018420:	3718      	adds	r7, #24
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}
	...

08018428 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b08c      	sub	sp, #48	; 0x30
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801843c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018440:	2b00      	cmp	r3, #0
 8018442:	d001      	beq.n	8018448 <dir_register+0x20>
 8018444:	2306      	movs	r3, #6
 8018446:	e0e0      	b.n	801860a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018448:	2300      	movs	r3, #0
 801844a:	627b      	str	r3, [r7, #36]	; 0x24
 801844c:	e002      	b.n	8018454 <dir_register+0x2c>
 801844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018450:	3301      	adds	r3, #1
 8018452:	627b      	str	r3, [r7, #36]	; 0x24
 8018454:	69fb      	ldr	r3, [r7, #28]
 8018456:	68da      	ldr	r2, [r3, #12]
 8018458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845a:	005b      	lsls	r3, r3, #1
 801845c:	4413      	add	r3, r2
 801845e:	881b      	ldrh	r3, [r3, #0]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d1f4      	bne.n	801844e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801846a:	f107 030c 	add.w	r3, r7, #12
 801846e:	220c      	movs	r2, #12
 8018470:	4618      	mov	r0, r3
 8018472:	f7fe fe1d 	bl	80170b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018476:	7dfb      	ldrb	r3, [r7, #23]
 8018478:	f003 0301 	and.w	r3, r3, #1
 801847c:	2b00      	cmp	r3, #0
 801847e:	d032      	beq.n	80184e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2240      	movs	r2, #64	; 0x40
 8018484:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018488:	2301      	movs	r3, #1
 801848a:	62bb      	str	r3, [r7, #40]	; 0x28
 801848c:	e016      	b.n	80184bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018494:	69fb      	ldr	r3, [r7, #28]
 8018496:	68da      	ldr	r2, [r3, #12]
 8018498:	f107 010c 	add.w	r1, r7, #12
 801849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849e:	f7ff fe53 	bl	8018148 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f7ff feff 	bl	80182a6 <dir_find>
 80184a8:	4603      	mov	r3, r0
 80184aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80184ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d106      	bne.n	80184c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80184b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b8:	3301      	adds	r3, #1
 80184ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80184bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184be:	2b63      	cmp	r3, #99	; 0x63
 80184c0:	d9e5      	bls.n	801848e <dir_register+0x66>
 80184c2:	e000      	b.n	80184c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80184c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80184c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c8:	2b64      	cmp	r3, #100	; 0x64
 80184ca:	d101      	bne.n	80184d0 <dir_register+0xa8>
 80184cc:	2307      	movs	r3, #7
 80184ce:	e09c      	b.n	801860a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80184d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184d4:	2b04      	cmp	r3, #4
 80184d6:	d002      	beq.n	80184de <dir_register+0xb6>
 80184d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184dc:	e095      	b.n	801860a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80184de:	7dfa      	ldrb	r2, [r7, #23]
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80184e6:	7dfb      	ldrb	r3, [r7, #23]
 80184e8:	f003 0302 	and.w	r3, r3, #2
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d007      	beq.n	8018500 <dir_register+0xd8>
 80184f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f2:	330c      	adds	r3, #12
 80184f4:	4a47      	ldr	r2, [pc, #284]	; (8018614 <dir_register+0x1ec>)
 80184f6:	fba2 2303 	umull	r2, r3, r2, r3
 80184fa:	089b      	lsrs	r3, r3, #2
 80184fc:	3301      	adds	r3, #1
 80184fe:	e000      	b.n	8018502 <dir_register+0xda>
 8018500:	2301      	movs	r3, #1
 8018502:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018504:	6a39      	ldr	r1, [r7, #32]
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f7ff fcc0 	bl	8017e8c <dir_alloc>
 801850c:	4603      	mov	r3, r0
 801850e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018516:	2b00      	cmp	r3, #0
 8018518:	d148      	bne.n	80185ac <dir_register+0x184>
 801851a:	6a3b      	ldr	r3, [r7, #32]
 801851c:	3b01      	subs	r3, #1
 801851e:	623b      	str	r3, [r7, #32]
 8018520:	6a3b      	ldr	r3, [r7, #32]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d042      	beq.n	80185ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	695a      	ldr	r2, [r3, #20]
 801852a:	6a3b      	ldr	r3, [r7, #32]
 801852c:	015b      	lsls	r3, r3, #5
 801852e:	1ad3      	subs	r3, r2, r3
 8018530:	4619      	mov	r1, r3
 8018532:	6878      	ldr	r0, [r7, #4]
 8018534:	f7ff fb6a 	bl	8017c0c <dir_sdi>
 8018538:	4603      	mov	r3, r0
 801853a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801853e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018542:	2b00      	cmp	r3, #0
 8018544:	d132      	bne.n	80185ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	3324      	adds	r3, #36	; 0x24
 801854a:	4618      	mov	r0, r3
 801854c:	f7ff fe8a 	bl	8018264 <sum_sfn>
 8018550:	4603      	mov	r3, r0
 8018552:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	69db      	ldr	r3, [r3, #28]
 8018558:	4619      	mov	r1, r3
 801855a:	69f8      	ldr	r0, [r7, #28]
 801855c:	f7fe ffd6 	bl	801750c <move_window>
 8018560:	4603      	mov	r3, r0
 8018562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801856a:	2b00      	cmp	r3, #0
 801856c:	d11d      	bne.n	80185aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801856e:	69fb      	ldr	r3, [r7, #28]
 8018570:	68d8      	ldr	r0, [r3, #12]
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6a19      	ldr	r1, [r3, #32]
 8018576:	6a3b      	ldr	r3, [r7, #32]
 8018578:	b2da      	uxtb	r2, r3
 801857a:	7efb      	ldrb	r3, [r7, #27]
 801857c:	f7ff fd7c 	bl	8018078 <put_lfn>
				fs->wflag = 1;
 8018580:	69fb      	ldr	r3, [r7, #28]
 8018582:	2201      	movs	r2, #1
 8018584:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018586:	2100      	movs	r1, #0
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f7ff fbba 	bl	8017d02 <dir_next>
 801858e:	4603      	mov	r3, r0
 8018590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018598:	2b00      	cmp	r3, #0
 801859a:	d107      	bne.n	80185ac <dir_register+0x184>
 801859c:	6a3b      	ldr	r3, [r7, #32]
 801859e:	3b01      	subs	r3, #1
 80185a0:	623b      	str	r3, [r7, #32]
 80185a2:	6a3b      	ldr	r3, [r7, #32]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d1d5      	bne.n	8018554 <dir_register+0x12c>
 80185a8:	e000      	b.n	80185ac <dir_register+0x184>
				if (res != FR_OK) break;
 80185aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80185ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d128      	bne.n	8018606 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	69db      	ldr	r3, [r3, #28]
 80185b8:	4619      	mov	r1, r3
 80185ba:	69f8      	ldr	r0, [r7, #28]
 80185bc:	f7fe ffa6 	bl	801750c <move_window>
 80185c0:	4603      	mov	r3, r0
 80185c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80185c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d11b      	bne.n	8018606 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	6a1b      	ldr	r3, [r3, #32]
 80185d2:	2220      	movs	r2, #32
 80185d4:	2100      	movs	r1, #0
 80185d6:	4618      	mov	r0, r3
 80185d8:	f7fe fd8b 	bl	80170f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	6a18      	ldr	r0, [r3, #32]
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	3324      	adds	r3, #36	; 0x24
 80185e4:	220b      	movs	r2, #11
 80185e6:	4619      	mov	r1, r3
 80185e8:	f7fe fd62 	bl	80170b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	6a1b      	ldr	r3, [r3, #32]
 80185f6:	330c      	adds	r3, #12
 80185f8:	f002 0218 	and.w	r2, r2, #24
 80185fc:	b2d2      	uxtb	r2, r2
 80185fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018600:	69fb      	ldr	r3, [r7, #28]
 8018602:	2201      	movs	r2, #1
 8018604:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801860a:	4618      	mov	r0, r3
 801860c:	3730      	adds	r7, #48	; 0x30
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}
 8018612:	bf00      	nop
 8018614:	4ec4ec4f 	.word	0x4ec4ec4f

08018618 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b088      	sub	sp, #32
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	2200      	movs	r2, #0
 801862c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	69db      	ldr	r3, [r3, #28]
 8018632:	2b00      	cmp	r3, #0
 8018634:	f000 80c9 	beq.w	80187ca <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018640:	d032      	beq.n	80186a8 <get_fileinfo+0x90>
			i = j = 0;
 8018642:	2300      	movs	r3, #0
 8018644:	61bb      	str	r3, [r7, #24]
 8018646:	69bb      	ldr	r3, [r7, #24]
 8018648:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801864a:	e01b      	b.n	8018684 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801864c:	89fb      	ldrh	r3, [r7, #14]
 801864e:	2100      	movs	r1, #0
 8018650:	4618      	mov	r0, r3
 8018652:	f001 fabf 	bl	8019bd4 <ff_convert>
 8018656:	4603      	mov	r3, r0
 8018658:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801865a:	89fb      	ldrh	r3, [r7, #14]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d102      	bne.n	8018666 <get_fileinfo+0x4e>
 8018660:	2300      	movs	r3, #0
 8018662:	61fb      	str	r3, [r7, #28]
 8018664:	e01a      	b.n	801869c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018666:	69fb      	ldr	r3, [r7, #28]
 8018668:	2bfe      	cmp	r3, #254	; 0xfe
 801866a:	d902      	bls.n	8018672 <get_fileinfo+0x5a>
 801866c:	2300      	movs	r3, #0
 801866e:	61fb      	str	r3, [r7, #28]
 8018670:	e014      	b.n	801869c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8018672:	69fb      	ldr	r3, [r7, #28]
 8018674:	1c5a      	adds	r2, r3, #1
 8018676:	61fa      	str	r2, [r7, #28]
 8018678:	89fa      	ldrh	r2, [r7, #14]
 801867a:	b2d1      	uxtb	r1, r2
 801867c:	683a      	ldr	r2, [r7, #0]
 801867e:	4413      	add	r3, r2
 8018680:	460a      	mov	r2, r1
 8018682:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018684:	693b      	ldr	r3, [r7, #16]
 8018686:	68da      	ldr	r2, [r3, #12]
 8018688:	69bb      	ldr	r3, [r7, #24]
 801868a:	1c59      	adds	r1, r3, #1
 801868c:	61b9      	str	r1, [r7, #24]
 801868e:	005b      	lsls	r3, r3, #1
 8018690:	4413      	add	r3, r2
 8018692:	881b      	ldrh	r3, [r3, #0]
 8018694:	81fb      	strh	r3, [r7, #14]
 8018696:	89fb      	ldrh	r3, [r7, #14]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d1d7      	bne.n	801864c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801869c:	683a      	ldr	r2, [r7, #0]
 801869e:	69fb      	ldr	r3, [r7, #28]
 80186a0:	4413      	add	r3, r2
 80186a2:	3316      	adds	r3, #22
 80186a4:	2200      	movs	r2, #0
 80186a6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80186a8:	2300      	movs	r3, #0
 80186aa:	61bb      	str	r3, [r7, #24]
 80186ac:	69bb      	ldr	r3, [r7, #24]
 80186ae:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80186b0:	683a      	ldr	r2, [r7, #0]
 80186b2:	69fb      	ldr	r3, [r7, #28]
 80186b4:	4413      	add	r3, r2
 80186b6:	3316      	adds	r3, #22
 80186b8:	781b      	ldrb	r3, [r3, #0]
 80186ba:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80186bc:	e04c      	b.n	8018758 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6a1a      	ldr	r2, [r3, #32]
 80186c2:	69fb      	ldr	r3, [r7, #28]
 80186c4:	1c59      	adds	r1, r3, #1
 80186c6:	61f9      	str	r1, [r7, #28]
 80186c8:	4413      	add	r3, r2
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80186ce:	7dfb      	ldrb	r3, [r7, #23]
 80186d0:	2b20      	cmp	r3, #32
 80186d2:	d100      	bne.n	80186d6 <get_fileinfo+0xbe>
 80186d4:	e040      	b.n	8018758 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80186d6:	7dfb      	ldrb	r3, [r7, #23]
 80186d8:	2b05      	cmp	r3, #5
 80186da:	d101      	bne.n	80186e0 <get_fileinfo+0xc8>
 80186dc:	23e5      	movs	r3, #229	; 0xe5
 80186de:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80186e0:	69fb      	ldr	r3, [r7, #28]
 80186e2:	2b09      	cmp	r3, #9
 80186e4:	d10f      	bne.n	8018706 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80186e6:	89bb      	ldrh	r3, [r7, #12]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d105      	bne.n	80186f8 <get_fileinfo+0xe0>
 80186ec:	683a      	ldr	r2, [r7, #0]
 80186ee:	69bb      	ldr	r3, [r7, #24]
 80186f0:	4413      	add	r3, r2
 80186f2:	3316      	adds	r3, #22
 80186f4:	222e      	movs	r2, #46	; 0x2e
 80186f6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80186f8:	69bb      	ldr	r3, [r7, #24]
 80186fa:	1c5a      	adds	r2, r3, #1
 80186fc:	61ba      	str	r2, [r7, #24]
 80186fe:	683a      	ldr	r2, [r7, #0]
 8018700:	4413      	add	r3, r2
 8018702:	222e      	movs	r2, #46	; 0x2e
 8018704:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8018706:	683a      	ldr	r2, [r7, #0]
 8018708:	69bb      	ldr	r3, [r7, #24]
 801870a:	4413      	add	r3, r2
 801870c:	3309      	adds	r3, #9
 801870e:	7dfa      	ldrb	r2, [r7, #23]
 8018710:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8018712:	89bb      	ldrh	r3, [r7, #12]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d11c      	bne.n	8018752 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8018718:	7dfb      	ldrb	r3, [r7, #23]
 801871a:	2b40      	cmp	r3, #64	; 0x40
 801871c:	d913      	bls.n	8018746 <get_fileinfo+0x12e>
 801871e:	7dfb      	ldrb	r3, [r7, #23]
 8018720:	2b5a      	cmp	r3, #90	; 0x5a
 8018722:	d810      	bhi.n	8018746 <get_fileinfo+0x12e>
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6a1b      	ldr	r3, [r3, #32]
 8018728:	330c      	adds	r3, #12
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	461a      	mov	r2, r3
 801872e:	69fb      	ldr	r3, [r7, #28]
 8018730:	2b08      	cmp	r3, #8
 8018732:	d901      	bls.n	8018738 <get_fileinfo+0x120>
 8018734:	2310      	movs	r3, #16
 8018736:	e000      	b.n	801873a <get_fileinfo+0x122>
 8018738:	2308      	movs	r3, #8
 801873a:	4013      	ands	r3, r2
 801873c:	2b00      	cmp	r3, #0
 801873e:	d002      	beq.n	8018746 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8018740:	7dfb      	ldrb	r3, [r7, #23]
 8018742:	3320      	adds	r3, #32
 8018744:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8018746:	683a      	ldr	r2, [r7, #0]
 8018748:	69bb      	ldr	r3, [r7, #24]
 801874a:	4413      	add	r3, r2
 801874c:	3316      	adds	r3, #22
 801874e:	7dfa      	ldrb	r2, [r7, #23]
 8018750:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8018752:	69bb      	ldr	r3, [r7, #24]
 8018754:	3301      	adds	r3, #1
 8018756:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	2b0a      	cmp	r3, #10
 801875c:	d9af      	bls.n	80186be <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801875e:	89bb      	ldrh	r3, [r7, #12]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d10d      	bne.n	8018780 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8018764:	683a      	ldr	r2, [r7, #0]
 8018766:	69bb      	ldr	r3, [r7, #24]
 8018768:	4413      	add	r3, r2
 801876a:	3316      	adds	r3, #22
 801876c:	2200      	movs	r2, #0
 801876e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6a1b      	ldr	r3, [r3, #32]
 8018774:	330c      	adds	r3, #12
 8018776:	781b      	ldrb	r3, [r3, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d101      	bne.n	8018780 <get_fileinfo+0x168>
 801877c:	2300      	movs	r3, #0
 801877e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018780:	683a      	ldr	r2, [r7, #0]
 8018782:	69bb      	ldr	r3, [r7, #24]
 8018784:	4413      	add	r3, r2
 8018786:	3309      	adds	r3, #9
 8018788:	2200      	movs	r2, #0
 801878a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6a1b      	ldr	r3, [r3, #32]
 8018790:	7ada      	ldrb	r2, [r3, #11]
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	6a1b      	ldr	r3, [r3, #32]
 801879a:	331c      	adds	r3, #28
 801879c:	4618      	mov	r0, r3
 801879e:	f7fe fc1d 	bl	8016fdc <ld_dword>
 80187a2:	4602      	mov	r2, r0
 80187a4:	683b      	ldr	r3, [r7, #0]
 80187a6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	6a1b      	ldr	r3, [r3, #32]
 80187ac:	3316      	adds	r3, #22
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7fe fc14 	bl	8016fdc <ld_dword>
 80187b4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	b29a      	uxth	r2, r3
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	80da      	strh	r2, [r3, #6]
 80187be:	68bb      	ldr	r3, [r7, #8]
 80187c0:	0c1b      	lsrs	r3, r3, #16
 80187c2:	b29a      	uxth	r2, r3
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	809a      	strh	r2, [r3, #4]
 80187c8:	e000      	b.n	80187cc <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80187ca:	bf00      	nop
}
 80187cc:	3720      	adds	r7, #32
 80187ce:	46bd      	mov	sp, r7
 80187d0:	bd80      	pop	{r7, pc}
	...

080187d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b08a      	sub	sp, #40	; 0x28
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80187de:	683b      	ldr	r3, [r7, #0]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	613b      	str	r3, [r7, #16]
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	68db      	ldr	r3, [r3, #12]
 80187ea:	60fb      	str	r3, [r7, #12]
 80187ec:	2300      	movs	r3, #0
 80187ee:	617b      	str	r3, [r7, #20]
 80187f0:	697b      	ldr	r3, [r7, #20]
 80187f2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80187f4:	69bb      	ldr	r3, [r7, #24]
 80187f6:	1c5a      	adds	r2, r3, #1
 80187f8:	61ba      	str	r2, [r7, #24]
 80187fa:	693a      	ldr	r2, [r7, #16]
 80187fc:	4413      	add	r3, r2
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018804:	2b1f      	cmp	r3, #31
 8018806:	d940      	bls.n	801888a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801880a:	2b2f      	cmp	r3, #47	; 0x2f
 801880c:	d006      	beq.n	801881c <create_name+0x48>
 801880e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018810:	2b5c      	cmp	r3, #92	; 0x5c
 8018812:	d110      	bne.n	8018836 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018814:	e002      	b.n	801881c <create_name+0x48>
 8018816:	69bb      	ldr	r3, [r7, #24]
 8018818:	3301      	adds	r3, #1
 801881a:	61bb      	str	r3, [r7, #24]
 801881c:	693a      	ldr	r2, [r7, #16]
 801881e:	69bb      	ldr	r3, [r7, #24]
 8018820:	4413      	add	r3, r2
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	2b2f      	cmp	r3, #47	; 0x2f
 8018826:	d0f6      	beq.n	8018816 <create_name+0x42>
 8018828:	693a      	ldr	r2, [r7, #16]
 801882a:	69bb      	ldr	r3, [r7, #24]
 801882c:	4413      	add	r3, r2
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	2b5c      	cmp	r3, #92	; 0x5c
 8018832:	d0f0      	beq.n	8018816 <create_name+0x42>
			break;
 8018834:	e02a      	b.n	801888c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018836:	697b      	ldr	r3, [r7, #20]
 8018838:	2bfe      	cmp	r3, #254	; 0xfe
 801883a:	d901      	bls.n	8018840 <create_name+0x6c>
 801883c:	2306      	movs	r3, #6
 801883e:	e17d      	b.n	8018b3c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018842:	b2db      	uxtb	r3, r3
 8018844:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018848:	2101      	movs	r1, #1
 801884a:	4618      	mov	r0, r3
 801884c:	f001 f9c2 	bl	8019bd4 <ff_convert>
 8018850:	4603      	mov	r3, r0
 8018852:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018856:	2b00      	cmp	r3, #0
 8018858:	d101      	bne.n	801885e <create_name+0x8a>
 801885a:	2306      	movs	r3, #6
 801885c:	e16e      	b.n	8018b3c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801885e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018860:	2b7f      	cmp	r3, #127	; 0x7f
 8018862:	d809      	bhi.n	8018878 <create_name+0xa4>
 8018864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018866:	4619      	mov	r1, r3
 8018868:	488d      	ldr	r0, [pc, #564]	; (8018aa0 <create_name+0x2cc>)
 801886a:	f7fe fc84 	bl	8017176 <chk_chr>
 801886e:	4603      	mov	r3, r0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d001      	beq.n	8018878 <create_name+0xa4>
 8018874:	2306      	movs	r3, #6
 8018876:	e161      	b.n	8018b3c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	1c5a      	adds	r2, r3, #1
 801887c:	617a      	str	r2, [r7, #20]
 801887e:	005b      	lsls	r3, r3, #1
 8018880:	68fa      	ldr	r2, [r7, #12]
 8018882:	4413      	add	r3, r2
 8018884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018886:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018888:	e7b4      	b.n	80187f4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801888a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801888c:	693a      	ldr	r2, [r7, #16]
 801888e:	69bb      	ldr	r3, [r7, #24]
 8018890:	441a      	add	r2, r3
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018898:	2b1f      	cmp	r3, #31
 801889a:	d801      	bhi.n	80188a0 <create_name+0xcc>
 801889c:	2304      	movs	r3, #4
 801889e:	e000      	b.n	80188a2 <create_name+0xce>
 80188a0:	2300      	movs	r3, #0
 80188a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80188a6:	e011      	b.n	80188cc <create_name+0xf8>
		w = lfn[di - 1];
 80188a8:	697b      	ldr	r3, [r7, #20]
 80188aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80188ae:	3b01      	subs	r3, #1
 80188b0:	005b      	lsls	r3, r3, #1
 80188b2:	68fa      	ldr	r2, [r7, #12]
 80188b4:	4413      	add	r3, r2
 80188b6:	881b      	ldrh	r3, [r3, #0]
 80188b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80188ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188bc:	2b20      	cmp	r3, #32
 80188be:	d002      	beq.n	80188c6 <create_name+0xf2>
 80188c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188c2:	2b2e      	cmp	r3, #46	; 0x2e
 80188c4:	d106      	bne.n	80188d4 <create_name+0x100>
		di--;
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	3b01      	subs	r3, #1
 80188ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80188cc:	697b      	ldr	r3, [r7, #20]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d1ea      	bne.n	80188a8 <create_name+0xd4>
 80188d2:	e000      	b.n	80188d6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80188d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80188d6:	697b      	ldr	r3, [r7, #20]
 80188d8:	005b      	lsls	r3, r3, #1
 80188da:	68fa      	ldr	r2, [r7, #12]
 80188dc:	4413      	add	r3, r2
 80188de:	2200      	movs	r2, #0
 80188e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80188e2:	697b      	ldr	r3, [r7, #20]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d101      	bne.n	80188ec <create_name+0x118>
 80188e8:	2306      	movs	r3, #6
 80188ea:	e127      	b.n	8018b3c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	3324      	adds	r3, #36	; 0x24
 80188f0:	220b      	movs	r2, #11
 80188f2:	2120      	movs	r1, #32
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7fe fbfc 	bl	80170f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80188fa:	2300      	movs	r3, #0
 80188fc:	61bb      	str	r3, [r7, #24]
 80188fe:	e002      	b.n	8018906 <create_name+0x132>
 8018900:	69bb      	ldr	r3, [r7, #24]
 8018902:	3301      	adds	r3, #1
 8018904:	61bb      	str	r3, [r7, #24]
 8018906:	69bb      	ldr	r3, [r7, #24]
 8018908:	005b      	lsls	r3, r3, #1
 801890a:	68fa      	ldr	r2, [r7, #12]
 801890c:	4413      	add	r3, r2
 801890e:	881b      	ldrh	r3, [r3, #0]
 8018910:	2b20      	cmp	r3, #32
 8018912:	d0f5      	beq.n	8018900 <create_name+0x12c>
 8018914:	69bb      	ldr	r3, [r7, #24]
 8018916:	005b      	lsls	r3, r3, #1
 8018918:	68fa      	ldr	r2, [r7, #12]
 801891a:	4413      	add	r3, r2
 801891c:	881b      	ldrh	r3, [r3, #0]
 801891e:	2b2e      	cmp	r3, #46	; 0x2e
 8018920:	d0ee      	beq.n	8018900 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018922:	69bb      	ldr	r3, [r7, #24]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d009      	beq.n	801893c <create_name+0x168>
 8018928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801892c:	f043 0303 	orr.w	r3, r3, #3
 8018930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018934:	e002      	b.n	801893c <create_name+0x168>
 8018936:	697b      	ldr	r3, [r7, #20]
 8018938:	3b01      	subs	r3, #1
 801893a:	617b      	str	r3, [r7, #20]
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d009      	beq.n	8018956 <create_name+0x182>
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018948:	3b01      	subs	r3, #1
 801894a:	005b      	lsls	r3, r3, #1
 801894c:	68fa      	ldr	r2, [r7, #12]
 801894e:	4413      	add	r3, r2
 8018950:	881b      	ldrh	r3, [r3, #0]
 8018952:	2b2e      	cmp	r3, #46	; 0x2e
 8018954:	d1ef      	bne.n	8018936 <create_name+0x162>

	i = b = 0; ni = 8;
 8018956:	2300      	movs	r3, #0
 8018958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801895c:	2300      	movs	r3, #0
 801895e:	623b      	str	r3, [r7, #32]
 8018960:	2308      	movs	r3, #8
 8018962:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018964:	69bb      	ldr	r3, [r7, #24]
 8018966:	1c5a      	adds	r2, r3, #1
 8018968:	61ba      	str	r2, [r7, #24]
 801896a:	005b      	lsls	r3, r3, #1
 801896c:	68fa      	ldr	r2, [r7, #12]
 801896e:	4413      	add	r3, r2
 8018970:	881b      	ldrh	r3, [r3, #0]
 8018972:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018976:	2b00      	cmp	r3, #0
 8018978:	f000 8090 	beq.w	8018a9c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801897c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801897e:	2b20      	cmp	r3, #32
 8018980:	d006      	beq.n	8018990 <create_name+0x1bc>
 8018982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018984:	2b2e      	cmp	r3, #46	; 0x2e
 8018986:	d10a      	bne.n	801899e <create_name+0x1ca>
 8018988:	69ba      	ldr	r2, [r7, #24]
 801898a:	697b      	ldr	r3, [r7, #20]
 801898c:	429a      	cmp	r2, r3
 801898e:	d006      	beq.n	801899e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018994:	f043 0303 	orr.w	r3, r3, #3
 8018998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801899c:	e07d      	b.n	8018a9a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801899e:	6a3a      	ldr	r2, [r7, #32]
 80189a0:	69fb      	ldr	r3, [r7, #28]
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d203      	bcs.n	80189ae <create_name+0x1da>
 80189a6:	69ba      	ldr	r2, [r7, #24]
 80189a8:	697b      	ldr	r3, [r7, #20]
 80189aa:	429a      	cmp	r2, r3
 80189ac:	d123      	bne.n	80189f6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80189ae:	69fb      	ldr	r3, [r7, #28]
 80189b0:	2b0b      	cmp	r3, #11
 80189b2:	d106      	bne.n	80189c2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80189b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189b8:	f043 0303 	orr.w	r3, r3, #3
 80189bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80189c0:	e075      	b.n	8018aae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80189c2:	69ba      	ldr	r2, [r7, #24]
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d005      	beq.n	80189d6 <create_name+0x202>
 80189ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189ce:	f043 0303 	orr.w	r3, r3, #3
 80189d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80189d6:	69ba      	ldr	r2, [r7, #24]
 80189d8:	697b      	ldr	r3, [r7, #20]
 80189da:	429a      	cmp	r2, r3
 80189dc:	d866      	bhi.n	8018aac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	61bb      	str	r3, [r7, #24]
 80189e2:	2308      	movs	r3, #8
 80189e4:	623b      	str	r3, [r7, #32]
 80189e6:	230b      	movs	r3, #11
 80189e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80189ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80189f4:	e051      	b.n	8018a9a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80189f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189f8:	2b7f      	cmp	r3, #127	; 0x7f
 80189fa:	d914      	bls.n	8018a26 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80189fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189fe:	2100      	movs	r1, #0
 8018a00:	4618      	mov	r0, r3
 8018a02:	f001 f8e7 	bl	8019bd4 <ff_convert>
 8018a06:	4603      	mov	r3, r0
 8018a08:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d004      	beq.n	8018a1a <create_name+0x246>
 8018a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a12:	3b80      	subs	r3, #128	; 0x80
 8018a14:	4a23      	ldr	r2, [pc, #140]	; (8018aa4 <create_name+0x2d0>)
 8018a16:	5cd3      	ldrb	r3, [r2, r3]
 8018a18:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a1e:	f043 0302 	orr.w	r3, r3, #2
 8018a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d007      	beq.n	8018a3c <create_name+0x268>
 8018a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a2e:	4619      	mov	r1, r3
 8018a30:	481d      	ldr	r0, [pc, #116]	; (8018aa8 <create_name+0x2d4>)
 8018a32:	f7fe fba0 	bl	8017176 <chk_chr>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d008      	beq.n	8018a4e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018a3c:	235f      	movs	r3, #95	; 0x5f
 8018a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a44:	f043 0303 	orr.w	r3, r3, #3
 8018a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a4c:	e01b      	b.n	8018a86 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a50:	2b40      	cmp	r3, #64	; 0x40
 8018a52:	d909      	bls.n	8018a68 <create_name+0x294>
 8018a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a56:	2b5a      	cmp	r3, #90	; 0x5a
 8018a58:	d806      	bhi.n	8018a68 <create_name+0x294>
					b |= 2;
 8018a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a5e:	f043 0302 	orr.w	r3, r3, #2
 8018a62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018a66:	e00e      	b.n	8018a86 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a6a:	2b60      	cmp	r3, #96	; 0x60
 8018a6c:	d90b      	bls.n	8018a86 <create_name+0x2b2>
 8018a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a70:	2b7a      	cmp	r3, #122	; 0x7a
 8018a72:	d808      	bhi.n	8018a86 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a78:	f043 0301 	orr.w	r3, r3, #1
 8018a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a82:	3b20      	subs	r3, #32
 8018a84:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018a86:	6a3b      	ldr	r3, [r7, #32]
 8018a88:	1c5a      	adds	r2, r3, #1
 8018a8a:	623a      	str	r2, [r7, #32]
 8018a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a8e:	b2d1      	uxtb	r1, r2
 8018a90:	687a      	ldr	r2, [r7, #4]
 8018a92:	4413      	add	r3, r2
 8018a94:	460a      	mov	r2, r1
 8018a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018a9a:	e763      	b.n	8018964 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018a9c:	bf00      	nop
 8018a9e:	e006      	b.n	8018aae <create_name+0x2da>
 8018aa0:	080211fc 	.word	0x080211fc
 8018aa4:	08021a5c 	.word	0x08021a5c
 8018aa8:	08021208 	.word	0x08021208
			if (si > di) break;			/* No extension */
 8018aac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018ab4:	2be5      	cmp	r3, #229	; 0xe5
 8018ab6:	d103      	bne.n	8018ac0 <create_name+0x2ec>
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2205      	movs	r2, #5
 8018abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018ac0:	69fb      	ldr	r3, [r7, #28]
 8018ac2:	2b08      	cmp	r3, #8
 8018ac4:	d104      	bne.n	8018ad0 <create_name+0x2fc>
 8018ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018ad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ad4:	f003 030c 	and.w	r3, r3, #12
 8018ad8:	2b0c      	cmp	r3, #12
 8018ada:	d005      	beq.n	8018ae8 <create_name+0x314>
 8018adc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ae0:	f003 0303 	and.w	r3, r3, #3
 8018ae4:	2b03      	cmp	r3, #3
 8018ae6:	d105      	bne.n	8018af4 <create_name+0x320>
 8018ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aec:	f043 0302 	orr.w	r3, r3, #2
 8018af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018af8:	f003 0302 	and.w	r3, r3, #2
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d117      	bne.n	8018b30 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b04:	f003 0303 	and.w	r3, r3, #3
 8018b08:	2b01      	cmp	r3, #1
 8018b0a:	d105      	bne.n	8018b18 <create_name+0x344>
 8018b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b10:	f043 0310 	orr.w	r3, r3, #16
 8018b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018b18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b1c:	f003 030c 	and.w	r3, r3, #12
 8018b20:	2b04      	cmp	r3, #4
 8018b22:	d105      	bne.n	8018b30 <create_name+0x35c>
 8018b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b28:	f043 0308 	orr.w	r3, r3, #8
 8018b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018b36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018b3a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	3728      	adds	r7, #40	; 0x28
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b086      	sub	sp, #24
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
 8018b4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018b52:	693b      	ldr	r3, [r7, #16]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018b58:	e002      	b.n	8018b60 <follow_path+0x1c>
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	603b      	str	r3, [r7, #0]
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	2b2f      	cmp	r3, #47	; 0x2f
 8018b66:	d0f8      	beq.n	8018b5a <follow_path+0x16>
 8018b68:	683b      	ldr	r3, [r7, #0]
 8018b6a:	781b      	ldrb	r3, [r3, #0]
 8018b6c:	2b5c      	cmp	r3, #92	; 0x5c
 8018b6e:	d0f4      	beq.n	8018b5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018b70:	693b      	ldr	r3, [r7, #16]
 8018b72:	2200      	movs	r2, #0
 8018b74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	781b      	ldrb	r3, [r3, #0]
 8018b7a:	2b1f      	cmp	r3, #31
 8018b7c:	d80a      	bhi.n	8018b94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	2280      	movs	r2, #128	; 0x80
 8018b82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018b86:	2100      	movs	r1, #0
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f7ff f83f 	bl	8017c0c <dir_sdi>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	75fb      	strb	r3, [r7, #23]
 8018b92:	e043      	b.n	8018c1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018b94:	463b      	mov	r3, r7
 8018b96:	4619      	mov	r1, r3
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f7ff fe1b 	bl	80187d4 <create_name>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018ba2:	7dfb      	ldrb	r3, [r7, #23]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d134      	bne.n	8018c12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f7ff fb7c 	bl	80182a6 <dir_find>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018bb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018bba:	7dfb      	ldrb	r3, [r7, #23]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d00a      	beq.n	8018bd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018bc0:	7dfb      	ldrb	r3, [r7, #23]
 8018bc2:	2b04      	cmp	r3, #4
 8018bc4:	d127      	bne.n	8018c16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018bc6:	7afb      	ldrb	r3, [r7, #11]
 8018bc8:	f003 0304 	and.w	r3, r3, #4
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d122      	bne.n	8018c16 <follow_path+0xd2>
 8018bd0:	2305      	movs	r3, #5
 8018bd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018bd4:	e01f      	b.n	8018c16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018bd6:	7afb      	ldrb	r3, [r7, #11]
 8018bd8:	f003 0304 	and.w	r3, r3, #4
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d11c      	bne.n	8018c1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018be0:	693b      	ldr	r3, [r7, #16]
 8018be2:	799b      	ldrb	r3, [r3, #6]
 8018be4:	f003 0310 	and.w	r3, r3, #16
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d102      	bne.n	8018bf2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018bec:	2305      	movs	r3, #5
 8018bee:	75fb      	strb	r3, [r7, #23]
 8018bf0:	e014      	b.n	8018c1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	695b      	ldr	r3, [r3, #20]
 8018bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018c00:	4413      	add	r3, r2
 8018c02:	4619      	mov	r1, r3
 8018c04:	68f8      	ldr	r0, [r7, #12]
 8018c06:	f7ff f988 	bl	8017f1a <ld_clust>
 8018c0a:	4602      	mov	r2, r0
 8018c0c:	693b      	ldr	r3, [r7, #16]
 8018c0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018c10:	e7c0      	b.n	8018b94 <follow_path+0x50>
			if (res != FR_OK) break;
 8018c12:	bf00      	nop
 8018c14:	e002      	b.n	8018c1c <follow_path+0xd8>
				break;
 8018c16:	bf00      	nop
 8018c18:	e000      	b.n	8018c1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018c1a:	bf00      	nop
			}
		}
	}

	return res;
 8018c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3718      	adds	r7, #24
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}

08018c26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018c26:	b480      	push	{r7}
 8018c28:	b087      	sub	sp, #28
 8018c2a:	af00      	add	r7, sp, #0
 8018c2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d031      	beq.n	8018ca0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	617b      	str	r3, [r7, #20]
 8018c42:	e002      	b.n	8018c4a <get_ldnumber+0x24>
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	3301      	adds	r3, #1
 8018c48:	617b      	str	r3, [r7, #20]
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	781b      	ldrb	r3, [r3, #0]
 8018c4e:	2b1f      	cmp	r3, #31
 8018c50:	d903      	bls.n	8018c5a <get_ldnumber+0x34>
 8018c52:	697b      	ldr	r3, [r7, #20]
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	2b3a      	cmp	r3, #58	; 0x3a
 8018c58:	d1f4      	bne.n	8018c44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	781b      	ldrb	r3, [r3, #0]
 8018c5e:	2b3a      	cmp	r3, #58	; 0x3a
 8018c60:	d11c      	bne.n	8018c9c <get_ldnumber+0x76>
			tp = *path;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	1c5a      	adds	r2, r3, #1
 8018c6c:	60fa      	str	r2, [r7, #12]
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	3b30      	subs	r3, #48	; 0x30
 8018c72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018c74:	68bb      	ldr	r3, [r7, #8]
 8018c76:	2b09      	cmp	r3, #9
 8018c78:	d80e      	bhi.n	8018c98 <get_ldnumber+0x72>
 8018c7a:	68fa      	ldr	r2, [r7, #12]
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d10a      	bne.n	8018c98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d107      	bne.n	8018c98 <get_ldnumber+0x72>
					vol = (int)i;
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018c8c:	697b      	ldr	r3, [r7, #20]
 8018c8e:	3301      	adds	r3, #1
 8018c90:	617b      	str	r3, [r7, #20]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	697a      	ldr	r2, [r7, #20]
 8018c96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018c98:	693b      	ldr	r3, [r7, #16]
 8018c9a:	e002      	b.n	8018ca2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018ca0:	693b      	ldr	r3, [r7, #16]
}
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	371c      	adds	r7, #28
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cac:	4770      	bx	lr
	...

08018cb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b082      	sub	sp, #8
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	2200      	movs	r2, #0
 8018cbe:	70da      	strb	r2, [r3, #3]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8018cc6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018cc8:	6839      	ldr	r1, [r7, #0]
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f7fe fc1e 	bl	801750c <move_window>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d001      	beq.n	8018cda <check_fs+0x2a>
 8018cd6:	2304      	movs	r3, #4
 8018cd8:	e038      	b.n	8018d4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	3334      	adds	r3, #52	; 0x34
 8018cde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7fe f962 	bl	8016fac <ld_word>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	461a      	mov	r2, r3
 8018cec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d001      	beq.n	8018cf8 <check_fs+0x48>
 8018cf4:	2303      	movs	r3, #3
 8018cf6:	e029      	b.n	8018d4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018cfe:	2be9      	cmp	r3, #233	; 0xe9
 8018d00:	d009      	beq.n	8018d16 <check_fs+0x66>
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018d08:	2beb      	cmp	r3, #235	; 0xeb
 8018d0a:	d11e      	bne.n	8018d4a <check_fs+0x9a>
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8018d12:	2b90      	cmp	r3, #144	; 0x90
 8018d14:	d119      	bne.n	8018d4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	3334      	adds	r3, #52	; 0x34
 8018d1a:	3336      	adds	r3, #54	; 0x36
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f7fe f95d 	bl	8016fdc <ld_dword>
 8018d22:	4603      	mov	r3, r0
 8018d24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018d28:	4a0a      	ldr	r2, [pc, #40]	; (8018d54 <check_fs+0xa4>)
 8018d2a:	4293      	cmp	r3, r2
 8018d2c:	d101      	bne.n	8018d32 <check_fs+0x82>
 8018d2e:	2300      	movs	r3, #0
 8018d30:	e00c      	b.n	8018d4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	3334      	adds	r3, #52	; 0x34
 8018d36:	3352      	adds	r3, #82	; 0x52
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7fe f94f 	bl	8016fdc <ld_dword>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	4a05      	ldr	r2, [pc, #20]	; (8018d58 <check_fs+0xa8>)
 8018d42:	4293      	cmp	r3, r2
 8018d44:	d101      	bne.n	8018d4a <check_fs+0x9a>
 8018d46:	2300      	movs	r3, #0
 8018d48:	e000      	b.n	8018d4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018d4a:	2302      	movs	r3, #2
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3708      	adds	r7, #8
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}
 8018d54:	00544146 	.word	0x00544146
 8018d58:	33544146 	.word	0x33544146

08018d5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b096      	sub	sp, #88	; 0x58
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	60f8      	str	r0, [r7, #12]
 8018d64:	60b9      	str	r1, [r7, #8]
 8018d66:	4613      	mov	r3, r2
 8018d68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018d6a:	68bb      	ldr	r3, [r7, #8]
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018d70:	68f8      	ldr	r0, [r7, #12]
 8018d72:	f7ff ff58 	bl	8018c26 <get_ldnumber>
 8018d76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	da01      	bge.n	8018d82 <find_volume+0x26>
 8018d7e:	230b      	movs	r3, #11
 8018d80:	e230      	b.n	80191e4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018d82:	4aa1      	ldr	r2, [pc, #644]	; (8019008 <find_volume+0x2ac>)
 8018d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d101      	bne.n	8018d96 <find_volume+0x3a>
 8018d92:	230c      	movs	r3, #12
 8018d94:	e226      	b.n	80191e4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018d9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018d9c:	79fb      	ldrb	r3, [r7, #7]
 8018d9e:	f023 0301 	bic.w	r3, r3, #1
 8018da2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d01a      	beq.n	8018de2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8018dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dae:	785b      	ldrb	r3, [r3, #1]
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7fe f85d 	bl	8016e70 <disk_status>
 8018db6:	4603      	mov	r3, r0
 8018db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018dc0:	f003 0301 	and.w	r3, r3, #1
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d10c      	bne.n	8018de2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018dc8:	79fb      	ldrb	r3, [r7, #7]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d007      	beq.n	8018dde <find_volume+0x82>
 8018dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018dd2:	f003 0304 	and.w	r3, r3, #4
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d001      	beq.n	8018dde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018dda:	230a      	movs	r3, #10
 8018ddc:	e202      	b.n	80191e4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8018dde:	2300      	movs	r3, #0
 8018de0:	e200      	b.n	80191e4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de4:	2200      	movs	r2, #0
 8018de6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dea:	b2da      	uxtb	r2, r3
 8018dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df2:	785b      	ldrb	r3, [r3, #1]
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7fe f855 	bl	8016ea4 <disk_initialize>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e04:	f003 0301 	and.w	r3, r3, #1
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d001      	beq.n	8018e10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018e0c:	2303      	movs	r3, #3
 8018e0e:	e1e9      	b.n	80191e4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018e10:	79fb      	ldrb	r3, [r7, #7]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d007      	beq.n	8018e26 <find_volume+0xca>
 8018e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e1a:	f003 0304 	and.w	r3, r3, #4
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d001      	beq.n	8018e26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018e22:	230a      	movs	r3, #10
 8018e24:	e1de      	b.n	80191e4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8018e26:	2300      	movs	r3, #0
 8018e28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018e2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018e2e:	f7ff ff3f 	bl	8018cb0 <check_fs>
 8018e32:	4603      	mov	r3, r0
 8018e34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018e3c:	2b02      	cmp	r3, #2
 8018e3e:	d149      	bne.n	8018ed4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018e40:	2300      	movs	r3, #0
 8018e42:	643b      	str	r3, [r7, #64]	; 0x40
 8018e44:	e01e      	b.n	8018e84 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e4e:	011b      	lsls	r3, r3, #4
 8018e50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018e54:	4413      	add	r3, r2
 8018e56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e5a:	3304      	adds	r3, #4
 8018e5c:	781b      	ldrb	r3, [r3, #0]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d006      	beq.n	8018e70 <find_volume+0x114>
 8018e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e64:	3308      	adds	r3, #8
 8018e66:	4618      	mov	r0, r3
 8018e68:	f7fe f8b8 	bl	8016fdc <ld_dword>
 8018e6c:	4602      	mov	r2, r0
 8018e6e:	e000      	b.n	8018e72 <find_volume+0x116>
 8018e70:	2200      	movs	r2, #0
 8018e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e74:	009b      	lsls	r3, r3, #2
 8018e76:	3358      	adds	r3, #88	; 0x58
 8018e78:	443b      	add	r3, r7
 8018e7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e80:	3301      	adds	r3, #1
 8018e82:	643b      	str	r3, [r7, #64]	; 0x40
 8018e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e86:	2b03      	cmp	r3, #3
 8018e88:	d9dd      	bls.n	8018e46 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d002      	beq.n	8018e9a <find_volume+0x13e>
 8018e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e96:	3b01      	subs	r3, #1
 8018e98:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e9c:	009b      	lsls	r3, r3, #2
 8018e9e:	3358      	adds	r3, #88	; 0x58
 8018ea0:	443b      	add	r3, r7
 8018ea2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018ea6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d005      	beq.n	8018eba <find_volume+0x15e>
 8018eae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018eb2:	f7ff fefd 	bl	8018cb0 <check_fs>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	e000      	b.n	8018ebc <find_volume+0x160>
 8018eba:	2303      	movs	r3, #3
 8018ebc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ec4:	2b01      	cmp	r3, #1
 8018ec6:	d905      	bls.n	8018ed4 <find_volume+0x178>
 8018ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018eca:	3301      	adds	r3, #1
 8018ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8018ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ed0:	2b03      	cmp	r3, #3
 8018ed2:	d9e2      	bls.n	8018e9a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ed8:	2b04      	cmp	r3, #4
 8018eda:	d101      	bne.n	8018ee0 <find_volume+0x184>
 8018edc:	2301      	movs	r3, #1
 8018ede:	e181      	b.n	80191e4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ee4:	2b01      	cmp	r3, #1
 8018ee6:	d901      	bls.n	8018eec <find_volume+0x190>
 8018ee8:	230d      	movs	r3, #13
 8018eea:	e17b      	b.n	80191e4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eee:	3334      	adds	r3, #52	; 0x34
 8018ef0:	330b      	adds	r3, #11
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f7fe f85a 	bl	8016fac <ld_word>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018efe:	d001      	beq.n	8018f04 <find_volume+0x1a8>
 8018f00:	230d      	movs	r3, #13
 8018f02:	e16f      	b.n	80191e4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f06:	3334      	adds	r3, #52	; 0x34
 8018f08:	3316      	adds	r3, #22
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7fe f84e 	bl	8016fac <ld_word>
 8018f10:	4603      	mov	r3, r0
 8018f12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d106      	bne.n	8018f28 <find_volume+0x1cc>
 8018f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f1c:	3334      	adds	r3, #52	; 0x34
 8018f1e:	3324      	adds	r3, #36	; 0x24
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7fe f85b 	bl	8016fdc <ld_dword>
 8018f26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018f2c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f30:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8018f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f3a:	789b      	ldrb	r3, [r3, #2]
 8018f3c:	2b01      	cmp	r3, #1
 8018f3e:	d005      	beq.n	8018f4c <find_volume+0x1f0>
 8018f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f42:	789b      	ldrb	r3, [r3, #2]
 8018f44:	2b02      	cmp	r3, #2
 8018f46:	d001      	beq.n	8018f4c <find_volume+0x1f0>
 8018f48:	230d      	movs	r3, #13
 8018f4a:	e14b      	b.n	80191e4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f4e:	789b      	ldrb	r3, [r3, #2]
 8018f50:	461a      	mov	r2, r3
 8018f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f54:	fb02 f303 	mul.w	r3, r2, r3
 8018f58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018f60:	b29a      	uxth	r2, r3
 8018f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f68:	895b      	ldrh	r3, [r3, #10]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d008      	beq.n	8018f80 <find_volume+0x224>
 8018f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f70:	895b      	ldrh	r3, [r3, #10]
 8018f72:	461a      	mov	r2, r3
 8018f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f76:	895b      	ldrh	r3, [r3, #10]
 8018f78:	3b01      	subs	r3, #1
 8018f7a:	4013      	ands	r3, r2
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d001      	beq.n	8018f84 <find_volume+0x228>
 8018f80:	230d      	movs	r3, #13
 8018f82:	e12f      	b.n	80191e4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f86:	3334      	adds	r3, #52	; 0x34
 8018f88:	3311      	adds	r3, #17
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7fe f80e 	bl	8016fac <ld_word>
 8018f90:	4603      	mov	r3, r0
 8018f92:	461a      	mov	r2, r3
 8018f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f9a:	891b      	ldrh	r3, [r3, #8]
 8018f9c:	f003 030f 	and.w	r3, r3, #15
 8018fa0:	b29b      	uxth	r3, r3
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d001      	beq.n	8018faa <find_volume+0x24e>
 8018fa6:	230d      	movs	r3, #13
 8018fa8:	e11c      	b.n	80191e4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fac:	3334      	adds	r3, #52	; 0x34
 8018fae:	3313      	adds	r3, #19
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	f7fd fffb 	bl	8016fac <ld_word>
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d106      	bne.n	8018fce <find_volume+0x272>
 8018fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fc2:	3334      	adds	r3, #52	; 0x34
 8018fc4:	3320      	adds	r3, #32
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7fe f808 	bl	8016fdc <ld_dword>
 8018fcc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8018fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fd0:	3334      	adds	r3, #52	; 0x34
 8018fd2:	330e      	adds	r3, #14
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f7fd ffe9 	bl	8016fac <ld_word>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8018fde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d101      	bne.n	8018fe8 <find_volume+0x28c>
 8018fe4:	230d      	movs	r3, #13
 8018fe6:	e0fd      	b.n	80191e4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018fe8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018fec:	4413      	add	r3, r2
 8018fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ff0:	8912      	ldrh	r2, [r2, #8]
 8018ff2:	0912      	lsrs	r2, r2, #4
 8018ff4:	b292      	uxth	r2, r2
 8018ff6:	4413      	add	r3, r2
 8018ff8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d204      	bcs.n	801900c <find_volume+0x2b0>
 8019002:	230d      	movs	r3, #13
 8019004:	e0ee      	b.n	80191e4 <find_volume+0x488>
 8019006:	bf00      	nop
 8019008:	20001a8c 	.word	0x20001a8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801900c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019010:	1ad3      	subs	r3, r2, r3
 8019012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019014:	8952      	ldrh	r2, [r2, #10]
 8019016:	fbb3 f3f2 	udiv	r3, r3, r2
 801901a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801901e:	2b00      	cmp	r3, #0
 8019020:	d101      	bne.n	8019026 <find_volume+0x2ca>
 8019022:	230d      	movs	r3, #13
 8019024:	e0de      	b.n	80191e4 <find_volume+0x488>
		fmt = FS_FAT32;
 8019026:	2303      	movs	r3, #3
 8019028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8019032:	4293      	cmp	r3, r2
 8019034:	d802      	bhi.n	801903c <find_volume+0x2e0>
 8019036:	2302      	movs	r3, #2
 8019038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801903e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8019042:	4293      	cmp	r3, r2
 8019044:	d802      	bhi.n	801904c <find_volume+0x2f0>
 8019046:	2301      	movs	r3, #1
 8019048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801904e:	1c9a      	adds	r2, r3, #2
 8019050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019052:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8019054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019058:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801905a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801905c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801905e:	441a      	add	r2, r3
 8019060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019062:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8019064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019068:	441a      	add	r2, r3
 801906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801906c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801906e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019072:	2b03      	cmp	r3, #3
 8019074:	d11e      	bne.n	80190b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019078:	3334      	adds	r3, #52	; 0x34
 801907a:	332a      	adds	r3, #42	; 0x2a
 801907c:	4618      	mov	r0, r3
 801907e:	f7fd ff95 	bl	8016fac <ld_word>
 8019082:	4603      	mov	r3, r0
 8019084:	2b00      	cmp	r3, #0
 8019086:	d001      	beq.n	801908c <find_volume+0x330>
 8019088:	230d      	movs	r3, #13
 801908a:	e0ab      	b.n	80191e4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801908e:	891b      	ldrh	r3, [r3, #8]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d001      	beq.n	8019098 <find_volume+0x33c>
 8019094:	230d      	movs	r3, #13
 8019096:	e0a5      	b.n	80191e4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801909a:	3334      	adds	r3, #52	; 0x34
 801909c:	332c      	adds	r3, #44	; 0x2c
 801909e:	4618      	mov	r0, r3
 80190a0:	f7fd ff9c 	bl	8016fdc <ld_dword>
 80190a4:	4602      	mov	r2, r0
 80190a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80190aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190ac:	699b      	ldr	r3, [r3, #24]
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	647b      	str	r3, [r7, #68]	; 0x44
 80190b2:	e01f      	b.n	80190f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80190b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190b6:	891b      	ldrh	r3, [r3, #8]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d101      	bne.n	80190c0 <find_volume+0x364>
 80190bc:	230d      	movs	r3, #13
 80190be:	e091      	b.n	80191e4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80190c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80190c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190c6:	441a      	add	r2, r3
 80190c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80190cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80190d0:	2b02      	cmp	r3, #2
 80190d2:	d103      	bne.n	80190dc <find_volume+0x380>
 80190d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d6:	699b      	ldr	r3, [r3, #24]
 80190d8:	005b      	lsls	r3, r3, #1
 80190da:	e00a      	b.n	80190f2 <find_volume+0x396>
 80190dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190de:	699a      	ldr	r2, [r3, #24]
 80190e0:	4613      	mov	r3, r2
 80190e2:	005b      	lsls	r3, r3, #1
 80190e4:	4413      	add	r3, r2
 80190e6:	085a      	lsrs	r2, r3, #1
 80190e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190ea:	699b      	ldr	r3, [r3, #24]
 80190ec:	f003 0301 	and.w	r3, r3, #1
 80190f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80190f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80190f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190f6:	69da      	ldr	r2, [r3, #28]
 80190f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80190fe:	0a5b      	lsrs	r3, r3, #9
 8019100:	429a      	cmp	r2, r3
 8019102:	d201      	bcs.n	8019108 <find_volume+0x3ac>
 8019104:	230d      	movs	r3, #13
 8019106:	e06d      	b.n	80191e4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801910a:	f04f 32ff 	mov.w	r2, #4294967295
 801910e:	615a      	str	r2, [r3, #20]
 8019110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019112:	695a      	ldr	r2, [r3, #20]
 8019114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019116:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8019118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801911a:	2280      	movs	r2, #128	; 0x80
 801911c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801911e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019122:	2b03      	cmp	r3, #3
 8019124:	d149      	bne.n	80191ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019128:	3334      	adds	r3, #52	; 0x34
 801912a:	3330      	adds	r3, #48	; 0x30
 801912c:	4618      	mov	r0, r3
 801912e:	f7fd ff3d 	bl	8016fac <ld_word>
 8019132:	4603      	mov	r3, r0
 8019134:	2b01      	cmp	r3, #1
 8019136:	d140      	bne.n	80191ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801913a:	3301      	adds	r3, #1
 801913c:	4619      	mov	r1, r3
 801913e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019140:	f7fe f9e4 	bl	801750c <move_window>
 8019144:	4603      	mov	r3, r0
 8019146:	2b00      	cmp	r3, #0
 8019148:	d137      	bne.n	80191ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801914c:	2200      	movs	r2, #0
 801914e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019152:	3334      	adds	r3, #52	; 0x34
 8019154:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019158:	4618      	mov	r0, r3
 801915a:	f7fd ff27 	bl	8016fac <ld_word>
 801915e:	4603      	mov	r3, r0
 8019160:	461a      	mov	r2, r3
 8019162:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019166:	429a      	cmp	r2, r3
 8019168:	d127      	bne.n	80191ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801916c:	3334      	adds	r3, #52	; 0x34
 801916e:	4618      	mov	r0, r3
 8019170:	f7fd ff34 	bl	8016fdc <ld_dword>
 8019174:	4603      	mov	r3, r0
 8019176:	4a1d      	ldr	r2, [pc, #116]	; (80191ec <find_volume+0x490>)
 8019178:	4293      	cmp	r3, r2
 801917a:	d11e      	bne.n	80191ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801917e:	3334      	adds	r3, #52	; 0x34
 8019180:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019184:	4618      	mov	r0, r3
 8019186:	f7fd ff29 	bl	8016fdc <ld_dword>
 801918a:	4603      	mov	r3, r0
 801918c:	4a18      	ldr	r2, [pc, #96]	; (80191f0 <find_volume+0x494>)
 801918e:	4293      	cmp	r3, r2
 8019190:	d113      	bne.n	80191ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019194:	3334      	adds	r3, #52	; 0x34
 8019196:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801919a:	4618      	mov	r0, r3
 801919c:	f7fd ff1e 	bl	8016fdc <ld_dword>
 80191a0:	4602      	mov	r2, r0
 80191a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80191a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a8:	3334      	adds	r3, #52	; 0x34
 80191aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7fd ff14 	bl	8016fdc <ld_dword>
 80191b4:	4602      	mov	r2, r0
 80191b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80191ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80191c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80191c2:	4b0c      	ldr	r3, [pc, #48]	; (80191f4 <find_volume+0x498>)
 80191c4:	881b      	ldrh	r3, [r3, #0]
 80191c6:	3301      	adds	r3, #1
 80191c8:	b29a      	uxth	r2, r3
 80191ca:	4b0a      	ldr	r3, [pc, #40]	; (80191f4 <find_volume+0x498>)
 80191cc:	801a      	strh	r2, [r3, #0]
 80191ce:	4b09      	ldr	r3, [pc, #36]	; (80191f4 <find_volume+0x498>)
 80191d0:	881a      	ldrh	r2, [r3, #0]
 80191d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80191d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d8:	4a07      	ldr	r2, [pc, #28]	; (80191f8 <find_volume+0x49c>)
 80191da:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80191dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80191de:	f7fe f92d 	bl	801743c <clear_lock>
#endif
	return FR_OK;
 80191e2:	2300      	movs	r3, #0
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3758      	adds	r7, #88	; 0x58
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	41615252 	.word	0x41615252
 80191f0:	61417272 	.word	0x61417272
 80191f4:	20001a90 	.word	0x20001a90
 80191f8:	20001ab4 	.word	0x20001ab4

080191fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b084      	sub	sp, #16
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019206:	2309      	movs	r3, #9
 8019208:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d01c      	beq.n	801924a <validate+0x4e>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d018      	beq.n	801924a <validate+0x4e>
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	781b      	ldrb	r3, [r3, #0]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d013      	beq.n	801924a <validate+0x4e>
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	889a      	ldrh	r2, [r3, #4]
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	88db      	ldrh	r3, [r3, #6]
 801922c:	429a      	cmp	r2, r3
 801922e:	d10c      	bne.n	801924a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	785b      	ldrb	r3, [r3, #1]
 8019236:	4618      	mov	r0, r3
 8019238:	f7fd fe1a 	bl	8016e70 <disk_status>
 801923c:	4603      	mov	r3, r0
 801923e:	f003 0301 	and.w	r3, r3, #1
 8019242:	2b00      	cmp	r3, #0
 8019244:	d101      	bne.n	801924a <validate+0x4e>
			res = FR_OK;
 8019246:	2300      	movs	r3, #0
 8019248:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801924a:	7bfb      	ldrb	r3, [r7, #15]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d102      	bne.n	8019256 <validate+0x5a>
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	e000      	b.n	8019258 <validate+0x5c>
 8019256:	2300      	movs	r3, #0
 8019258:	683a      	ldr	r2, [r7, #0]
 801925a:	6013      	str	r3, [r2, #0]
	return res;
 801925c:	7bfb      	ldrb	r3, [r7, #15]
}
 801925e:	4618      	mov	r0, r3
 8019260:	3710      	adds	r7, #16
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
	...

08019268 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b088      	sub	sp, #32
 801926c:	af00      	add	r7, sp, #0
 801926e:	60f8      	str	r0, [r7, #12]
 8019270:	60b9      	str	r1, [r7, #8]
 8019272:	4613      	mov	r3, r2
 8019274:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801927a:	f107 0310 	add.w	r3, r7, #16
 801927e:	4618      	mov	r0, r3
 8019280:	f7ff fcd1 	bl	8018c26 <get_ldnumber>
 8019284:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019286:	69fb      	ldr	r3, [r7, #28]
 8019288:	2b00      	cmp	r3, #0
 801928a:	da01      	bge.n	8019290 <f_mount+0x28>
 801928c:	230b      	movs	r3, #11
 801928e:	e02b      	b.n	80192e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019290:	4a17      	ldr	r2, [pc, #92]	; (80192f0 <f_mount+0x88>)
 8019292:	69fb      	ldr	r3, [r7, #28]
 8019294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019298:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801929a:	69bb      	ldr	r3, [r7, #24]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d005      	beq.n	80192ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80192a0:	69b8      	ldr	r0, [r7, #24]
 80192a2:	f7fe f8cb 	bl	801743c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80192a6:	69bb      	ldr	r3, [r7, #24]
 80192a8:	2200      	movs	r2, #0
 80192aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d002      	beq.n	80192b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	2200      	movs	r2, #0
 80192b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80192b8:	68fa      	ldr	r2, [r7, #12]
 80192ba:	490d      	ldr	r1, [pc, #52]	; (80192f0 <f_mount+0x88>)
 80192bc:	69fb      	ldr	r3, [r7, #28]
 80192be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d002      	beq.n	80192ce <f_mount+0x66>
 80192c8:	79fb      	ldrb	r3, [r7, #7]
 80192ca:	2b01      	cmp	r3, #1
 80192cc:	d001      	beq.n	80192d2 <f_mount+0x6a>
 80192ce:	2300      	movs	r3, #0
 80192d0:	e00a      	b.n	80192e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80192d2:	f107 010c 	add.w	r1, r7, #12
 80192d6:	f107 0308 	add.w	r3, r7, #8
 80192da:	2200      	movs	r2, #0
 80192dc:	4618      	mov	r0, r3
 80192de:	f7ff fd3d 	bl	8018d5c <find_volume>
 80192e2:	4603      	mov	r3, r0
 80192e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80192e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80192e8:	4618      	mov	r0, r3
 80192ea:	3720      	adds	r7, #32
 80192ec:	46bd      	mov	sp, r7
 80192ee:	bd80      	pop	{r7, pc}
 80192f0:	20001a8c 	.word	0x20001a8c

080192f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b09a      	sub	sp, #104	; 0x68
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	4613      	mov	r3, r2
 8019300:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d101      	bne.n	801930c <f_open+0x18>
 8019308:	2309      	movs	r3, #9
 801930a:	e1ad      	b.n	8019668 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801930c:	79fb      	ldrb	r3, [r7, #7]
 801930e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019312:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019314:	79fa      	ldrb	r2, [r7, #7]
 8019316:	f107 0114 	add.w	r1, r7, #20
 801931a:	f107 0308 	add.w	r3, r7, #8
 801931e:	4618      	mov	r0, r3
 8019320:	f7ff fd1c 	bl	8018d5c <find_volume>
 8019324:	4603      	mov	r3, r0
 8019326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801932a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801932e:	2b00      	cmp	r3, #0
 8019330:	f040 8191 	bne.w	8019656 <f_open+0x362>
		dj.obj.fs = fs;
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019338:	68ba      	ldr	r2, [r7, #8]
 801933a:	f107 0318 	add.w	r3, r7, #24
 801933e:	4611      	mov	r1, r2
 8019340:	4618      	mov	r0, r3
 8019342:	f7ff fbff 	bl	8018b44 <follow_path>
 8019346:	4603      	mov	r3, r0
 8019348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801934c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019350:	2b00      	cmp	r3, #0
 8019352:	d11a      	bne.n	801938a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019358:	b25b      	sxtb	r3, r3
 801935a:	2b00      	cmp	r3, #0
 801935c:	da03      	bge.n	8019366 <f_open+0x72>
				res = FR_INVALID_NAME;
 801935e:	2306      	movs	r3, #6
 8019360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019364:	e011      	b.n	801938a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019366:	79fb      	ldrb	r3, [r7, #7]
 8019368:	f023 0301 	bic.w	r3, r3, #1
 801936c:	2b00      	cmp	r3, #0
 801936e:	bf14      	ite	ne
 8019370:	2301      	movne	r3, #1
 8019372:	2300      	moveq	r3, #0
 8019374:	b2db      	uxtb	r3, r3
 8019376:	461a      	mov	r2, r3
 8019378:	f107 0318 	add.w	r3, r7, #24
 801937c:	4611      	mov	r1, r2
 801937e:	4618      	mov	r0, r3
 8019380:	f7fd ff14 	bl	80171ac <chk_lock>
 8019384:	4603      	mov	r3, r0
 8019386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801938a:	79fb      	ldrb	r3, [r7, #7]
 801938c:	f003 031c 	and.w	r3, r3, #28
 8019390:	2b00      	cmp	r3, #0
 8019392:	d07f      	beq.n	8019494 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019398:	2b00      	cmp	r3, #0
 801939a:	d017      	beq.n	80193cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801939c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80193a0:	2b04      	cmp	r3, #4
 80193a2:	d10e      	bne.n	80193c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80193a4:	f7fd ff5e 	bl	8017264 <enq_lock>
 80193a8:	4603      	mov	r3, r0
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d006      	beq.n	80193bc <f_open+0xc8>
 80193ae:	f107 0318 	add.w	r3, r7, #24
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ff f838 	bl	8018428 <dir_register>
 80193b8:	4603      	mov	r3, r0
 80193ba:	e000      	b.n	80193be <f_open+0xca>
 80193bc:	2312      	movs	r3, #18
 80193be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80193c2:	79fb      	ldrb	r3, [r7, #7]
 80193c4:	f043 0308 	orr.w	r3, r3, #8
 80193c8:	71fb      	strb	r3, [r7, #7]
 80193ca:	e010      	b.n	80193ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80193cc:	7fbb      	ldrb	r3, [r7, #30]
 80193ce:	f003 0311 	and.w	r3, r3, #17
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d003      	beq.n	80193de <f_open+0xea>
					res = FR_DENIED;
 80193d6:	2307      	movs	r3, #7
 80193d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80193dc:	e007      	b.n	80193ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80193de:	79fb      	ldrb	r3, [r7, #7]
 80193e0:	f003 0304 	and.w	r3, r3, #4
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d002      	beq.n	80193ee <f_open+0xfa>
 80193e8:	2308      	movs	r3, #8
 80193ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80193ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d168      	bne.n	80194c8 <f_open+0x1d4>
 80193f6:	79fb      	ldrb	r3, [r7, #7]
 80193f8:	f003 0308 	and.w	r3, r3, #8
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d063      	beq.n	80194c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019400:	f7f8 fce8 	bl	8011dd4 <get_fattime>
 8019404:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019408:	330e      	adds	r3, #14
 801940a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801940c:	4618      	mov	r0, r3
 801940e:	f7fd fe23 	bl	8017058 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019414:	3316      	adds	r3, #22
 8019416:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019418:	4618      	mov	r0, r3
 801941a:	f7fd fe1d 	bl	8017058 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019420:	330b      	adds	r3, #11
 8019422:	2220      	movs	r2, #32
 8019424:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801942a:	4611      	mov	r1, r2
 801942c:	4618      	mov	r0, r3
 801942e:	f7fe fd74 	bl	8017f1a <ld_clust>
 8019432:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019434:	697b      	ldr	r3, [r7, #20]
 8019436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019438:	2200      	movs	r2, #0
 801943a:	4618      	mov	r0, r3
 801943c:	f7fe fd8c 	bl	8017f58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019442:	331c      	adds	r3, #28
 8019444:	2100      	movs	r1, #0
 8019446:	4618      	mov	r0, r3
 8019448:	f7fd fe06 	bl	8017058 <st_dword>
					fs->wflag = 1;
 801944c:	697b      	ldr	r3, [r7, #20]
 801944e:	2201      	movs	r2, #1
 8019450:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019454:	2b00      	cmp	r3, #0
 8019456:	d037      	beq.n	80194c8 <f_open+0x1d4>
						dw = fs->winsect;
 8019458:	697b      	ldr	r3, [r7, #20]
 801945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801945c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801945e:	f107 0318 	add.w	r3, r7, #24
 8019462:	2200      	movs	r2, #0
 8019464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019466:	4618      	mov	r0, r3
 8019468:	f7fe fa9f 	bl	80179aa <remove_chain>
 801946c:	4603      	mov	r3, r0
 801946e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019476:	2b00      	cmp	r3, #0
 8019478:	d126      	bne.n	80194c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801947e:	4618      	mov	r0, r3
 8019480:	f7fe f844 	bl	801750c <move_window>
 8019484:	4603      	mov	r3, r0
 8019486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801948e:	3a01      	subs	r2, #1
 8019490:	611a      	str	r2, [r3, #16]
 8019492:	e019      	b.n	80194c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019498:	2b00      	cmp	r3, #0
 801949a:	d115      	bne.n	80194c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801949c:	7fbb      	ldrb	r3, [r7, #30]
 801949e:	f003 0310 	and.w	r3, r3, #16
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d003      	beq.n	80194ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80194a6:	2304      	movs	r3, #4
 80194a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80194ac:	e00c      	b.n	80194c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80194ae:	79fb      	ldrb	r3, [r7, #7]
 80194b0:	f003 0302 	and.w	r3, r3, #2
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d007      	beq.n	80194c8 <f_open+0x1d4>
 80194b8:	7fbb      	ldrb	r3, [r7, #30]
 80194ba:	f003 0301 	and.w	r3, r3, #1
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d002      	beq.n	80194c8 <f_open+0x1d4>
						res = FR_DENIED;
 80194c2:	2307      	movs	r3, #7
 80194c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80194c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d128      	bne.n	8019522 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80194d0:	79fb      	ldrb	r3, [r7, #7]
 80194d2:	f003 0308 	and.w	r3, r3, #8
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d003      	beq.n	80194e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80194da:	79fb      	ldrb	r3, [r7, #7]
 80194dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80194ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80194f0:	79fb      	ldrb	r3, [r7, #7]
 80194f2:	f023 0301 	bic.w	r3, r3, #1
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	bf14      	ite	ne
 80194fa:	2301      	movne	r3, #1
 80194fc:	2300      	moveq	r3, #0
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	461a      	mov	r2, r3
 8019502:	f107 0318 	add.w	r3, r7, #24
 8019506:	4611      	mov	r1, r2
 8019508:	4618      	mov	r0, r3
 801950a:	f7fd fecd 	bl	80172a8 <inc_lock>
 801950e:	4602      	mov	r2, r0
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	691b      	ldr	r3, [r3, #16]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d102      	bne.n	8019522 <f_open+0x22e>
 801951c:	2302      	movs	r3, #2
 801951e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019526:	2b00      	cmp	r3, #0
 8019528:	f040 8095 	bne.w	8019656 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019530:	4611      	mov	r1, r2
 8019532:	4618      	mov	r0, r3
 8019534:	f7fe fcf1 	bl	8017f1a <ld_clust>
 8019538:	4602      	mov	r2, r0
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019540:	331c      	adds	r3, #28
 8019542:	4618      	mov	r0, r3
 8019544:	f7fd fd4a 	bl	8016fdc <ld_dword>
 8019548:	4602      	mov	r2, r0
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	2200      	movs	r2, #0
 8019552:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019554:	697a      	ldr	r2, [r7, #20]
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	88da      	ldrh	r2, [r3, #6]
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	79fa      	ldrb	r2, [r7, #7]
 8019566:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	2200      	movs	r2, #0
 801956c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	2200      	movs	r2, #0
 8019572:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	2200      	movs	r2, #0
 8019578:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	3330      	adds	r3, #48	; 0x30
 801957e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019582:	2100      	movs	r1, #0
 8019584:	4618      	mov	r0, r3
 8019586:	f7fd fdb4 	bl	80170f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801958a:	79fb      	ldrb	r3, [r7, #7]
 801958c:	f003 0320 	and.w	r3, r3, #32
 8019590:	2b00      	cmp	r3, #0
 8019592:	d060      	beq.n	8019656 <f_open+0x362>
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	68db      	ldr	r3, [r3, #12]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d05c      	beq.n	8019656 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	68da      	ldr	r2, [r3, #12]
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	895b      	ldrh	r3, [r3, #10]
 80195a8:	025b      	lsls	r3, r3, #9
 80195aa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	689b      	ldr	r3, [r3, #8]
 80195b0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	68db      	ldr	r3, [r3, #12]
 80195b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80195b8:	e016      	b.n	80195e8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80195be:	4618      	mov	r0, r3
 80195c0:	f7fe f85f 	bl	8017682 <get_fat>
 80195c4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80195c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80195c8:	2b01      	cmp	r3, #1
 80195ca:	d802      	bhi.n	80195d2 <f_open+0x2de>
 80195cc:	2302      	movs	r3, #2
 80195ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80195d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80195d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195d8:	d102      	bne.n	80195e0 <f_open+0x2ec>
 80195da:	2301      	movs	r3, #1
 80195dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80195e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80195e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195e4:	1ad3      	subs	r3, r2, r3
 80195e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80195e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d103      	bne.n	80195f8 <f_open+0x304>
 80195f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80195f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195f4:	429a      	cmp	r2, r3
 80195f6:	d8e0      	bhi.n	80195ba <f_open+0x2c6>
				}
				fp->clust = clst;
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80195fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80195fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019602:	2b00      	cmp	r3, #0
 8019604:	d127      	bne.n	8019656 <f_open+0x362>
 8019606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801960c:	2b00      	cmp	r3, #0
 801960e:	d022      	beq.n	8019656 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019610:	697b      	ldr	r3, [r7, #20]
 8019612:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019614:	4618      	mov	r0, r3
 8019616:	f7fe f815 	bl	8017644 <clust2sect>
 801961a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801961c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801961e:	2b00      	cmp	r3, #0
 8019620:	d103      	bne.n	801962a <f_open+0x336>
						res = FR_INT_ERR;
 8019622:	2302      	movs	r3, #2
 8019624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019628:	e015      	b.n	8019656 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801962a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801962c:	0a5a      	lsrs	r2, r3, #9
 801962e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019630:	441a      	add	r2, r3
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	7858      	ldrb	r0, [r3, #1]
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	6a1a      	ldr	r2, [r3, #32]
 8019644:	2301      	movs	r3, #1
 8019646:	f7fd fc53 	bl	8016ef0 <disk_read>
 801964a:	4603      	mov	r3, r0
 801964c:	2b00      	cmp	r3, #0
 801964e:	d002      	beq.n	8019656 <f_open+0x362>
 8019650:	2301      	movs	r3, #1
 8019652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801965a:	2b00      	cmp	r3, #0
 801965c:	d002      	beq.n	8019664 <f_open+0x370>
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	2200      	movs	r2, #0
 8019662:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019668:	4618      	mov	r0, r3
 801966a:	3768      	adds	r7, #104	; 0x68
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b08c      	sub	sp, #48	; 0x30
 8019674:	af00      	add	r7, sp, #0
 8019676:	60f8      	str	r0, [r7, #12]
 8019678:	60b9      	str	r1, [r7, #8]
 801967a:	607a      	str	r2, [r7, #4]
 801967c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019682:	683b      	ldr	r3, [r7, #0]
 8019684:	2200      	movs	r2, #0
 8019686:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	f107 0210 	add.w	r2, r7, #16
 801968e:	4611      	mov	r1, r2
 8019690:	4618      	mov	r0, r3
 8019692:	f7ff fdb3 	bl	80191fc <validate>
 8019696:	4603      	mov	r3, r0
 8019698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801969c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d107      	bne.n	80196b4 <f_write+0x44>
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	7d5b      	ldrb	r3, [r3, #21]
 80196a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80196ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d002      	beq.n	80196ba <f_write+0x4a>
 80196b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80196b8:	e14b      	b.n	8019952 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	7d1b      	ldrb	r3, [r3, #20]
 80196be:	f003 0302 	and.w	r3, r3, #2
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d101      	bne.n	80196ca <f_write+0x5a>
 80196c6:	2307      	movs	r3, #7
 80196c8:	e143      	b.n	8019952 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	699a      	ldr	r2, [r3, #24]
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	441a      	add	r2, r3
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	699b      	ldr	r3, [r3, #24]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	f080 812d 	bcs.w	8019936 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	699b      	ldr	r3, [r3, #24]
 80196e0:	43db      	mvns	r3, r3
 80196e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80196e4:	e127      	b.n	8019936 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	699b      	ldr	r3, [r3, #24]
 80196ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	f040 80e3 	bne.w	80198ba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	699b      	ldr	r3, [r3, #24]
 80196f8:	0a5b      	lsrs	r3, r3, #9
 80196fa:	693a      	ldr	r2, [r7, #16]
 80196fc:	8952      	ldrh	r2, [r2, #10]
 80196fe:	3a01      	subs	r2, #1
 8019700:	4013      	ands	r3, r2
 8019702:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019704:	69bb      	ldr	r3, [r7, #24]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d143      	bne.n	8019792 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	699b      	ldr	r3, [r3, #24]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d10c      	bne.n	801972c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	689b      	ldr	r3, [r3, #8]
 8019716:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801971a:	2b00      	cmp	r3, #0
 801971c:	d11a      	bne.n	8019754 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	2100      	movs	r1, #0
 8019722:	4618      	mov	r0, r3
 8019724:	f7fe f9a6 	bl	8017a74 <create_chain>
 8019728:	62b8      	str	r0, [r7, #40]	; 0x28
 801972a:	e013      	b.n	8019754 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019730:	2b00      	cmp	r3, #0
 8019732:	d007      	beq.n	8019744 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	699b      	ldr	r3, [r3, #24]
 8019738:	4619      	mov	r1, r3
 801973a:	68f8      	ldr	r0, [r7, #12]
 801973c:	f7fe fa32 	bl	8017ba4 <clmt_clust>
 8019740:	62b8      	str	r0, [r7, #40]	; 0x28
 8019742:	e007      	b.n	8019754 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019744:	68fa      	ldr	r2, [r7, #12]
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	69db      	ldr	r3, [r3, #28]
 801974a:	4619      	mov	r1, r3
 801974c:	4610      	mov	r0, r2
 801974e:	f7fe f991 	bl	8017a74 <create_chain>
 8019752:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019756:	2b00      	cmp	r3, #0
 8019758:	f000 80f2 	beq.w	8019940 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801975e:	2b01      	cmp	r3, #1
 8019760:	d104      	bne.n	801976c <f_write+0xfc>
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	2202      	movs	r2, #2
 8019766:	755a      	strb	r2, [r3, #21]
 8019768:	2302      	movs	r3, #2
 801976a:	e0f2      	b.n	8019952 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019772:	d104      	bne.n	801977e <f_write+0x10e>
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	2201      	movs	r2, #1
 8019778:	755a      	strb	r2, [r3, #21]
 801977a:	2301      	movs	r3, #1
 801977c:	e0e9      	b.n	8019952 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019782:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	689b      	ldr	r3, [r3, #8]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d102      	bne.n	8019792 <f_write+0x122>
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019790:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	7d1b      	ldrb	r3, [r3, #20]
 8019796:	b25b      	sxtb	r3, r3
 8019798:	2b00      	cmp	r3, #0
 801979a:	da18      	bge.n	80197ce <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801979c:	693b      	ldr	r3, [r7, #16]
 801979e:	7858      	ldrb	r0, [r3, #1]
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	6a1a      	ldr	r2, [r3, #32]
 80197aa:	2301      	movs	r3, #1
 80197ac:	f7fd fbc0 	bl	8016f30 <disk_write>
 80197b0:	4603      	mov	r3, r0
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d004      	beq.n	80197c0 <f_write+0x150>
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	2201      	movs	r2, #1
 80197ba:	755a      	strb	r2, [r3, #21]
 80197bc:	2301      	movs	r3, #1
 80197be:	e0c8      	b.n	8019952 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	7d1b      	ldrb	r3, [r3, #20]
 80197c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80197c8:	b2da      	uxtb	r2, r3
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80197ce:	693a      	ldr	r2, [r7, #16]
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	69db      	ldr	r3, [r3, #28]
 80197d4:	4619      	mov	r1, r3
 80197d6:	4610      	mov	r0, r2
 80197d8:	f7fd ff34 	bl	8017644 <clust2sect>
 80197dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d104      	bne.n	80197ee <f_write+0x17e>
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	2202      	movs	r2, #2
 80197e8:	755a      	strb	r2, [r3, #21]
 80197ea:	2302      	movs	r3, #2
 80197ec:	e0b1      	b.n	8019952 <f_write+0x2e2>
			sect += csect;
 80197ee:	697a      	ldr	r2, [r7, #20]
 80197f0:	69bb      	ldr	r3, [r7, #24]
 80197f2:	4413      	add	r3, r2
 80197f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	0a5b      	lsrs	r3, r3, #9
 80197fa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80197fc:	6a3b      	ldr	r3, [r7, #32]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d03c      	beq.n	801987c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019802:	69ba      	ldr	r2, [r7, #24]
 8019804:	6a3b      	ldr	r3, [r7, #32]
 8019806:	4413      	add	r3, r2
 8019808:	693a      	ldr	r2, [r7, #16]
 801980a:	8952      	ldrh	r2, [r2, #10]
 801980c:	4293      	cmp	r3, r2
 801980e:	d905      	bls.n	801981c <f_write+0x1ac>
					cc = fs->csize - csect;
 8019810:	693b      	ldr	r3, [r7, #16]
 8019812:	895b      	ldrh	r3, [r3, #10]
 8019814:	461a      	mov	r2, r3
 8019816:	69bb      	ldr	r3, [r7, #24]
 8019818:	1ad3      	subs	r3, r2, r3
 801981a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801981c:	693b      	ldr	r3, [r7, #16]
 801981e:	7858      	ldrb	r0, [r3, #1]
 8019820:	6a3b      	ldr	r3, [r7, #32]
 8019822:	697a      	ldr	r2, [r7, #20]
 8019824:	69f9      	ldr	r1, [r7, #28]
 8019826:	f7fd fb83 	bl	8016f30 <disk_write>
 801982a:	4603      	mov	r3, r0
 801982c:	2b00      	cmp	r3, #0
 801982e:	d004      	beq.n	801983a <f_write+0x1ca>
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	2201      	movs	r2, #1
 8019834:	755a      	strb	r2, [r3, #21]
 8019836:	2301      	movs	r3, #1
 8019838:	e08b      	b.n	8019952 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	6a1a      	ldr	r2, [r3, #32]
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	6a3a      	ldr	r2, [r7, #32]
 8019844:	429a      	cmp	r2, r3
 8019846:	d915      	bls.n	8019874 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	6a1a      	ldr	r2, [r3, #32]
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	1ad3      	subs	r3, r2, r3
 8019856:	025b      	lsls	r3, r3, #9
 8019858:	69fa      	ldr	r2, [r7, #28]
 801985a:	4413      	add	r3, r2
 801985c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019860:	4619      	mov	r1, r3
 8019862:	f7fd fc25 	bl	80170b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	7d1b      	ldrb	r3, [r3, #20]
 801986a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801986e:	b2da      	uxtb	r2, r3
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019874:	6a3b      	ldr	r3, [r7, #32]
 8019876:	025b      	lsls	r3, r3, #9
 8019878:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801987a:	e03f      	b.n	80198fc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	6a1b      	ldr	r3, [r3, #32]
 8019880:	697a      	ldr	r2, [r7, #20]
 8019882:	429a      	cmp	r2, r3
 8019884:	d016      	beq.n	80198b4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	699a      	ldr	r2, [r3, #24]
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801988e:	429a      	cmp	r2, r3
 8019890:	d210      	bcs.n	80198b4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	7858      	ldrb	r0, [r3, #1]
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801989c:	2301      	movs	r3, #1
 801989e:	697a      	ldr	r2, [r7, #20]
 80198a0:	f7fd fb26 	bl	8016ef0 <disk_read>
 80198a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d004      	beq.n	80198b4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	2201      	movs	r2, #1
 80198ae:	755a      	strb	r2, [r3, #21]
 80198b0:	2301      	movs	r3, #1
 80198b2:	e04e      	b.n	8019952 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	697a      	ldr	r2, [r7, #20]
 80198b8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	699b      	ldr	r3, [r3, #24]
 80198be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80198c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80198c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80198c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	429a      	cmp	r2, r3
 80198ce:	d901      	bls.n	80198d4 <f_write+0x264>
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	699b      	ldr	r3, [r3, #24]
 80198de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80198e2:	4413      	add	r3, r2
 80198e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198e6:	69f9      	ldr	r1, [r7, #28]
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7fd fbe1 	bl	80170b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	7d1b      	ldrb	r3, [r3, #20]
 80198f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80198f6:	b2da      	uxtb	r2, r3
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80198fc:	69fa      	ldr	r2, [r7, #28]
 80198fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019900:	4413      	add	r3, r2
 8019902:	61fb      	str	r3, [r7, #28]
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	699a      	ldr	r2, [r3, #24]
 8019908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990a:	441a      	add	r2, r3
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	619a      	str	r2, [r3, #24]
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	68da      	ldr	r2, [r3, #12]
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	699b      	ldr	r3, [r3, #24]
 8019918:	429a      	cmp	r2, r3
 801991a:	bf38      	it	cc
 801991c:	461a      	movcc	r2, r3
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	60da      	str	r2, [r3, #12]
 8019922:	683b      	ldr	r3, [r7, #0]
 8019924:	681a      	ldr	r2, [r3, #0]
 8019926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019928:	441a      	add	r2, r3
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	601a      	str	r2, [r3, #0]
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019932:	1ad3      	subs	r3, r2, r3
 8019934:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2b00      	cmp	r3, #0
 801993a:	f47f aed4 	bne.w	80196e6 <f_write+0x76>
 801993e:	e000      	b.n	8019942 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019940:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	7d1b      	ldrb	r3, [r3, #20]
 8019946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801994a:	b2da      	uxtb	r2, r3
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019950:	2300      	movs	r3, #0
}
 8019952:	4618      	mov	r0, r3
 8019954:	3730      	adds	r7, #48	; 0x30
 8019956:	46bd      	mov	sp, r7
 8019958:	bd80      	pop	{r7, pc}

0801995a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801995a:	b580      	push	{r7, lr}
 801995c:	b086      	sub	sp, #24
 801995e:	af00      	add	r7, sp, #0
 8019960:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	f107 0208 	add.w	r2, r7, #8
 8019968:	4611      	mov	r1, r2
 801996a:	4618      	mov	r0, r3
 801996c:	f7ff fc46 	bl	80191fc <validate>
 8019970:	4603      	mov	r3, r0
 8019972:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019974:	7dfb      	ldrb	r3, [r7, #23]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d168      	bne.n	8019a4c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	7d1b      	ldrb	r3, [r3, #20]
 801997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019982:	2b00      	cmp	r3, #0
 8019984:	d062      	beq.n	8019a4c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	7d1b      	ldrb	r3, [r3, #20]
 801998a:	b25b      	sxtb	r3, r3
 801998c:	2b00      	cmp	r3, #0
 801998e:	da15      	bge.n	80199bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	7858      	ldrb	r0, [r3, #1]
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	6a1a      	ldr	r2, [r3, #32]
 801999e:	2301      	movs	r3, #1
 80199a0:	f7fd fac6 	bl	8016f30 <disk_write>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d001      	beq.n	80199ae <f_sync+0x54>
 80199aa:	2301      	movs	r3, #1
 80199ac:	e04f      	b.n	8019a4e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	7d1b      	ldrb	r3, [r3, #20]
 80199b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80199b6:	b2da      	uxtb	r2, r3
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80199bc:	f7f8 fa0a 	bl	8011dd4 <get_fattime>
 80199c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80199c2:	68ba      	ldr	r2, [r7, #8]
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199c8:	4619      	mov	r1, r3
 80199ca:	4610      	mov	r0, r2
 80199cc:	f7fd fd9e 	bl	801750c <move_window>
 80199d0:	4603      	mov	r3, r0
 80199d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80199d4:	7dfb      	ldrb	r3, [r7, #23]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d138      	bne.n	8019a4c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	330b      	adds	r3, #11
 80199e4:	781a      	ldrb	r2, [r3, #0]
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	330b      	adds	r3, #11
 80199ea:	f042 0220 	orr.w	r2, r2, #32
 80199ee:	b2d2      	uxtb	r2, r2
 80199f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	6818      	ldr	r0, [r3, #0]
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	689b      	ldr	r3, [r3, #8]
 80199fa:	461a      	mov	r2, r3
 80199fc:	68f9      	ldr	r1, [r7, #12]
 80199fe:	f7fe faab 	bl	8017f58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	f103 021c 	add.w	r2, r3, #28
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	4610      	mov	r0, r2
 8019a10:	f7fd fb22 	bl	8017058 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	3316      	adds	r3, #22
 8019a18:	6939      	ldr	r1, [r7, #16]
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f7fd fb1c 	bl	8017058 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	3312      	adds	r3, #18
 8019a24:	2100      	movs	r1, #0
 8019a26:	4618      	mov	r0, r3
 8019a28:	f7fd fafb 	bl	8017022 <st_word>
					fs->wflag = 1;
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	2201      	movs	r2, #1
 8019a30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019a32:	68bb      	ldr	r3, [r7, #8]
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7fd fd97 	bl	8017568 <sync_fs>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	7d1b      	ldrb	r3, [r3, #20]
 8019a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019a46:	b2da      	uxtb	r2, r3
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8019a4e:	4618      	mov	r0, r3
 8019a50:	3718      	adds	r7, #24
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}

08019a56 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019a56:	b580      	push	{r7, lr}
 8019a58:	b084      	sub	sp, #16
 8019a5a:	af00      	add	r7, sp, #0
 8019a5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019a5e:	6878      	ldr	r0, [r7, #4]
 8019a60:	f7ff ff7b 	bl	801995a <f_sync>
 8019a64:	4603      	mov	r3, r0
 8019a66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019a68:	7bfb      	ldrb	r3, [r7, #15]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d118      	bne.n	8019aa0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f107 0208 	add.w	r2, r7, #8
 8019a74:	4611      	mov	r1, r2
 8019a76:	4618      	mov	r0, r3
 8019a78:	f7ff fbc0 	bl	80191fc <validate>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019a80:	7bfb      	ldrb	r3, [r7, #15]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d10c      	bne.n	8019aa0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	691b      	ldr	r3, [r3, #16]
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f7fd fc9a 	bl	80173c4 <dec_lock>
 8019a90:	4603      	mov	r3, r0
 8019a92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019a94:	7bfb      	ldrb	r3, [r7, #15]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d102      	bne.n	8019aa0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	3710      	adds	r7, #16
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	bd80      	pop	{r7, pc}

08019aaa <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019aaa:	b580      	push	{r7, lr}
 8019aac:	b090      	sub	sp, #64	; 0x40
 8019aae:	af00      	add	r7, sp, #0
 8019ab0:	6078      	str	r0, [r7, #4]
 8019ab2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8019ab4:	f107 0108 	add.w	r1, r7, #8
 8019ab8:	1d3b      	adds	r3, r7, #4
 8019aba:	2200      	movs	r2, #0
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7ff f94d 	bl	8018d5c <find_volume>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d11f      	bne.n	8019b10 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	f107 0308 	add.w	r3, r7, #8
 8019ad6:	4611      	mov	r1, r2
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f7ff f833 	bl	8018b44 <follow_path>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8019ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d111      	bne.n	8019b10 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8019aec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019af0:	b25b      	sxtb	r3, r3
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	da03      	bge.n	8019afe <f_stat+0x54>
				res = FR_INVALID_NAME;
 8019af6:	2306      	movs	r3, #6
 8019af8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8019afc:	e008      	b.n	8019b10 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d005      	beq.n	8019b10 <f_stat+0x66>
 8019b04:	f107 0308 	add.w	r3, r7, #8
 8019b08:	6839      	ldr	r1, [r7, #0]
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7fe fd84 	bl	8018618 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8019b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3740      	adds	r7, #64	; 0x40
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}

08019b1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019b1c:	b480      	push	{r7}
 8019b1e:	b087      	sub	sp, #28
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	60f8      	str	r0, [r7, #12]
 8019b24:	60b9      	str	r1, [r7, #8]
 8019b26:	4613      	mov	r3, r2
 8019b28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019b2e:	2300      	movs	r3, #0
 8019b30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019b32:	4b1f      	ldr	r3, [pc, #124]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b34:	7a5b      	ldrb	r3, [r3, #9]
 8019b36:	b2db      	uxtb	r3, r3
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d131      	bne.n	8019ba0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019b3c:	4b1c      	ldr	r3, [pc, #112]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b3e:	7a5b      	ldrb	r3, [r3, #9]
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	461a      	mov	r2, r3
 8019b44:	4b1a      	ldr	r3, [pc, #104]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b46:	2100      	movs	r1, #0
 8019b48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019b4a:	4b19      	ldr	r3, [pc, #100]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b4c:	7a5b      	ldrb	r3, [r3, #9]
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	4a17      	ldr	r2, [pc, #92]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b52:	009b      	lsls	r3, r3, #2
 8019b54:	4413      	add	r3, r2
 8019b56:	68fa      	ldr	r2, [r7, #12]
 8019b58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019b5a:	4b15      	ldr	r3, [pc, #84]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b5c:	7a5b      	ldrb	r3, [r3, #9]
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	461a      	mov	r2, r3
 8019b62:	4b13      	ldr	r3, [pc, #76]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b64:	4413      	add	r3, r2
 8019b66:	79fa      	ldrb	r2, [r7, #7]
 8019b68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019b6a:	4b11      	ldr	r3, [pc, #68]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b6c:	7a5b      	ldrb	r3, [r3, #9]
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	1c5a      	adds	r2, r3, #1
 8019b72:	b2d1      	uxtb	r1, r2
 8019b74:	4a0e      	ldr	r2, [pc, #56]	; (8019bb0 <FATFS_LinkDriverEx+0x94>)
 8019b76:	7251      	strb	r1, [r2, #9]
 8019b78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019b7a:	7dbb      	ldrb	r3, [r7, #22]
 8019b7c:	3330      	adds	r3, #48	; 0x30
 8019b7e:	b2da      	uxtb	r2, r3
 8019b80:	68bb      	ldr	r3, [r7, #8]
 8019b82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	3301      	adds	r3, #1
 8019b88:	223a      	movs	r2, #58	; 0x3a
 8019b8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019b8c:	68bb      	ldr	r3, [r7, #8]
 8019b8e:	3302      	adds	r3, #2
 8019b90:	222f      	movs	r2, #47	; 0x2f
 8019b92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	3303      	adds	r3, #3
 8019b98:	2200      	movs	r2, #0
 8019b9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	371c      	adds	r7, #28
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bac:	4770      	bx	lr
 8019bae:	bf00      	nop
 8019bb0:	20001cb4 	.word	0x20001cb4

08019bb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b082      	sub	sp, #8
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	6839      	ldr	r1, [r7, #0]
 8019bc2:	6878      	ldr	r0, [r7, #4]
 8019bc4:	f7ff ffaa 	bl	8019b1c <FATFS_LinkDriverEx>
 8019bc8:	4603      	mov	r3, r0
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	3708      	adds	r7, #8
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	bd80      	pop	{r7, pc}
	...

08019bd4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b085      	sub	sp, #20
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	4603      	mov	r3, r0
 8019bdc:	6039      	str	r1, [r7, #0]
 8019bde:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019be0:	88fb      	ldrh	r3, [r7, #6]
 8019be2:	2b7f      	cmp	r3, #127	; 0x7f
 8019be4:	d802      	bhi.n	8019bec <ff_convert+0x18>
		c = chr;
 8019be6:	88fb      	ldrh	r3, [r7, #6]
 8019be8:	81fb      	strh	r3, [r7, #14]
 8019bea:	e025      	b.n	8019c38 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d00b      	beq.n	8019c0a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8019bf2:	88fb      	ldrh	r3, [r7, #6]
 8019bf4:	2bff      	cmp	r3, #255	; 0xff
 8019bf6:	d805      	bhi.n	8019c04 <ff_convert+0x30>
 8019bf8:	88fb      	ldrh	r3, [r7, #6]
 8019bfa:	3b80      	subs	r3, #128	; 0x80
 8019bfc:	4a12      	ldr	r2, [pc, #72]	; (8019c48 <ff_convert+0x74>)
 8019bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c02:	e000      	b.n	8019c06 <ff_convert+0x32>
 8019c04:	2300      	movs	r3, #0
 8019c06:	81fb      	strh	r3, [r7, #14]
 8019c08:	e016      	b.n	8019c38 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	81fb      	strh	r3, [r7, #14]
 8019c0e:	e009      	b.n	8019c24 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8019c10:	89fb      	ldrh	r3, [r7, #14]
 8019c12:	4a0d      	ldr	r2, [pc, #52]	; (8019c48 <ff_convert+0x74>)
 8019c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c18:	88fa      	ldrh	r2, [r7, #6]
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d006      	beq.n	8019c2c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8019c1e:	89fb      	ldrh	r3, [r7, #14]
 8019c20:	3301      	adds	r3, #1
 8019c22:	81fb      	strh	r3, [r7, #14]
 8019c24:	89fb      	ldrh	r3, [r7, #14]
 8019c26:	2b7f      	cmp	r3, #127	; 0x7f
 8019c28:	d9f2      	bls.n	8019c10 <ff_convert+0x3c>
 8019c2a:	e000      	b.n	8019c2e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019c2c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8019c2e:	89fb      	ldrh	r3, [r7, #14]
 8019c30:	3380      	adds	r3, #128	; 0x80
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	b2db      	uxtb	r3, r3
 8019c36:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019c38:	89fb      	ldrh	r3, [r7, #14]
}
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	3714      	adds	r7, #20
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr
 8019c46:	bf00      	nop
 8019c48:	08021aec 	.word	0x08021aec

08019c4c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8019c4c:	b480      	push	{r7}
 8019c4e:	b087      	sub	sp, #28
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	4603      	mov	r3, r0
 8019c54:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8019c56:	88fb      	ldrh	r3, [r7, #6]
 8019c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019c5c:	d201      	bcs.n	8019c62 <ff_wtoupper+0x16>
 8019c5e:	4b3e      	ldr	r3, [pc, #248]	; (8019d58 <ff_wtoupper+0x10c>)
 8019c60:	e000      	b.n	8019c64 <ff_wtoupper+0x18>
 8019c62:	4b3e      	ldr	r3, [pc, #248]	; (8019d5c <ff_wtoupper+0x110>)
 8019c64:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	1c9a      	adds	r2, r3, #2
 8019c6a:	617a      	str	r2, [r7, #20]
 8019c6c:	881b      	ldrh	r3, [r3, #0]
 8019c6e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019c70:	8a7b      	ldrh	r3, [r7, #18]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d068      	beq.n	8019d48 <ff_wtoupper+0xfc>
 8019c76:	88fa      	ldrh	r2, [r7, #6]
 8019c78:	8a7b      	ldrh	r3, [r7, #18]
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	d364      	bcc.n	8019d48 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8019c7e:	697b      	ldr	r3, [r7, #20]
 8019c80:	1c9a      	adds	r2, r3, #2
 8019c82:	617a      	str	r2, [r7, #20]
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	823b      	strh	r3, [r7, #16]
 8019c88:	8a3b      	ldrh	r3, [r7, #16]
 8019c8a:	0a1b      	lsrs	r3, r3, #8
 8019c8c:	81fb      	strh	r3, [r7, #14]
 8019c8e:	8a3b      	ldrh	r3, [r7, #16]
 8019c90:	b2db      	uxtb	r3, r3
 8019c92:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8019c94:	88fa      	ldrh	r2, [r7, #6]
 8019c96:	8a79      	ldrh	r1, [r7, #18]
 8019c98:	8a3b      	ldrh	r3, [r7, #16]
 8019c9a:	440b      	add	r3, r1
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	da49      	bge.n	8019d34 <ff_wtoupper+0xe8>
			switch (cmd) {
 8019ca0:	89fb      	ldrh	r3, [r7, #14]
 8019ca2:	2b08      	cmp	r3, #8
 8019ca4:	d84f      	bhi.n	8019d46 <ff_wtoupper+0xfa>
 8019ca6:	a201      	add	r2, pc, #4	; (adr r2, 8019cac <ff_wtoupper+0x60>)
 8019ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cac:	08019cd1 	.word	0x08019cd1
 8019cb0:	08019ce3 	.word	0x08019ce3
 8019cb4:	08019cf9 	.word	0x08019cf9
 8019cb8:	08019d01 	.word	0x08019d01
 8019cbc:	08019d09 	.word	0x08019d09
 8019cc0:	08019d11 	.word	0x08019d11
 8019cc4:	08019d19 	.word	0x08019d19
 8019cc8:	08019d21 	.word	0x08019d21
 8019ccc:	08019d29 	.word	0x08019d29
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019cd0:	88fa      	ldrh	r2, [r7, #6]
 8019cd2:	8a7b      	ldrh	r3, [r7, #18]
 8019cd4:	1ad3      	subs	r3, r2, r3
 8019cd6:	005b      	lsls	r3, r3, #1
 8019cd8:	697a      	ldr	r2, [r7, #20]
 8019cda:	4413      	add	r3, r2
 8019cdc:	881b      	ldrh	r3, [r3, #0]
 8019cde:	80fb      	strh	r3, [r7, #6]
 8019ce0:	e027      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8019ce2:	88fa      	ldrh	r2, [r7, #6]
 8019ce4:	8a7b      	ldrh	r3, [r7, #18]
 8019ce6:	1ad3      	subs	r3, r2, r3
 8019ce8:	b29b      	uxth	r3, r3
 8019cea:	f003 0301 	and.w	r3, r3, #1
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	88fa      	ldrh	r2, [r7, #6]
 8019cf2:	1ad3      	subs	r3, r2, r3
 8019cf4:	80fb      	strh	r3, [r7, #6]
 8019cf6:	e01c      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019cf8:	88fb      	ldrh	r3, [r7, #6]
 8019cfa:	3b10      	subs	r3, #16
 8019cfc:	80fb      	strh	r3, [r7, #6]
 8019cfe:	e018      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8019d00:	88fb      	ldrh	r3, [r7, #6]
 8019d02:	3b20      	subs	r3, #32
 8019d04:	80fb      	strh	r3, [r7, #6]
 8019d06:	e014      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019d08:	88fb      	ldrh	r3, [r7, #6]
 8019d0a:	3b30      	subs	r3, #48	; 0x30
 8019d0c:	80fb      	strh	r3, [r7, #6]
 8019d0e:	e010      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8019d10:	88fb      	ldrh	r3, [r7, #6]
 8019d12:	3b1a      	subs	r3, #26
 8019d14:	80fb      	strh	r3, [r7, #6]
 8019d16:	e00c      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019d18:	88fb      	ldrh	r3, [r7, #6]
 8019d1a:	3308      	adds	r3, #8
 8019d1c:	80fb      	strh	r3, [r7, #6]
 8019d1e:	e008      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8019d20:	88fb      	ldrh	r3, [r7, #6]
 8019d22:	3b50      	subs	r3, #80	; 0x50
 8019d24:	80fb      	strh	r3, [r7, #6]
 8019d26:	e004      	b.n	8019d32 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019d28:	88fb      	ldrh	r3, [r7, #6]
 8019d2a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8019d2e:	80fb      	strh	r3, [r7, #6]
 8019d30:	bf00      	nop
			}
			break;
 8019d32:	e008      	b.n	8019d46 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8019d34:	89fb      	ldrh	r3, [r7, #14]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d195      	bne.n	8019c66 <ff_wtoupper+0x1a>
 8019d3a:	8a3b      	ldrh	r3, [r7, #16]
 8019d3c:	005b      	lsls	r3, r3, #1
 8019d3e:	697a      	ldr	r2, [r7, #20]
 8019d40:	4413      	add	r3, r2
 8019d42:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8019d44:	e78f      	b.n	8019c66 <ff_wtoupper+0x1a>
			break;
 8019d46:	bf00      	nop
	}

	return chr;
 8019d48:	88fb      	ldrh	r3, [r7, #6]
}
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	371c      	adds	r7, #28
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d54:	4770      	bx	lr
 8019d56:	bf00      	nop
 8019d58:	08021bec 	.word	0x08021bec
 8019d5c:	08021de0 	.word	0x08021de0

08019d60 <Mount_SD>:
//			}
//	}
//}

FRESULT Mount_SD (const TCHAR* path)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8019d68:	2201      	movs	r2, #1
 8019d6a:	6879      	ldr	r1, [r7, #4]
 8019d6c:	480e      	ldr	r0, [pc, #56]	; (8019da8 <Mount_SD+0x48>)
 8019d6e:	f7ff fa7b 	bl	8019268 <f_mount>
 8019d72:	4603      	mov	r3, r0
 8019d74:	461a      	mov	r2, r3
 8019d76:	4b0d      	ldr	r3, [pc, #52]	; (8019dac <Mount_SD+0x4c>)
 8019d78:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8019d7a:	4b0c      	ldr	r3, [pc, #48]	; (8019dac <Mount_SD+0x4c>)
 8019d7c:	781b      	ldrb	r3, [r3, #0]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d006      	beq.n	8019d90 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8019d82:	2300      	movs	r3, #0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d009      	beq.n	8019d9c <Mount_SD+0x3c>
 8019d88:	4809      	ldr	r0, [pc, #36]	; (8019db0 <Mount_SD+0x50>)
 8019d8a:	f002 fbaf 	bl	801c4ec <puts>
 8019d8e:	e005      	b.n	8019d9c <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8019d90:	2300      	movs	r3, #0
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d002      	beq.n	8019d9c <Mount_SD+0x3c>
 8019d96:	4807      	ldr	r0, [pc, #28]	; (8019db4 <Mount_SD+0x54>)
 8019d98:	f002 fba8 	bl	801c4ec <puts>

	return fresult;
 8019d9c:	4b03      	ldr	r3, [pc, #12]	; (8019dac <Mount_SD+0x4c>)
 8019d9e:	781b      	ldrb	r3, [r3, #0]
}
 8019da0:	4618      	mov	r0, r3
 8019da2:	3708      	adds	r7, #8
 8019da4:	46bd      	mov	sp, r7
 8019da6:	bd80      	pop	{r7, pc}
 8019da8:	20001cc0 	.word	0x20001cc0
 8019dac:	2000223c 	.word	0x2000223c
 8019db0:	08021244 	.word	0x08021244
 8019db4:	08021264 	.word	0x08021264

08019db8 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8019dc0:	2201      	movs	r2, #1
 8019dc2:	6879      	ldr	r1, [r7, #4]
 8019dc4:	2000      	movs	r0, #0
 8019dc6:	f7ff fa4f 	bl	8019268 <f_mount>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	461a      	mov	r2, r3
 8019dce:	4b0b      	ldr	r3, [pc, #44]	; (8019dfc <Unmount_SD+0x44>)
 8019dd0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8019dd2:	4b0a      	ldr	r3, [pc, #40]	; (8019dfc <Unmount_SD+0x44>)
 8019dd4:	781b      	ldrb	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d106      	bne.n	8019de8 <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 8019dda:	2300      	movs	r3, #0
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d009      	beq.n	8019df4 <Unmount_SD+0x3c>
 8019de0:	4807      	ldr	r0, [pc, #28]	; (8019e00 <Unmount_SD+0x48>)
 8019de2:	f002 fb83 	bl	801c4ec <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8019de6:	e005      	b.n	8019df4 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8019de8:	2300      	movs	r3, #0
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d002      	beq.n	8019df4 <Unmount_SD+0x3c>
 8019dee:	4805      	ldr	r0, [pc, #20]	; (8019e04 <Unmount_SD+0x4c>)
 8019df0:	f002 fb7c 	bl	801c4ec <puts>
}
 8019df4:	bf00      	nop
 8019df6:	3708      	adds	r7, #8
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}
 8019dfc:	2000223c 	.word	0x2000223c
 8019e00:	08021284 	.word	0x08021284
 8019e04:	080212a8 	.word	0x080212a8

08019e08 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b0a8      	sub	sp, #160	; 0xa0
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat (name, &fno);
 8019e10:	4941      	ldr	r1, [pc, #260]	; (8019f18 <Create_File+0x110>)
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f7ff fe49 	bl	8019aaa <f_stat>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	461a      	mov	r2, r3
 8019e1c:	4b3f      	ldr	r3, [pc, #252]	; (8019f1c <Create_File+0x114>)
 8019e1e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8019e20:	4b3e      	ldr	r3, [pc, #248]	; (8019f1c <Create_File+0x114>)
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d114      	bne.n	8019e52 <Create_File+0x4a>
	{
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 8019e28:	4b3d      	ldr	r3, [pc, #244]	; (8019f20 <Create_File+0x118>)
 8019e2a:	2201      	movs	r2, #1
 8019e2c:	701a      	strb	r2, [r3, #0]

		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 8019e2e:	f107 0308 	add.w	r3, r7, #8
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	493b      	ldr	r1, [pc, #236]	; (8019f24 <Create_File+0x11c>)
 8019e36:	4618      	mov	r0, r3
 8019e38:	f002 fb76 	bl	801c528 <siprintf>
		if(sdioPrints) printf(buf);
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d004      	beq.n	8019e4c <Create_File+0x44>
 8019e42:	f107 0308 	add.w	r3, r7, #8
 8019e46:	4618      	mov	r0, r3
 8019e48:	f002 faca 	bl	801c3e0 <iprintf>

	    return fresult;
 8019e4c:	4b33      	ldr	r3, [pc, #204]	; (8019f1c <Create_File+0x114>)
 8019e4e:	781b      	ldrb	r3, [r3, #0]
 8019e50:	e05d      	b.n	8019f0e <Create_File+0x106>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8019e52:	220b      	movs	r2, #11
 8019e54:	6879      	ldr	r1, [r7, #4]
 8019e56:	4834      	ldr	r0, [pc, #208]	; (8019f28 <Create_File+0x120>)
 8019e58:	f7ff fa4c 	bl	80192f4 <f_open>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	461a      	mov	r2, r3
 8019e60:	4b2e      	ldr	r3, [pc, #184]	; (8019f1c <Create_File+0x114>)
 8019e62:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019e64:	4b2d      	ldr	r3, [pc, #180]	; (8019f1c <Create_File+0x114>)
 8019e66:	781b      	ldrb	r3, [r3, #0]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d013      	beq.n	8019e94 <Create_File+0x8c>
		{

			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 8019e6c:	4b2b      	ldr	r3, [pc, #172]	; (8019f1c <Create_File+0x114>)
 8019e6e:	781b      	ldrb	r3, [r3, #0]
 8019e70:	461a      	mov	r2, r3
 8019e72:	f107 0008 	add.w	r0, r7, #8
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	492c      	ldr	r1, [pc, #176]	; (8019f2c <Create_File+0x124>)
 8019e7a:	f002 fb55 	bl	801c528 <siprintf>
			if(sdioPrints) printf(buf);
 8019e7e:	2300      	movs	r3, #0
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d004      	beq.n	8019e8e <Create_File+0x86>
 8019e84:	f107 0308 	add.w	r3, r7, #8
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f002 faa9 	bl	801c3e0 <iprintf>

		    return fresult;
 8019e8e:	4b23      	ldr	r3, [pc, #140]	; (8019f1c <Create_File+0x114>)
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	e03c      	b.n	8019f0e <Create_File+0x106>
		}
		else
		{

			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8019e94:	f107 0308 	add.w	r3, r7, #8
 8019e98:	687a      	ldr	r2, [r7, #4]
 8019e9a:	4925      	ldr	r1, [pc, #148]	; (8019f30 <Create_File+0x128>)
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f002 fb43 	bl	801c528 <siprintf>
			if(sdioPrints) printf(buf);
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d004      	beq.n	8019eb2 <Create_File+0xaa>
 8019ea8:	f107 0308 	add.w	r3, r7, #8
 8019eac:	4618      	mov	r0, r3
 8019eae:	f002 fa97 	bl	801c3e0 <iprintf>

		}

		fresult = f_close(&fil);
 8019eb2:	481d      	ldr	r0, [pc, #116]	; (8019f28 <Create_File+0x120>)
 8019eb4:	f7ff fdcf 	bl	8019a56 <f_close>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	461a      	mov	r2, r3
 8019ebc:	4b17      	ldr	r3, [pc, #92]	; (8019f1c <Create_File+0x114>)
 8019ebe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019ec0:	4b16      	ldr	r3, [pc, #88]	; (8019f1c <Create_File+0x114>)
 8019ec2:	781b      	ldrb	r3, [r3, #0]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d011      	beq.n	8019eec <Create_File+0xe4>
		{

			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8019ec8:	4b14      	ldr	r3, [pc, #80]	; (8019f1c <Create_File+0x114>)
 8019eca:	781b      	ldrb	r3, [r3, #0]
 8019ecc:	461a      	mov	r2, r3
 8019ece:	f107 0008 	add.w	r0, r7, #8
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	4917      	ldr	r1, [pc, #92]	; (8019f34 <Create_File+0x12c>)
 8019ed6:	f002 fb27 	bl	801c528 <siprintf>
			if(sdioPrints) printf(buf);
 8019eda:	2300      	movs	r3, #0
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d014      	beq.n	8019f0a <Create_File+0x102>
 8019ee0:	f107 0308 	add.w	r3, r7, #8
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f002 fa7b 	bl	801c3e0 <iprintf>
 8019eea:	e00e      	b.n	8019f0a <Create_File+0x102>

		}
		else
		{

			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8019eec:	f107 0308 	add.w	r3, r7, #8
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	4911      	ldr	r1, [pc, #68]	; (8019f38 <Create_File+0x130>)
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f002 fb17 	bl	801c528 <siprintf>
			if(sdioPrints) printf(buf);
 8019efa:	2300      	movs	r3, #0
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d004      	beq.n	8019f0a <Create_File+0x102>
 8019f00:	f107 0308 	add.w	r3, r7, #8
 8019f04:	4618      	mov	r0, r3
 8019f06:	f002 fa6b 	bl	801c3e0 <iprintf>

		}
	}
    return fresult;
 8019f0a:	4b04      	ldr	r3, [pc, #16]	; (8019f1c <Create_File+0x114>)
 8019f0c:	781b      	ldrb	r3, [r3, #0]
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	37a0      	adds	r7, #160	; 0xa0
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	bf00      	nop
 8019f18:	20002124 	.word	0x20002124
 8019f1c:	2000223c 	.word	0x2000223c
 8019f20:	200022ac 	.word	0x200022ac
 8019f24:	0802146c 	.word	0x0802146c
 8019f28:	20001ef4 	.word	0x20001ef4
 8019f2c:	080214a0 	.word	0x080214a0
 8019f30:	080214c8 	.word	0x080214c8
 8019f34:	08021508 	.word	0x08021508
 8019f38:	0802144c 	.word	0x0802144c

08019f3c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b0a8      	sub	sp, #160	; 0xa0
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8019f46:	4951      	ldr	r1, [pc, #324]	; (801a08c <Update_File+0x150>)
 8019f48:	6878      	ldr	r0, [r7, #4]
 8019f4a:	f7ff fdae 	bl	8019aaa <f_stat>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	461a      	mov	r2, r3
 8019f52:	4b4f      	ldr	r3, [pc, #316]	; (801a090 <Update_File+0x154>)
 8019f54:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8019f56:	4b4e      	ldr	r3, [pc, #312]	; (801a090 <Update_File+0x154>)
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d011      	beq.n	8019f82 <Update_File+0x46>
	{

		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8019f5e:	f107 0308 	add.w	r3, r7, #8
 8019f62:	687a      	ldr	r2, [r7, #4]
 8019f64:	494b      	ldr	r1, [pc, #300]	; (801a094 <Update_File+0x158>)
 8019f66:	4618      	mov	r0, r3
 8019f68:	f002 fade 	bl	801c528 <siprintf>
		if(sdioPrints) printf (buf);
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d004      	beq.n	8019f7c <Update_File+0x40>
 8019f72:	f107 0308 	add.w	r3, r7, #8
 8019f76:	4618      	mov	r0, r3
 8019f78:	f002 fa32 	bl	801c3e0 <iprintf>

	    return fresult;
 8019f7c:	4b44      	ldr	r3, [pc, #272]	; (801a090 <Update_File+0x154>)
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	e080      	b.n	801a084 <Update_File+0x148>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8019f82:	2232      	movs	r2, #50	; 0x32
 8019f84:	6879      	ldr	r1, [r7, #4]
 8019f86:	4844      	ldr	r0, [pc, #272]	; (801a098 <Update_File+0x15c>)
 8019f88:	f7ff f9b4 	bl	80192f4 <f_open>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	461a      	mov	r2, r3
 8019f90:	4b3f      	ldr	r3, [pc, #252]	; (801a090 <Update_File+0x154>)
 8019f92:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019f94:	4b3e      	ldr	r3, [pc, #248]	; (801a090 <Update_File+0x154>)
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d013      	beq.n	8019fc4 <Update_File+0x88>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 8019f9c:	4b3c      	ldr	r3, [pc, #240]	; (801a090 <Update_File+0x154>)
 8019f9e:	781b      	ldrb	r3, [r3, #0]
 8019fa0:	461a      	mov	r2, r3
 8019fa2:	f107 0008 	add.w	r0, r7, #8
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	493c      	ldr	r1, [pc, #240]	; (801a09c <Update_File+0x160>)
 8019faa:	f002 fabd 	bl	801c528 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019fae:	2300      	movs	r3, #0
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d004      	beq.n	8019fbe <Update_File+0x82>
 8019fb4:	f107 0308 	add.w	r3, r7, #8
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f002 fa11 	bl	801c3e0 <iprintf>

	        return fresult;
 8019fbe:	4b34      	ldr	r3, [pc, #208]	; (801a090 <Update_File+0x154>)
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	e05f      	b.n	801a084 <Update_File+0x148>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8019fc4:	6838      	ldr	r0, [r7, #0]
 8019fc6:	f7e6 f915 	bl	80001f4 <strlen>
 8019fca:	4602      	mov	r2, r0
 8019fcc:	4b34      	ldr	r3, [pc, #208]	; (801a0a0 <Update_File+0x164>)
 8019fce:	6839      	ldr	r1, [r7, #0]
 8019fd0:	4831      	ldr	r0, [pc, #196]	; (801a098 <Update_File+0x15c>)
 8019fd2:	f7ff fb4d 	bl	8019670 <f_write>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	461a      	mov	r2, r3
 8019fda:	4b2d      	ldr	r3, [pc, #180]	; (801a090 <Update_File+0x154>)
 8019fdc:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019fde:	4b2c      	ldr	r3, [pc, #176]	; (801a090 <Update_File+0x154>)
 8019fe0:	781b      	ldrb	r3, [r3, #0]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d011      	beq.n	801a00a <Update_File+0xce>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8019fe6:	4b2a      	ldr	r3, [pc, #168]	; (801a090 <Update_File+0x154>)
 8019fe8:	781b      	ldrb	r3, [r3, #0]
 8019fea:	461a      	mov	r2, r3
 8019fec:	f107 0008 	add.w	r0, r7, #8
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	492c      	ldr	r1, [pc, #176]	; (801a0a4 <Update_File+0x168>)
 8019ff4:	f002 fa98 	bl	801c528 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d014      	beq.n	801a028 <Update_File+0xec>
 8019ffe:	f107 0308 	add.w	r3, r7, #8
 801a002:	4618      	mov	r0, r3
 801a004:	f002 f9ec 	bl	801c3e0 <iprintf>
 801a008:	e00e      	b.n	801a028 <Update_File+0xec>
	    }

	    else
	    {

	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 801a00a:	f107 0308 	add.w	r3, r7, #8
 801a00e:	687a      	ldr	r2, [r7, #4]
 801a010:	4925      	ldr	r1, [pc, #148]	; (801a0a8 <Update_File+0x16c>)
 801a012:	4618      	mov	r0, r3
 801a014:	f002 fa88 	bl	801c528 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a018:	2300      	movs	r3, #0
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d004      	beq.n	801a028 <Update_File+0xec>
 801a01e:	f107 0308 	add.w	r3, r7, #8
 801a022:	4618      	mov	r0, r3
 801a024:	f002 f9dc 	bl	801c3e0 <iprintf>

	    }

	    /* Close file */
	    fresult = f_close(&fil);
 801a028:	481b      	ldr	r0, [pc, #108]	; (801a098 <Update_File+0x15c>)
 801a02a:	f7ff fd14 	bl	8019a56 <f_close>
 801a02e:	4603      	mov	r3, r0
 801a030:	461a      	mov	r2, r3
 801a032:	4b17      	ldr	r3, [pc, #92]	; (801a090 <Update_File+0x154>)
 801a034:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 801a036:	4b16      	ldr	r3, [pc, #88]	; (801a090 <Update_File+0x154>)
 801a038:	781b      	ldrb	r3, [r3, #0]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d011      	beq.n	801a062 <Update_File+0x126>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 801a03e:	4b14      	ldr	r3, [pc, #80]	; (801a090 <Update_File+0x154>)
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	461a      	mov	r2, r3
 801a044:	f107 0008 	add.w	r0, r7, #8
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	4918      	ldr	r1, [pc, #96]	; (801a0ac <Update_File+0x170>)
 801a04c:	f002 fa6c 	bl	801c528 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a050:	2300      	movs	r3, #0
 801a052:	2b00      	cmp	r3, #0
 801a054:	d014      	beq.n	801a080 <Update_File+0x144>
 801a056:	f107 0308 	add.w	r3, r7, #8
 801a05a:	4618      	mov	r0, r3
 801a05c:	f002 f9c0 	bl	801c3e0 <iprintf>
 801a060:	e00e      	b.n	801a080 <Update_File+0x144>

	    }
	    else
	    {

	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 801a062:	f107 0308 	add.w	r3, r7, #8
 801a066:	687a      	ldr	r2, [r7, #4]
 801a068:	4911      	ldr	r1, [pc, #68]	; (801a0b0 <Update_File+0x174>)
 801a06a:	4618      	mov	r0, r3
 801a06c:	f002 fa5c 	bl	801c528 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a070:	2300      	movs	r3, #0
 801a072:	2b00      	cmp	r3, #0
 801a074:	d004      	beq.n	801a080 <Update_File+0x144>
 801a076:	f107 0308 	add.w	r3, r7, #8
 801a07a:	4618      	mov	r0, r3
 801a07c:	f002 f9b0 	bl	801c3e0 <iprintf>

	     }
	}
    return fresult;
 801a080:	4b03      	ldr	r3, [pc, #12]	; (801a090 <Update_File+0x154>)
 801a082:	781b      	ldrb	r3, [r3, #0]
}
 801a084:	4618      	mov	r0, r3
 801a086:	37a0      	adds	r7, #160	; 0xa0
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}
 801a08c:	20002124 	.word	0x20002124
 801a090:	2000223c 	.word	0x2000223c
 801a094:	080212fc 	.word	0x080212fc
 801a098:	20001ef4 	.word	0x20001ef4
 801a09c:	0802131c 	.word	0x0802131c
 801a0a0:	20002240 	.word	0x20002240
 801a0a4:	0802152c 	.word	0x0802152c
 801a0a8:	08021554 	.word	0x08021554
 801a0ac:	08021424 	.word	0x08021424
 801a0b0:	0802144c 	.word	0x0802144c

0801a0b4 <json_update>:

char filename_with_format[100];
uint8_t file_already_exist = 0;
char buffer[255];

void json_update() {
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b088      	sub	sp, #32
 801a0b8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a0ba:	f107 0314 	add.w	r3, r7, #20
 801a0be:	2200      	movs	r2, #0
 801a0c0:	4619      	mov	r1, r3
 801a0c2:	4889      	ldr	r0, [pc, #548]	; (801a2e8 <json_update+0x234>)
 801a0c4:	f7ef f86e 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a0c8:	463b      	mov	r3, r7
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	4619      	mov	r1, r3
 801a0ce:	4886      	ldr	r0, [pc, #536]	; (801a2e8 <json_update+0x234>)
 801a0d0:	f7ee ff86 	bl	8008fe0 <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 801a0d4:	4885      	ldr	r0, [pc, #532]	; (801a2ec <json_update+0x238>)
 801a0d6:	f7ff fe43 	bl	8019d60 <Mount_SD>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	461a      	mov	r2, r3
 801a0de:	4b84      	ldr	r3, [pc, #528]	; (801a2f0 <json_update+0x23c>)
 801a0e0:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a0e2:	4b83      	ldr	r3, [pc, #524]	; (801a2f0 <json_update+0x23c>)
 801a0e4:	781b      	ldrb	r3, [r3, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f040 80f3 	bne.w	801a2d2 <json_update+0x21e>
		//CAN Bus
		sprintf(buffer, "{\n");
 801a0ec:	4981      	ldr	r1, [pc, #516]	; (801a2f4 <json_update+0x240>)
 801a0ee:	4882      	ldr	r0, [pc, #520]	; (801a2f8 <json_update+0x244>)
 801a0f0:	f002 fa1a 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0f4:	4980      	ldr	r1, [pc, #512]	; (801a2f8 <json_update+0x244>)
 801a0f6:	4881      	ldr	r0, [pc, #516]	; (801a2fc <json_update+0x248>)
 801a0f8:	f7ff ff20 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0fc:	22ff      	movs	r2, #255	; 0xff
 801a0fe:	2100      	movs	r1, #0
 801a100:	487d      	ldr	r0, [pc, #500]	; (801a2f8 <json_update+0x244>)
 801a102:	f001 fa0b 	bl	801b51c <memset>
		sprintf(buffer, "\"devEUI\":\"TF241_%s\",\n", ver_GetUid());
 801a106:	f7e8 f8b7 	bl	8002278 <ver_GetUid>
 801a10a:	4603      	mov	r3, r0
 801a10c:	461a      	mov	r2, r3
 801a10e:	497c      	ldr	r1, [pc, #496]	; (801a300 <json_update+0x24c>)
 801a110:	4879      	ldr	r0, [pc, #484]	; (801a2f8 <json_update+0x244>)
 801a112:	f002 fa09 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a116:	4978      	ldr	r1, [pc, #480]	; (801a2f8 <json_update+0x244>)
 801a118:	4878      	ldr	r0, [pc, #480]	; (801a2fc <json_update+0x248>)
 801a11a:	f7ff ff0f 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a11e:	22ff      	movs	r2, #255	; 0xff
 801a120:	2100      	movs	r1, #0
 801a122:	4875      	ldr	r0, [pc, #468]	; (801a2f8 <json_update+0x244>)
 801a124:	f001 f9fa 	bl	801b51c <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801a128:	4a76      	ldr	r2, [pc, #472]	; (801a304 <json_update+0x250>)
 801a12a:	4977      	ldr	r1, [pc, #476]	; (801a308 <json_update+0x254>)
 801a12c:	4872      	ldr	r0, [pc, #456]	; (801a2f8 <json_update+0x244>)
 801a12e:	f002 f9fb 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a132:	4971      	ldr	r1, [pc, #452]	; (801a2f8 <json_update+0x244>)
 801a134:	4871      	ldr	r0, [pc, #452]	; (801a2fc <json_update+0x248>)
 801a136:	f7ff ff01 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a13a:	22ff      	movs	r2, #255	; 0xff
 801a13c:	2100      	movs	r1, #0
 801a13e:	486e      	ldr	r0, [pc, #440]	; (801a2f8 <json_update+0x244>)
 801a140:	f001 f9ec 	bl	801b51c <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a144:	783b      	ldrb	r3, [r7, #0]
 801a146:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801a148:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a14a:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801a14c:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a14e:	9300      	str	r3, [sp, #0]
 801a150:	460b      	mov	r3, r1
 801a152:	496e      	ldr	r1, [pc, #440]	; (801a30c <json_update+0x258>)
 801a154:	4868      	ldr	r0, [pc, #416]	; (801a2f8 <json_update+0x244>)
 801a156:	f002 f9e7 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a15a:	4967      	ldr	r1, [pc, #412]	; (801a2f8 <json_update+0x244>)
 801a15c:	4867      	ldr	r0, [pc, #412]	; (801a2fc <json_update+0x248>)
 801a15e:	f7ff feed 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a162:	22ff      	movs	r2, #255	; 0xff
 801a164:	2100      	movs	r1, #0
 801a166:	4864      	ldr	r0, [pc, #400]	; (801a2f8 <json_update+0x244>)
 801a168:	f001 f9d8 	bl	801b51c <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801a16c:	4a68      	ldr	r2, [pc, #416]	; (801a310 <json_update+0x25c>)
 801a16e:	4969      	ldr	r1, [pc, #420]	; (801a314 <json_update+0x260>)
 801a170:	4861      	ldr	r0, [pc, #388]	; (801a2f8 <json_update+0x244>)
 801a172:	f002 f9d9 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a176:	4960      	ldr	r1, [pc, #384]	; (801a2f8 <json_update+0x244>)
 801a178:	4860      	ldr	r0, [pc, #384]	; (801a2fc <json_update+0x248>)
 801a17a:	f7ff fedf 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a17e:	22ff      	movs	r2, #255	; 0xff
 801a180:	2100      	movs	r1, #0
 801a182:	485d      	ldr	r0, [pc, #372]	; (801a2f8 <json_update+0x244>)
 801a184:	f001 f9ca 	bl	801b51c <memset>
		sprintf(buffer, "\"name\":\"%s\",\n", _Flash_Packet.name);
 801a188:	4a63      	ldr	r2, [pc, #396]	; (801a318 <json_update+0x264>)
 801a18a:	4964      	ldr	r1, [pc, #400]	; (801a31c <json_update+0x268>)
 801a18c:	485a      	ldr	r0, [pc, #360]	; (801a2f8 <json_update+0x244>)
 801a18e:	f002 f9cb 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a192:	4959      	ldr	r1, [pc, #356]	; (801a2f8 <json_update+0x244>)
 801a194:	4859      	ldr	r0, [pc, #356]	; (801a2fc <json_update+0x248>)
 801a196:	f7ff fed1 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a19a:	22ff      	movs	r2, #255	; 0xff
 801a19c:	2100      	movs	r1, #0
 801a19e:	4856      	ldr	r0, [pc, #344]	; (801a2f8 <json_update+0x244>)
 801a1a0:	f001 f9bc 	bl	801b51c <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801a1a4:	4a5e      	ldr	r2, [pc, #376]	; (801a320 <json_update+0x26c>)
 801a1a6:	495f      	ldr	r1, [pc, #380]	; (801a324 <json_update+0x270>)
 801a1a8:	4853      	ldr	r0, [pc, #332]	; (801a2f8 <json_update+0x244>)
 801a1aa:	f002 f9bd 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1ae:	4952      	ldr	r1, [pc, #328]	; (801a2f8 <json_update+0x244>)
 801a1b0:	4852      	ldr	r0, [pc, #328]	; (801a2fc <json_update+0x248>)
 801a1b2:	f7ff fec3 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1b6:	22ff      	movs	r2, #255	; 0xff
 801a1b8:	2100      	movs	r1, #0
 801a1ba:	484f      	ldr	r0, [pc, #316]	; (801a2f8 <json_update+0x244>)
 801a1bc:	f001 f9ae 	bl	801b51c <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 801a1c0:	4b59      	ldr	r3, [pc, #356]	; (801a328 <json_update+0x274>)
 801a1c2:	881b      	ldrh	r3, [r3, #0]
 801a1c4:	461a      	mov	r2, r3
 801a1c6:	4959      	ldr	r1, [pc, #356]	; (801a32c <json_update+0x278>)
 801a1c8:	484b      	ldr	r0, [pc, #300]	; (801a2f8 <json_update+0x244>)
 801a1ca:	f002 f9ad 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1ce:	494a      	ldr	r1, [pc, #296]	; (801a2f8 <json_update+0x244>)
 801a1d0:	484a      	ldr	r0, [pc, #296]	; (801a2fc <json_update+0x248>)
 801a1d2:	f7ff feb3 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1d6:	22ff      	movs	r2, #255	; 0xff
 801a1d8:	2100      	movs	r1, #0
 801a1da:	4847      	ldr	r0, [pc, #284]	; (801a2f8 <json_update+0x244>)
 801a1dc:	f001 f99e 	bl	801b51c <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 801a1e0:	4b51      	ldr	r3, [pc, #324]	; (801a328 <json_update+0x274>)
 801a1e2:	685b      	ldr	r3, [r3, #4]
 801a1e4:	461a      	mov	r2, r3
 801a1e6:	4952      	ldr	r1, [pc, #328]	; (801a330 <json_update+0x27c>)
 801a1e8:	4843      	ldr	r0, [pc, #268]	; (801a2f8 <json_update+0x244>)
 801a1ea:	f002 f99d 	bl	801c528 <siprintf>
				_RunTime_Packet.temperature);
		Update_File(filename_with_format, buffer);
 801a1ee:	4942      	ldr	r1, [pc, #264]	; (801a2f8 <json_update+0x244>)
 801a1f0:	4842      	ldr	r0, [pc, #264]	; (801a2fc <json_update+0x248>)
 801a1f2:	f7ff fea3 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1f6:	22ff      	movs	r2, #255	; 0xff
 801a1f8:	2100      	movs	r1, #0
 801a1fa:	483f      	ldr	r0, [pc, #252]	; (801a2f8 <json_update+0x244>)
 801a1fc:	f001 f98e 	bl	801b51c <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 801a200:	4b49      	ldr	r3, [pc, #292]	; (801a328 <json_update+0x274>)
 801a202:	689b      	ldr	r3, [r3, #8]
 801a204:	461a      	mov	r2, r3
 801a206:	494b      	ldr	r1, [pc, #300]	; (801a334 <json_update+0x280>)
 801a208:	483b      	ldr	r0, [pc, #236]	; (801a2f8 <json_update+0x244>)
 801a20a:	f002 f98d 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a20e:	493a      	ldr	r1, [pc, #232]	; (801a2f8 <json_update+0x244>)
 801a210:	483a      	ldr	r0, [pc, #232]	; (801a2fc <json_update+0x248>)
 801a212:	f7ff fe93 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a216:	22ff      	movs	r2, #255	; 0xff
 801a218:	2100      	movs	r1, #0
 801a21a:	4837      	ldr	r0, [pc, #220]	; (801a2f8 <json_update+0x244>)
 801a21c:	f001 f97e 	bl	801b51c <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801a220:	4b41      	ldr	r3, [pc, #260]	; (801a328 <json_update+0x274>)
 801a222:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801a224:	2b00      	cmp	r3, #0
 801a226:	d001      	beq.n	801a22c <json_update+0x178>
 801a228:	4b43      	ldr	r3, [pc, #268]	; (801a338 <json_update+0x284>)
 801a22a:	e000      	b.n	801a22e <json_update+0x17a>
 801a22c:	4b43      	ldr	r3, [pc, #268]	; (801a33c <json_update+0x288>)
 801a22e:	461a      	mov	r2, r3
 801a230:	4943      	ldr	r1, [pc, #268]	; (801a340 <json_update+0x28c>)
 801a232:	4831      	ldr	r0, [pc, #196]	; (801a2f8 <json_update+0x244>)
 801a234:	f002 f978 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a238:	492f      	ldr	r1, [pc, #188]	; (801a2f8 <json_update+0x244>)
 801a23a:	4830      	ldr	r0, [pc, #192]	; (801a2fc <json_update+0x248>)
 801a23c:	f7ff fe7e 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a240:	22ff      	movs	r2, #255	; 0xff
 801a242:	2100      	movs	r1, #0
 801a244:	482c      	ldr	r0, [pc, #176]	; (801a2f8 <json_update+0x244>)
 801a246:	f001 f969 	bl	801b51c <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801a24a:	4b37      	ldr	r3, [pc, #220]	; (801a328 <json_update+0x274>)
 801a24c:	695b      	ldr	r3, [r3, #20]
 801a24e:	4618      	mov	r0, r3
 801a250:	f7e6 f992 	bl	8000578 <__aeabi_f2d>
 801a254:	4602      	mov	r2, r0
 801a256:	460b      	mov	r3, r1
 801a258:	493a      	ldr	r1, [pc, #232]	; (801a344 <json_update+0x290>)
 801a25a:	4827      	ldr	r0, [pc, #156]	; (801a2f8 <json_update+0x244>)
 801a25c:	f002 f964 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a260:	4925      	ldr	r1, [pc, #148]	; (801a2f8 <json_update+0x244>)
 801a262:	4826      	ldr	r0, [pc, #152]	; (801a2fc <json_update+0x248>)
 801a264:	f7ff fe6a 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a268:	22ff      	movs	r2, #255	; 0xff
 801a26a:	2100      	movs	r1, #0
 801a26c:	4822      	ldr	r0, [pc, #136]	; (801a2f8 <json_update+0x244>)
 801a26e:	f001 f955 	bl	801b51c <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801a272:	4935      	ldr	r1, [pc, #212]	; (801a348 <json_update+0x294>)
 801a274:	4820      	ldr	r0, [pc, #128]	; (801a2f8 <json_update+0x244>)
 801a276:	f002 f957 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a27a:	491f      	ldr	r1, [pc, #124]	; (801a2f8 <json_update+0x244>)
 801a27c:	481f      	ldr	r0, [pc, #124]	; (801a2fc <json_update+0x248>)
 801a27e:	f7ff fe5d 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a282:	22ff      	movs	r2, #255	; 0xff
 801a284:	2100      	movs	r1, #0
 801a286:	481c      	ldr	r0, [pc, #112]	; (801a2f8 <json_update+0x244>)
 801a288:	f001 f948 	bl	801b51c <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801a28c:	4b26      	ldr	r3, [pc, #152]	; (801a328 <json_update+0x274>)
 801a28e:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801a290:	4618      	mov	r0, r3
 801a292:	f7e6 f971 	bl	8000578 <__aeabi_f2d>
 801a296:	4602      	mov	r2, r0
 801a298:	460b      	mov	r3, r1
 801a29a:	492c      	ldr	r1, [pc, #176]	; (801a34c <json_update+0x298>)
 801a29c:	4816      	ldr	r0, [pc, #88]	; (801a2f8 <json_update+0x244>)
 801a29e:	f002 f943 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a2a2:	4915      	ldr	r1, [pc, #84]	; (801a2f8 <json_update+0x244>)
 801a2a4:	4815      	ldr	r0, [pc, #84]	; (801a2fc <json_update+0x248>)
 801a2a6:	f7ff fe49 	bl	8019f3c <Update_File>

		//we end it
		memset(buffer,0,sizeof(buffer));
 801a2aa:	22ff      	movs	r2, #255	; 0xff
 801a2ac:	2100      	movs	r1, #0
 801a2ae:	4812      	ldr	r0, [pc, #72]	; (801a2f8 <json_update+0x244>)
 801a2b0:	f001 f934 	bl	801b51c <memset>
		sprintf(buffer, "}\n\n");
 801a2b4:	4926      	ldr	r1, [pc, #152]	; (801a350 <json_update+0x29c>)
 801a2b6:	4810      	ldr	r0, [pc, #64]	; (801a2f8 <json_update+0x244>)
 801a2b8:	f002 f936 	bl	801c528 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a2bc:	490e      	ldr	r1, [pc, #56]	; (801a2f8 <json_update+0x244>)
 801a2be:	480f      	ldr	r0, [pc, #60]	; (801a2fc <json_update+0x248>)
 801a2c0:	f7ff fe3c 	bl	8019f3c <Update_File>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	4b09      	ldr	r3, [pc, #36]	; (801a2f0 <json_update+0x23c>)
 801a2ca:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a2cc:	4807      	ldr	r0, [pc, #28]	; (801a2ec <json_update+0x238>)
 801a2ce:	f7ff fd73 	bl	8019db8 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a2d2:	4b07      	ldr	r3, [pc, #28]	; (801a2f0 <json_update+0x23c>)
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	b25a      	sxtb	r2, r3
 801a2d8:	4b13      	ldr	r3, [pc, #76]	; (801a328 <json_update+0x274>)
 801a2da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a2de:	bf00      	nop
 801a2e0:	3718      	adds	r7, #24
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	bd80      	pop	{r7, pc}
 801a2e6:	bf00      	nop
 801a2e8:	200017c4 	.word	0x200017c4
 801a2ec:	08021640 	.word	0x08021640
 801a2f0:	20002244 	.word	0x20002244
 801a2f4:	08021644 	.word	0x08021644
 801a2f8:	200022b0 	.word	0x200022b0
 801a2fc:	20002248 	.word	0x20002248
 801a300:	08021648 	.word	0x08021648
 801a304:	200013a9 	.word	0x200013a9
 801a308:	08021660 	.word	0x08021660
 801a30c:	0802166c 	.word	0x0802166c
 801a310:	200013db 	.word	0x200013db
 801a314:	0802168c 	.word	0x0802168c
 801a318:	2000140d 	.word	0x2000140d
 801a31c:	080216a0 	.word	0x080216a0
 801a320:	2000143f 	.word	0x2000143f
 801a324:	080216b0 	.word	0x080216b0
 801a328:	20001474 	.word	0x20001474
 801a32c:	080216c0 	.word	0x080216c0
 801a330:	080216d0 	.word	0x080216d0
 801a334:	080216e8 	.word	0x080216e8
 801a338:	080216fc 	.word	0x080216fc
 801a33c:	08021704 	.word	0x08021704
 801a340:	0802170c 	.word	0x0802170c
 801a344:	0802171c 	.word	0x0802171c
 801a348:	08021730 	.word	0x08021730
 801a34c:	08021740 	.word	0x08021740
 801a350:	08021754 	.word	0x08021754

0801a354 <csv_update>:
void csv_update() {
 801a354:	b580      	push	{r7, lr}
 801a356:	b088      	sub	sp, #32
 801a358:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a35a:	f107 0314 	add.w	r3, r7, #20
 801a35e:	2200      	movs	r2, #0
 801a360:	4619      	mov	r1, r3
 801a362:	4880      	ldr	r0, [pc, #512]	; (801a564 <csv_update+0x210>)
 801a364:	f7ee ff1e 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a368:	463b      	mov	r3, r7
 801a36a:	2200      	movs	r2, #0
 801a36c:	4619      	mov	r1, r3
 801a36e:	487d      	ldr	r0, [pc, #500]	; (801a564 <csv_update+0x210>)
 801a370:	f7ee fe36 	bl	8008fe0 <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 801a374:	487c      	ldr	r0, [pc, #496]	; (801a568 <csv_update+0x214>)
 801a376:	f7ff fcf3 	bl	8019d60 <Mount_SD>
 801a37a:	4603      	mov	r3, r0
 801a37c:	461a      	mov	r2, r3
 801a37e:	4b7b      	ldr	r3, [pc, #492]	; (801a56c <csv_update+0x218>)
 801a380:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a382:	4b7a      	ldr	r3, [pc, #488]	; (801a56c <csv_update+0x218>)
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	2b00      	cmp	r3, #0
 801a388:	f040 80e2 	bne.w	801a550 <csv_update+0x1fc>
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);



		sprintf(buffer, "TF241_%s ,", ver_GetUid());
 801a38c:	f7e7 ff74 	bl	8002278 <ver_GetUid>
 801a390:	4603      	mov	r3, r0
 801a392:	461a      	mov	r2, r3
 801a394:	4976      	ldr	r1, [pc, #472]	; (801a570 <csv_update+0x21c>)
 801a396:	4877      	ldr	r0, [pc, #476]	; (801a574 <csv_update+0x220>)
 801a398:	f002 f8c6 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a39c:	4975      	ldr	r1, [pc, #468]	; (801a574 <csv_update+0x220>)
 801a39e:	4876      	ldr	r0, [pc, #472]	; (801a578 <csv_update+0x224>)
 801a3a0:	f7ff fdcc 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a3a4:	22ff      	movs	r2, #255	; 0xff
 801a3a6:	2100      	movs	r1, #0
 801a3a8:	4872      	ldr	r0, [pc, #456]	; (801a574 <csv_update+0x220>)
 801a3aa:	f001 f8b7 	bl	801b51c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801a3ae:	4a73      	ldr	r2, [pc, #460]	; (801a57c <csv_update+0x228>)
 801a3b0:	4973      	ldr	r1, [pc, #460]	; (801a580 <csv_update+0x22c>)
 801a3b2:	4870      	ldr	r0, [pc, #448]	; (801a574 <csv_update+0x220>)
 801a3b4:	f002 f8b8 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a3b8:	496e      	ldr	r1, [pc, #440]	; (801a574 <csv_update+0x220>)
 801a3ba:	486f      	ldr	r0, [pc, #444]	; (801a578 <csv_update+0x224>)
 801a3bc:	f7ff fdbe 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a3c0:	22ff      	movs	r2, #255	; 0xff
 801a3c2:	2100      	movs	r1, #0
 801a3c4:	486b      	ldr	r0, [pc, #428]	; (801a574 <csv_update+0x220>)
 801a3c6:	f001 f8a9 	bl	801b51c <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes, sTime.Seconds);
 801a3ca:	783b      	ldrb	r3, [r7, #0]
 801a3cc:	461a      	mov	r2, r3
 801a3ce:	787b      	ldrb	r3, [r7, #1]
 801a3d0:	4619      	mov	r1, r3
 801a3d2:	78bb      	ldrb	r3, [r7, #2]
 801a3d4:	9300      	str	r3, [sp, #0]
 801a3d6:	460b      	mov	r3, r1
 801a3d8:	496a      	ldr	r1, [pc, #424]	; (801a584 <csv_update+0x230>)
 801a3da:	4866      	ldr	r0, [pc, #408]	; (801a574 <csv_update+0x220>)
 801a3dc:	f002 f8a4 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a3e0:	4964      	ldr	r1, [pc, #400]	; (801a574 <csv_update+0x220>)
 801a3e2:	4865      	ldr	r0, [pc, #404]	; (801a578 <csv_update+0x224>)
 801a3e4:	f7ff fdaa 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a3e8:	22ff      	movs	r2, #255	; 0xff
 801a3ea:	2100      	movs	r1, #0
 801a3ec:	4861      	ldr	r0, [pc, #388]	; (801a574 <csv_update+0x220>)
 801a3ee:	f001 f895 	bl	801b51c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801a3f2:	4a65      	ldr	r2, [pc, #404]	; (801a588 <csv_update+0x234>)
 801a3f4:	4962      	ldr	r1, [pc, #392]	; (801a580 <csv_update+0x22c>)
 801a3f6:	485f      	ldr	r0, [pc, #380]	; (801a574 <csv_update+0x220>)
 801a3f8:	f002 f896 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a3fc:	495d      	ldr	r1, [pc, #372]	; (801a574 <csv_update+0x220>)
 801a3fe:	485e      	ldr	r0, [pc, #376]	; (801a578 <csv_update+0x224>)
 801a400:	f7ff fd9c 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a404:	22ff      	movs	r2, #255	; 0xff
 801a406:	2100      	movs	r1, #0
 801a408:	485a      	ldr	r0, [pc, #360]	; (801a574 <csv_update+0x220>)
 801a40a:	f001 f887 	bl	801b51c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.name);
 801a40e:	4a5f      	ldr	r2, [pc, #380]	; (801a58c <csv_update+0x238>)
 801a410:	495b      	ldr	r1, [pc, #364]	; (801a580 <csv_update+0x22c>)
 801a412:	4858      	ldr	r0, [pc, #352]	; (801a574 <csv_update+0x220>)
 801a414:	f002 f888 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a418:	4956      	ldr	r1, [pc, #344]	; (801a574 <csv_update+0x220>)
 801a41a:	4857      	ldr	r0, [pc, #348]	; (801a578 <csv_update+0x224>)
 801a41c:	f7ff fd8e 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a420:	22ff      	movs	r2, #255	; 0xff
 801a422:	2100      	movs	r1, #0
 801a424:	4853      	ldr	r0, [pc, #332]	; (801a574 <csv_update+0x220>)
 801a426:	f001 f879 	bl	801b51c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801a42a:	4a59      	ldr	r2, [pc, #356]	; (801a590 <csv_update+0x23c>)
 801a42c:	4954      	ldr	r1, [pc, #336]	; (801a580 <csv_update+0x22c>)
 801a42e:	4851      	ldr	r0, [pc, #324]	; (801a574 <csv_update+0x220>)
 801a430:	f002 f87a 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a434:	494f      	ldr	r1, [pc, #316]	; (801a574 <csv_update+0x220>)
 801a436:	4850      	ldr	r0, [pc, #320]	; (801a578 <csv_update+0x224>)
 801a438:	f7ff fd80 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a43c:	22ff      	movs	r2, #255	; 0xff
 801a43e:	2100      	movs	r1, #0
 801a440:	484c      	ldr	r0, [pc, #304]	; (801a574 <csv_update+0x220>)
 801a442:	f001 f86b 	bl	801b51c <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 801a446:	4b53      	ldr	r3, [pc, #332]	; (801a594 <csv_update+0x240>)
 801a448:	881b      	ldrh	r3, [r3, #0]
 801a44a:	461a      	mov	r2, r3
 801a44c:	4952      	ldr	r1, [pc, #328]	; (801a598 <csv_update+0x244>)
 801a44e:	4849      	ldr	r0, [pc, #292]	; (801a574 <csv_update+0x220>)
 801a450:	f002 f86a 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a454:	4947      	ldr	r1, [pc, #284]	; (801a574 <csv_update+0x220>)
 801a456:	4848      	ldr	r0, [pc, #288]	; (801a578 <csv_update+0x224>)
 801a458:	f7ff fd70 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a45c:	22ff      	movs	r2, #255	; 0xff
 801a45e:	2100      	movs	r1, #0
 801a460:	4844      	ldr	r0, [pc, #272]	; (801a574 <csv_update+0x220>)
 801a462:	f001 f85b 	bl	801b51c <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 801a466:	4b4b      	ldr	r3, [pc, #300]	; (801a594 <csv_update+0x240>)
 801a468:	685b      	ldr	r3, [r3, #4]
 801a46a:	461a      	mov	r2, r3
 801a46c:	494b      	ldr	r1, [pc, #300]	; (801a59c <csv_update+0x248>)
 801a46e:	4841      	ldr	r0, [pc, #260]	; (801a574 <csv_update+0x220>)
 801a470:	f002 f85a 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a474:	493f      	ldr	r1, [pc, #252]	; (801a574 <csv_update+0x220>)
 801a476:	4840      	ldr	r0, [pc, #256]	; (801a578 <csv_update+0x224>)
 801a478:	f7ff fd60 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a47c:	22ff      	movs	r2, #255	; 0xff
 801a47e:	2100      	movs	r1, #0
 801a480:	483c      	ldr	r0, [pc, #240]	; (801a574 <csv_update+0x220>)
 801a482:	f001 f84b 	bl	801b51c <memset>
		sprintf(buffer, "%ld ,",  _RunTime_Packet.humidity);
 801a486:	4b43      	ldr	r3, [pc, #268]	; (801a594 <csv_update+0x240>)
 801a488:	689b      	ldr	r3, [r3, #8]
 801a48a:	461a      	mov	r2, r3
 801a48c:	4943      	ldr	r1, [pc, #268]	; (801a59c <csv_update+0x248>)
 801a48e:	4839      	ldr	r0, [pc, #228]	; (801a574 <csv_update+0x220>)
 801a490:	f002 f84a 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a494:	4937      	ldr	r1, [pc, #220]	; (801a574 <csv_update+0x220>)
 801a496:	4838      	ldr	r0, [pc, #224]	; (801a578 <csv_update+0x224>)
 801a498:	f7ff fd50 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a49c:	22ff      	movs	r2, #255	; 0xff
 801a49e:	2100      	movs	r1, #0
 801a4a0:	4834      	ldr	r0, [pc, #208]	; (801a574 <csv_update+0x220>)
 801a4a2:	f001 f83b 	bl	801b51c <memset>
		sprintf(buffer, "%s ,", _RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801a4a6:	4b3b      	ldr	r3, [pc, #236]	; (801a594 <csv_update+0x240>)
 801a4a8:	7b1b      	ldrb	r3, [r3, #12]
 801a4aa:	2b01      	cmp	r3, #1
 801a4ac:	d101      	bne.n	801a4b2 <csv_update+0x15e>
 801a4ae:	4b3c      	ldr	r3, [pc, #240]	; (801a5a0 <csv_update+0x24c>)
 801a4b0:	e000      	b.n	801a4b4 <csv_update+0x160>
 801a4b2:	4b3c      	ldr	r3, [pc, #240]	; (801a5a4 <csv_update+0x250>)
 801a4b4:	461a      	mov	r2, r3
 801a4b6:	4932      	ldr	r1, [pc, #200]	; (801a580 <csv_update+0x22c>)
 801a4b8:	482e      	ldr	r0, [pc, #184]	; (801a574 <csv_update+0x220>)
 801a4ba:	f002 f835 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a4be:	492d      	ldr	r1, [pc, #180]	; (801a574 <csv_update+0x220>)
 801a4c0:	482d      	ldr	r0, [pc, #180]	; (801a578 <csv_update+0x224>)
 801a4c2:	f7ff fd3b 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a4c6:	22ff      	movs	r2, #255	; 0xff
 801a4c8:	2100      	movs	r1, #0
 801a4ca:	482a      	ldr	r0, [pc, #168]	; (801a574 <csv_update+0x220>)
 801a4cc:	f001 f826 	bl	801b51c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801a4d0:	4b30      	ldr	r3, [pc, #192]	; (801a594 <csv_update+0x240>)
 801a4d2:	695b      	ldr	r3, [r3, #20]
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f7e6 f84f 	bl	8000578 <__aeabi_f2d>
 801a4da:	4602      	mov	r2, r0
 801a4dc:	460b      	mov	r3, r1
 801a4de:	4932      	ldr	r1, [pc, #200]	; (801a5a8 <csv_update+0x254>)
 801a4e0:	4824      	ldr	r0, [pc, #144]	; (801a574 <csv_update+0x220>)
 801a4e2:	f002 f821 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a4e6:	4923      	ldr	r1, [pc, #140]	; (801a574 <csv_update+0x220>)
 801a4e8:	4823      	ldr	r0, [pc, #140]	; (801a578 <csv_update+0x224>)
 801a4ea:	f7ff fd27 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a4ee:	22ff      	movs	r2, #255	; 0xff
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	4820      	ldr	r0, [pc, #128]	; (801a574 <csv_update+0x220>)
 801a4f4:	f001 f812 	bl	801b51c <memset>
		sprintf(buffer, "NONE ,");
 801a4f8:	492c      	ldr	r1, [pc, #176]	; (801a5ac <csv_update+0x258>)
 801a4fa:	481e      	ldr	r0, [pc, #120]	; (801a574 <csv_update+0x220>)
 801a4fc:	f002 f814 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a500:	491c      	ldr	r1, [pc, #112]	; (801a574 <csv_update+0x220>)
 801a502:	481d      	ldr	r0, [pc, #116]	; (801a578 <csv_update+0x224>)
 801a504:	f7ff fd1a 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a508:	22ff      	movs	r2, #255	; 0xff
 801a50a:	2100      	movs	r1, #0
 801a50c:	4819      	ldr	r0, [pc, #100]	; (801a574 <csv_update+0x220>)
 801a50e:	f001 f805 	bl	801b51c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801a512:	4b20      	ldr	r3, [pc, #128]	; (801a594 <csv_update+0x240>)
 801a514:	6a1b      	ldr	r3, [r3, #32]
 801a516:	4618      	mov	r0, r3
 801a518:	f7e6 f82e 	bl	8000578 <__aeabi_f2d>
 801a51c:	4602      	mov	r2, r0
 801a51e:	460b      	mov	r3, r1
 801a520:	4921      	ldr	r1, [pc, #132]	; (801a5a8 <csv_update+0x254>)
 801a522:	4814      	ldr	r0, [pc, #80]	; (801a574 <csv_update+0x220>)
 801a524:	f002 f800 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a528:	4912      	ldr	r1, [pc, #72]	; (801a574 <csv_update+0x220>)
 801a52a:	4813      	ldr	r0, [pc, #76]	; (801a578 <csv_update+0x224>)
 801a52c:	f7ff fd06 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a530:	22ff      	movs	r2, #255	; 0xff
 801a532:	2100      	movs	r1, #0
 801a534:	480f      	ldr	r0, [pc, #60]	; (801a574 <csv_update+0x220>)
 801a536:	f000 fff1 	bl	801b51c <memset>
		sprintf(buffer, "\n");
 801a53a:	491d      	ldr	r1, [pc, #116]	; (801a5b0 <csv_update+0x25c>)
 801a53c:	480d      	ldr	r0, [pc, #52]	; (801a574 <csv_update+0x220>)
 801a53e:	f001 fff3 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a542:	490c      	ldr	r1, [pc, #48]	; (801a574 <csv_update+0x220>)
 801a544:	480c      	ldr	r0, [pc, #48]	; (801a578 <csv_update+0x224>)
 801a546:	f7ff fcf9 	bl	8019f3c <Update_File>

		Unmount_SD("/");
 801a54a:	4807      	ldr	r0, [pc, #28]	; (801a568 <csv_update+0x214>)
 801a54c:	f7ff fc34 	bl	8019db8 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a550:	4b06      	ldr	r3, [pc, #24]	; (801a56c <csv_update+0x218>)
 801a552:	781b      	ldrb	r3, [r3, #0]
 801a554:	b25a      	sxtb	r2, r3
 801a556:	4b0f      	ldr	r3, [pc, #60]	; (801a594 <csv_update+0x240>)
 801a558:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a55c:	bf00      	nop
 801a55e:	3718      	adds	r7, #24
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}
 801a564:	200017c4 	.word	0x200017c4
 801a568:	08021640 	.word	0x08021640
 801a56c:	20002244 	.word	0x20002244
 801a570:	08021758 	.word	0x08021758
 801a574:	200022b0 	.word	0x200022b0
 801a578:	20002248 	.word	0x20002248
 801a57c:	200013a9 	.word	0x200013a9
 801a580:	08021764 	.word	0x08021764
 801a584:	0802176c 	.word	0x0802176c
 801a588:	200013db 	.word	0x200013db
 801a58c:	2000140d 	.word	0x2000140d
 801a590:	2000143f 	.word	0x2000143f
 801a594:	20001474 	.word	0x20001474
 801a598:	08021780 	.word	0x08021780
 801a59c:	08021788 	.word	0x08021788
 801a5a0:	080216fc 	.word	0x080216fc
 801a5a4:	08021704 	.word	0x08021704
 801a5a8:	08021790 	.word	0x08021790
 801a5ac:	08021798 	.word	0x08021798
 801a5b0:	080217a0 	.word	0x080217a0

0801a5b4 <csv_header>:
void csv_header() {
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801a5b8:	485d      	ldr	r0, [pc, #372]	; (801a730 <csv_header+0x17c>)
 801a5ba:	f7ff fbd1 	bl	8019d60 <Mount_SD>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	461a      	mov	r2, r3
 801a5c2:	4b5c      	ldr	r3, [pc, #368]	; (801a734 <csv_header+0x180>)
 801a5c4:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a5c6:	4b5b      	ldr	r3, [pc, #364]	; (801a734 <csv_header+0x180>)
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	f040 80a7 	bne.w	801a71e <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 801a5d0:	4959      	ldr	r1, [pc, #356]	; (801a738 <csv_header+0x184>)
 801a5d2:	485a      	ldr	r0, [pc, #360]	; (801a73c <csv_header+0x188>)
 801a5d4:	f001 ffa8 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a5d8:	4958      	ldr	r1, [pc, #352]	; (801a73c <csv_header+0x188>)
 801a5da:	4859      	ldr	r0, [pc, #356]	; (801a740 <csv_header+0x18c>)
 801a5dc:	f7ff fcae 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a5e0:	22ff      	movs	r2, #255	; 0xff
 801a5e2:	2100      	movs	r1, #0
 801a5e4:	4855      	ldr	r0, [pc, #340]	; (801a73c <csv_header+0x188>)
 801a5e6:	f000 ff99 	bl	801b51c <memset>
		sprintf(buffer, "id ,");
 801a5ea:	4956      	ldr	r1, [pc, #344]	; (801a744 <csv_header+0x190>)
 801a5ec:	4853      	ldr	r0, [pc, #332]	; (801a73c <csv_header+0x188>)
 801a5ee:	f001 ff9b 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a5f2:	4952      	ldr	r1, [pc, #328]	; (801a73c <csv_header+0x188>)
 801a5f4:	4852      	ldr	r0, [pc, #328]	; (801a740 <csv_header+0x18c>)
 801a5f6:	f7ff fca1 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a5fa:	22ff      	movs	r2, #255	; 0xff
 801a5fc:	2100      	movs	r1, #0
 801a5fe:	484f      	ldr	r0, [pc, #316]	; (801a73c <csv_header+0x188>)
 801a600:	f000 ff8c 	bl	801b51c <memset>
		sprintf(buffer, "timestamp ,");
 801a604:	4950      	ldr	r1, [pc, #320]	; (801a748 <csv_header+0x194>)
 801a606:	484d      	ldr	r0, [pc, #308]	; (801a73c <csv_header+0x188>)
 801a608:	f001 ff8e 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a60c:	494b      	ldr	r1, [pc, #300]	; (801a73c <csv_header+0x188>)
 801a60e:	484c      	ldr	r0, [pc, #304]	; (801a740 <csv_header+0x18c>)
 801a610:	f7ff fc94 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a614:	22ff      	movs	r2, #255	; 0xff
 801a616:	2100      	movs	r1, #0
 801a618:	4848      	ldr	r0, [pc, #288]	; (801a73c <csv_header+0x188>)
 801a61a:	f000 ff7f 	bl	801b51c <memset>
		sprintf(buffer, "location ,");
 801a61e:	494b      	ldr	r1, [pc, #300]	; (801a74c <csv_header+0x198>)
 801a620:	4846      	ldr	r0, [pc, #280]	; (801a73c <csv_header+0x188>)
 801a622:	f001 ff81 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a626:	4945      	ldr	r1, [pc, #276]	; (801a73c <csv_header+0x188>)
 801a628:	4845      	ldr	r0, [pc, #276]	; (801a740 <csv_header+0x18c>)
 801a62a:	f7ff fc87 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a62e:	22ff      	movs	r2, #255	; 0xff
 801a630:	2100      	movs	r1, #0
 801a632:	4842      	ldr	r0, [pc, #264]	; (801a73c <csv_header+0x188>)
 801a634:	f000 ff72 	bl	801b51c <memset>
		sprintf(buffer, "name ,");
 801a638:	4945      	ldr	r1, [pc, #276]	; (801a750 <csv_header+0x19c>)
 801a63a:	4840      	ldr	r0, [pc, #256]	; (801a73c <csv_header+0x188>)
 801a63c:	f001 ff74 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a640:	493e      	ldr	r1, [pc, #248]	; (801a73c <csv_header+0x188>)
 801a642:	483f      	ldr	r0, [pc, #252]	; (801a740 <csv_header+0x18c>)
 801a644:	f7ff fc7a 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a648:	22ff      	movs	r2, #255	; 0xff
 801a64a:	2100      	movs	r1, #0
 801a64c:	483b      	ldr	r0, [pc, #236]	; (801a73c <csv_header+0x188>)
 801a64e:	f000 ff65 	bl	801b51c <memset>
		sprintf(buffer, "group ,");
 801a652:	4940      	ldr	r1, [pc, #256]	; (801a754 <csv_header+0x1a0>)
 801a654:	4839      	ldr	r0, [pc, #228]	; (801a73c <csv_header+0x188>)
 801a656:	f001 ff67 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a65a:	4938      	ldr	r1, [pc, #224]	; (801a73c <csv_header+0x188>)
 801a65c:	4838      	ldr	r0, [pc, #224]	; (801a740 <csv_header+0x18c>)
 801a65e:	f7ff fc6d 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a662:	22ff      	movs	r2, #255	; 0xff
 801a664:	2100      	movs	r1, #0
 801a666:	4835      	ldr	r0, [pc, #212]	; (801a73c <csv_header+0x188>)
 801a668:	f000 ff58 	bl	801b51c <memset>
		sprintf(buffer, "co2 ,");
 801a66c:	493a      	ldr	r1, [pc, #232]	; (801a758 <csv_header+0x1a4>)
 801a66e:	4833      	ldr	r0, [pc, #204]	; (801a73c <csv_header+0x188>)
 801a670:	f001 ff5a 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a674:	4931      	ldr	r1, [pc, #196]	; (801a73c <csv_header+0x188>)
 801a676:	4832      	ldr	r0, [pc, #200]	; (801a740 <csv_header+0x18c>)
 801a678:	f7ff fc60 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a67c:	22ff      	movs	r2, #255	; 0xff
 801a67e:	2100      	movs	r1, #0
 801a680:	482e      	ldr	r0, [pc, #184]	; (801a73c <csv_header+0x188>)
 801a682:	f000 ff4b 	bl	801b51c <memset>
		sprintf(buffer, "temperature ,");
 801a686:	4935      	ldr	r1, [pc, #212]	; (801a75c <csv_header+0x1a8>)
 801a688:	482c      	ldr	r0, [pc, #176]	; (801a73c <csv_header+0x188>)
 801a68a:	f001 ff4d 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a68e:	492b      	ldr	r1, [pc, #172]	; (801a73c <csv_header+0x188>)
 801a690:	482b      	ldr	r0, [pc, #172]	; (801a740 <csv_header+0x18c>)
 801a692:	f7ff fc53 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a696:	22ff      	movs	r2, #255	; 0xff
 801a698:	2100      	movs	r1, #0
 801a69a:	4828      	ldr	r0, [pc, #160]	; (801a73c <csv_header+0x188>)
 801a69c:	f000 ff3e 	bl	801b51c <memset>
		sprintf(buffer, "humidity ,");
 801a6a0:	492f      	ldr	r1, [pc, #188]	; (801a760 <csv_header+0x1ac>)
 801a6a2:	4826      	ldr	r0, [pc, #152]	; (801a73c <csv_header+0x188>)
 801a6a4:	f001 ff40 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6a8:	4924      	ldr	r1, [pc, #144]	; (801a73c <csv_header+0x188>)
 801a6aa:	4825      	ldr	r0, [pc, #148]	; (801a740 <csv_header+0x18c>)
 801a6ac:	f7ff fc46 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6b0:	22ff      	movs	r2, #255	; 0xff
 801a6b2:	2100      	movs	r1, #0
 801a6b4:	4821      	ldr	r0, [pc, #132]	; (801a73c <csv_header+0x188>)
 801a6b6:	f000 ff31 	bl	801b51c <memset>
		sprintf(buffer, "pir ,");
 801a6ba:	492a      	ldr	r1, [pc, #168]	; (801a764 <csv_header+0x1b0>)
 801a6bc:	481f      	ldr	r0, [pc, #124]	; (801a73c <csv_header+0x188>)
 801a6be:	f001 ff33 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6c2:	491e      	ldr	r1, [pc, #120]	; (801a73c <csv_header+0x188>)
 801a6c4:	481e      	ldr	r0, [pc, #120]	; (801a740 <csv_header+0x18c>)
 801a6c6:	f7ff fc39 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6ca:	22ff      	movs	r2, #255	; 0xff
 801a6cc:	2100      	movs	r1, #0
 801a6ce:	481b      	ldr	r0, [pc, #108]	; (801a73c <csv_header+0x188>)
 801a6d0:	f000 ff24 	bl	801b51c <memset>
		sprintf(buffer, "pm2.5 ,");
 801a6d4:	4924      	ldr	r1, [pc, #144]	; (801a768 <csv_header+0x1b4>)
 801a6d6:	4819      	ldr	r0, [pc, #100]	; (801a73c <csv_header+0x188>)
 801a6d8:	f001 ff26 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6dc:	4917      	ldr	r1, [pc, #92]	; (801a73c <csv_header+0x188>)
 801a6de:	4818      	ldr	r0, [pc, #96]	; (801a740 <csv_header+0x18c>)
 801a6e0:	f7ff fc2c 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6e4:	22ff      	movs	r2, #255	; 0xff
 801a6e6:	2100      	movs	r1, #0
 801a6e8:	4814      	ldr	r0, [pc, #80]	; (801a73c <csv_header+0x188>)
 801a6ea:	f000 ff17 	bl	801b51c <memset>
		sprintf(buffer, "port ,");
 801a6ee:	491f      	ldr	r1, [pc, #124]	; (801a76c <csv_header+0x1b8>)
 801a6f0:	4812      	ldr	r0, [pc, #72]	; (801a73c <csv_header+0x188>)
 801a6f2:	f001 ff19 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6f6:	4911      	ldr	r1, [pc, #68]	; (801a73c <csv_header+0x188>)
 801a6f8:	4811      	ldr	r0, [pc, #68]	; (801a740 <csv_header+0x18c>)
 801a6fa:	f7ff fc1f 	bl	8019f3c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6fe:	22ff      	movs	r2, #255	; 0xff
 801a700:	2100      	movs	r1, #0
 801a702:	480e      	ldr	r0, [pc, #56]	; (801a73c <csv_header+0x188>)
 801a704:	f000 ff0a 	bl	801b51c <memset>
		sprintf(buffer, "battery \n\n");
 801a708:	4919      	ldr	r1, [pc, #100]	; (801a770 <csv_header+0x1bc>)
 801a70a:	480c      	ldr	r0, [pc, #48]	; (801a73c <csv_header+0x188>)
 801a70c:	f001 ff0c 	bl	801c528 <siprintf>
		Update_File(filename_with_format, buffer);
 801a710:	490a      	ldr	r1, [pc, #40]	; (801a73c <csv_header+0x188>)
 801a712:	480b      	ldr	r0, [pc, #44]	; (801a740 <csv_header+0x18c>)
 801a714:	f7ff fc12 	bl	8019f3c <Update_File>

		Unmount_SD("/");
 801a718:	4805      	ldr	r0, [pc, #20]	; (801a730 <csv_header+0x17c>)
 801a71a:	f7ff fb4d 	bl	8019db8 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a71e:	4b05      	ldr	r3, [pc, #20]	; (801a734 <csv_header+0x180>)
 801a720:	781b      	ldrb	r3, [r3, #0]
 801a722:	b25a      	sxtb	r2, r3
 801a724:	4b13      	ldr	r3, [pc, #76]	; (801a774 <csv_header+0x1c0>)
 801a726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31


}
 801a72a:	bf00      	nop
 801a72c:	bd80      	pop	{r7, pc}
 801a72e:	bf00      	nop
 801a730:	08021640 	.word	0x08021640
 801a734:	20002244 	.word	0x20002244
 801a738:	080217a4 	.word	0x080217a4
 801a73c:	200022b0 	.word	0x200022b0
 801a740:	20002248 	.word	0x20002248
 801a744:	080217b0 	.word	0x080217b0
 801a748:	080217b8 	.word	0x080217b8
 801a74c:	080217c4 	.word	0x080217c4
 801a750:	080217d0 	.word	0x080217d0
 801a754:	080217d8 	.word	0x080217d8
 801a758:	080217e0 	.word	0x080217e0
 801a75c:	080217e8 	.word	0x080217e8
 801a760:	080217f8 	.word	0x080217f8
 801a764:	08021804 	.word	0x08021804
 801a768:	0802180c 	.word	0x0802180c
 801a76c:	08021814 	.word	0x08021814
 801a770:	0802181c 	.word	0x0802181c
 801a774:	20001474 	.word	0x20001474

0801a778 <filesaving_process>:
void filesaving_process() {
 801a778:	b580      	push	{r7, lr}
 801a77a:	af00      	add	r7, sp, #0
//	__disable_irq();
	memset(buffer,0,sizeof(buffer));
 801a77c:	22ff      	movs	r2, #255	; 0xff
 801a77e:	2100      	movs	r1, #0
 801a780:	4807      	ldr	r0, [pc, #28]	; (801a7a0 <filesaving_process+0x28>)
 801a782:	f000 fecb 	bl	801b51c <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801a786:	4b07      	ldr	r3, [pc, #28]	; (801a7a4 <filesaving_process+0x2c>)
 801a788:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d002      	beq.n	801a796 <filesaving_process+0x1e>
		csv_update();
 801a790:	f7ff fde0 	bl	801a354 <csv_update>
	} else {
		json_update();
	}
//	__enable_irq();
}
 801a794:	e001      	b.n	801a79a <filesaving_process+0x22>
		json_update();
 801a796:	f7ff fc8d 	bl	801a0b4 <json_update>
}
 801a79a:	bf00      	nop
 801a79c:	bd80      	pop	{r7, pc}
 801a79e:	bf00      	nop
 801a7a0:	200022b0 	.word	0x200022b0
 801a7a4:	20001474 	.word	0x20001474

0801a7a8 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b08c      	sub	sp, #48	; 0x30
 801a7ac:	af04      	add	r7, sp, #16
 801a7ae:	6078      	str	r0, [r7, #4]
 801a7b0:	6039      	str	r1, [r7, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801a7b2:	482b      	ldr	r0, [pc, #172]	; (801a860 <createfile+0xb8>)
 801a7b4:	f7ff fad4 	bl	8019d60 <Mount_SD>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d002      	beq.n	801a7c4 <createfile+0x1c>
	} else {
	//	__enable_irq();
		return -1;
 801a7be:	f04f 33ff 	mov.w	r3, #4294967295
 801a7c2:	e049      	b.n	801a858 <createfile+0xb0>
	}
	Unmount_SD("/");
 801a7c4:	4826      	ldr	r0, [pc, #152]	; (801a860 <createfile+0xb8>)
 801a7c6:	f7ff faf7 	bl	8019db8 <Unmount_SD>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a7ca:	f107 031c 	add.w	r3, r7, #28
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	4619      	mov	r1, r3
 801a7d2:	4824      	ldr	r0, [pc, #144]	; (801a864 <createfile+0xbc>)
 801a7d4:	f7ee fce6 	bl	80091a4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a7d8:	f107 0308 	add.w	r3, r7, #8
 801a7dc:	2200      	movs	r2, #0
 801a7de:	4619      	mov	r1, r3
 801a7e0:	4820      	ldr	r0, [pc, #128]	; (801a864 <createfile+0xbc>)
 801a7e2:	f7ee fbfd 	bl	8008fe0 <HAL_RTC_GetTime>

	fresult1 = Mount_SD("/");
 801a7e6:	481e      	ldr	r0, [pc, #120]	; (801a860 <createfile+0xb8>)
 801a7e8:	f7ff faba 	bl	8019d60 <Mount_SD>
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	461a      	mov	r2, r3
 801a7f0:	4b1d      	ldr	r3, [pc, #116]	; (801a868 <createfile+0xc0>)
 801a7f2:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801a7f4:	4b1c      	ldr	r3, [pc, #112]	; (801a868 <createfile+0xc0>)
 801a7f6:	781b      	ldrb	r3, [r3, #0]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d129      	bne.n	801a850 <createfile+0xa8>

		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a7fc:	7ffb      	ldrb	r3, [r7, #31]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a7fe:	4618      	mov	r0, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a800:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a802:	461a      	mov	r2, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a804:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a806:	4619      	mov	r1, r3
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	9302      	str	r3, [sp, #8]
 801a80c:	9101      	str	r1, [sp, #4]
 801a80e:	9200      	str	r2, [sp, #0]
 801a810:	4603      	mov	r3, r0
 801a812:	687a      	ldr	r2, [r7, #4]
 801a814:	4915      	ldr	r1, [pc, #84]	; (801a86c <createfile+0xc4>)
 801a816:	4816      	ldr	r0, [pc, #88]	; (801a870 <createfile+0xc8>)
 801a818:	f001 fe86 	bl	801c528 <siprintf>

		fresult1 = Create_File(filename_with_format);
 801a81c:	4814      	ldr	r0, [pc, #80]	; (801a870 <createfile+0xc8>)
 801a81e:	f7ff faf3 	bl	8019e08 <Create_File>
 801a822:	4603      	mov	r3, r0
 801a824:	461a      	mov	r2, r3
 801a826:	4b10      	ldr	r3, [pc, #64]	; (801a868 <createfile+0xc0>)
 801a828:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a82a:	480d      	ldr	r0, [pc, #52]	; (801a860 <createfile+0xb8>)
 801a82c:	f7ff fac4 	bl	8019db8 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801a830:	4b10      	ldr	r3, [pc, #64]	; (801a874 <createfile+0xcc>)
 801a832:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a836:	2b00      	cmp	r3, #0
 801a838:	d00d      	beq.n	801a856 <createfile+0xae>
			if (file_already_exist) {
 801a83a:	4b0f      	ldr	r3, [pc, #60]	; (801a878 <createfile+0xd0>)
 801a83c:	781b      	ldrb	r3, [r3, #0]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d003      	beq.n	801a84a <createfile+0xa2>
				file_already_exist = 0;
 801a842:	4b0d      	ldr	r3, [pc, #52]	; (801a878 <createfile+0xd0>)
 801a844:	2200      	movs	r2, #0
 801a846:	701a      	strb	r2, [r3, #0]
 801a848:	e005      	b.n	801a856 <createfile+0xae>
			} else {
				csv_header();  //json does not require an header only csv
 801a84a:	f7ff feb3 	bl	801a5b4 <csv_header>
 801a84e:	e002      	b.n	801a856 <createfile+0xae>
			}
		}

	} else {
	//	__enable_irq();
		return -1;
 801a850:	f04f 33ff 	mov.w	r3, #4294967295
 801a854:	e000      	b.n	801a858 <createfile+0xb0>
	}
//	__enable_irq();
	return 0;
 801a856:	2300      	movs	r3, #0
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3720      	adds	r7, #32
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}
 801a860:	08021640 	.word	0x08021640
 801a864:	200017c4 	.word	0x200017c4
 801a868:	20002244 	.word	0x20002244
 801a86c:	08021828 	.word	0x08021828
 801a870:	20002248 	.word	0x20002248
 801a874:	20001474 	.word	0x20001474
 801a878:	200022ac 	.word	0x200022ac

0801a87c <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801a880:	4905      	ldr	r1, [pc, #20]	; (801a898 <MX_USB_DEVICE_DeInit+0x1c>)
 801a882:	4806      	ldr	r0, [pc, #24]	; (801a89c <MX_USB_DEVICE_DeInit+0x20>)
 801a884:	f7f9 f8a8 	bl	80139d8 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801a888:	4804      	ldr	r0, [pc, #16]	; (801a89c <MX_USB_DEVICE_DeInit+0x20>)
 801a88a:	f7fb f872 	bl	8015972 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801a88e:	4803      	ldr	r0, [pc, #12]	; (801a89c <MX_USB_DEVICE_DeInit+0x20>)
 801a890:	f7fa fffd 	bl	801588e <USBD_DeInit>

}
 801a894:	bf00      	nop
 801a896:	bd80      	pop	{r7, pc}
 801a898:	20000124 	.word	0x20000124
 801a89c:	200023b0 	.word	0x200023b0

0801a8a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a8a0:	b580      	push	{r7, lr}
 801a8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	4912      	ldr	r1, [pc, #72]	; (801a8f0 <MX_USB_DEVICE_Init+0x50>)
 801a8a8:	4812      	ldr	r0, [pc, #72]	; (801a8f4 <MX_USB_DEVICE_Init+0x54>)
 801a8aa:	f7fa ffc0 	bl	801582e <USBD_Init>
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d001      	beq.n	801a8b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a8b4:	f7e8 fbc4 	bl	8003040 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801a8b8:	490f      	ldr	r1, [pc, #60]	; (801a8f8 <MX_USB_DEVICE_Init+0x58>)
 801a8ba:	480e      	ldr	r0, [pc, #56]	; (801a8f4 <MX_USB_DEVICE_Init+0x54>)
 801a8bc:	f7fb f817 	bl	80158ee <USBD_RegisterClass>
 801a8c0:	4603      	mov	r3, r0
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d001      	beq.n	801a8ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a8c6:	f7e8 fbbb 	bl	8003040 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801a8ca:	490c      	ldr	r1, [pc, #48]	; (801a8fc <MX_USB_DEVICE_Init+0x5c>)
 801a8cc:	4809      	ldr	r0, [pc, #36]	; (801a8f4 <MX_USB_DEVICE_Init+0x54>)
 801a8ce:	f7f9 fa8b 	bl	8013de8 <USBD_MSC_RegisterStorage>
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d001      	beq.n	801a8dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a8d8:	f7e8 fbb2 	bl	8003040 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a8dc:	4805      	ldr	r0, [pc, #20]	; (801a8f4 <MX_USB_DEVICE_Init+0x54>)
 801a8de:	f7fb f83c 	bl	801595a <USBD_Start>
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d001      	beq.n	801a8ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a8e8:	f7e8 fbaa 	bl	8003040 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a8ec:	bf00      	nop
 801a8ee:	bd80      	pop	{r7, pc}
 801a8f0:	200000d4 	.word	0x200000d4
 801a8f4:	200023b0 	.word	0x200023b0
 801a8f8:	2000002c 	.word	0x2000002c
 801a8fc:	20000124 	.word	0x20000124

0801a900 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a900:	b480      	push	{r7}
 801a902:	b083      	sub	sp, #12
 801a904:	af00      	add	r7, sp, #0
 801a906:	4603      	mov	r3, r0
 801a908:	6039      	str	r1, [r7, #0]
 801a90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	2212      	movs	r2, #18
 801a910:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a912:	4b03      	ldr	r3, [pc, #12]	; (801a920 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a914:	4618      	mov	r0, r3
 801a916:	370c      	adds	r7, #12
 801a918:	46bd      	mov	sp, r7
 801a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a91e:	4770      	bx	lr
 801a920:	200000f0 	.word	0x200000f0

0801a924 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a924:	b480      	push	{r7}
 801a926:	b083      	sub	sp, #12
 801a928:	af00      	add	r7, sp, #0
 801a92a:	4603      	mov	r3, r0
 801a92c:	6039      	str	r1, [r7, #0]
 801a92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	2204      	movs	r2, #4
 801a934:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a936:	4b03      	ldr	r3, [pc, #12]	; (801a944 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a938:	4618      	mov	r0, r3
 801a93a:	370c      	adds	r7, #12
 801a93c:	46bd      	mov	sp, r7
 801a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a942:	4770      	bx	lr
 801a944:	20000104 	.word	0x20000104

0801a948 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	4603      	mov	r3, r0
 801a950:	6039      	str	r1, [r7, #0]
 801a952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a954:	79fb      	ldrb	r3, [r7, #7]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d105      	bne.n	801a966 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a95a:	683a      	ldr	r2, [r7, #0]
 801a95c:	4907      	ldr	r1, [pc, #28]	; (801a97c <USBD_FS_ProductStrDescriptor+0x34>)
 801a95e:	4808      	ldr	r0, [pc, #32]	; (801a980 <USBD_FS_ProductStrDescriptor+0x38>)
 801a960:	f7fc f9c2 	bl	8016ce8 <USBD_GetString>
 801a964:	e004      	b.n	801a970 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a966:	683a      	ldr	r2, [r7, #0]
 801a968:	4904      	ldr	r1, [pc, #16]	; (801a97c <USBD_FS_ProductStrDescriptor+0x34>)
 801a96a:	4805      	ldr	r0, [pc, #20]	; (801a980 <USBD_FS_ProductStrDescriptor+0x38>)
 801a96c:	f7fc f9bc 	bl	8016ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a970:	4b02      	ldr	r3, [pc, #8]	; (801a97c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a972:	4618      	mov	r0, r3
 801a974:	3708      	adds	r7, #8
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}
 801a97a:	bf00      	nop
 801a97c:	2000268c 	.word	0x2000268c
 801a980:	0802183c 	.word	0x0802183c

0801a984 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b082      	sub	sp, #8
 801a988:	af00      	add	r7, sp, #0
 801a98a:	4603      	mov	r3, r0
 801a98c:	6039      	str	r1, [r7, #0]
 801a98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a990:	683a      	ldr	r2, [r7, #0]
 801a992:	4904      	ldr	r1, [pc, #16]	; (801a9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a994:	4804      	ldr	r0, [pc, #16]	; (801a9a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a996:	f7fc f9a7 	bl	8016ce8 <USBD_GetString>
  return USBD_StrDesc;
 801a99a:	4b02      	ldr	r3, [pc, #8]	; (801a9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3708      	adds	r7, #8
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	2000268c 	.word	0x2000268c
 801a9a8:	08021850 	.word	0x08021850

0801a9ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	4603      	mov	r3, r0
 801a9b4:	6039      	str	r1, [r7, #0]
 801a9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	221a      	movs	r2, #26
 801a9bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a9be:	f000 f843 	bl	801aa48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a9c2:	4b02      	ldr	r3, [pc, #8]	; (801a9cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	3708      	adds	r7, #8
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}
 801a9cc:	20000108 	.word	0x20000108

0801a9d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b082      	sub	sp, #8
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	6039      	str	r1, [r7, #0]
 801a9da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a9dc:	79fb      	ldrb	r3, [r7, #7]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d105      	bne.n	801a9ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a9e2:	683a      	ldr	r2, [r7, #0]
 801a9e4:	4907      	ldr	r1, [pc, #28]	; (801aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a9e6:	4808      	ldr	r0, [pc, #32]	; (801aa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a9e8:	f7fc f97e 	bl	8016ce8 <USBD_GetString>
 801a9ec:	e004      	b.n	801a9f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a9ee:	683a      	ldr	r2, [r7, #0]
 801a9f0:	4904      	ldr	r1, [pc, #16]	; (801aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a9f2:	4805      	ldr	r0, [pc, #20]	; (801aa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a9f4:	f7fc f978 	bl	8016ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a9f8:	4b02      	ldr	r3, [pc, #8]	; (801aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	3708      	adds	r7, #8
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}
 801aa02:	bf00      	nop
 801aa04:	2000268c 	.word	0x2000268c
 801aa08:	08021864 	.word	0x08021864

0801aa0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b082      	sub	sp, #8
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	4603      	mov	r3, r0
 801aa14:	6039      	str	r1, [r7, #0]
 801aa16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aa18:	79fb      	ldrb	r3, [r7, #7]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d105      	bne.n	801aa2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801aa1e:	683a      	ldr	r2, [r7, #0]
 801aa20:	4907      	ldr	r1, [pc, #28]	; (801aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801aa22:	4808      	ldr	r0, [pc, #32]	; (801aa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801aa24:	f7fc f960 	bl	8016ce8 <USBD_GetString>
 801aa28:	e004      	b.n	801aa34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801aa2a:	683a      	ldr	r2, [r7, #0]
 801aa2c:	4904      	ldr	r1, [pc, #16]	; (801aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801aa2e:	4805      	ldr	r0, [pc, #20]	; (801aa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801aa30:	f7fc f95a 	bl	8016ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aa34:	4b02      	ldr	r3, [pc, #8]	; (801aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801aa36:	4618      	mov	r0, r3
 801aa38:	3708      	adds	r7, #8
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
 801aa3e:	bf00      	nop
 801aa40:	2000268c 	.word	0x2000268c
 801aa44:	08021870 	.word	0x08021870

0801aa48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b084      	sub	sp, #16
 801aa4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801aa4e:	4b0f      	ldr	r3, [pc, #60]	; (801aa8c <Get_SerialNum+0x44>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801aa54:	4b0e      	ldr	r3, [pc, #56]	; (801aa90 <Get_SerialNum+0x48>)
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801aa5a:	4b0e      	ldr	r3, [pc, #56]	; (801aa94 <Get_SerialNum+0x4c>)
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801aa60:	68fa      	ldr	r2, [r7, #12]
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	4413      	add	r3, r2
 801aa66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d009      	beq.n	801aa82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801aa6e:	2208      	movs	r2, #8
 801aa70:	4909      	ldr	r1, [pc, #36]	; (801aa98 <Get_SerialNum+0x50>)
 801aa72:	68f8      	ldr	r0, [r7, #12]
 801aa74:	f000 f814 	bl	801aaa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801aa78:	2204      	movs	r2, #4
 801aa7a:	4908      	ldr	r1, [pc, #32]	; (801aa9c <Get_SerialNum+0x54>)
 801aa7c:	68b8      	ldr	r0, [r7, #8]
 801aa7e:	f000 f80f 	bl	801aaa0 <IntToUnicode>
  }
}
 801aa82:	bf00      	nop
 801aa84:	3710      	adds	r7, #16
 801aa86:	46bd      	mov	sp, r7
 801aa88:	bd80      	pop	{r7, pc}
 801aa8a:	bf00      	nop
 801aa8c:	1fff7a10 	.word	0x1fff7a10
 801aa90:	1fff7a14 	.word	0x1fff7a14
 801aa94:	1fff7a18 	.word	0x1fff7a18
 801aa98:	2000010a 	.word	0x2000010a
 801aa9c:	2000011a 	.word	0x2000011a

0801aaa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	b087      	sub	sp, #28
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	60f8      	str	r0, [r7, #12]
 801aaa8:	60b9      	str	r1, [r7, #8]
 801aaaa:	4613      	mov	r3, r2
 801aaac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801aaae:	2300      	movs	r3, #0
 801aab0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801aab2:	2300      	movs	r3, #0
 801aab4:	75fb      	strb	r3, [r7, #23]
 801aab6:	e027      	b.n	801ab08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	0f1b      	lsrs	r3, r3, #28
 801aabc:	2b09      	cmp	r3, #9
 801aabe:	d80b      	bhi.n	801aad8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	0f1b      	lsrs	r3, r3, #28
 801aac4:	b2da      	uxtb	r2, r3
 801aac6:	7dfb      	ldrb	r3, [r7, #23]
 801aac8:	005b      	lsls	r3, r3, #1
 801aaca:	4619      	mov	r1, r3
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	440b      	add	r3, r1
 801aad0:	3230      	adds	r2, #48	; 0x30
 801aad2:	b2d2      	uxtb	r2, r2
 801aad4:	701a      	strb	r2, [r3, #0]
 801aad6:	e00a      	b.n	801aaee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	0f1b      	lsrs	r3, r3, #28
 801aadc:	b2da      	uxtb	r2, r3
 801aade:	7dfb      	ldrb	r3, [r7, #23]
 801aae0:	005b      	lsls	r3, r3, #1
 801aae2:	4619      	mov	r1, r3
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	440b      	add	r3, r1
 801aae8:	3237      	adds	r2, #55	; 0x37
 801aaea:	b2d2      	uxtb	r2, r2
 801aaec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	011b      	lsls	r3, r3, #4
 801aaf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801aaf4:	7dfb      	ldrb	r3, [r7, #23]
 801aaf6:	005b      	lsls	r3, r3, #1
 801aaf8:	3301      	adds	r3, #1
 801aafa:	68ba      	ldr	r2, [r7, #8]
 801aafc:	4413      	add	r3, r2
 801aafe:	2200      	movs	r2, #0
 801ab00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ab02:	7dfb      	ldrb	r3, [r7, #23]
 801ab04:	3301      	adds	r3, #1
 801ab06:	75fb      	strb	r3, [r7, #23]
 801ab08:	7dfa      	ldrb	r2, [r7, #23]
 801ab0a:	79fb      	ldrb	r3, [r7, #7]
 801ab0c:	429a      	cmp	r2, r3
 801ab0e:	d3d3      	bcc.n	801aab8 <IntToUnicode+0x18>
  }
}
 801ab10:	bf00      	nop
 801ab12:	bf00      	nop
 801ab14:	371c      	adds	r7, #28
 801ab16:	46bd      	mov	sp, r7
 801ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1c:	4770      	bx	lr

0801ab1e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801ab1e:	b480      	push	{r7}
 801ab20:	b083      	sub	sp, #12
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	4603      	mov	r3, r0
 801ab26:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801ab28:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	370c      	adds	r7, #12
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab34:	4770      	bx	lr
	...

0801ab38 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b08e      	sub	sp, #56	; 0x38
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	4603      	mov	r3, r0
 801ab40:	60b9      	str	r1, [r7, #8]
 801ab42:	607a      	str	r2, [r7, #4]
 801ab44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801ab46:	23ff      	movs	r3, #255	; 0xff
 801ab48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801ab4c:	f107 0314 	add.w	r3, r7, #20
 801ab50:	4619      	mov	r1, r3
 801ab52:	480a      	ldr	r0, [pc, #40]	; (801ab7c <STORAGE_GetCapacity_FS+0x44>)
 801ab54:	f7ef fb7e 	bl	800a254 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5a:	1e5a      	subs	r2, r3, #1
 801ab5c:	68bb      	ldr	r3, [r7, #8]
 801ab5e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab62:	b29a      	uxth	r2, r3
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801ab68:	2300      	movs	r3, #0
 801ab6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801ab6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801ab72:	4618      	mov	r0, r3
 801ab74:	3738      	adds	r7, #56	; 0x38
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}
 801ab7a:	bf00      	nop
 801ab7c:	200017e4 	.word	0x200017e4

0801ab80 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801ab80:	b480      	push	{r7}
 801ab82:	b083      	sub	sp, #12
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	4603      	mov	r3, r0
 801ab88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801ab8a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	370c      	adds	r7, #12
 801ab90:	46bd      	mov	sp, r7
 801ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab96:	4770      	bx	lr

0801ab98 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801ab98:	b480      	push	{r7}
 801ab9a:	b083      	sub	sp, #12
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	4603      	mov	r3, r0
 801aba0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801aba2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	370c      	adds	r7, #12
 801aba8:	46bd      	mov	sp, r7
 801abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abae:	4770      	bx	lr

0801abb0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b088      	sub	sp, #32
 801abb4:	af02      	add	r7, sp, #8
 801abb6:	60b9      	str	r1, [r7, #8]
 801abb8:	607a      	str	r2, [r7, #4]
 801abba:	461a      	mov	r2, r3
 801abbc:	4603      	mov	r3, r0
 801abbe:	73fb      	strb	r3, [r7, #15]
 801abc0:	4613      	mov	r3, r2
 801abc2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801abc4:	23ff      	movs	r3, #255	; 0xff
 801abc6:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801abc8:	f7e8 ff78 	bl	8003abc <HAL_GetTick>
 801abcc:	4603      	mov	r3, r0
 801abce:	4a0d      	ldr	r2, [pc, #52]	; (801ac04 <STORAGE_Read_FS+0x54>)
 801abd0:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801abd2:	89bb      	ldrh	r3, [r7, #12]
 801abd4:	f04f 32ff 	mov.w	r2, #4294967295
 801abd8:	9200      	str	r2, [sp, #0]
 801abda:	687a      	ldr	r2, [r7, #4]
 801abdc:	68b9      	ldr	r1, [r7, #8]
 801abde:	480a      	ldr	r0, [pc, #40]	; (801ac08 <STORAGE_Read_FS+0x58>)
 801abe0:	f7ee fe30 	bl	8009844 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801abe4:	bf00      	nop
 801abe6:	4808      	ldr	r0, [pc, #32]	; (801ac08 <STORAGE_Read_FS+0x58>)
 801abe8:	f7ef fb60 	bl	800a2ac <HAL_SD_GetCardState>
 801abec:	4603      	mov	r3, r0
 801abee:	2b04      	cmp	r3, #4
 801abf0:	d1f9      	bne.n	801abe6 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801abf2:	2300      	movs	r3, #0
 801abf4:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801abf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801abfa:	4618      	mov	r0, r3
 801abfc:	3718      	adds	r7, #24
 801abfe:	46bd      	mov	sp, r7
 801ac00:	bd80      	pop	{r7, pc}
 801ac02:	bf00      	nop
 801ac04:	200016f8 	.word	0x200016f8
 801ac08:	200017e4 	.word	0x200017e4

0801ac0c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b088      	sub	sp, #32
 801ac10:	af02      	add	r7, sp, #8
 801ac12:	60b9      	str	r1, [r7, #8]
 801ac14:	607a      	str	r2, [r7, #4]
 801ac16:	461a      	mov	r2, r3
 801ac18:	4603      	mov	r3, r0
 801ac1a:	73fb      	strb	r3, [r7, #15]
 801ac1c:	4613      	mov	r3, r2
 801ac1e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801ac20:	23ff      	movs	r3, #255	; 0xff
 801ac22:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801ac24:	89bb      	ldrh	r3, [r7, #12]
 801ac26:	f04f 32ff 	mov.w	r2, #4294967295
 801ac2a:	9200      	str	r2, [sp, #0]
 801ac2c:	687a      	ldr	r2, [r7, #4]
 801ac2e:	68b9      	ldr	r1, [r7, #8]
 801ac30:	4808      	ldr	r0, [pc, #32]	; (801ac54 <STORAGE_Write_FS+0x48>)
 801ac32:	f7ee ffe5 	bl	8009c00 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801ac36:	bf00      	nop
 801ac38:	4806      	ldr	r0, [pc, #24]	; (801ac54 <STORAGE_Write_FS+0x48>)
 801ac3a:	f7ef fb37 	bl	800a2ac <HAL_SD_GetCardState>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	2b04      	cmp	r3, #4
 801ac42:	d1f9      	bne.n	801ac38 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801ac44:	2300      	movs	r3, #0
 801ac46:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801ac48:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	3718      	adds	r7, #24
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bd80      	pop	{r7, pc}
 801ac54:	200017e4 	.word	0x200017e4

0801ac58 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801ac58:	b480      	push	{r7}
 801ac5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801ac5c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	46bd      	mov	sp, r7
 801ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac66:	4770      	bx	lr

0801ac68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b08a      	sub	sp, #40	; 0x28
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ac70:	f107 0314 	add.w	r3, r7, #20
 801ac74:	2200      	movs	r2, #0
 801ac76:	601a      	str	r2, [r3, #0]
 801ac78:	605a      	str	r2, [r3, #4]
 801ac7a:	609a      	str	r2, [r3, #8]
 801ac7c:	60da      	str	r2, [r3, #12]
 801ac7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ac88:	d13a      	bne.n	801ad00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	613b      	str	r3, [r7, #16]
 801ac8e:	4b1e      	ldr	r3, [pc, #120]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac92:	4a1d      	ldr	r2, [pc, #116]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801ac94:	f043 0301 	orr.w	r3, r3, #1
 801ac98:	6313      	str	r3, [r2, #48]	; 0x30
 801ac9a:	4b1b      	ldr	r3, [pc, #108]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801ac9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac9e:	f003 0301 	and.w	r3, r3, #1
 801aca2:	613b      	str	r3, [r7, #16]
 801aca4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801aca6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801acaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801acac:	2302      	movs	r3, #2
 801acae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801acb0:	2300      	movs	r3, #0
 801acb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801acb4:	2303      	movs	r3, #3
 801acb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801acb8:	230a      	movs	r3, #10
 801acba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801acbc:	f107 0314 	add.w	r3, r7, #20
 801acc0:	4619      	mov	r1, r3
 801acc2:	4812      	ldr	r0, [pc, #72]	; (801ad0c <HAL_PCD_MspInit+0xa4>)
 801acc4:	f7ea fc5e 	bl	8005584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801acc8:	4b0f      	ldr	r3, [pc, #60]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801acca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801accc:	4a0e      	ldr	r2, [pc, #56]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801acce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acd2:	6353      	str	r3, [r2, #52]	; 0x34
 801acd4:	2300      	movs	r3, #0
 801acd6:	60fb      	str	r3, [r7, #12]
 801acd8:	4b0b      	ldr	r3, [pc, #44]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801acda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acdc:	4a0a      	ldr	r2, [pc, #40]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801acde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ace2:	6453      	str	r3, [r2, #68]	; 0x44
 801ace4:	4b08      	ldr	r3, [pc, #32]	; (801ad08 <HAL_PCD_MspInit+0xa0>)
 801ace6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ace8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801acec:	60fb      	str	r3, [r7, #12]
 801acee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801acf0:	2200      	movs	r2, #0
 801acf2:	2100      	movs	r1, #0
 801acf4:	2043      	movs	r0, #67	; 0x43
 801acf6:	f7e9 fcc4 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801acfa:	2043      	movs	r0, #67	; 0x43
 801acfc:	f7e9 fcdd 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ad00:	bf00      	nop
 801ad02:	3728      	adds	r7, #40	; 0x28
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}
 801ad08:	40023800 	.word	0x40023800
 801ad0c:	40020000 	.word	0x40020000

0801ad10 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b082      	sub	sp, #8
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ad20:	d10d      	bne.n	801ad3e <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801ad22:	4b09      	ldr	r3, [pc, #36]	; (801ad48 <HAL_PCD_MspDeInit+0x38>)
 801ad24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad26:	4a08      	ldr	r2, [pc, #32]	; (801ad48 <HAL_PCD_MspDeInit+0x38>)
 801ad28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ad2c:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801ad2e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ad32:	4806      	ldr	r0, [pc, #24]	; (801ad4c <HAL_PCD_MspDeInit+0x3c>)
 801ad34:	f7ea fdaa 	bl	800588c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801ad38:	2043      	movs	r0, #67	; 0x43
 801ad3a:	f7e9 fccc 	bl	80046d6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801ad3e:	bf00      	nop
 801ad40:	3708      	adds	r7, #8
 801ad42:	46bd      	mov	sp, r7
 801ad44:	bd80      	pop	{r7, pc}
 801ad46:	bf00      	nop
 801ad48:	40023800 	.word	0x40023800
 801ad4c:	40020000 	.word	0x40020000

0801ad50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b082      	sub	sp, #8
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ad64:	4619      	mov	r1, r3
 801ad66:	4610      	mov	r0, r2
 801ad68:	f7fa fe5f 	bl	8015a2a <USBD_LL_SetupStage>
}
 801ad6c:	bf00      	nop
 801ad6e:	3708      	adds	r7, #8
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}

0801ad74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b082      	sub	sp, #8
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
 801ad7c:	460b      	mov	r3, r1
 801ad7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ad86:	78fa      	ldrb	r2, [r7, #3]
 801ad88:	6879      	ldr	r1, [r7, #4]
 801ad8a:	4613      	mov	r3, r2
 801ad8c:	00db      	lsls	r3, r3, #3
 801ad8e:	4413      	add	r3, r2
 801ad90:	009b      	lsls	r3, r3, #2
 801ad92:	440b      	add	r3, r1
 801ad94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	78fb      	ldrb	r3, [r7, #3]
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	f7fa fe99 	bl	8015ad4 <USBD_LL_DataOutStage>
}
 801ada2:	bf00      	nop
 801ada4:	3708      	adds	r7, #8
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b082      	sub	sp, #8
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
 801adb2:	460b      	mov	r3, r1
 801adb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801adbc:	78fa      	ldrb	r2, [r7, #3]
 801adbe:	6879      	ldr	r1, [r7, #4]
 801adc0:	4613      	mov	r3, r2
 801adc2:	00db      	lsls	r3, r3, #3
 801adc4:	4413      	add	r3, r2
 801adc6:	009b      	lsls	r3, r3, #2
 801adc8:	440b      	add	r3, r1
 801adca:	334c      	adds	r3, #76	; 0x4c
 801adcc:	681a      	ldr	r2, [r3, #0]
 801adce:	78fb      	ldrb	r3, [r7, #3]
 801add0:	4619      	mov	r1, r3
 801add2:	f7fa ff32 	bl	8015c3a <USBD_LL_DataInStage>
}
 801add6:	bf00      	nop
 801add8:	3708      	adds	r7, #8
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}

0801adde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adde:	b580      	push	{r7, lr}
 801ade0:	b082      	sub	sp, #8
 801ade2:	af00      	add	r7, sp, #0
 801ade4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801adec:	4618      	mov	r0, r3
 801adee:	f7fb f866 	bl	8015ebe <USBD_LL_SOF>
}
 801adf2:	bf00      	nop
 801adf4:	3708      	adds	r7, #8
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}

0801adfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adfa:	b580      	push	{r7, lr}
 801adfc:	b084      	sub	sp, #16
 801adfe:	af00      	add	r7, sp, #0
 801ae00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ae02:	2301      	movs	r3, #1
 801ae04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	68db      	ldr	r3, [r3, #12]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d102      	bne.n	801ae14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	73fb      	strb	r3, [r7, #15]
 801ae12:	e008      	b.n	801ae26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	68db      	ldr	r3, [r3, #12]
 801ae18:	2b02      	cmp	r3, #2
 801ae1a:	d102      	bne.n	801ae22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ae1c:	2301      	movs	r3, #1
 801ae1e:	73fb      	strb	r3, [r7, #15]
 801ae20:	e001      	b.n	801ae26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801ae22:	f7e8 f90d 	bl	8003040 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae2c:	7bfa      	ldrb	r2, [r7, #15]
 801ae2e:	4611      	mov	r1, r2
 801ae30:	4618      	mov	r0, r3
 801ae32:	f7fb f806 	bl	8015e42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	f7fa ffae 	bl	8015d9e <USBD_LL_Reset>
}
 801ae42:	bf00      	nop
 801ae44:	3710      	adds	r7, #16
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bd80      	pop	{r7, pc}
	...

0801ae4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b082      	sub	sp, #8
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7fb f801 	bl	8015e62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	687a      	ldr	r2, [r7, #4]
 801ae6c:	6812      	ldr	r2, [r2, #0]
 801ae6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ae72:	f043 0301 	orr.w	r3, r3, #1
 801ae76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	6a1b      	ldr	r3, [r3, #32]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d005      	beq.n	801ae8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ae80:	4b04      	ldr	r3, [pc, #16]	; (801ae94 <HAL_PCD_SuspendCallback+0x48>)
 801ae82:	691b      	ldr	r3, [r3, #16]
 801ae84:	4a03      	ldr	r2, [pc, #12]	; (801ae94 <HAL_PCD_SuspendCallback+0x48>)
 801ae86:	f043 0306 	orr.w	r3, r3, #6
 801ae8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ae8c:	bf00      	nop
 801ae8e:	3708      	adds	r7, #8
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd80      	pop	{r7, pc}
 801ae94:	e000ed00 	.word	0xe000ed00

0801ae98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b082      	sub	sp, #8
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aea6:	4618      	mov	r0, r3
 801aea8:	f7fa fff1 	bl	8015e8e <USBD_LL_Resume>
}
 801aeac:	bf00      	nop
 801aeae:	3708      	adds	r7, #8
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	bd80      	pop	{r7, pc}

0801aeb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b082      	sub	sp, #8
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
 801aebc:	460b      	mov	r3, r1
 801aebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aec6:	78fa      	ldrb	r2, [r7, #3]
 801aec8:	4611      	mov	r1, r2
 801aeca:	4618      	mov	r0, r3
 801aecc:	f7fb f849 	bl	8015f62 <USBD_LL_IsoOUTIncomplete>
}
 801aed0:	bf00      	nop
 801aed2:	3708      	adds	r7, #8
 801aed4:	46bd      	mov	sp, r7
 801aed6:	bd80      	pop	{r7, pc}

0801aed8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b082      	sub	sp, #8
 801aedc:	af00      	add	r7, sp, #0
 801aede:	6078      	str	r0, [r7, #4]
 801aee0:	460b      	mov	r3, r1
 801aee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aeea:	78fa      	ldrb	r2, [r7, #3]
 801aeec:	4611      	mov	r1, r2
 801aeee:	4618      	mov	r0, r3
 801aef0:	f7fb f805 	bl	8015efe <USBD_LL_IsoINIncomplete>
}
 801aef4:	bf00      	nop
 801aef6:	3708      	adds	r7, #8
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}

0801aefc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b082      	sub	sp, #8
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af0a:	4618      	mov	r0, r3
 801af0c:	f7fb f85b 	bl	8015fc6 <USBD_LL_DevConnected>
}
 801af10:	bf00      	nop
 801af12:	3708      	adds	r7, #8
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}

0801af18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b082      	sub	sp, #8
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af26:	4618      	mov	r0, r3
 801af28:	f7fb f858 	bl	8015fdc <USBD_LL_DevDisconnected>
}
 801af2c:	bf00      	nop
 801af2e:	3708      	adds	r7, #8
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}

0801af34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b082      	sub	sp, #8
 801af38:	af00      	add	r7, sp, #0
 801af3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	781b      	ldrb	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d13c      	bne.n	801afbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801af44:	4a20      	ldr	r2, [pc, #128]	; (801afc8 <USBD_LL_Init+0x94>)
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	4a1e      	ldr	r2, [pc, #120]	; (801afc8 <USBD_LL_Init+0x94>)
 801af50:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801af54:	4b1c      	ldr	r3, [pc, #112]	; (801afc8 <USBD_LL_Init+0x94>)
 801af56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801af5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801af5c:	4b1a      	ldr	r3, [pc, #104]	; (801afc8 <USBD_LL_Init+0x94>)
 801af5e:	2204      	movs	r2, #4
 801af60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801af62:	4b19      	ldr	r3, [pc, #100]	; (801afc8 <USBD_LL_Init+0x94>)
 801af64:	2202      	movs	r2, #2
 801af66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801af68:	4b17      	ldr	r3, [pc, #92]	; (801afc8 <USBD_LL_Init+0x94>)
 801af6a:	2200      	movs	r2, #0
 801af6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801af6e:	4b16      	ldr	r3, [pc, #88]	; (801afc8 <USBD_LL_Init+0x94>)
 801af70:	2202      	movs	r2, #2
 801af72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801af74:	4b14      	ldr	r3, [pc, #80]	; (801afc8 <USBD_LL_Init+0x94>)
 801af76:	2200      	movs	r2, #0
 801af78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801af7a:	4b13      	ldr	r3, [pc, #76]	; (801afc8 <USBD_LL_Init+0x94>)
 801af7c:	2200      	movs	r2, #0
 801af7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801af80:	4b11      	ldr	r3, [pc, #68]	; (801afc8 <USBD_LL_Init+0x94>)
 801af82:	2200      	movs	r2, #0
 801af84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801af86:	4b10      	ldr	r3, [pc, #64]	; (801afc8 <USBD_LL_Init+0x94>)
 801af88:	2200      	movs	r2, #0
 801af8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801af8c:	4b0e      	ldr	r3, [pc, #56]	; (801afc8 <USBD_LL_Init+0x94>)
 801af8e:	2200      	movs	r2, #0
 801af90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801af92:	480d      	ldr	r0, [pc, #52]	; (801afc8 <USBD_LL_Init+0x94>)
 801af94:	f7eb fe9b 	bl	8006cce <HAL_PCD_Init>
 801af98:	4603      	mov	r3, r0
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d001      	beq.n	801afa2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801af9e:	f7e8 f84f 	bl	8003040 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801afa2:	2180      	movs	r1, #128	; 0x80
 801afa4:	4808      	ldr	r0, [pc, #32]	; (801afc8 <USBD_LL_Init+0x94>)
 801afa6:	f7ed f97c 	bl	80082a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801afaa:	2240      	movs	r2, #64	; 0x40
 801afac:	2100      	movs	r1, #0
 801afae:	4806      	ldr	r0, [pc, #24]	; (801afc8 <USBD_LL_Init+0x94>)
 801afb0:	f7ed f930 	bl	8008214 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801afb4:	2280      	movs	r2, #128	; 0x80
 801afb6:	2101      	movs	r1, #1
 801afb8:	4803      	ldr	r0, [pc, #12]	; (801afc8 <USBD_LL_Init+0x94>)
 801afba:	f7ed f92b 	bl	8008214 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801afbe:	2300      	movs	r3, #0
}
 801afc0:	4618      	mov	r0, r3
 801afc2:	3708      	adds	r7, #8
 801afc4:	46bd      	mov	sp, r7
 801afc6:	bd80      	pop	{r7, pc}
 801afc8:	2000288c 	.word	0x2000288c

0801afcc <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b084      	sub	sp, #16
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801afd4:	2300      	movs	r3, #0
 801afd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801afd8:	2300      	movs	r3, #0
 801afda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801afe2:	4618      	mov	r0, r3
 801afe4:	f7eb ff90 	bl	8006f08 <HAL_PCD_DeInit>
 801afe8:	4603      	mov	r3, r0
 801afea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801afec:	7bfb      	ldrb	r3, [r7, #15]
 801afee:	4618      	mov	r0, r3
 801aff0:	f000 f998 	bl	801b324 <USBD_Get_USB_Status>
 801aff4:	4603      	mov	r3, r0
 801aff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aff8:	7bbb      	ldrb	r3, [r7, #14]
}
 801affa:	4618      	mov	r0, r3
 801affc:	3710      	adds	r7, #16
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}

0801b002 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b002:	b580      	push	{r7, lr}
 801b004:	b084      	sub	sp, #16
 801b006:	af00      	add	r7, sp, #0
 801b008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b00a:	2300      	movs	r3, #0
 801b00c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b00e:	2300      	movs	r3, #0
 801b010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b018:	4618      	mov	r0, r3
 801b01a:	f7eb ff98 	bl	8006f4e <HAL_PCD_Start>
 801b01e:	4603      	mov	r3, r0
 801b020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b022:	7bfb      	ldrb	r3, [r7, #15]
 801b024:	4618      	mov	r0, r3
 801b026:	f000 f97d 	bl	801b324 <USBD_Get_USB_Status>
 801b02a:	4603      	mov	r3, r0
 801b02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b02e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b030:	4618      	mov	r0, r3
 801b032:	3710      	adds	r7, #16
 801b034:	46bd      	mov	sp, r7
 801b036:	bd80      	pop	{r7, pc}

0801b038 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b084      	sub	sp, #16
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b040:	2300      	movs	r3, #0
 801b042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b044:	2300      	movs	r3, #0
 801b046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b04e:	4618      	mov	r0, r3
 801b050:	f7eb ffb0 	bl	8006fb4 <HAL_PCD_Stop>
 801b054:	4603      	mov	r3, r0
 801b056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b058:	7bfb      	ldrb	r3, [r7, #15]
 801b05a:	4618      	mov	r0, r3
 801b05c:	f000 f962 	bl	801b324 <USBD_Get_USB_Status>
 801b060:	4603      	mov	r3, r0
 801b062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b064:	7bbb      	ldrb	r3, [r7, #14]
}
 801b066:	4618      	mov	r0, r3
 801b068:	3710      	adds	r7, #16
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b084      	sub	sp, #16
 801b072:	af00      	add	r7, sp, #0
 801b074:	6078      	str	r0, [r7, #4]
 801b076:	4608      	mov	r0, r1
 801b078:	4611      	mov	r1, r2
 801b07a:	461a      	mov	r2, r3
 801b07c:	4603      	mov	r3, r0
 801b07e:	70fb      	strb	r3, [r7, #3]
 801b080:	460b      	mov	r3, r1
 801b082:	70bb      	strb	r3, [r7, #2]
 801b084:	4613      	mov	r3, r2
 801b086:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b088:	2300      	movs	r3, #0
 801b08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b08c:	2300      	movs	r3, #0
 801b08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b096:	78bb      	ldrb	r3, [r7, #2]
 801b098:	883a      	ldrh	r2, [r7, #0]
 801b09a:	78f9      	ldrb	r1, [r7, #3]
 801b09c:	f7ec fc87 	bl	80079ae <HAL_PCD_EP_Open>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0a4:	7bfb      	ldrb	r3, [r7, #15]
 801b0a6:	4618      	mov	r0, r3
 801b0a8:	f000 f93c 	bl	801b324 <USBD_Get_USB_Status>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	3710      	adds	r7, #16
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}

0801b0ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0ba:	b580      	push	{r7, lr}
 801b0bc:	b084      	sub	sp, #16
 801b0be:	af00      	add	r7, sp, #0
 801b0c0:	6078      	str	r0, [r7, #4]
 801b0c2:	460b      	mov	r3, r1
 801b0c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0d4:	78fa      	ldrb	r2, [r7, #3]
 801b0d6:	4611      	mov	r1, r2
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f7ec fcd0 	bl	8007a7e <HAL_PCD_EP_Close>
 801b0de:	4603      	mov	r3, r0
 801b0e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0e2:	7bfb      	ldrb	r3, [r7, #15]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	f000 f91d 	bl	801b324 <USBD_Get_USB_Status>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	3710      	adds	r7, #16
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}

0801b0f8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b084      	sub	sp, #16
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
 801b100:	460b      	mov	r3, r1
 801b102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b104:	2300      	movs	r3, #0
 801b106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b108:	2300      	movs	r3, #0
 801b10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b112:	78fa      	ldrb	r2, [r7, #3]
 801b114:	4611      	mov	r1, r2
 801b116:	4618      	mov	r0, r3
 801b118:	f7ec fe93 	bl	8007e42 <HAL_PCD_EP_Flush>
 801b11c:	4603      	mov	r3, r0
 801b11e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b120:	7bfb      	ldrb	r3, [r7, #15]
 801b122:	4618      	mov	r0, r3
 801b124:	f000 f8fe 	bl	801b324 <USBD_Get_USB_Status>
 801b128:	4603      	mov	r3, r0
 801b12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b12c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b12e:	4618      	mov	r0, r3
 801b130:	3710      	adds	r7, #16
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}

0801b136 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b136:	b580      	push	{r7, lr}
 801b138:	b084      	sub	sp, #16
 801b13a:	af00      	add	r7, sp, #0
 801b13c:	6078      	str	r0, [r7, #4]
 801b13e:	460b      	mov	r3, r1
 801b140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b142:	2300      	movs	r3, #0
 801b144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b146:	2300      	movs	r3, #0
 801b148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b150:	78fa      	ldrb	r2, [r7, #3]
 801b152:	4611      	mov	r1, r2
 801b154:	4618      	mov	r0, r3
 801b156:	f7ec fd89 	bl	8007c6c <HAL_PCD_EP_SetStall>
 801b15a:	4603      	mov	r3, r0
 801b15c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b15e:	7bfb      	ldrb	r3, [r7, #15]
 801b160:	4618      	mov	r0, r3
 801b162:	f000 f8df 	bl	801b324 <USBD_Get_USB_Status>
 801b166:	4603      	mov	r3, r0
 801b168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b16a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b16c:	4618      	mov	r0, r3
 801b16e:	3710      	adds	r7, #16
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}

0801b174 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b084      	sub	sp, #16
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
 801b17c:	460b      	mov	r3, r1
 801b17e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b180:	2300      	movs	r3, #0
 801b182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b184:	2300      	movs	r3, #0
 801b186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b18e:	78fa      	ldrb	r2, [r7, #3]
 801b190:	4611      	mov	r1, r2
 801b192:	4618      	mov	r0, r3
 801b194:	f7ec fdce 	bl	8007d34 <HAL_PCD_EP_ClrStall>
 801b198:	4603      	mov	r3, r0
 801b19a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b19c:	7bfb      	ldrb	r3, [r7, #15]
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f000 f8c0 	bl	801b324 <USBD_Get_USB_Status>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1a8:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	3710      	adds	r7, #16
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	bd80      	pop	{r7, pc}

0801b1b2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1b2:	b480      	push	{r7}
 801b1b4:	b085      	sub	sp, #20
 801b1b6:	af00      	add	r7, sp, #0
 801b1b8:	6078      	str	r0, [r7, #4]
 801b1ba:	460b      	mov	r3, r1
 801b1bc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b1c4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b1c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	da0b      	bge.n	801b1e6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b1ce:	78fb      	ldrb	r3, [r7, #3]
 801b1d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b1d4:	68f9      	ldr	r1, [r7, #12]
 801b1d6:	4613      	mov	r3, r2
 801b1d8:	00db      	lsls	r3, r3, #3
 801b1da:	4413      	add	r3, r2
 801b1dc:	009b      	lsls	r3, r3, #2
 801b1de:	440b      	add	r3, r1
 801b1e0:	333e      	adds	r3, #62	; 0x3e
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	e00b      	b.n	801b1fe <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b1e6:	78fb      	ldrb	r3, [r7, #3]
 801b1e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b1ec:	68f9      	ldr	r1, [r7, #12]
 801b1ee:	4613      	mov	r3, r2
 801b1f0:	00db      	lsls	r3, r3, #3
 801b1f2:	4413      	add	r3, r2
 801b1f4:	009b      	lsls	r3, r3, #2
 801b1f6:	440b      	add	r3, r1
 801b1f8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b1fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b1fe:	4618      	mov	r0, r3
 801b200:	3714      	adds	r7, #20
 801b202:	46bd      	mov	sp, r7
 801b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b208:	4770      	bx	lr

0801b20a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b20a:	b580      	push	{r7, lr}
 801b20c:	b084      	sub	sp, #16
 801b20e:	af00      	add	r7, sp, #0
 801b210:	6078      	str	r0, [r7, #4]
 801b212:	460b      	mov	r3, r1
 801b214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b216:	2300      	movs	r3, #0
 801b218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b21a:	2300      	movs	r3, #0
 801b21c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b224:	78fa      	ldrb	r2, [r7, #3]
 801b226:	4611      	mov	r1, r2
 801b228:	4618      	mov	r0, r3
 801b22a:	f7ec fb9b 	bl	8007964 <HAL_PCD_SetAddress>
 801b22e:	4603      	mov	r3, r0
 801b230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b232:	7bfb      	ldrb	r3, [r7, #15]
 801b234:	4618      	mov	r0, r3
 801b236:	f000 f875 	bl	801b324 <USBD_Get_USB_Status>
 801b23a:	4603      	mov	r3, r0
 801b23c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b23e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b240:	4618      	mov	r0, r3
 801b242:	3710      	adds	r7, #16
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}

0801b248 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b086      	sub	sp, #24
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	60f8      	str	r0, [r7, #12]
 801b250:	607a      	str	r2, [r7, #4]
 801b252:	603b      	str	r3, [r7, #0]
 801b254:	460b      	mov	r3, r1
 801b256:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b258:	2300      	movs	r3, #0
 801b25a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b25c:	2300      	movs	r3, #0
 801b25e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b266:	7af9      	ldrb	r1, [r7, #11]
 801b268:	683b      	ldr	r3, [r7, #0]
 801b26a:	687a      	ldr	r2, [r7, #4]
 801b26c:	f7ec fcb4 	bl	8007bd8 <HAL_PCD_EP_Transmit>
 801b270:	4603      	mov	r3, r0
 801b272:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b274:	7dfb      	ldrb	r3, [r7, #23]
 801b276:	4618      	mov	r0, r3
 801b278:	f000 f854 	bl	801b324 <USBD_Get_USB_Status>
 801b27c:	4603      	mov	r3, r0
 801b27e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b280:	7dbb      	ldrb	r3, [r7, #22]
}
 801b282:	4618      	mov	r0, r3
 801b284:	3718      	adds	r7, #24
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}

0801b28a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b28a:	b580      	push	{r7, lr}
 801b28c:	b086      	sub	sp, #24
 801b28e:	af00      	add	r7, sp, #0
 801b290:	60f8      	str	r0, [r7, #12]
 801b292:	607a      	str	r2, [r7, #4]
 801b294:	603b      	str	r3, [r7, #0]
 801b296:	460b      	mov	r3, r1
 801b298:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b29a:	2300      	movs	r3, #0
 801b29c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b29e:	2300      	movs	r3, #0
 801b2a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b2a8:	7af9      	ldrb	r1, [r7, #11]
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	687a      	ldr	r2, [r7, #4]
 801b2ae:	f7ec fc30 	bl	8007b12 <HAL_PCD_EP_Receive>
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b2b6:	7dfb      	ldrb	r3, [r7, #23]
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f000 f833 	bl	801b324 <USBD_Get_USB_Status>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b2c2:	7dbb      	ldrb	r3, [r7, #22]
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	3718      	adds	r7, #24
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}

0801b2cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b2cc:	b580      	push	{r7, lr}
 801b2ce:	b082      	sub	sp, #8
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	6078      	str	r0, [r7, #4]
 801b2d4:	460b      	mov	r3, r1
 801b2d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b2de:	78fa      	ldrb	r2, [r7, #3]
 801b2e0:	4611      	mov	r1, r2
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	f7ec fc60 	bl	8007ba8 <HAL_PCD_EP_GetRxCount>
 801b2e8:	4603      	mov	r3, r0
}
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	3708      	adds	r7, #8
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}
	...

0801b2f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b2f4:	b480      	push	{r7}
 801b2f6:	b083      	sub	sp, #12
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b2fc:	4b03      	ldr	r3, [pc, #12]	; (801b30c <USBD_static_malloc+0x18>)
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	370c      	adds	r7, #12
 801b302:	46bd      	mov	sp, r7
 801b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b308:	4770      	bx	lr
 801b30a:	bf00      	nop
 801b30c:	20002d98 	.word	0x20002d98

0801b310 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b310:	b480      	push	{r7}
 801b312:	b083      	sub	sp, #12
 801b314:	af00      	add	r7, sp, #0
 801b316:	6078      	str	r0, [r7, #4]

}
 801b318:	bf00      	nop
 801b31a:	370c      	adds	r7, #12
 801b31c:	46bd      	mov	sp, r7
 801b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b322:	4770      	bx	lr

0801b324 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b324:	b480      	push	{r7}
 801b326:	b085      	sub	sp, #20
 801b328:	af00      	add	r7, sp, #0
 801b32a:	4603      	mov	r3, r0
 801b32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b32e:	2300      	movs	r3, #0
 801b330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b332:	79fb      	ldrb	r3, [r7, #7]
 801b334:	2b03      	cmp	r3, #3
 801b336:	d817      	bhi.n	801b368 <USBD_Get_USB_Status+0x44>
 801b338:	a201      	add	r2, pc, #4	; (adr r2, 801b340 <USBD_Get_USB_Status+0x1c>)
 801b33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b33e:	bf00      	nop
 801b340:	0801b351 	.word	0x0801b351
 801b344:	0801b357 	.word	0x0801b357
 801b348:	0801b35d 	.word	0x0801b35d
 801b34c:	0801b363 	.word	0x0801b363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b350:	2300      	movs	r3, #0
 801b352:	73fb      	strb	r3, [r7, #15]
    break;
 801b354:	e00b      	b.n	801b36e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b356:	2303      	movs	r3, #3
 801b358:	73fb      	strb	r3, [r7, #15]
    break;
 801b35a:	e008      	b.n	801b36e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b35c:	2301      	movs	r3, #1
 801b35e:	73fb      	strb	r3, [r7, #15]
    break;
 801b360:	e005      	b.n	801b36e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b362:	2303      	movs	r3, #3
 801b364:	73fb      	strb	r3, [r7, #15]
    break;
 801b366:	e002      	b.n	801b36e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b368:	2303      	movs	r3, #3
 801b36a:	73fb      	strb	r3, [r7, #15]
    break;
 801b36c:	bf00      	nop
  }
  return usb_status;
 801b36e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b370:	4618      	mov	r0, r3
 801b372:	3714      	adds	r7, #20
 801b374:	46bd      	mov	sp, r7
 801b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37a:	4770      	bx	lr

0801b37c <atoi>:
 801b37c:	220a      	movs	r2, #10
 801b37e:	2100      	movs	r1, #0
 801b380:	f002 b826 	b.w	801d3d0 <strtol>

0801b384 <__errno>:
 801b384:	4b01      	ldr	r3, [pc, #4]	; (801b38c <__errno+0x8>)
 801b386:	6818      	ldr	r0, [r3, #0]
 801b388:	4770      	bx	lr
 801b38a:	bf00      	nop
 801b38c:	20000144 	.word	0x20000144

0801b390 <_fwrite_r>:
 801b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b394:	9c08      	ldr	r4, [sp, #32]
 801b396:	468a      	mov	sl, r1
 801b398:	4690      	mov	r8, r2
 801b39a:	fb02 f903 	mul.w	r9, r2, r3
 801b39e:	4605      	mov	r5, r0
 801b3a0:	b118      	cbz	r0, 801b3aa <_fwrite_r+0x1a>
 801b3a2:	6983      	ldr	r3, [r0, #24]
 801b3a4:	b90b      	cbnz	r3, 801b3aa <_fwrite_r+0x1a>
 801b3a6:	f003 f8cb 	bl	801e540 <__sinit>
 801b3aa:	4b26      	ldr	r3, [pc, #152]	; (801b444 <_fwrite_r+0xb4>)
 801b3ac:	429c      	cmp	r4, r3
 801b3ae:	d123      	bne.n	801b3f8 <_fwrite_r+0x68>
 801b3b0:	686c      	ldr	r4, [r5, #4]
 801b3b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b3b4:	07de      	lsls	r6, r3, #31
 801b3b6:	d405      	bmi.n	801b3c4 <_fwrite_r+0x34>
 801b3b8:	89a3      	ldrh	r3, [r4, #12]
 801b3ba:	0598      	lsls	r0, r3, #22
 801b3bc:	d402      	bmi.n	801b3c4 <_fwrite_r+0x34>
 801b3be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b3c0:	f000 f879 	bl	801b4b6 <__retarget_lock_acquire_recursive>
 801b3c4:	89a3      	ldrh	r3, [r4, #12]
 801b3c6:	0719      	lsls	r1, r3, #28
 801b3c8:	d520      	bpl.n	801b40c <_fwrite_r+0x7c>
 801b3ca:	6923      	ldr	r3, [r4, #16]
 801b3cc:	b1f3      	cbz	r3, 801b40c <_fwrite_r+0x7c>
 801b3ce:	2600      	movs	r6, #0
 801b3d0:	454e      	cmp	r6, r9
 801b3d2:	d029      	beq.n	801b428 <_fwrite_r+0x98>
 801b3d4:	68a7      	ldr	r7, [r4, #8]
 801b3d6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801b3da:	3f01      	subs	r7, #1
 801b3dc:	2f00      	cmp	r7, #0
 801b3de:	60a7      	str	r7, [r4, #8]
 801b3e0:	da04      	bge.n	801b3ec <_fwrite_r+0x5c>
 801b3e2:	69a3      	ldr	r3, [r4, #24]
 801b3e4:	429f      	cmp	r7, r3
 801b3e6:	db19      	blt.n	801b41c <_fwrite_r+0x8c>
 801b3e8:	290a      	cmp	r1, #10
 801b3ea:	d017      	beq.n	801b41c <_fwrite_r+0x8c>
 801b3ec:	6823      	ldr	r3, [r4, #0]
 801b3ee:	1c5a      	adds	r2, r3, #1
 801b3f0:	6022      	str	r2, [r4, #0]
 801b3f2:	7019      	strb	r1, [r3, #0]
 801b3f4:	3601      	adds	r6, #1
 801b3f6:	e7eb      	b.n	801b3d0 <_fwrite_r+0x40>
 801b3f8:	4b13      	ldr	r3, [pc, #76]	; (801b448 <_fwrite_r+0xb8>)
 801b3fa:	429c      	cmp	r4, r3
 801b3fc:	d101      	bne.n	801b402 <_fwrite_r+0x72>
 801b3fe:	68ac      	ldr	r4, [r5, #8]
 801b400:	e7d7      	b.n	801b3b2 <_fwrite_r+0x22>
 801b402:	4b12      	ldr	r3, [pc, #72]	; (801b44c <_fwrite_r+0xbc>)
 801b404:	429c      	cmp	r4, r3
 801b406:	bf08      	it	eq
 801b408:	68ec      	ldreq	r4, [r5, #12]
 801b40a:	e7d2      	b.n	801b3b2 <_fwrite_r+0x22>
 801b40c:	4621      	mov	r1, r4
 801b40e:	4628      	mov	r0, r5
 801b410:	f002 f874 	bl	801d4fc <__swsetup_r>
 801b414:	2800      	cmp	r0, #0
 801b416:	d0da      	beq.n	801b3ce <_fwrite_r+0x3e>
 801b418:	2600      	movs	r6, #0
 801b41a:	e005      	b.n	801b428 <_fwrite_r+0x98>
 801b41c:	4622      	mov	r2, r4
 801b41e:	4628      	mov	r0, r5
 801b420:	f002 f81a 	bl	801d458 <__swbuf_r>
 801b424:	3001      	adds	r0, #1
 801b426:	d1e5      	bne.n	801b3f4 <_fwrite_r+0x64>
 801b428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b42a:	07da      	lsls	r2, r3, #31
 801b42c:	d405      	bmi.n	801b43a <_fwrite_r+0xaa>
 801b42e:	89a3      	ldrh	r3, [r4, #12]
 801b430:	059b      	lsls	r3, r3, #22
 801b432:	d402      	bmi.n	801b43a <_fwrite_r+0xaa>
 801b434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b436:	f000 f83f 	bl	801b4b8 <__retarget_lock_release_recursive>
 801b43a:	fbb6 f0f8 	udiv	r0, r6, r8
 801b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b442:	bf00      	nop
 801b444:	0802219c 	.word	0x0802219c
 801b448:	080221bc 	.word	0x080221bc
 801b44c:	0802217c 	.word	0x0802217c

0801b450 <fwrite>:
 801b450:	b507      	push	{r0, r1, r2, lr}
 801b452:	9300      	str	r3, [sp, #0]
 801b454:	4613      	mov	r3, r2
 801b456:	460a      	mov	r2, r1
 801b458:	4601      	mov	r1, r0
 801b45a:	4803      	ldr	r0, [pc, #12]	; (801b468 <fwrite+0x18>)
 801b45c:	6800      	ldr	r0, [r0, #0]
 801b45e:	f7ff ff97 	bl	801b390 <_fwrite_r>
 801b462:	b003      	add	sp, #12
 801b464:	f85d fb04 	ldr.w	pc, [sp], #4
 801b468:	20000144 	.word	0x20000144

0801b46c <__libc_init_array>:
 801b46c:	b570      	push	{r4, r5, r6, lr}
 801b46e:	4d0d      	ldr	r5, [pc, #52]	; (801b4a4 <__libc_init_array+0x38>)
 801b470:	4c0d      	ldr	r4, [pc, #52]	; (801b4a8 <__libc_init_array+0x3c>)
 801b472:	1b64      	subs	r4, r4, r5
 801b474:	10a4      	asrs	r4, r4, #2
 801b476:	2600      	movs	r6, #0
 801b478:	42a6      	cmp	r6, r4
 801b47a:	d109      	bne.n	801b490 <__libc_init_array+0x24>
 801b47c:	4d0b      	ldr	r5, [pc, #44]	; (801b4ac <__libc_init_array+0x40>)
 801b47e:	4c0c      	ldr	r4, [pc, #48]	; (801b4b0 <__libc_init_array+0x44>)
 801b480:	f004 fdea 	bl	8020058 <_init>
 801b484:	1b64      	subs	r4, r4, r5
 801b486:	10a4      	asrs	r4, r4, #2
 801b488:	2600      	movs	r6, #0
 801b48a:	42a6      	cmp	r6, r4
 801b48c:	d105      	bne.n	801b49a <__libc_init_array+0x2e>
 801b48e:	bd70      	pop	{r4, r5, r6, pc}
 801b490:	f855 3b04 	ldr.w	r3, [r5], #4
 801b494:	4798      	blx	r3
 801b496:	3601      	adds	r6, #1
 801b498:	e7ee      	b.n	801b478 <__libc_init_array+0xc>
 801b49a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b49e:	4798      	blx	r3
 801b4a0:	3601      	adds	r6, #1
 801b4a2:	e7f2      	b.n	801b48a <__libc_init_array+0x1e>
 801b4a4:	080223d0 	.word	0x080223d0
 801b4a8:	080223d0 	.word	0x080223d0
 801b4ac:	080223d0 	.word	0x080223d0
 801b4b0:	080223d4 	.word	0x080223d4

0801b4b4 <__retarget_lock_init_recursive>:
 801b4b4:	4770      	bx	lr

0801b4b6 <__retarget_lock_acquire_recursive>:
 801b4b6:	4770      	bx	lr

0801b4b8 <__retarget_lock_release_recursive>:
 801b4b8:	4770      	bx	lr
	...

0801b4bc <malloc>:
 801b4bc:	4b02      	ldr	r3, [pc, #8]	; (801b4c8 <malloc+0xc>)
 801b4be:	4601      	mov	r1, r0
 801b4c0:	6818      	ldr	r0, [r3, #0]
 801b4c2:	f000 b89f 	b.w	801b604 <_malloc_r>
 801b4c6:	bf00      	nop
 801b4c8:	20000144 	.word	0x20000144

0801b4cc <memcpy>:
 801b4cc:	440a      	add	r2, r1
 801b4ce:	4291      	cmp	r1, r2
 801b4d0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b4d4:	d100      	bne.n	801b4d8 <memcpy+0xc>
 801b4d6:	4770      	bx	lr
 801b4d8:	b510      	push	{r4, lr}
 801b4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4e2:	4291      	cmp	r1, r2
 801b4e4:	d1f9      	bne.n	801b4da <memcpy+0xe>
 801b4e6:	bd10      	pop	{r4, pc}

0801b4e8 <memmove>:
 801b4e8:	4288      	cmp	r0, r1
 801b4ea:	b510      	push	{r4, lr}
 801b4ec:	eb01 0402 	add.w	r4, r1, r2
 801b4f0:	d902      	bls.n	801b4f8 <memmove+0x10>
 801b4f2:	4284      	cmp	r4, r0
 801b4f4:	4623      	mov	r3, r4
 801b4f6:	d807      	bhi.n	801b508 <memmove+0x20>
 801b4f8:	1e43      	subs	r3, r0, #1
 801b4fa:	42a1      	cmp	r1, r4
 801b4fc:	d008      	beq.n	801b510 <memmove+0x28>
 801b4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b502:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b506:	e7f8      	b.n	801b4fa <memmove+0x12>
 801b508:	4402      	add	r2, r0
 801b50a:	4601      	mov	r1, r0
 801b50c:	428a      	cmp	r2, r1
 801b50e:	d100      	bne.n	801b512 <memmove+0x2a>
 801b510:	bd10      	pop	{r4, pc}
 801b512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b51a:	e7f7      	b.n	801b50c <memmove+0x24>

0801b51c <memset>:
 801b51c:	4402      	add	r2, r0
 801b51e:	4603      	mov	r3, r0
 801b520:	4293      	cmp	r3, r2
 801b522:	d100      	bne.n	801b526 <memset+0xa>
 801b524:	4770      	bx	lr
 801b526:	f803 1b01 	strb.w	r1, [r3], #1
 801b52a:	e7f9      	b.n	801b520 <memset+0x4>

0801b52c <_free_r>:
 801b52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b52e:	2900      	cmp	r1, #0
 801b530:	d044      	beq.n	801b5bc <_free_r+0x90>
 801b532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b536:	9001      	str	r0, [sp, #4]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	f1a1 0404 	sub.w	r4, r1, #4
 801b53e:	bfb8      	it	lt
 801b540:	18e4      	addlt	r4, r4, r3
 801b542:	f003 fc97 	bl	801ee74 <__malloc_lock>
 801b546:	4a1e      	ldr	r2, [pc, #120]	; (801b5c0 <_free_r+0x94>)
 801b548:	9801      	ldr	r0, [sp, #4]
 801b54a:	6813      	ldr	r3, [r2, #0]
 801b54c:	b933      	cbnz	r3, 801b55c <_free_r+0x30>
 801b54e:	6063      	str	r3, [r4, #4]
 801b550:	6014      	str	r4, [r2, #0]
 801b552:	b003      	add	sp, #12
 801b554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b558:	f003 bc92 	b.w	801ee80 <__malloc_unlock>
 801b55c:	42a3      	cmp	r3, r4
 801b55e:	d908      	bls.n	801b572 <_free_r+0x46>
 801b560:	6825      	ldr	r5, [r4, #0]
 801b562:	1961      	adds	r1, r4, r5
 801b564:	428b      	cmp	r3, r1
 801b566:	bf01      	itttt	eq
 801b568:	6819      	ldreq	r1, [r3, #0]
 801b56a:	685b      	ldreq	r3, [r3, #4]
 801b56c:	1949      	addeq	r1, r1, r5
 801b56e:	6021      	streq	r1, [r4, #0]
 801b570:	e7ed      	b.n	801b54e <_free_r+0x22>
 801b572:	461a      	mov	r2, r3
 801b574:	685b      	ldr	r3, [r3, #4]
 801b576:	b10b      	cbz	r3, 801b57c <_free_r+0x50>
 801b578:	42a3      	cmp	r3, r4
 801b57a:	d9fa      	bls.n	801b572 <_free_r+0x46>
 801b57c:	6811      	ldr	r1, [r2, #0]
 801b57e:	1855      	adds	r5, r2, r1
 801b580:	42a5      	cmp	r5, r4
 801b582:	d10b      	bne.n	801b59c <_free_r+0x70>
 801b584:	6824      	ldr	r4, [r4, #0]
 801b586:	4421      	add	r1, r4
 801b588:	1854      	adds	r4, r2, r1
 801b58a:	42a3      	cmp	r3, r4
 801b58c:	6011      	str	r1, [r2, #0]
 801b58e:	d1e0      	bne.n	801b552 <_free_r+0x26>
 801b590:	681c      	ldr	r4, [r3, #0]
 801b592:	685b      	ldr	r3, [r3, #4]
 801b594:	6053      	str	r3, [r2, #4]
 801b596:	4421      	add	r1, r4
 801b598:	6011      	str	r1, [r2, #0]
 801b59a:	e7da      	b.n	801b552 <_free_r+0x26>
 801b59c:	d902      	bls.n	801b5a4 <_free_r+0x78>
 801b59e:	230c      	movs	r3, #12
 801b5a0:	6003      	str	r3, [r0, #0]
 801b5a2:	e7d6      	b.n	801b552 <_free_r+0x26>
 801b5a4:	6825      	ldr	r5, [r4, #0]
 801b5a6:	1961      	adds	r1, r4, r5
 801b5a8:	428b      	cmp	r3, r1
 801b5aa:	bf04      	itt	eq
 801b5ac:	6819      	ldreq	r1, [r3, #0]
 801b5ae:	685b      	ldreq	r3, [r3, #4]
 801b5b0:	6063      	str	r3, [r4, #4]
 801b5b2:	bf04      	itt	eq
 801b5b4:	1949      	addeq	r1, r1, r5
 801b5b6:	6021      	streq	r1, [r4, #0]
 801b5b8:	6054      	str	r4, [r2, #4]
 801b5ba:	e7ca      	b.n	801b552 <_free_r+0x26>
 801b5bc:	b003      	add	sp, #12
 801b5be:	bd30      	pop	{r4, r5, pc}
 801b5c0:	20003614 	.word	0x20003614

0801b5c4 <sbrk_aligned>:
 801b5c4:	b570      	push	{r4, r5, r6, lr}
 801b5c6:	4e0e      	ldr	r6, [pc, #56]	; (801b600 <sbrk_aligned+0x3c>)
 801b5c8:	460c      	mov	r4, r1
 801b5ca:	6831      	ldr	r1, [r6, #0]
 801b5cc:	4605      	mov	r5, r0
 801b5ce:	b911      	cbnz	r1, 801b5d6 <sbrk_aligned+0x12>
 801b5d0:	f000 ff94 	bl	801c4fc <_sbrk_r>
 801b5d4:	6030      	str	r0, [r6, #0]
 801b5d6:	4621      	mov	r1, r4
 801b5d8:	4628      	mov	r0, r5
 801b5da:	f000 ff8f 	bl	801c4fc <_sbrk_r>
 801b5de:	1c43      	adds	r3, r0, #1
 801b5e0:	d00a      	beq.n	801b5f8 <sbrk_aligned+0x34>
 801b5e2:	1cc4      	adds	r4, r0, #3
 801b5e4:	f024 0403 	bic.w	r4, r4, #3
 801b5e8:	42a0      	cmp	r0, r4
 801b5ea:	d007      	beq.n	801b5fc <sbrk_aligned+0x38>
 801b5ec:	1a21      	subs	r1, r4, r0
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	f000 ff84 	bl	801c4fc <_sbrk_r>
 801b5f4:	3001      	adds	r0, #1
 801b5f6:	d101      	bne.n	801b5fc <sbrk_aligned+0x38>
 801b5f8:	f04f 34ff 	mov.w	r4, #4294967295
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	bd70      	pop	{r4, r5, r6, pc}
 801b600:	20003618 	.word	0x20003618

0801b604 <_malloc_r>:
 801b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b608:	1ccd      	adds	r5, r1, #3
 801b60a:	f025 0503 	bic.w	r5, r5, #3
 801b60e:	3508      	adds	r5, #8
 801b610:	2d0c      	cmp	r5, #12
 801b612:	bf38      	it	cc
 801b614:	250c      	movcc	r5, #12
 801b616:	2d00      	cmp	r5, #0
 801b618:	4607      	mov	r7, r0
 801b61a:	db01      	blt.n	801b620 <_malloc_r+0x1c>
 801b61c:	42a9      	cmp	r1, r5
 801b61e:	d905      	bls.n	801b62c <_malloc_r+0x28>
 801b620:	230c      	movs	r3, #12
 801b622:	603b      	str	r3, [r7, #0]
 801b624:	2600      	movs	r6, #0
 801b626:	4630      	mov	r0, r6
 801b628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b62c:	4e2e      	ldr	r6, [pc, #184]	; (801b6e8 <_malloc_r+0xe4>)
 801b62e:	f003 fc21 	bl	801ee74 <__malloc_lock>
 801b632:	6833      	ldr	r3, [r6, #0]
 801b634:	461c      	mov	r4, r3
 801b636:	bb34      	cbnz	r4, 801b686 <_malloc_r+0x82>
 801b638:	4629      	mov	r1, r5
 801b63a:	4638      	mov	r0, r7
 801b63c:	f7ff ffc2 	bl	801b5c4 <sbrk_aligned>
 801b640:	1c43      	adds	r3, r0, #1
 801b642:	4604      	mov	r4, r0
 801b644:	d14d      	bne.n	801b6e2 <_malloc_r+0xde>
 801b646:	6834      	ldr	r4, [r6, #0]
 801b648:	4626      	mov	r6, r4
 801b64a:	2e00      	cmp	r6, #0
 801b64c:	d140      	bne.n	801b6d0 <_malloc_r+0xcc>
 801b64e:	6823      	ldr	r3, [r4, #0]
 801b650:	4631      	mov	r1, r6
 801b652:	4638      	mov	r0, r7
 801b654:	eb04 0803 	add.w	r8, r4, r3
 801b658:	f000 ff50 	bl	801c4fc <_sbrk_r>
 801b65c:	4580      	cmp	r8, r0
 801b65e:	d13a      	bne.n	801b6d6 <_malloc_r+0xd2>
 801b660:	6821      	ldr	r1, [r4, #0]
 801b662:	3503      	adds	r5, #3
 801b664:	1a6d      	subs	r5, r5, r1
 801b666:	f025 0503 	bic.w	r5, r5, #3
 801b66a:	3508      	adds	r5, #8
 801b66c:	2d0c      	cmp	r5, #12
 801b66e:	bf38      	it	cc
 801b670:	250c      	movcc	r5, #12
 801b672:	4629      	mov	r1, r5
 801b674:	4638      	mov	r0, r7
 801b676:	f7ff ffa5 	bl	801b5c4 <sbrk_aligned>
 801b67a:	3001      	adds	r0, #1
 801b67c:	d02b      	beq.n	801b6d6 <_malloc_r+0xd2>
 801b67e:	6823      	ldr	r3, [r4, #0]
 801b680:	442b      	add	r3, r5
 801b682:	6023      	str	r3, [r4, #0]
 801b684:	e00e      	b.n	801b6a4 <_malloc_r+0xa0>
 801b686:	6822      	ldr	r2, [r4, #0]
 801b688:	1b52      	subs	r2, r2, r5
 801b68a:	d41e      	bmi.n	801b6ca <_malloc_r+0xc6>
 801b68c:	2a0b      	cmp	r2, #11
 801b68e:	d916      	bls.n	801b6be <_malloc_r+0xba>
 801b690:	1961      	adds	r1, r4, r5
 801b692:	42a3      	cmp	r3, r4
 801b694:	6025      	str	r5, [r4, #0]
 801b696:	bf18      	it	ne
 801b698:	6059      	strne	r1, [r3, #4]
 801b69a:	6863      	ldr	r3, [r4, #4]
 801b69c:	bf08      	it	eq
 801b69e:	6031      	streq	r1, [r6, #0]
 801b6a0:	5162      	str	r2, [r4, r5]
 801b6a2:	604b      	str	r3, [r1, #4]
 801b6a4:	4638      	mov	r0, r7
 801b6a6:	f104 060b 	add.w	r6, r4, #11
 801b6aa:	f003 fbe9 	bl	801ee80 <__malloc_unlock>
 801b6ae:	f026 0607 	bic.w	r6, r6, #7
 801b6b2:	1d23      	adds	r3, r4, #4
 801b6b4:	1af2      	subs	r2, r6, r3
 801b6b6:	d0b6      	beq.n	801b626 <_malloc_r+0x22>
 801b6b8:	1b9b      	subs	r3, r3, r6
 801b6ba:	50a3      	str	r3, [r4, r2]
 801b6bc:	e7b3      	b.n	801b626 <_malloc_r+0x22>
 801b6be:	6862      	ldr	r2, [r4, #4]
 801b6c0:	42a3      	cmp	r3, r4
 801b6c2:	bf0c      	ite	eq
 801b6c4:	6032      	streq	r2, [r6, #0]
 801b6c6:	605a      	strne	r2, [r3, #4]
 801b6c8:	e7ec      	b.n	801b6a4 <_malloc_r+0xa0>
 801b6ca:	4623      	mov	r3, r4
 801b6cc:	6864      	ldr	r4, [r4, #4]
 801b6ce:	e7b2      	b.n	801b636 <_malloc_r+0x32>
 801b6d0:	4634      	mov	r4, r6
 801b6d2:	6876      	ldr	r6, [r6, #4]
 801b6d4:	e7b9      	b.n	801b64a <_malloc_r+0x46>
 801b6d6:	230c      	movs	r3, #12
 801b6d8:	603b      	str	r3, [r7, #0]
 801b6da:	4638      	mov	r0, r7
 801b6dc:	f003 fbd0 	bl	801ee80 <__malloc_unlock>
 801b6e0:	e7a1      	b.n	801b626 <_malloc_r+0x22>
 801b6e2:	6025      	str	r5, [r4, #0]
 801b6e4:	e7de      	b.n	801b6a4 <_malloc_r+0xa0>
 801b6e6:	bf00      	nop
 801b6e8:	20003614 	.word	0x20003614

0801b6ec <__cvt>:
 801b6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6f0:	ec55 4b10 	vmov	r4, r5, d0
 801b6f4:	2d00      	cmp	r5, #0
 801b6f6:	460e      	mov	r6, r1
 801b6f8:	4619      	mov	r1, r3
 801b6fa:	462b      	mov	r3, r5
 801b6fc:	bfbb      	ittet	lt
 801b6fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b702:	461d      	movlt	r5, r3
 801b704:	2300      	movge	r3, #0
 801b706:	232d      	movlt	r3, #45	; 0x2d
 801b708:	700b      	strb	r3, [r1, #0]
 801b70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b70c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b710:	4691      	mov	r9, r2
 801b712:	f023 0820 	bic.w	r8, r3, #32
 801b716:	bfbc      	itt	lt
 801b718:	4622      	movlt	r2, r4
 801b71a:	4614      	movlt	r4, r2
 801b71c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b720:	d005      	beq.n	801b72e <__cvt+0x42>
 801b722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b726:	d100      	bne.n	801b72a <__cvt+0x3e>
 801b728:	3601      	adds	r6, #1
 801b72a:	2102      	movs	r1, #2
 801b72c:	e000      	b.n	801b730 <__cvt+0x44>
 801b72e:	2103      	movs	r1, #3
 801b730:	ab03      	add	r3, sp, #12
 801b732:	9301      	str	r3, [sp, #4]
 801b734:	ab02      	add	r3, sp, #8
 801b736:	9300      	str	r3, [sp, #0]
 801b738:	ec45 4b10 	vmov	d0, r4, r5
 801b73c:	4653      	mov	r3, sl
 801b73e:	4632      	mov	r2, r6
 801b740:	f001 fff6 	bl	801d730 <_dtoa_r>
 801b744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b748:	4607      	mov	r7, r0
 801b74a:	d102      	bne.n	801b752 <__cvt+0x66>
 801b74c:	f019 0f01 	tst.w	r9, #1
 801b750:	d022      	beq.n	801b798 <__cvt+0xac>
 801b752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b756:	eb07 0906 	add.w	r9, r7, r6
 801b75a:	d110      	bne.n	801b77e <__cvt+0x92>
 801b75c:	783b      	ldrb	r3, [r7, #0]
 801b75e:	2b30      	cmp	r3, #48	; 0x30
 801b760:	d10a      	bne.n	801b778 <__cvt+0x8c>
 801b762:	2200      	movs	r2, #0
 801b764:	2300      	movs	r3, #0
 801b766:	4620      	mov	r0, r4
 801b768:	4629      	mov	r1, r5
 801b76a:	f7e5 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 801b76e:	b918      	cbnz	r0, 801b778 <__cvt+0x8c>
 801b770:	f1c6 0601 	rsb	r6, r6, #1
 801b774:	f8ca 6000 	str.w	r6, [sl]
 801b778:	f8da 3000 	ldr.w	r3, [sl]
 801b77c:	4499      	add	r9, r3
 801b77e:	2200      	movs	r2, #0
 801b780:	2300      	movs	r3, #0
 801b782:	4620      	mov	r0, r4
 801b784:	4629      	mov	r1, r5
 801b786:	f7e5 f9b7 	bl	8000af8 <__aeabi_dcmpeq>
 801b78a:	b108      	cbz	r0, 801b790 <__cvt+0xa4>
 801b78c:	f8cd 900c 	str.w	r9, [sp, #12]
 801b790:	2230      	movs	r2, #48	; 0x30
 801b792:	9b03      	ldr	r3, [sp, #12]
 801b794:	454b      	cmp	r3, r9
 801b796:	d307      	bcc.n	801b7a8 <__cvt+0xbc>
 801b798:	9b03      	ldr	r3, [sp, #12]
 801b79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b79c:	1bdb      	subs	r3, r3, r7
 801b79e:	4638      	mov	r0, r7
 801b7a0:	6013      	str	r3, [r2, #0]
 801b7a2:	b004      	add	sp, #16
 801b7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7a8:	1c59      	adds	r1, r3, #1
 801b7aa:	9103      	str	r1, [sp, #12]
 801b7ac:	701a      	strb	r2, [r3, #0]
 801b7ae:	e7f0      	b.n	801b792 <__cvt+0xa6>

0801b7b0 <__exponent>:
 801b7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	2900      	cmp	r1, #0
 801b7b6:	bfb8      	it	lt
 801b7b8:	4249      	neglt	r1, r1
 801b7ba:	f803 2b02 	strb.w	r2, [r3], #2
 801b7be:	bfb4      	ite	lt
 801b7c0:	222d      	movlt	r2, #45	; 0x2d
 801b7c2:	222b      	movge	r2, #43	; 0x2b
 801b7c4:	2909      	cmp	r1, #9
 801b7c6:	7042      	strb	r2, [r0, #1]
 801b7c8:	dd2a      	ble.n	801b820 <__exponent+0x70>
 801b7ca:	f10d 0407 	add.w	r4, sp, #7
 801b7ce:	46a4      	mov	ip, r4
 801b7d0:	270a      	movs	r7, #10
 801b7d2:	46a6      	mov	lr, r4
 801b7d4:	460a      	mov	r2, r1
 801b7d6:	fb91 f6f7 	sdiv	r6, r1, r7
 801b7da:	fb07 1516 	mls	r5, r7, r6, r1
 801b7de:	3530      	adds	r5, #48	; 0x30
 801b7e0:	2a63      	cmp	r2, #99	; 0x63
 801b7e2:	f104 34ff 	add.w	r4, r4, #4294967295
 801b7e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b7ea:	4631      	mov	r1, r6
 801b7ec:	dcf1      	bgt.n	801b7d2 <__exponent+0x22>
 801b7ee:	3130      	adds	r1, #48	; 0x30
 801b7f0:	f1ae 0502 	sub.w	r5, lr, #2
 801b7f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b7f8:	1c44      	adds	r4, r0, #1
 801b7fa:	4629      	mov	r1, r5
 801b7fc:	4561      	cmp	r1, ip
 801b7fe:	d30a      	bcc.n	801b816 <__exponent+0x66>
 801b800:	f10d 0209 	add.w	r2, sp, #9
 801b804:	eba2 020e 	sub.w	r2, r2, lr
 801b808:	4565      	cmp	r5, ip
 801b80a:	bf88      	it	hi
 801b80c:	2200      	movhi	r2, #0
 801b80e:	4413      	add	r3, r2
 801b810:	1a18      	subs	r0, r3, r0
 801b812:	b003      	add	sp, #12
 801b814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b816:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b81a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b81e:	e7ed      	b.n	801b7fc <__exponent+0x4c>
 801b820:	2330      	movs	r3, #48	; 0x30
 801b822:	3130      	adds	r1, #48	; 0x30
 801b824:	7083      	strb	r3, [r0, #2]
 801b826:	70c1      	strb	r1, [r0, #3]
 801b828:	1d03      	adds	r3, r0, #4
 801b82a:	e7f1      	b.n	801b810 <__exponent+0x60>

0801b82c <_printf_float>:
 801b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b830:	ed2d 8b02 	vpush	{d8}
 801b834:	b08d      	sub	sp, #52	; 0x34
 801b836:	460c      	mov	r4, r1
 801b838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b83c:	4616      	mov	r6, r2
 801b83e:	461f      	mov	r7, r3
 801b840:	4605      	mov	r5, r0
 801b842:	f003 fa9b 	bl	801ed7c <_localeconv_r>
 801b846:	f8d0 a000 	ldr.w	sl, [r0]
 801b84a:	4650      	mov	r0, sl
 801b84c:	f7e4 fcd2 	bl	80001f4 <strlen>
 801b850:	2300      	movs	r3, #0
 801b852:	930a      	str	r3, [sp, #40]	; 0x28
 801b854:	6823      	ldr	r3, [r4, #0]
 801b856:	9305      	str	r3, [sp, #20]
 801b858:	f8d8 3000 	ldr.w	r3, [r8]
 801b85c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b860:	3307      	adds	r3, #7
 801b862:	f023 0307 	bic.w	r3, r3, #7
 801b866:	f103 0208 	add.w	r2, r3, #8
 801b86a:	f8c8 2000 	str.w	r2, [r8]
 801b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b872:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b876:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b87a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b87e:	9307      	str	r3, [sp, #28]
 801b880:	f8cd 8018 	str.w	r8, [sp, #24]
 801b884:	ee08 0a10 	vmov	s16, r0
 801b888:	4b9f      	ldr	r3, [pc, #636]	; (801bb08 <_printf_float+0x2dc>)
 801b88a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b88e:	f04f 32ff 	mov.w	r2, #4294967295
 801b892:	f7e5 f963 	bl	8000b5c <__aeabi_dcmpun>
 801b896:	bb88      	cbnz	r0, 801b8fc <_printf_float+0xd0>
 801b898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b89c:	4b9a      	ldr	r3, [pc, #616]	; (801bb08 <_printf_float+0x2dc>)
 801b89e:	f04f 32ff 	mov.w	r2, #4294967295
 801b8a2:	f7e5 f93d 	bl	8000b20 <__aeabi_dcmple>
 801b8a6:	bb48      	cbnz	r0, 801b8fc <_printf_float+0xd0>
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	4640      	mov	r0, r8
 801b8ae:	4649      	mov	r1, r9
 801b8b0:	f7e5 f92c 	bl	8000b0c <__aeabi_dcmplt>
 801b8b4:	b110      	cbz	r0, 801b8bc <_printf_float+0x90>
 801b8b6:	232d      	movs	r3, #45	; 0x2d
 801b8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8bc:	4b93      	ldr	r3, [pc, #588]	; (801bb0c <_printf_float+0x2e0>)
 801b8be:	4894      	ldr	r0, [pc, #592]	; (801bb10 <_printf_float+0x2e4>)
 801b8c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b8c4:	bf94      	ite	ls
 801b8c6:	4698      	movls	r8, r3
 801b8c8:	4680      	movhi	r8, r0
 801b8ca:	2303      	movs	r3, #3
 801b8cc:	6123      	str	r3, [r4, #16]
 801b8ce:	9b05      	ldr	r3, [sp, #20]
 801b8d0:	f023 0204 	bic.w	r2, r3, #4
 801b8d4:	6022      	str	r2, [r4, #0]
 801b8d6:	f04f 0900 	mov.w	r9, #0
 801b8da:	9700      	str	r7, [sp, #0]
 801b8dc:	4633      	mov	r3, r6
 801b8de:	aa0b      	add	r2, sp, #44	; 0x2c
 801b8e0:	4621      	mov	r1, r4
 801b8e2:	4628      	mov	r0, r5
 801b8e4:	f000 f9d8 	bl	801bc98 <_printf_common>
 801b8e8:	3001      	adds	r0, #1
 801b8ea:	f040 8090 	bne.w	801ba0e <_printf_float+0x1e2>
 801b8ee:	f04f 30ff 	mov.w	r0, #4294967295
 801b8f2:	b00d      	add	sp, #52	; 0x34
 801b8f4:	ecbd 8b02 	vpop	{d8}
 801b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8fc:	4642      	mov	r2, r8
 801b8fe:	464b      	mov	r3, r9
 801b900:	4640      	mov	r0, r8
 801b902:	4649      	mov	r1, r9
 801b904:	f7e5 f92a 	bl	8000b5c <__aeabi_dcmpun>
 801b908:	b140      	cbz	r0, 801b91c <_printf_float+0xf0>
 801b90a:	464b      	mov	r3, r9
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	bfbc      	itt	lt
 801b910:	232d      	movlt	r3, #45	; 0x2d
 801b912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b916:	487f      	ldr	r0, [pc, #508]	; (801bb14 <_printf_float+0x2e8>)
 801b918:	4b7f      	ldr	r3, [pc, #508]	; (801bb18 <_printf_float+0x2ec>)
 801b91a:	e7d1      	b.n	801b8c0 <_printf_float+0x94>
 801b91c:	6863      	ldr	r3, [r4, #4]
 801b91e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b922:	9206      	str	r2, [sp, #24]
 801b924:	1c5a      	adds	r2, r3, #1
 801b926:	d13f      	bne.n	801b9a8 <_printf_float+0x17c>
 801b928:	2306      	movs	r3, #6
 801b92a:	6063      	str	r3, [r4, #4]
 801b92c:	9b05      	ldr	r3, [sp, #20]
 801b92e:	6861      	ldr	r1, [r4, #4]
 801b930:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b934:	2300      	movs	r3, #0
 801b936:	9303      	str	r3, [sp, #12]
 801b938:	ab0a      	add	r3, sp, #40	; 0x28
 801b93a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b93e:	ab09      	add	r3, sp, #36	; 0x24
 801b940:	ec49 8b10 	vmov	d0, r8, r9
 801b944:	9300      	str	r3, [sp, #0]
 801b946:	6022      	str	r2, [r4, #0]
 801b948:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b94c:	4628      	mov	r0, r5
 801b94e:	f7ff fecd 	bl	801b6ec <__cvt>
 801b952:	9b06      	ldr	r3, [sp, #24]
 801b954:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b956:	2b47      	cmp	r3, #71	; 0x47
 801b958:	4680      	mov	r8, r0
 801b95a:	d108      	bne.n	801b96e <_printf_float+0x142>
 801b95c:	1cc8      	adds	r0, r1, #3
 801b95e:	db02      	blt.n	801b966 <_printf_float+0x13a>
 801b960:	6863      	ldr	r3, [r4, #4]
 801b962:	4299      	cmp	r1, r3
 801b964:	dd41      	ble.n	801b9ea <_printf_float+0x1be>
 801b966:	f1ab 0b02 	sub.w	fp, fp, #2
 801b96a:	fa5f fb8b 	uxtb.w	fp, fp
 801b96e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b972:	d820      	bhi.n	801b9b6 <_printf_float+0x18a>
 801b974:	3901      	subs	r1, #1
 801b976:	465a      	mov	r2, fp
 801b978:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b97c:	9109      	str	r1, [sp, #36]	; 0x24
 801b97e:	f7ff ff17 	bl	801b7b0 <__exponent>
 801b982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b984:	1813      	adds	r3, r2, r0
 801b986:	2a01      	cmp	r2, #1
 801b988:	4681      	mov	r9, r0
 801b98a:	6123      	str	r3, [r4, #16]
 801b98c:	dc02      	bgt.n	801b994 <_printf_float+0x168>
 801b98e:	6822      	ldr	r2, [r4, #0]
 801b990:	07d2      	lsls	r2, r2, #31
 801b992:	d501      	bpl.n	801b998 <_printf_float+0x16c>
 801b994:	3301      	adds	r3, #1
 801b996:	6123      	str	r3, [r4, #16]
 801b998:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d09c      	beq.n	801b8da <_printf_float+0xae>
 801b9a0:	232d      	movs	r3, #45	; 0x2d
 801b9a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9a6:	e798      	b.n	801b8da <_printf_float+0xae>
 801b9a8:	9a06      	ldr	r2, [sp, #24]
 801b9aa:	2a47      	cmp	r2, #71	; 0x47
 801b9ac:	d1be      	bne.n	801b92c <_printf_float+0x100>
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d1bc      	bne.n	801b92c <_printf_float+0x100>
 801b9b2:	2301      	movs	r3, #1
 801b9b4:	e7b9      	b.n	801b92a <_printf_float+0xfe>
 801b9b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b9ba:	d118      	bne.n	801b9ee <_printf_float+0x1c2>
 801b9bc:	2900      	cmp	r1, #0
 801b9be:	6863      	ldr	r3, [r4, #4]
 801b9c0:	dd0b      	ble.n	801b9da <_printf_float+0x1ae>
 801b9c2:	6121      	str	r1, [r4, #16]
 801b9c4:	b913      	cbnz	r3, 801b9cc <_printf_float+0x1a0>
 801b9c6:	6822      	ldr	r2, [r4, #0]
 801b9c8:	07d0      	lsls	r0, r2, #31
 801b9ca:	d502      	bpl.n	801b9d2 <_printf_float+0x1a6>
 801b9cc:	3301      	adds	r3, #1
 801b9ce:	440b      	add	r3, r1
 801b9d0:	6123      	str	r3, [r4, #16]
 801b9d2:	65a1      	str	r1, [r4, #88]	; 0x58
 801b9d4:	f04f 0900 	mov.w	r9, #0
 801b9d8:	e7de      	b.n	801b998 <_printf_float+0x16c>
 801b9da:	b913      	cbnz	r3, 801b9e2 <_printf_float+0x1b6>
 801b9dc:	6822      	ldr	r2, [r4, #0]
 801b9de:	07d2      	lsls	r2, r2, #31
 801b9e0:	d501      	bpl.n	801b9e6 <_printf_float+0x1ba>
 801b9e2:	3302      	adds	r3, #2
 801b9e4:	e7f4      	b.n	801b9d0 <_printf_float+0x1a4>
 801b9e6:	2301      	movs	r3, #1
 801b9e8:	e7f2      	b.n	801b9d0 <_printf_float+0x1a4>
 801b9ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9f0:	4299      	cmp	r1, r3
 801b9f2:	db05      	blt.n	801ba00 <_printf_float+0x1d4>
 801b9f4:	6823      	ldr	r3, [r4, #0]
 801b9f6:	6121      	str	r1, [r4, #16]
 801b9f8:	07d8      	lsls	r0, r3, #31
 801b9fa:	d5ea      	bpl.n	801b9d2 <_printf_float+0x1a6>
 801b9fc:	1c4b      	adds	r3, r1, #1
 801b9fe:	e7e7      	b.n	801b9d0 <_printf_float+0x1a4>
 801ba00:	2900      	cmp	r1, #0
 801ba02:	bfd4      	ite	le
 801ba04:	f1c1 0202 	rsble	r2, r1, #2
 801ba08:	2201      	movgt	r2, #1
 801ba0a:	4413      	add	r3, r2
 801ba0c:	e7e0      	b.n	801b9d0 <_printf_float+0x1a4>
 801ba0e:	6823      	ldr	r3, [r4, #0]
 801ba10:	055a      	lsls	r2, r3, #21
 801ba12:	d407      	bmi.n	801ba24 <_printf_float+0x1f8>
 801ba14:	6923      	ldr	r3, [r4, #16]
 801ba16:	4642      	mov	r2, r8
 801ba18:	4631      	mov	r1, r6
 801ba1a:	4628      	mov	r0, r5
 801ba1c:	47b8      	blx	r7
 801ba1e:	3001      	adds	r0, #1
 801ba20:	d12c      	bne.n	801ba7c <_printf_float+0x250>
 801ba22:	e764      	b.n	801b8ee <_printf_float+0xc2>
 801ba24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ba28:	f240 80e0 	bls.w	801bbec <_printf_float+0x3c0>
 801ba2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ba30:	2200      	movs	r2, #0
 801ba32:	2300      	movs	r3, #0
 801ba34:	f7e5 f860 	bl	8000af8 <__aeabi_dcmpeq>
 801ba38:	2800      	cmp	r0, #0
 801ba3a:	d034      	beq.n	801baa6 <_printf_float+0x27a>
 801ba3c:	4a37      	ldr	r2, [pc, #220]	; (801bb1c <_printf_float+0x2f0>)
 801ba3e:	2301      	movs	r3, #1
 801ba40:	4631      	mov	r1, r6
 801ba42:	4628      	mov	r0, r5
 801ba44:	47b8      	blx	r7
 801ba46:	3001      	adds	r0, #1
 801ba48:	f43f af51 	beq.w	801b8ee <_printf_float+0xc2>
 801ba4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ba50:	429a      	cmp	r2, r3
 801ba52:	db02      	blt.n	801ba5a <_printf_float+0x22e>
 801ba54:	6823      	ldr	r3, [r4, #0]
 801ba56:	07d8      	lsls	r0, r3, #31
 801ba58:	d510      	bpl.n	801ba7c <_printf_float+0x250>
 801ba5a:	ee18 3a10 	vmov	r3, s16
 801ba5e:	4652      	mov	r2, sl
 801ba60:	4631      	mov	r1, r6
 801ba62:	4628      	mov	r0, r5
 801ba64:	47b8      	blx	r7
 801ba66:	3001      	adds	r0, #1
 801ba68:	f43f af41 	beq.w	801b8ee <_printf_float+0xc2>
 801ba6c:	f04f 0800 	mov.w	r8, #0
 801ba70:	f104 091a 	add.w	r9, r4, #26
 801ba74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba76:	3b01      	subs	r3, #1
 801ba78:	4543      	cmp	r3, r8
 801ba7a:	dc09      	bgt.n	801ba90 <_printf_float+0x264>
 801ba7c:	6823      	ldr	r3, [r4, #0]
 801ba7e:	079b      	lsls	r3, r3, #30
 801ba80:	f100 8105 	bmi.w	801bc8e <_printf_float+0x462>
 801ba84:	68e0      	ldr	r0, [r4, #12]
 801ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba88:	4298      	cmp	r0, r3
 801ba8a:	bfb8      	it	lt
 801ba8c:	4618      	movlt	r0, r3
 801ba8e:	e730      	b.n	801b8f2 <_printf_float+0xc6>
 801ba90:	2301      	movs	r3, #1
 801ba92:	464a      	mov	r2, r9
 801ba94:	4631      	mov	r1, r6
 801ba96:	4628      	mov	r0, r5
 801ba98:	47b8      	blx	r7
 801ba9a:	3001      	adds	r0, #1
 801ba9c:	f43f af27 	beq.w	801b8ee <_printf_float+0xc2>
 801baa0:	f108 0801 	add.w	r8, r8, #1
 801baa4:	e7e6      	b.n	801ba74 <_printf_float+0x248>
 801baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	dc39      	bgt.n	801bb20 <_printf_float+0x2f4>
 801baac:	4a1b      	ldr	r2, [pc, #108]	; (801bb1c <_printf_float+0x2f0>)
 801baae:	2301      	movs	r3, #1
 801bab0:	4631      	mov	r1, r6
 801bab2:	4628      	mov	r0, r5
 801bab4:	47b8      	blx	r7
 801bab6:	3001      	adds	r0, #1
 801bab8:	f43f af19 	beq.w	801b8ee <_printf_float+0xc2>
 801babc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bac0:	4313      	orrs	r3, r2
 801bac2:	d102      	bne.n	801baca <_printf_float+0x29e>
 801bac4:	6823      	ldr	r3, [r4, #0]
 801bac6:	07d9      	lsls	r1, r3, #31
 801bac8:	d5d8      	bpl.n	801ba7c <_printf_float+0x250>
 801baca:	ee18 3a10 	vmov	r3, s16
 801bace:	4652      	mov	r2, sl
 801bad0:	4631      	mov	r1, r6
 801bad2:	4628      	mov	r0, r5
 801bad4:	47b8      	blx	r7
 801bad6:	3001      	adds	r0, #1
 801bad8:	f43f af09 	beq.w	801b8ee <_printf_float+0xc2>
 801badc:	f04f 0900 	mov.w	r9, #0
 801bae0:	f104 0a1a 	add.w	sl, r4, #26
 801bae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bae6:	425b      	negs	r3, r3
 801bae8:	454b      	cmp	r3, r9
 801baea:	dc01      	bgt.n	801baf0 <_printf_float+0x2c4>
 801baec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801baee:	e792      	b.n	801ba16 <_printf_float+0x1ea>
 801baf0:	2301      	movs	r3, #1
 801baf2:	4652      	mov	r2, sl
 801baf4:	4631      	mov	r1, r6
 801baf6:	4628      	mov	r0, r5
 801baf8:	47b8      	blx	r7
 801bafa:	3001      	adds	r0, #1
 801bafc:	f43f aef7 	beq.w	801b8ee <_printf_float+0xc2>
 801bb00:	f109 0901 	add.w	r9, r9, #1
 801bb04:	e7ee      	b.n	801bae4 <_printf_float+0x2b8>
 801bb06:	bf00      	nop
 801bb08:	7fefffff 	.word	0x7fefffff
 801bb0c:	08021ec4 	.word	0x08021ec4
 801bb10:	08021ec8 	.word	0x08021ec8
 801bb14:	08021ed0 	.word	0x08021ed0
 801bb18:	08021ecc 	.word	0x08021ecc
 801bb1c:	08021ed4 	.word	0x08021ed4
 801bb20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb24:	429a      	cmp	r2, r3
 801bb26:	bfa8      	it	ge
 801bb28:	461a      	movge	r2, r3
 801bb2a:	2a00      	cmp	r2, #0
 801bb2c:	4691      	mov	r9, r2
 801bb2e:	dc37      	bgt.n	801bba0 <_printf_float+0x374>
 801bb30:	f04f 0b00 	mov.w	fp, #0
 801bb34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb38:	f104 021a 	add.w	r2, r4, #26
 801bb3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb3e:	9305      	str	r3, [sp, #20]
 801bb40:	eba3 0309 	sub.w	r3, r3, r9
 801bb44:	455b      	cmp	r3, fp
 801bb46:	dc33      	bgt.n	801bbb0 <_printf_float+0x384>
 801bb48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb4c:	429a      	cmp	r2, r3
 801bb4e:	db3b      	blt.n	801bbc8 <_printf_float+0x39c>
 801bb50:	6823      	ldr	r3, [r4, #0]
 801bb52:	07da      	lsls	r2, r3, #31
 801bb54:	d438      	bmi.n	801bbc8 <_printf_float+0x39c>
 801bb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb58:	9a05      	ldr	r2, [sp, #20]
 801bb5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb5c:	1a9a      	subs	r2, r3, r2
 801bb5e:	eba3 0901 	sub.w	r9, r3, r1
 801bb62:	4591      	cmp	r9, r2
 801bb64:	bfa8      	it	ge
 801bb66:	4691      	movge	r9, r2
 801bb68:	f1b9 0f00 	cmp.w	r9, #0
 801bb6c:	dc35      	bgt.n	801bbda <_printf_float+0x3ae>
 801bb6e:	f04f 0800 	mov.w	r8, #0
 801bb72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb76:	f104 0a1a 	add.w	sl, r4, #26
 801bb7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb7e:	1a9b      	subs	r3, r3, r2
 801bb80:	eba3 0309 	sub.w	r3, r3, r9
 801bb84:	4543      	cmp	r3, r8
 801bb86:	f77f af79 	ble.w	801ba7c <_printf_float+0x250>
 801bb8a:	2301      	movs	r3, #1
 801bb8c:	4652      	mov	r2, sl
 801bb8e:	4631      	mov	r1, r6
 801bb90:	4628      	mov	r0, r5
 801bb92:	47b8      	blx	r7
 801bb94:	3001      	adds	r0, #1
 801bb96:	f43f aeaa 	beq.w	801b8ee <_printf_float+0xc2>
 801bb9a:	f108 0801 	add.w	r8, r8, #1
 801bb9e:	e7ec      	b.n	801bb7a <_printf_float+0x34e>
 801bba0:	4613      	mov	r3, r2
 801bba2:	4631      	mov	r1, r6
 801bba4:	4642      	mov	r2, r8
 801bba6:	4628      	mov	r0, r5
 801bba8:	47b8      	blx	r7
 801bbaa:	3001      	adds	r0, #1
 801bbac:	d1c0      	bne.n	801bb30 <_printf_float+0x304>
 801bbae:	e69e      	b.n	801b8ee <_printf_float+0xc2>
 801bbb0:	2301      	movs	r3, #1
 801bbb2:	4631      	mov	r1, r6
 801bbb4:	4628      	mov	r0, r5
 801bbb6:	9205      	str	r2, [sp, #20]
 801bbb8:	47b8      	blx	r7
 801bbba:	3001      	adds	r0, #1
 801bbbc:	f43f ae97 	beq.w	801b8ee <_printf_float+0xc2>
 801bbc0:	9a05      	ldr	r2, [sp, #20]
 801bbc2:	f10b 0b01 	add.w	fp, fp, #1
 801bbc6:	e7b9      	b.n	801bb3c <_printf_float+0x310>
 801bbc8:	ee18 3a10 	vmov	r3, s16
 801bbcc:	4652      	mov	r2, sl
 801bbce:	4631      	mov	r1, r6
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	47b8      	blx	r7
 801bbd4:	3001      	adds	r0, #1
 801bbd6:	d1be      	bne.n	801bb56 <_printf_float+0x32a>
 801bbd8:	e689      	b.n	801b8ee <_printf_float+0xc2>
 801bbda:	9a05      	ldr	r2, [sp, #20]
 801bbdc:	464b      	mov	r3, r9
 801bbde:	4442      	add	r2, r8
 801bbe0:	4631      	mov	r1, r6
 801bbe2:	4628      	mov	r0, r5
 801bbe4:	47b8      	blx	r7
 801bbe6:	3001      	adds	r0, #1
 801bbe8:	d1c1      	bne.n	801bb6e <_printf_float+0x342>
 801bbea:	e680      	b.n	801b8ee <_printf_float+0xc2>
 801bbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bbee:	2a01      	cmp	r2, #1
 801bbf0:	dc01      	bgt.n	801bbf6 <_printf_float+0x3ca>
 801bbf2:	07db      	lsls	r3, r3, #31
 801bbf4:	d538      	bpl.n	801bc68 <_printf_float+0x43c>
 801bbf6:	2301      	movs	r3, #1
 801bbf8:	4642      	mov	r2, r8
 801bbfa:	4631      	mov	r1, r6
 801bbfc:	4628      	mov	r0, r5
 801bbfe:	47b8      	blx	r7
 801bc00:	3001      	adds	r0, #1
 801bc02:	f43f ae74 	beq.w	801b8ee <_printf_float+0xc2>
 801bc06:	ee18 3a10 	vmov	r3, s16
 801bc0a:	4652      	mov	r2, sl
 801bc0c:	4631      	mov	r1, r6
 801bc0e:	4628      	mov	r0, r5
 801bc10:	47b8      	blx	r7
 801bc12:	3001      	adds	r0, #1
 801bc14:	f43f ae6b 	beq.w	801b8ee <_printf_float+0xc2>
 801bc18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	2300      	movs	r3, #0
 801bc20:	f7e4 ff6a 	bl	8000af8 <__aeabi_dcmpeq>
 801bc24:	b9d8      	cbnz	r0, 801bc5e <_printf_float+0x432>
 801bc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc28:	f108 0201 	add.w	r2, r8, #1
 801bc2c:	3b01      	subs	r3, #1
 801bc2e:	4631      	mov	r1, r6
 801bc30:	4628      	mov	r0, r5
 801bc32:	47b8      	blx	r7
 801bc34:	3001      	adds	r0, #1
 801bc36:	d10e      	bne.n	801bc56 <_printf_float+0x42a>
 801bc38:	e659      	b.n	801b8ee <_printf_float+0xc2>
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	4652      	mov	r2, sl
 801bc3e:	4631      	mov	r1, r6
 801bc40:	4628      	mov	r0, r5
 801bc42:	47b8      	blx	r7
 801bc44:	3001      	adds	r0, #1
 801bc46:	f43f ae52 	beq.w	801b8ee <_printf_float+0xc2>
 801bc4a:	f108 0801 	add.w	r8, r8, #1
 801bc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc50:	3b01      	subs	r3, #1
 801bc52:	4543      	cmp	r3, r8
 801bc54:	dcf1      	bgt.n	801bc3a <_printf_float+0x40e>
 801bc56:	464b      	mov	r3, r9
 801bc58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bc5c:	e6dc      	b.n	801ba18 <_printf_float+0x1ec>
 801bc5e:	f04f 0800 	mov.w	r8, #0
 801bc62:	f104 0a1a 	add.w	sl, r4, #26
 801bc66:	e7f2      	b.n	801bc4e <_printf_float+0x422>
 801bc68:	2301      	movs	r3, #1
 801bc6a:	4642      	mov	r2, r8
 801bc6c:	e7df      	b.n	801bc2e <_printf_float+0x402>
 801bc6e:	2301      	movs	r3, #1
 801bc70:	464a      	mov	r2, r9
 801bc72:	4631      	mov	r1, r6
 801bc74:	4628      	mov	r0, r5
 801bc76:	47b8      	blx	r7
 801bc78:	3001      	adds	r0, #1
 801bc7a:	f43f ae38 	beq.w	801b8ee <_printf_float+0xc2>
 801bc7e:	f108 0801 	add.w	r8, r8, #1
 801bc82:	68e3      	ldr	r3, [r4, #12]
 801bc84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bc86:	1a5b      	subs	r3, r3, r1
 801bc88:	4543      	cmp	r3, r8
 801bc8a:	dcf0      	bgt.n	801bc6e <_printf_float+0x442>
 801bc8c:	e6fa      	b.n	801ba84 <_printf_float+0x258>
 801bc8e:	f04f 0800 	mov.w	r8, #0
 801bc92:	f104 0919 	add.w	r9, r4, #25
 801bc96:	e7f4      	b.n	801bc82 <_printf_float+0x456>

0801bc98 <_printf_common>:
 801bc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc9c:	4616      	mov	r6, r2
 801bc9e:	4699      	mov	r9, r3
 801bca0:	688a      	ldr	r2, [r1, #8]
 801bca2:	690b      	ldr	r3, [r1, #16]
 801bca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bca8:	4293      	cmp	r3, r2
 801bcaa:	bfb8      	it	lt
 801bcac:	4613      	movlt	r3, r2
 801bcae:	6033      	str	r3, [r6, #0]
 801bcb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bcb4:	4607      	mov	r7, r0
 801bcb6:	460c      	mov	r4, r1
 801bcb8:	b10a      	cbz	r2, 801bcbe <_printf_common+0x26>
 801bcba:	3301      	adds	r3, #1
 801bcbc:	6033      	str	r3, [r6, #0]
 801bcbe:	6823      	ldr	r3, [r4, #0]
 801bcc0:	0699      	lsls	r1, r3, #26
 801bcc2:	bf42      	ittt	mi
 801bcc4:	6833      	ldrmi	r3, [r6, #0]
 801bcc6:	3302      	addmi	r3, #2
 801bcc8:	6033      	strmi	r3, [r6, #0]
 801bcca:	6825      	ldr	r5, [r4, #0]
 801bccc:	f015 0506 	ands.w	r5, r5, #6
 801bcd0:	d106      	bne.n	801bce0 <_printf_common+0x48>
 801bcd2:	f104 0a19 	add.w	sl, r4, #25
 801bcd6:	68e3      	ldr	r3, [r4, #12]
 801bcd8:	6832      	ldr	r2, [r6, #0]
 801bcda:	1a9b      	subs	r3, r3, r2
 801bcdc:	42ab      	cmp	r3, r5
 801bcde:	dc26      	bgt.n	801bd2e <_printf_common+0x96>
 801bce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bce4:	1e13      	subs	r3, r2, #0
 801bce6:	6822      	ldr	r2, [r4, #0]
 801bce8:	bf18      	it	ne
 801bcea:	2301      	movne	r3, #1
 801bcec:	0692      	lsls	r2, r2, #26
 801bcee:	d42b      	bmi.n	801bd48 <_printf_common+0xb0>
 801bcf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bcf4:	4649      	mov	r1, r9
 801bcf6:	4638      	mov	r0, r7
 801bcf8:	47c0      	blx	r8
 801bcfa:	3001      	adds	r0, #1
 801bcfc:	d01e      	beq.n	801bd3c <_printf_common+0xa4>
 801bcfe:	6823      	ldr	r3, [r4, #0]
 801bd00:	68e5      	ldr	r5, [r4, #12]
 801bd02:	6832      	ldr	r2, [r6, #0]
 801bd04:	f003 0306 	and.w	r3, r3, #6
 801bd08:	2b04      	cmp	r3, #4
 801bd0a:	bf08      	it	eq
 801bd0c:	1aad      	subeq	r5, r5, r2
 801bd0e:	68a3      	ldr	r3, [r4, #8]
 801bd10:	6922      	ldr	r2, [r4, #16]
 801bd12:	bf0c      	ite	eq
 801bd14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bd18:	2500      	movne	r5, #0
 801bd1a:	4293      	cmp	r3, r2
 801bd1c:	bfc4      	itt	gt
 801bd1e:	1a9b      	subgt	r3, r3, r2
 801bd20:	18ed      	addgt	r5, r5, r3
 801bd22:	2600      	movs	r6, #0
 801bd24:	341a      	adds	r4, #26
 801bd26:	42b5      	cmp	r5, r6
 801bd28:	d11a      	bne.n	801bd60 <_printf_common+0xc8>
 801bd2a:	2000      	movs	r0, #0
 801bd2c:	e008      	b.n	801bd40 <_printf_common+0xa8>
 801bd2e:	2301      	movs	r3, #1
 801bd30:	4652      	mov	r2, sl
 801bd32:	4649      	mov	r1, r9
 801bd34:	4638      	mov	r0, r7
 801bd36:	47c0      	blx	r8
 801bd38:	3001      	adds	r0, #1
 801bd3a:	d103      	bne.n	801bd44 <_printf_common+0xac>
 801bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd44:	3501      	adds	r5, #1
 801bd46:	e7c6      	b.n	801bcd6 <_printf_common+0x3e>
 801bd48:	18e1      	adds	r1, r4, r3
 801bd4a:	1c5a      	adds	r2, r3, #1
 801bd4c:	2030      	movs	r0, #48	; 0x30
 801bd4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bd52:	4422      	add	r2, r4
 801bd54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bd58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bd5c:	3302      	adds	r3, #2
 801bd5e:	e7c7      	b.n	801bcf0 <_printf_common+0x58>
 801bd60:	2301      	movs	r3, #1
 801bd62:	4622      	mov	r2, r4
 801bd64:	4649      	mov	r1, r9
 801bd66:	4638      	mov	r0, r7
 801bd68:	47c0      	blx	r8
 801bd6a:	3001      	adds	r0, #1
 801bd6c:	d0e6      	beq.n	801bd3c <_printf_common+0xa4>
 801bd6e:	3601      	adds	r6, #1
 801bd70:	e7d9      	b.n	801bd26 <_printf_common+0x8e>
	...

0801bd74 <_printf_i>:
 801bd74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd78:	7e0f      	ldrb	r7, [r1, #24]
 801bd7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bd7c:	2f78      	cmp	r7, #120	; 0x78
 801bd7e:	4691      	mov	r9, r2
 801bd80:	4680      	mov	r8, r0
 801bd82:	460c      	mov	r4, r1
 801bd84:	469a      	mov	sl, r3
 801bd86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bd8a:	d807      	bhi.n	801bd9c <_printf_i+0x28>
 801bd8c:	2f62      	cmp	r7, #98	; 0x62
 801bd8e:	d80a      	bhi.n	801bda6 <_printf_i+0x32>
 801bd90:	2f00      	cmp	r7, #0
 801bd92:	f000 80d8 	beq.w	801bf46 <_printf_i+0x1d2>
 801bd96:	2f58      	cmp	r7, #88	; 0x58
 801bd98:	f000 80a3 	beq.w	801bee2 <_printf_i+0x16e>
 801bd9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bda0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bda4:	e03a      	b.n	801be1c <_printf_i+0xa8>
 801bda6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bdaa:	2b15      	cmp	r3, #21
 801bdac:	d8f6      	bhi.n	801bd9c <_printf_i+0x28>
 801bdae:	a101      	add	r1, pc, #4	; (adr r1, 801bdb4 <_printf_i+0x40>)
 801bdb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bdb4:	0801be0d 	.word	0x0801be0d
 801bdb8:	0801be21 	.word	0x0801be21
 801bdbc:	0801bd9d 	.word	0x0801bd9d
 801bdc0:	0801bd9d 	.word	0x0801bd9d
 801bdc4:	0801bd9d 	.word	0x0801bd9d
 801bdc8:	0801bd9d 	.word	0x0801bd9d
 801bdcc:	0801be21 	.word	0x0801be21
 801bdd0:	0801bd9d 	.word	0x0801bd9d
 801bdd4:	0801bd9d 	.word	0x0801bd9d
 801bdd8:	0801bd9d 	.word	0x0801bd9d
 801bddc:	0801bd9d 	.word	0x0801bd9d
 801bde0:	0801bf2d 	.word	0x0801bf2d
 801bde4:	0801be51 	.word	0x0801be51
 801bde8:	0801bf0f 	.word	0x0801bf0f
 801bdec:	0801bd9d 	.word	0x0801bd9d
 801bdf0:	0801bd9d 	.word	0x0801bd9d
 801bdf4:	0801bf4f 	.word	0x0801bf4f
 801bdf8:	0801bd9d 	.word	0x0801bd9d
 801bdfc:	0801be51 	.word	0x0801be51
 801be00:	0801bd9d 	.word	0x0801bd9d
 801be04:	0801bd9d 	.word	0x0801bd9d
 801be08:	0801bf17 	.word	0x0801bf17
 801be0c:	682b      	ldr	r3, [r5, #0]
 801be0e:	1d1a      	adds	r2, r3, #4
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	602a      	str	r2, [r5, #0]
 801be14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801be1c:	2301      	movs	r3, #1
 801be1e:	e0a3      	b.n	801bf68 <_printf_i+0x1f4>
 801be20:	6820      	ldr	r0, [r4, #0]
 801be22:	6829      	ldr	r1, [r5, #0]
 801be24:	0606      	lsls	r6, r0, #24
 801be26:	f101 0304 	add.w	r3, r1, #4
 801be2a:	d50a      	bpl.n	801be42 <_printf_i+0xce>
 801be2c:	680e      	ldr	r6, [r1, #0]
 801be2e:	602b      	str	r3, [r5, #0]
 801be30:	2e00      	cmp	r6, #0
 801be32:	da03      	bge.n	801be3c <_printf_i+0xc8>
 801be34:	232d      	movs	r3, #45	; 0x2d
 801be36:	4276      	negs	r6, r6
 801be38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801be3c:	485e      	ldr	r0, [pc, #376]	; (801bfb8 <_printf_i+0x244>)
 801be3e:	230a      	movs	r3, #10
 801be40:	e019      	b.n	801be76 <_printf_i+0x102>
 801be42:	680e      	ldr	r6, [r1, #0]
 801be44:	602b      	str	r3, [r5, #0]
 801be46:	f010 0f40 	tst.w	r0, #64	; 0x40
 801be4a:	bf18      	it	ne
 801be4c:	b236      	sxthne	r6, r6
 801be4e:	e7ef      	b.n	801be30 <_printf_i+0xbc>
 801be50:	682b      	ldr	r3, [r5, #0]
 801be52:	6820      	ldr	r0, [r4, #0]
 801be54:	1d19      	adds	r1, r3, #4
 801be56:	6029      	str	r1, [r5, #0]
 801be58:	0601      	lsls	r1, r0, #24
 801be5a:	d501      	bpl.n	801be60 <_printf_i+0xec>
 801be5c:	681e      	ldr	r6, [r3, #0]
 801be5e:	e002      	b.n	801be66 <_printf_i+0xf2>
 801be60:	0646      	lsls	r6, r0, #25
 801be62:	d5fb      	bpl.n	801be5c <_printf_i+0xe8>
 801be64:	881e      	ldrh	r6, [r3, #0]
 801be66:	4854      	ldr	r0, [pc, #336]	; (801bfb8 <_printf_i+0x244>)
 801be68:	2f6f      	cmp	r7, #111	; 0x6f
 801be6a:	bf0c      	ite	eq
 801be6c:	2308      	moveq	r3, #8
 801be6e:	230a      	movne	r3, #10
 801be70:	2100      	movs	r1, #0
 801be72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801be76:	6865      	ldr	r5, [r4, #4]
 801be78:	60a5      	str	r5, [r4, #8]
 801be7a:	2d00      	cmp	r5, #0
 801be7c:	bfa2      	ittt	ge
 801be7e:	6821      	ldrge	r1, [r4, #0]
 801be80:	f021 0104 	bicge.w	r1, r1, #4
 801be84:	6021      	strge	r1, [r4, #0]
 801be86:	b90e      	cbnz	r6, 801be8c <_printf_i+0x118>
 801be88:	2d00      	cmp	r5, #0
 801be8a:	d04d      	beq.n	801bf28 <_printf_i+0x1b4>
 801be8c:	4615      	mov	r5, r2
 801be8e:	fbb6 f1f3 	udiv	r1, r6, r3
 801be92:	fb03 6711 	mls	r7, r3, r1, r6
 801be96:	5dc7      	ldrb	r7, [r0, r7]
 801be98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801be9c:	4637      	mov	r7, r6
 801be9e:	42bb      	cmp	r3, r7
 801bea0:	460e      	mov	r6, r1
 801bea2:	d9f4      	bls.n	801be8e <_printf_i+0x11a>
 801bea4:	2b08      	cmp	r3, #8
 801bea6:	d10b      	bne.n	801bec0 <_printf_i+0x14c>
 801bea8:	6823      	ldr	r3, [r4, #0]
 801beaa:	07de      	lsls	r6, r3, #31
 801beac:	d508      	bpl.n	801bec0 <_printf_i+0x14c>
 801beae:	6923      	ldr	r3, [r4, #16]
 801beb0:	6861      	ldr	r1, [r4, #4]
 801beb2:	4299      	cmp	r1, r3
 801beb4:	bfde      	ittt	le
 801beb6:	2330      	movle	r3, #48	; 0x30
 801beb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bec0:	1b52      	subs	r2, r2, r5
 801bec2:	6122      	str	r2, [r4, #16]
 801bec4:	f8cd a000 	str.w	sl, [sp]
 801bec8:	464b      	mov	r3, r9
 801beca:	aa03      	add	r2, sp, #12
 801becc:	4621      	mov	r1, r4
 801bece:	4640      	mov	r0, r8
 801bed0:	f7ff fee2 	bl	801bc98 <_printf_common>
 801bed4:	3001      	adds	r0, #1
 801bed6:	d14c      	bne.n	801bf72 <_printf_i+0x1fe>
 801bed8:	f04f 30ff 	mov.w	r0, #4294967295
 801bedc:	b004      	add	sp, #16
 801bede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bee2:	4835      	ldr	r0, [pc, #212]	; (801bfb8 <_printf_i+0x244>)
 801bee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bee8:	6829      	ldr	r1, [r5, #0]
 801beea:	6823      	ldr	r3, [r4, #0]
 801beec:	f851 6b04 	ldr.w	r6, [r1], #4
 801bef0:	6029      	str	r1, [r5, #0]
 801bef2:	061d      	lsls	r5, r3, #24
 801bef4:	d514      	bpl.n	801bf20 <_printf_i+0x1ac>
 801bef6:	07df      	lsls	r7, r3, #31
 801bef8:	bf44      	itt	mi
 801befa:	f043 0320 	orrmi.w	r3, r3, #32
 801befe:	6023      	strmi	r3, [r4, #0]
 801bf00:	b91e      	cbnz	r6, 801bf0a <_printf_i+0x196>
 801bf02:	6823      	ldr	r3, [r4, #0]
 801bf04:	f023 0320 	bic.w	r3, r3, #32
 801bf08:	6023      	str	r3, [r4, #0]
 801bf0a:	2310      	movs	r3, #16
 801bf0c:	e7b0      	b.n	801be70 <_printf_i+0xfc>
 801bf0e:	6823      	ldr	r3, [r4, #0]
 801bf10:	f043 0320 	orr.w	r3, r3, #32
 801bf14:	6023      	str	r3, [r4, #0]
 801bf16:	2378      	movs	r3, #120	; 0x78
 801bf18:	4828      	ldr	r0, [pc, #160]	; (801bfbc <_printf_i+0x248>)
 801bf1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bf1e:	e7e3      	b.n	801bee8 <_printf_i+0x174>
 801bf20:	0659      	lsls	r1, r3, #25
 801bf22:	bf48      	it	mi
 801bf24:	b2b6      	uxthmi	r6, r6
 801bf26:	e7e6      	b.n	801bef6 <_printf_i+0x182>
 801bf28:	4615      	mov	r5, r2
 801bf2a:	e7bb      	b.n	801bea4 <_printf_i+0x130>
 801bf2c:	682b      	ldr	r3, [r5, #0]
 801bf2e:	6826      	ldr	r6, [r4, #0]
 801bf30:	6961      	ldr	r1, [r4, #20]
 801bf32:	1d18      	adds	r0, r3, #4
 801bf34:	6028      	str	r0, [r5, #0]
 801bf36:	0635      	lsls	r5, r6, #24
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	d501      	bpl.n	801bf40 <_printf_i+0x1cc>
 801bf3c:	6019      	str	r1, [r3, #0]
 801bf3e:	e002      	b.n	801bf46 <_printf_i+0x1d2>
 801bf40:	0670      	lsls	r0, r6, #25
 801bf42:	d5fb      	bpl.n	801bf3c <_printf_i+0x1c8>
 801bf44:	8019      	strh	r1, [r3, #0]
 801bf46:	2300      	movs	r3, #0
 801bf48:	6123      	str	r3, [r4, #16]
 801bf4a:	4615      	mov	r5, r2
 801bf4c:	e7ba      	b.n	801bec4 <_printf_i+0x150>
 801bf4e:	682b      	ldr	r3, [r5, #0]
 801bf50:	1d1a      	adds	r2, r3, #4
 801bf52:	602a      	str	r2, [r5, #0]
 801bf54:	681d      	ldr	r5, [r3, #0]
 801bf56:	6862      	ldr	r2, [r4, #4]
 801bf58:	2100      	movs	r1, #0
 801bf5a:	4628      	mov	r0, r5
 801bf5c:	f7e4 f958 	bl	8000210 <memchr>
 801bf60:	b108      	cbz	r0, 801bf66 <_printf_i+0x1f2>
 801bf62:	1b40      	subs	r0, r0, r5
 801bf64:	6060      	str	r0, [r4, #4]
 801bf66:	6863      	ldr	r3, [r4, #4]
 801bf68:	6123      	str	r3, [r4, #16]
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf70:	e7a8      	b.n	801bec4 <_printf_i+0x150>
 801bf72:	6923      	ldr	r3, [r4, #16]
 801bf74:	462a      	mov	r2, r5
 801bf76:	4649      	mov	r1, r9
 801bf78:	4640      	mov	r0, r8
 801bf7a:	47d0      	blx	sl
 801bf7c:	3001      	adds	r0, #1
 801bf7e:	d0ab      	beq.n	801bed8 <_printf_i+0x164>
 801bf80:	6823      	ldr	r3, [r4, #0]
 801bf82:	079b      	lsls	r3, r3, #30
 801bf84:	d413      	bmi.n	801bfae <_printf_i+0x23a>
 801bf86:	68e0      	ldr	r0, [r4, #12]
 801bf88:	9b03      	ldr	r3, [sp, #12]
 801bf8a:	4298      	cmp	r0, r3
 801bf8c:	bfb8      	it	lt
 801bf8e:	4618      	movlt	r0, r3
 801bf90:	e7a4      	b.n	801bedc <_printf_i+0x168>
 801bf92:	2301      	movs	r3, #1
 801bf94:	4632      	mov	r2, r6
 801bf96:	4649      	mov	r1, r9
 801bf98:	4640      	mov	r0, r8
 801bf9a:	47d0      	blx	sl
 801bf9c:	3001      	adds	r0, #1
 801bf9e:	d09b      	beq.n	801bed8 <_printf_i+0x164>
 801bfa0:	3501      	adds	r5, #1
 801bfa2:	68e3      	ldr	r3, [r4, #12]
 801bfa4:	9903      	ldr	r1, [sp, #12]
 801bfa6:	1a5b      	subs	r3, r3, r1
 801bfa8:	42ab      	cmp	r3, r5
 801bfaa:	dcf2      	bgt.n	801bf92 <_printf_i+0x21e>
 801bfac:	e7eb      	b.n	801bf86 <_printf_i+0x212>
 801bfae:	2500      	movs	r5, #0
 801bfb0:	f104 0619 	add.w	r6, r4, #25
 801bfb4:	e7f5      	b.n	801bfa2 <_printf_i+0x22e>
 801bfb6:	bf00      	nop
 801bfb8:	08021ed6 	.word	0x08021ed6
 801bfbc:	08021ee7 	.word	0x08021ee7

0801bfc0 <_scanf_float>:
 801bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfc4:	b087      	sub	sp, #28
 801bfc6:	4617      	mov	r7, r2
 801bfc8:	9303      	str	r3, [sp, #12]
 801bfca:	688b      	ldr	r3, [r1, #8]
 801bfcc:	1e5a      	subs	r2, r3, #1
 801bfce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bfd2:	bf83      	ittte	hi
 801bfd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bfd8:	195b      	addhi	r3, r3, r5
 801bfda:	9302      	strhi	r3, [sp, #8]
 801bfdc:	2300      	movls	r3, #0
 801bfde:	bf86      	itte	hi
 801bfe0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bfe4:	608b      	strhi	r3, [r1, #8]
 801bfe6:	9302      	strls	r3, [sp, #8]
 801bfe8:	680b      	ldr	r3, [r1, #0]
 801bfea:	468b      	mov	fp, r1
 801bfec:	2500      	movs	r5, #0
 801bfee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bff2:	f84b 3b1c 	str.w	r3, [fp], #28
 801bff6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bffa:	4680      	mov	r8, r0
 801bffc:	460c      	mov	r4, r1
 801bffe:	465e      	mov	r6, fp
 801c000:	46aa      	mov	sl, r5
 801c002:	46a9      	mov	r9, r5
 801c004:	9501      	str	r5, [sp, #4]
 801c006:	68a2      	ldr	r2, [r4, #8]
 801c008:	b152      	cbz	r2, 801c020 <_scanf_float+0x60>
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	781b      	ldrb	r3, [r3, #0]
 801c00e:	2b4e      	cmp	r3, #78	; 0x4e
 801c010:	d864      	bhi.n	801c0dc <_scanf_float+0x11c>
 801c012:	2b40      	cmp	r3, #64	; 0x40
 801c014:	d83c      	bhi.n	801c090 <_scanf_float+0xd0>
 801c016:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c01a:	b2c8      	uxtb	r0, r1
 801c01c:	280e      	cmp	r0, #14
 801c01e:	d93a      	bls.n	801c096 <_scanf_float+0xd6>
 801c020:	f1b9 0f00 	cmp.w	r9, #0
 801c024:	d003      	beq.n	801c02e <_scanf_float+0x6e>
 801c026:	6823      	ldr	r3, [r4, #0]
 801c028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c02c:	6023      	str	r3, [r4, #0]
 801c02e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c032:	f1ba 0f01 	cmp.w	sl, #1
 801c036:	f200 8113 	bhi.w	801c260 <_scanf_float+0x2a0>
 801c03a:	455e      	cmp	r6, fp
 801c03c:	f200 8105 	bhi.w	801c24a <_scanf_float+0x28a>
 801c040:	2501      	movs	r5, #1
 801c042:	4628      	mov	r0, r5
 801c044:	b007      	add	sp, #28
 801c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c04a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c04e:	2a0d      	cmp	r2, #13
 801c050:	d8e6      	bhi.n	801c020 <_scanf_float+0x60>
 801c052:	a101      	add	r1, pc, #4	; (adr r1, 801c058 <_scanf_float+0x98>)
 801c054:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c058:	0801c197 	.word	0x0801c197
 801c05c:	0801c021 	.word	0x0801c021
 801c060:	0801c021 	.word	0x0801c021
 801c064:	0801c021 	.word	0x0801c021
 801c068:	0801c1f7 	.word	0x0801c1f7
 801c06c:	0801c1cf 	.word	0x0801c1cf
 801c070:	0801c021 	.word	0x0801c021
 801c074:	0801c021 	.word	0x0801c021
 801c078:	0801c1a5 	.word	0x0801c1a5
 801c07c:	0801c021 	.word	0x0801c021
 801c080:	0801c021 	.word	0x0801c021
 801c084:	0801c021 	.word	0x0801c021
 801c088:	0801c021 	.word	0x0801c021
 801c08c:	0801c15d 	.word	0x0801c15d
 801c090:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c094:	e7db      	b.n	801c04e <_scanf_float+0x8e>
 801c096:	290e      	cmp	r1, #14
 801c098:	d8c2      	bhi.n	801c020 <_scanf_float+0x60>
 801c09a:	a001      	add	r0, pc, #4	; (adr r0, 801c0a0 <_scanf_float+0xe0>)
 801c09c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c0a0:	0801c14f 	.word	0x0801c14f
 801c0a4:	0801c021 	.word	0x0801c021
 801c0a8:	0801c14f 	.word	0x0801c14f
 801c0ac:	0801c1e3 	.word	0x0801c1e3
 801c0b0:	0801c021 	.word	0x0801c021
 801c0b4:	0801c0fd 	.word	0x0801c0fd
 801c0b8:	0801c139 	.word	0x0801c139
 801c0bc:	0801c139 	.word	0x0801c139
 801c0c0:	0801c139 	.word	0x0801c139
 801c0c4:	0801c139 	.word	0x0801c139
 801c0c8:	0801c139 	.word	0x0801c139
 801c0cc:	0801c139 	.word	0x0801c139
 801c0d0:	0801c139 	.word	0x0801c139
 801c0d4:	0801c139 	.word	0x0801c139
 801c0d8:	0801c139 	.word	0x0801c139
 801c0dc:	2b6e      	cmp	r3, #110	; 0x6e
 801c0de:	d809      	bhi.n	801c0f4 <_scanf_float+0x134>
 801c0e0:	2b60      	cmp	r3, #96	; 0x60
 801c0e2:	d8b2      	bhi.n	801c04a <_scanf_float+0x8a>
 801c0e4:	2b54      	cmp	r3, #84	; 0x54
 801c0e6:	d077      	beq.n	801c1d8 <_scanf_float+0x218>
 801c0e8:	2b59      	cmp	r3, #89	; 0x59
 801c0ea:	d199      	bne.n	801c020 <_scanf_float+0x60>
 801c0ec:	2d07      	cmp	r5, #7
 801c0ee:	d197      	bne.n	801c020 <_scanf_float+0x60>
 801c0f0:	2508      	movs	r5, #8
 801c0f2:	e029      	b.n	801c148 <_scanf_float+0x188>
 801c0f4:	2b74      	cmp	r3, #116	; 0x74
 801c0f6:	d06f      	beq.n	801c1d8 <_scanf_float+0x218>
 801c0f8:	2b79      	cmp	r3, #121	; 0x79
 801c0fa:	e7f6      	b.n	801c0ea <_scanf_float+0x12a>
 801c0fc:	6821      	ldr	r1, [r4, #0]
 801c0fe:	05c8      	lsls	r0, r1, #23
 801c100:	d51a      	bpl.n	801c138 <_scanf_float+0x178>
 801c102:	9b02      	ldr	r3, [sp, #8]
 801c104:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c108:	6021      	str	r1, [r4, #0]
 801c10a:	f109 0901 	add.w	r9, r9, #1
 801c10e:	b11b      	cbz	r3, 801c118 <_scanf_float+0x158>
 801c110:	3b01      	subs	r3, #1
 801c112:	3201      	adds	r2, #1
 801c114:	9302      	str	r3, [sp, #8]
 801c116:	60a2      	str	r2, [r4, #8]
 801c118:	68a3      	ldr	r3, [r4, #8]
 801c11a:	3b01      	subs	r3, #1
 801c11c:	60a3      	str	r3, [r4, #8]
 801c11e:	6923      	ldr	r3, [r4, #16]
 801c120:	3301      	adds	r3, #1
 801c122:	6123      	str	r3, [r4, #16]
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	3b01      	subs	r3, #1
 801c128:	2b00      	cmp	r3, #0
 801c12a:	607b      	str	r3, [r7, #4]
 801c12c:	f340 8084 	ble.w	801c238 <_scanf_float+0x278>
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	3301      	adds	r3, #1
 801c134:	603b      	str	r3, [r7, #0]
 801c136:	e766      	b.n	801c006 <_scanf_float+0x46>
 801c138:	eb1a 0f05 	cmn.w	sl, r5
 801c13c:	f47f af70 	bne.w	801c020 <_scanf_float+0x60>
 801c140:	6822      	ldr	r2, [r4, #0]
 801c142:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c146:	6022      	str	r2, [r4, #0]
 801c148:	f806 3b01 	strb.w	r3, [r6], #1
 801c14c:	e7e4      	b.n	801c118 <_scanf_float+0x158>
 801c14e:	6822      	ldr	r2, [r4, #0]
 801c150:	0610      	lsls	r0, r2, #24
 801c152:	f57f af65 	bpl.w	801c020 <_scanf_float+0x60>
 801c156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c15a:	e7f4      	b.n	801c146 <_scanf_float+0x186>
 801c15c:	f1ba 0f00 	cmp.w	sl, #0
 801c160:	d10e      	bne.n	801c180 <_scanf_float+0x1c0>
 801c162:	f1b9 0f00 	cmp.w	r9, #0
 801c166:	d10e      	bne.n	801c186 <_scanf_float+0x1c6>
 801c168:	6822      	ldr	r2, [r4, #0]
 801c16a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c16e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c172:	d108      	bne.n	801c186 <_scanf_float+0x1c6>
 801c174:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c178:	6022      	str	r2, [r4, #0]
 801c17a:	f04f 0a01 	mov.w	sl, #1
 801c17e:	e7e3      	b.n	801c148 <_scanf_float+0x188>
 801c180:	f1ba 0f02 	cmp.w	sl, #2
 801c184:	d055      	beq.n	801c232 <_scanf_float+0x272>
 801c186:	2d01      	cmp	r5, #1
 801c188:	d002      	beq.n	801c190 <_scanf_float+0x1d0>
 801c18a:	2d04      	cmp	r5, #4
 801c18c:	f47f af48 	bne.w	801c020 <_scanf_float+0x60>
 801c190:	3501      	adds	r5, #1
 801c192:	b2ed      	uxtb	r5, r5
 801c194:	e7d8      	b.n	801c148 <_scanf_float+0x188>
 801c196:	f1ba 0f01 	cmp.w	sl, #1
 801c19a:	f47f af41 	bne.w	801c020 <_scanf_float+0x60>
 801c19e:	f04f 0a02 	mov.w	sl, #2
 801c1a2:	e7d1      	b.n	801c148 <_scanf_float+0x188>
 801c1a4:	b97d      	cbnz	r5, 801c1c6 <_scanf_float+0x206>
 801c1a6:	f1b9 0f00 	cmp.w	r9, #0
 801c1aa:	f47f af3c 	bne.w	801c026 <_scanf_float+0x66>
 801c1ae:	6822      	ldr	r2, [r4, #0]
 801c1b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c1b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c1b8:	f47f af39 	bne.w	801c02e <_scanf_float+0x6e>
 801c1bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c1c0:	6022      	str	r2, [r4, #0]
 801c1c2:	2501      	movs	r5, #1
 801c1c4:	e7c0      	b.n	801c148 <_scanf_float+0x188>
 801c1c6:	2d03      	cmp	r5, #3
 801c1c8:	d0e2      	beq.n	801c190 <_scanf_float+0x1d0>
 801c1ca:	2d05      	cmp	r5, #5
 801c1cc:	e7de      	b.n	801c18c <_scanf_float+0x1cc>
 801c1ce:	2d02      	cmp	r5, #2
 801c1d0:	f47f af26 	bne.w	801c020 <_scanf_float+0x60>
 801c1d4:	2503      	movs	r5, #3
 801c1d6:	e7b7      	b.n	801c148 <_scanf_float+0x188>
 801c1d8:	2d06      	cmp	r5, #6
 801c1da:	f47f af21 	bne.w	801c020 <_scanf_float+0x60>
 801c1de:	2507      	movs	r5, #7
 801c1e0:	e7b2      	b.n	801c148 <_scanf_float+0x188>
 801c1e2:	6822      	ldr	r2, [r4, #0]
 801c1e4:	0591      	lsls	r1, r2, #22
 801c1e6:	f57f af1b 	bpl.w	801c020 <_scanf_float+0x60>
 801c1ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c1ee:	6022      	str	r2, [r4, #0]
 801c1f0:	f8cd 9004 	str.w	r9, [sp, #4]
 801c1f4:	e7a8      	b.n	801c148 <_scanf_float+0x188>
 801c1f6:	6822      	ldr	r2, [r4, #0]
 801c1f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c1fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c200:	d006      	beq.n	801c210 <_scanf_float+0x250>
 801c202:	0550      	lsls	r0, r2, #21
 801c204:	f57f af0c 	bpl.w	801c020 <_scanf_float+0x60>
 801c208:	f1b9 0f00 	cmp.w	r9, #0
 801c20c:	f43f af0f 	beq.w	801c02e <_scanf_float+0x6e>
 801c210:	0591      	lsls	r1, r2, #22
 801c212:	bf58      	it	pl
 801c214:	9901      	ldrpl	r1, [sp, #4]
 801c216:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c21a:	bf58      	it	pl
 801c21c:	eba9 0101 	subpl.w	r1, r9, r1
 801c220:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c224:	bf58      	it	pl
 801c226:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c22a:	6022      	str	r2, [r4, #0]
 801c22c:	f04f 0900 	mov.w	r9, #0
 801c230:	e78a      	b.n	801c148 <_scanf_float+0x188>
 801c232:	f04f 0a03 	mov.w	sl, #3
 801c236:	e787      	b.n	801c148 <_scanf_float+0x188>
 801c238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c23c:	4639      	mov	r1, r7
 801c23e:	4640      	mov	r0, r8
 801c240:	4798      	blx	r3
 801c242:	2800      	cmp	r0, #0
 801c244:	f43f aedf 	beq.w	801c006 <_scanf_float+0x46>
 801c248:	e6ea      	b.n	801c020 <_scanf_float+0x60>
 801c24a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c24e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c252:	463a      	mov	r2, r7
 801c254:	4640      	mov	r0, r8
 801c256:	4798      	blx	r3
 801c258:	6923      	ldr	r3, [r4, #16]
 801c25a:	3b01      	subs	r3, #1
 801c25c:	6123      	str	r3, [r4, #16]
 801c25e:	e6ec      	b.n	801c03a <_scanf_float+0x7a>
 801c260:	1e6b      	subs	r3, r5, #1
 801c262:	2b06      	cmp	r3, #6
 801c264:	d825      	bhi.n	801c2b2 <_scanf_float+0x2f2>
 801c266:	2d02      	cmp	r5, #2
 801c268:	d836      	bhi.n	801c2d8 <_scanf_float+0x318>
 801c26a:	455e      	cmp	r6, fp
 801c26c:	f67f aee8 	bls.w	801c040 <_scanf_float+0x80>
 801c270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c274:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c278:	463a      	mov	r2, r7
 801c27a:	4640      	mov	r0, r8
 801c27c:	4798      	blx	r3
 801c27e:	6923      	ldr	r3, [r4, #16]
 801c280:	3b01      	subs	r3, #1
 801c282:	6123      	str	r3, [r4, #16]
 801c284:	e7f1      	b.n	801c26a <_scanf_float+0x2aa>
 801c286:	9802      	ldr	r0, [sp, #8]
 801c288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c28c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c290:	9002      	str	r0, [sp, #8]
 801c292:	463a      	mov	r2, r7
 801c294:	4640      	mov	r0, r8
 801c296:	4798      	blx	r3
 801c298:	6923      	ldr	r3, [r4, #16]
 801c29a:	3b01      	subs	r3, #1
 801c29c:	6123      	str	r3, [r4, #16]
 801c29e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c2a2:	fa5f fa8a 	uxtb.w	sl, sl
 801c2a6:	f1ba 0f02 	cmp.w	sl, #2
 801c2aa:	d1ec      	bne.n	801c286 <_scanf_float+0x2c6>
 801c2ac:	3d03      	subs	r5, #3
 801c2ae:	b2ed      	uxtb	r5, r5
 801c2b0:	1b76      	subs	r6, r6, r5
 801c2b2:	6823      	ldr	r3, [r4, #0]
 801c2b4:	05da      	lsls	r2, r3, #23
 801c2b6:	d52f      	bpl.n	801c318 <_scanf_float+0x358>
 801c2b8:	055b      	lsls	r3, r3, #21
 801c2ba:	d510      	bpl.n	801c2de <_scanf_float+0x31e>
 801c2bc:	455e      	cmp	r6, fp
 801c2be:	f67f aebf 	bls.w	801c040 <_scanf_float+0x80>
 801c2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c2c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c2ca:	463a      	mov	r2, r7
 801c2cc:	4640      	mov	r0, r8
 801c2ce:	4798      	blx	r3
 801c2d0:	6923      	ldr	r3, [r4, #16]
 801c2d2:	3b01      	subs	r3, #1
 801c2d4:	6123      	str	r3, [r4, #16]
 801c2d6:	e7f1      	b.n	801c2bc <_scanf_float+0x2fc>
 801c2d8:	46aa      	mov	sl, r5
 801c2da:	9602      	str	r6, [sp, #8]
 801c2dc:	e7df      	b.n	801c29e <_scanf_float+0x2de>
 801c2de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c2e2:	6923      	ldr	r3, [r4, #16]
 801c2e4:	2965      	cmp	r1, #101	; 0x65
 801c2e6:	f103 33ff 	add.w	r3, r3, #4294967295
 801c2ea:	f106 35ff 	add.w	r5, r6, #4294967295
 801c2ee:	6123      	str	r3, [r4, #16]
 801c2f0:	d00c      	beq.n	801c30c <_scanf_float+0x34c>
 801c2f2:	2945      	cmp	r1, #69	; 0x45
 801c2f4:	d00a      	beq.n	801c30c <_scanf_float+0x34c>
 801c2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c2fa:	463a      	mov	r2, r7
 801c2fc:	4640      	mov	r0, r8
 801c2fe:	4798      	blx	r3
 801c300:	6923      	ldr	r3, [r4, #16]
 801c302:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c306:	3b01      	subs	r3, #1
 801c308:	1eb5      	subs	r5, r6, #2
 801c30a:	6123      	str	r3, [r4, #16]
 801c30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c310:	463a      	mov	r2, r7
 801c312:	4640      	mov	r0, r8
 801c314:	4798      	blx	r3
 801c316:	462e      	mov	r6, r5
 801c318:	6825      	ldr	r5, [r4, #0]
 801c31a:	f015 0510 	ands.w	r5, r5, #16
 801c31e:	d159      	bne.n	801c3d4 <_scanf_float+0x414>
 801c320:	7035      	strb	r5, [r6, #0]
 801c322:	6823      	ldr	r3, [r4, #0]
 801c324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c32c:	d11b      	bne.n	801c366 <_scanf_float+0x3a6>
 801c32e:	9b01      	ldr	r3, [sp, #4]
 801c330:	454b      	cmp	r3, r9
 801c332:	eba3 0209 	sub.w	r2, r3, r9
 801c336:	d123      	bne.n	801c380 <_scanf_float+0x3c0>
 801c338:	2200      	movs	r2, #0
 801c33a:	4659      	mov	r1, fp
 801c33c:	4640      	mov	r0, r8
 801c33e:	f000 ff61 	bl	801d204 <_strtod_r>
 801c342:	6822      	ldr	r2, [r4, #0]
 801c344:	9b03      	ldr	r3, [sp, #12]
 801c346:	f012 0f02 	tst.w	r2, #2
 801c34a:	ec57 6b10 	vmov	r6, r7, d0
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	d021      	beq.n	801c396 <_scanf_float+0x3d6>
 801c352:	9903      	ldr	r1, [sp, #12]
 801c354:	1d1a      	adds	r2, r3, #4
 801c356:	600a      	str	r2, [r1, #0]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	e9c3 6700 	strd	r6, r7, [r3]
 801c35e:	68e3      	ldr	r3, [r4, #12]
 801c360:	3301      	adds	r3, #1
 801c362:	60e3      	str	r3, [r4, #12]
 801c364:	e66d      	b.n	801c042 <_scanf_float+0x82>
 801c366:	9b04      	ldr	r3, [sp, #16]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d0e5      	beq.n	801c338 <_scanf_float+0x378>
 801c36c:	9905      	ldr	r1, [sp, #20]
 801c36e:	230a      	movs	r3, #10
 801c370:	462a      	mov	r2, r5
 801c372:	3101      	adds	r1, #1
 801c374:	4640      	mov	r0, r8
 801c376:	f001 f829 	bl	801d3cc <_strtol_r>
 801c37a:	9b04      	ldr	r3, [sp, #16]
 801c37c:	9e05      	ldr	r6, [sp, #20]
 801c37e:	1ac2      	subs	r2, r0, r3
 801c380:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c384:	429e      	cmp	r6, r3
 801c386:	bf28      	it	cs
 801c388:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c38c:	4912      	ldr	r1, [pc, #72]	; (801c3d8 <_scanf_float+0x418>)
 801c38e:	4630      	mov	r0, r6
 801c390:	f000 f8ca 	bl	801c528 <siprintf>
 801c394:	e7d0      	b.n	801c338 <_scanf_float+0x378>
 801c396:	9903      	ldr	r1, [sp, #12]
 801c398:	f012 0f04 	tst.w	r2, #4
 801c39c:	f103 0204 	add.w	r2, r3, #4
 801c3a0:	600a      	str	r2, [r1, #0]
 801c3a2:	d1d9      	bne.n	801c358 <_scanf_float+0x398>
 801c3a4:	f8d3 8000 	ldr.w	r8, [r3]
 801c3a8:	ee10 2a10 	vmov	r2, s0
 801c3ac:	ee10 0a10 	vmov	r0, s0
 801c3b0:	463b      	mov	r3, r7
 801c3b2:	4639      	mov	r1, r7
 801c3b4:	f7e4 fbd2 	bl	8000b5c <__aeabi_dcmpun>
 801c3b8:	b128      	cbz	r0, 801c3c6 <_scanf_float+0x406>
 801c3ba:	4808      	ldr	r0, [pc, #32]	; (801c3dc <_scanf_float+0x41c>)
 801c3bc:	f000 f8ae 	bl	801c51c <nanf>
 801c3c0:	ed88 0a00 	vstr	s0, [r8]
 801c3c4:	e7cb      	b.n	801c35e <_scanf_float+0x39e>
 801c3c6:	4630      	mov	r0, r6
 801c3c8:	4639      	mov	r1, r7
 801c3ca:	f7e4 fc25 	bl	8000c18 <__aeabi_d2f>
 801c3ce:	f8c8 0000 	str.w	r0, [r8]
 801c3d2:	e7c4      	b.n	801c35e <_scanf_float+0x39e>
 801c3d4:	2500      	movs	r5, #0
 801c3d6:	e634      	b.n	801c042 <_scanf_float+0x82>
 801c3d8:	08021ef8 	.word	0x08021ef8
 801c3dc:	08021fff 	.word	0x08021fff

0801c3e0 <iprintf>:
 801c3e0:	b40f      	push	{r0, r1, r2, r3}
 801c3e2:	4b0a      	ldr	r3, [pc, #40]	; (801c40c <iprintf+0x2c>)
 801c3e4:	b513      	push	{r0, r1, r4, lr}
 801c3e6:	681c      	ldr	r4, [r3, #0]
 801c3e8:	b124      	cbz	r4, 801c3f4 <iprintf+0x14>
 801c3ea:	69a3      	ldr	r3, [r4, #24]
 801c3ec:	b913      	cbnz	r3, 801c3f4 <iprintf+0x14>
 801c3ee:	4620      	mov	r0, r4
 801c3f0:	f002 f8a6 	bl	801e540 <__sinit>
 801c3f4:	ab05      	add	r3, sp, #20
 801c3f6:	9a04      	ldr	r2, [sp, #16]
 801c3f8:	68a1      	ldr	r1, [r4, #8]
 801c3fa:	9301      	str	r3, [sp, #4]
 801c3fc:	4620      	mov	r0, r4
 801c3fe:	f003 fba1 	bl	801fb44 <_vfiprintf_r>
 801c402:	b002      	add	sp, #8
 801c404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c408:	b004      	add	sp, #16
 801c40a:	4770      	bx	lr
 801c40c:	20000144 	.word	0x20000144

0801c410 <_puts_r>:
 801c410:	b570      	push	{r4, r5, r6, lr}
 801c412:	460e      	mov	r6, r1
 801c414:	4605      	mov	r5, r0
 801c416:	b118      	cbz	r0, 801c420 <_puts_r+0x10>
 801c418:	6983      	ldr	r3, [r0, #24]
 801c41a:	b90b      	cbnz	r3, 801c420 <_puts_r+0x10>
 801c41c:	f002 f890 	bl	801e540 <__sinit>
 801c420:	69ab      	ldr	r3, [r5, #24]
 801c422:	68ac      	ldr	r4, [r5, #8]
 801c424:	b913      	cbnz	r3, 801c42c <_puts_r+0x1c>
 801c426:	4628      	mov	r0, r5
 801c428:	f002 f88a 	bl	801e540 <__sinit>
 801c42c:	4b2c      	ldr	r3, [pc, #176]	; (801c4e0 <_puts_r+0xd0>)
 801c42e:	429c      	cmp	r4, r3
 801c430:	d120      	bne.n	801c474 <_puts_r+0x64>
 801c432:	686c      	ldr	r4, [r5, #4]
 801c434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c436:	07db      	lsls	r3, r3, #31
 801c438:	d405      	bmi.n	801c446 <_puts_r+0x36>
 801c43a:	89a3      	ldrh	r3, [r4, #12]
 801c43c:	0598      	lsls	r0, r3, #22
 801c43e:	d402      	bmi.n	801c446 <_puts_r+0x36>
 801c440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c442:	f7ff f838 	bl	801b4b6 <__retarget_lock_acquire_recursive>
 801c446:	89a3      	ldrh	r3, [r4, #12]
 801c448:	0719      	lsls	r1, r3, #28
 801c44a:	d51d      	bpl.n	801c488 <_puts_r+0x78>
 801c44c:	6923      	ldr	r3, [r4, #16]
 801c44e:	b1db      	cbz	r3, 801c488 <_puts_r+0x78>
 801c450:	3e01      	subs	r6, #1
 801c452:	68a3      	ldr	r3, [r4, #8]
 801c454:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c458:	3b01      	subs	r3, #1
 801c45a:	60a3      	str	r3, [r4, #8]
 801c45c:	bb39      	cbnz	r1, 801c4ae <_puts_r+0x9e>
 801c45e:	2b00      	cmp	r3, #0
 801c460:	da38      	bge.n	801c4d4 <_puts_r+0xc4>
 801c462:	4622      	mov	r2, r4
 801c464:	210a      	movs	r1, #10
 801c466:	4628      	mov	r0, r5
 801c468:	f000 fff6 	bl	801d458 <__swbuf_r>
 801c46c:	3001      	adds	r0, #1
 801c46e:	d011      	beq.n	801c494 <_puts_r+0x84>
 801c470:	250a      	movs	r5, #10
 801c472:	e011      	b.n	801c498 <_puts_r+0x88>
 801c474:	4b1b      	ldr	r3, [pc, #108]	; (801c4e4 <_puts_r+0xd4>)
 801c476:	429c      	cmp	r4, r3
 801c478:	d101      	bne.n	801c47e <_puts_r+0x6e>
 801c47a:	68ac      	ldr	r4, [r5, #8]
 801c47c:	e7da      	b.n	801c434 <_puts_r+0x24>
 801c47e:	4b1a      	ldr	r3, [pc, #104]	; (801c4e8 <_puts_r+0xd8>)
 801c480:	429c      	cmp	r4, r3
 801c482:	bf08      	it	eq
 801c484:	68ec      	ldreq	r4, [r5, #12]
 801c486:	e7d5      	b.n	801c434 <_puts_r+0x24>
 801c488:	4621      	mov	r1, r4
 801c48a:	4628      	mov	r0, r5
 801c48c:	f001 f836 	bl	801d4fc <__swsetup_r>
 801c490:	2800      	cmp	r0, #0
 801c492:	d0dd      	beq.n	801c450 <_puts_r+0x40>
 801c494:	f04f 35ff 	mov.w	r5, #4294967295
 801c498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c49a:	07da      	lsls	r2, r3, #31
 801c49c:	d405      	bmi.n	801c4aa <_puts_r+0x9a>
 801c49e:	89a3      	ldrh	r3, [r4, #12]
 801c4a0:	059b      	lsls	r3, r3, #22
 801c4a2:	d402      	bmi.n	801c4aa <_puts_r+0x9a>
 801c4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c4a6:	f7ff f807 	bl	801b4b8 <__retarget_lock_release_recursive>
 801c4aa:	4628      	mov	r0, r5
 801c4ac:	bd70      	pop	{r4, r5, r6, pc}
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	da04      	bge.n	801c4bc <_puts_r+0xac>
 801c4b2:	69a2      	ldr	r2, [r4, #24]
 801c4b4:	429a      	cmp	r2, r3
 801c4b6:	dc06      	bgt.n	801c4c6 <_puts_r+0xb6>
 801c4b8:	290a      	cmp	r1, #10
 801c4ba:	d004      	beq.n	801c4c6 <_puts_r+0xb6>
 801c4bc:	6823      	ldr	r3, [r4, #0]
 801c4be:	1c5a      	adds	r2, r3, #1
 801c4c0:	6022      	str	r2, [r4, #0]
 801c4c2:	7019      	strb	r1, [r3, #0]
 801c4c4:	e7c5      	b.n	801c452 <_puts_r+0x42>
 801c4c6:	4622      	mov	r2, r4
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	f000 ffc5 	bl	801d458 <__swbuf_r>
 801c4ce:	3001      	adds	r0, #1
 801c4d0:	d1bf      	bne.n	801c452 <_puts_r+0x42>
 801c4d2:	e7df      	b.n	801c494 <_puts_r+0x84>
 801c4d4:	6823      	ldr	r3, [r4, #0]
 801c4d6:	250a      	movs	r5, #10
 801c4d8:	1c5a      	adds	r2, r3, #1
 801c4da:	6022      	str	r2, [r4, #0]
 801c4dc:	701d      	strb	r5, [r3, #0]
 801c4de:	e7db      	b.n	801c498 <_puts_r+0x88>
 801c4e0:	0802219c 	.word	0x0802219c
 801c4e4:	080221bc 	.word	0x080221bc
 801c4e8:	0802217c 	.word	0x0802217c

0801c4ec <puts>:
 801c4ec:	4b02      	ldr	r3, [pc, #8]	; (801c4f8 <puts+0xc>)
 801c4ee:	4601      	mov	r1, r0
 801c4f0:	6818      	ldr	r0, [r3, #0]
 801c4f2:	f7ff bf8d 	b.w	801c410 <_puts_r>
 801c4f6:	bf00      	nop
 801c4f8:	20000144 	.word	0x20000144

0801c4fc <_sbrk_r>:
 801c4fc:	b538      	push	{r3, r4, r5, lr}
 801c4fe:	4d06      	ldr	r5, [pc, #24]	; (801c518 <_sbrk_r+0x1c>)
 801c500:	2300      	movs	r3, #0
 801c502:	4604      	mov	r4, r0
 801c504:	4608      	mov	r0, r1
 801c506:	602b      	str	r3, [r5, #0]
 801c508:	f7e7 fa00 	bl	800390c <_sbrk>
 801c50c:	1c43      	adds	r3, r0, #1
 801c50e:	d102      	bne.n	801c516 <_sbrk_r+0x1a>
 801c510:	682b      	ldr	r3, [r5, #0]
 801c512:	b103      	cbz	r3, 801c516 <_sbrk_r+0x1a>
 801c514:	6023      	str	r3, [r4, #0]
 801c516:	bd38      	pop	{r3, r4, r5, pc}
 801c518:	2000361c 	.word	0x2000361c

0801c51c <nanf>:
 801c51c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c524 <nanf+0x8>
 801c520:	4770      	bx	lr
 801c522:	bf00      	nop
 801c524:	7fc00000 	.word	0x7fc00000

0801c528 <siprintf>:
 801c528:	b40e      	push	{r1, r2, r3}
 801c52a:	b500      	push	{lr}
 801c52c:	b09c      	sub	sp, #112	; 0x70
 801c52e:	ab1d      	add	r3, sp, #116	; 0x74
 801c530:	9002      	str	r0, [sp, #8]
 801c532:	9006      	str	r0, [sp, #24]
 801c534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c538:	4809      	ldr	r0, [pc, #36]	; (801c560 <siprintf+0x38>)
 801c53a:	9107      	str	r1, [sp, #28]
 801c53c:	9104      	str	r1, [sp, #16]
 801c53e:	4909      	ldr	r1, [pc, #36]	; (801c564 <siprintf+0x3c>)
 801c540:	f853 2b04 	ldr.w	r2, [r3], #4
 801c544:	9105      	str	r1, [sp, #20]
 801c546:	6800      	ldr	r0, [r0, #0]
 801c548:	9301      	str	r3, [sp, #4]
 801c54a:	a902      	add	r1, sp, #8
 801c54c:	f003 f9d0 	bl	801f8f0 <_svfiprintf_r>
 801c550:	9b02      	ldr	r3, [sp, #8]
 801c552:	2200      	movs	r2, #0
 801c554:	701a      	strb	r2, [r3, #0]
 801c556:	b01c      	add	sp, #112	; 0x70
 801c558:	f85d eb04 	ldr.w	lr, [sp], #4
 801c55c:	b003      	add	sp, #12
 801c55e:	4770      	bx	lr
 801c560:	20000144 	.word	0x20000144
 801c564:	ffff0208 	.word	0xffff0208

0801c568 <strchr>:
 801c568:	b2c9      	uxtb	r1, r1
 801c56a:	4603      	mov	r3, r0
 801c56c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c570:	b11a      	cbz	r2, 801c57a <strchr+0x12>
 801c572:	428a      	cmp	r2, r1
 801c574:	d1f9      	bne.n	801c56a <strchr+0x2>
 801c576:	4618      	mov	r0, r3
 801c578:	4770      	bx	lr
 801c57a:	2900      	cmp	r1, #0
 801c57c:	bf18      	it	ne
 801c57e:	2300      	movne	r3, #0
 801c580:	e7f9      	b.n	801c576 <strchr+0xe>

0801c582 <strcpy>:
 801c582:	4603      	mov	r3, r0
 801c584:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c588:	f803 2b01 	strb.w	r2, [r3], #1
 801c58c:	2a00      	cmp	r2, #0
 801c58e:	d1f9      	bne.n	801c584 <strcpy+0x2>
 801c590:	4770      	bx	lr

0801c592 <strstr>:
 801c592:	780a      	ldrb	r2, [r1, #0]
 801c594:	b570      	push	{r4, r5, r6, lr}
 801c596:	b96a      	cbnz	r2, 801c5b4 <strstr+0x22>
 801c598:	bd70      	pop	{r4, r5, r6, pc}
 801c59a:	429a      	cmp	r2, r3
 801c59c:	d109      	bne.n	801c5b2 <strstr+0x20>
 801c59e:	460c      	mov	r4, r1
 801c5a0:	4605      	mov	r5, r0
 801c5a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d0f6      	beq.n	801c598 <strstr+0x6>
 801c5aa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c5ae:	429e      	cmp	r6, r3
 801c5b0:	d0f7      	beq.n	801c5a2 <strstr+0x10>
 801c5b2:	3001      	adds	r0, #1
 801c5b4:	7803      	ldrb	r3, [r0, #0]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d1ef      	bne.n	801c59a <strstr+0x8>
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	e7ec      	b.n	801c598 <strstr+0x6>

0801c5be <sulp>:
 801c5be:	b570      	push	{r4, r5, r6, lr}
 801c5c0:	4604      	mov	r4, r0
 801c5c2:	460d      	mov	r5, r1
 801c5c4:	ec45 4b10 	vmov	d0, r4, r5
 801c5c8:	4616      	mov	r6, r2
 801c5ca:	f002 ffd1 	bl	801f570 <__ulp>
 801c5ce:	ec51 0b10 	vmov	r0, r1, d0
 801c5d2:	b17e      	cbz	r6, 801c5f4 <sulp+0x36>
 801c5d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c5d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	dd09      	ble.n	801c5f4 <sulp+0x36>
 801c5e0:	051b      	lsls	r3, r3, #20
 801c5e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c5e6:	2400      	movs	r4, #0
 801c5e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	462b      	mov	r3, r5
 801c5f0:	f7e4 f81a 	bl	8000628 <__aeabi_dmul>
 801c5f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c5f8 <_strtod_l>:
 801c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5fc:	ed2d 8b02 	vpush	{d8}
 801c600:	b09d      	sub	sp, #116	; 0x74
 801c602:	461f      	mov	r7, r3
 801c604:	2300      	movs	r3, #0
 801c606:	9318      	str	r3, [sp, #96]	; 0x60
 801c608:	4ba2      	ldr	r3, [pc, #648]	; (801c894 <_strtod_l+0x29c>)
 801c60a:	9213      	str	r2, [sp, #76]	; 0x4c
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	9305      	str	r3, [sp, #20]
 801c610:	4604      	mov	r4, r0
 801c612:	4618      	mov	r0, r3
 801c614:	4688      	mov	r8, r1
 801c616:	f7e3 fded 	bl	80001f4 <strlen>
 801c61a:	f04f 0a00 	mov.w	sl, #0
 801c61e:	4605      	mov	r5, r0
 801c620:	f04f 0b00 	mov.w	fp, #0
 801c624:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c62a:	781a      	ldrb	r2, [r3, #0]
 801c62c:	2a2b      	cmp	r2, #43	; 0x2b
 801c62e:	d04e      	beq.n	801c6ce <_strtod_l+0xd6>
 801c630:	d83b      	bhi.n	801c6aa <_strtod_l+0xb2>
 801c632:	2a0d      	cmp	r2, #13
 801c634:	d834      	bhi.n	801c6a0 <_strtod_l+0xa8>
 801c636:	2a08      	cmp	r2, #8
 801c638:	d834      	bhi.n	801c6a4 <_strtod_l+0xac>
 801c63a:	2a00      	cmp	r2, #0
 801c63c:	d03e      	beq.n	801c6bc <_strtod_l+0xc4>
 801c63e:	2300      	movs	r3, #0
 801c640:	930a      	str	r3, [sp, #40]	; 0x28
 801c642:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c644:	7833      	ldrb	r3, [r6, #0]
 801c646:	2b30      	cmp	r3, #48	; 0x30
 801c648:	f040 80b0 	bne.w	801c7ac <_strtod_l+0x1b4>
 801c64c:	7873      	ldrb	r3, [r6, #1]
 801c64e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c652:	2b58      	cmp	r3, #88	; 0x58
 801c654:	d168      	bne.n	801c728 <_strtod_l+0x130>
 801c656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c658:	9301      	str	r3, [sp, #4]
 801c65a:	ab18      	add	r3, sp, #96	; 0x60
 801c65c:	9702      	str	r7, [sp, #8]
 801c65e:	9300      	str	r3, [sp, #0]
 801c660:	4a8d      	ldr	r2, [pc, #564]	; (801c898 <_strtod_l+0x2a0>)
 801c662:	ab19      	add	r3, sp, #100	; 0x64
 801c664:	a917      	add	r1, sp, #92	; 0x5c
 801c666:	4620      	mov	r0, r4
 801c668:	f002 f880 	bl	801e76c <__gethex>
 801c66c:	f010 0707 	ands.w	r7, r0, #7
 801c670:	4605      	mov	r5, r0
 801c672:	d005      	beq.n	801c680 <_strtod_l+0x88>
 801c674:	2f06      	cmp	r7, #6
 801c676:	d12c      	bne.n	801c6d2 <_strtod_l+0xda>
 801c678:	3601      	adds	r6, #1
 801c67a:	2300      	movs	r3, #0
 801c67c:	9617      	str	r6, [sp, #92]	; 0x5c
 801c67e:	930a      	str	r3, [sp, #40]	; 0x28
 801c680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c682:	2b00      	cmp	r3, #0
 801c684:	f040 8590 	bne.w	801d1a8 <_strtod_l+0xbb0>
 801c688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c68a:	b1eb      	cbz	r3, 801c6c8 <_strtod_l+0xd0>
 801c68c:	4652      	mov	r2, sl
 801c68e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c692:	ec43 2b10 	vmov	d0, r2, r3
 801c696:	b01d      	add	sp, #116	; 0x74
 801c698:	ecbd 8b02 	vpop	{d8}
 801c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6a0:	2a20      	cmp	r2, #32
 801c6a2:	d1cc      	bne.n	801c63e <_strtod_l+0x46>
 801c6a4:	3301      	adds	r3, #1
 801c6a6:	9317      	str	r3, [sp, #92]	; 0x5c
 801c6a8:	e7be      	b.n	801c628 <_strtod_l+0x30>
 801c6aa:	2a2d      	cmp	r2, #45	; 0x2d
 801c6ac:	d1c7      	bne.n	801c63e <_strtod_l+0x46>
 801c6ae:	2201      	movs	r2, #1
 801c6b0:	920a      	str	r2, [sp, #40]	; 0x28
 801c6b2:	1c5a      	adds	r2, r3, #1
 801c6b4:	9217      	str	r2, [sp, #92]	; 0x5c
 801c6b6:	785b      	ldrb	r3, [r3, #1]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d1c2      	bne.n	801c642 <_strtod_l+0x4a>
 801c6bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c6be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f040 856e 	bne.w	801d1a4 <_strtod_l+0xbac>
 801c6c8:	4652      	mov	r2, sl
 801c6ca:	465b      	mov	r3, fp
 801c6cc:	e7e1      	b.n	801c692 <_strtod_l+0x9a>
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	e7ee      	b.n	801c6b0 <_strtod_l+0xb8>
 801c6d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c6d4:	b13a      	cbz	r2, 801c6e6 <_strtod_l+0xee>
 801c6d6:	2135      	movs	r1, #53	; 0x35
 801c6d8:	a81a      	add	r0, sp, #104	; 0x68
 801c6da:	f003 f854 	bl	801f786 <__copybits>
 801c6de:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	f002 fc13 	bl	801ef0c <_Bfree>
 801c6e6:	3f01      	subs	r7, #1
 801c6e8:	2f04      	cmp	r7, #4
 801c6ea:	d806      	bhi.n	801c6fa <_strtod_l+0x102>
 801c6ec:	e8df f007 	tbb	[pc, r7]
 801c6f0:	1714030a 	.word	0x1714030a
 801c6f4:	0a          	.byte	0x0a
 801c6f5:	00          	.byte	0x00
 801c6f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c6fa:	0728      	lsls	r0, r5, #28
 801c6fc:	d5c0      	bpl.n	801c680 <_strtod_l+0x88>
 801c6fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c702:	e7bd      	b.n	801c680 <_strtod_l+0x88>
 801c704:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c70a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c70e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c712:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c716:	e7f0      	b.n	801c6fa <_strtod_l+0x102>
 801c718:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c89c <_strtod_l+0x2a4>
 801c71c:	e7ed      	b.n	801c6fa <_strtod_l+0x102>
 801c71e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c722:	f04f 3aff 	mov.w	sl, #4294967295
 801c726:	e7e8      	b.n	801c6fa <_strtod_l+0x102>
 801c728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c72a:	1c5a      	adds	r2, r3, #1
 801c72c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c72e:	785b      	ldrb	r3, [r3, #1]
 801c730:	2b30      	cmp	r3, #48	; 0x30
 801c732:	d0f9      	beq.n	801c728 <_strtod_l+0x130>
 801c734:	2b00      	cmp	r3, #0
 801c736:	d0a3      	beq.n	801c680 <_strtod_l+0x88>
 801c738:	2301      	movs	r3, #1
 801c73a:	f04f 0900 	mov.w	r9, #0
 801c73e:	9304      	str	r3, [sp, #16]
 801c740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c742:	9308      	str	r3, [sp, #32]
 801c744:	f8cd 901c 	str.w	r9, [sp, #28]
 801c748:	464f      	mov	r7, r9
 801c74a:	220a      	movs	r2, #10
 801c74c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c74e:	7806      	ldrb	r6, [r0, #0]
 801c750:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c754:	b2d9      	uxtb	r1, r3
 801c756:	2909      	cmp	r1, #9
 801c758:	d92a      	bls.n	801c7b0 <_strtod_l+0x1b8>
 801c75a:	9905      	ldr	r1, [sp, #20]
 801c75c:	462a      	mov	r2, r5
 801c75e:	f003 fb6e 	bl	801fe3e <strncmp>
 801c762:	b398      	cbz	r0, 801c7cc <_strtod_l+0x1d4>
 801c764:	2000      	movs	r0, #0
 801c766:	4632      	mov	r2, r6
 801c768:	463d      	mov	r5, r7
 801c76a:	9005      	str	r0, [sp, #20]
 801c76c:	4603      	mov	r3, r0
 801c76e:	2a65      	cmp	r2, #101	; 0x65
 801c770:	d001      	beq.n	801c776 <_strtod_l+0x17e>
 801c772:	2a45      	cmp	r2, #69	; 0x45
 801c774:	d118      	bne.n	801c7a8 <_strtod_l+0x1b0>
 801c776:	b91d      	cbnz	r5, 801c780 <_strtod_l+0x188>
 801c778:	9a04      	ldr	r2, [sp, #16]
 801c77a:	4302      	orrs	r2, r0
 801c77c:	d09e      	beq.n	801c6bc <_strtod_l+0xc4>
 801c77e:	2500      	movs	r5, #0
 801c780:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c784:	f108 0201 	add.w	r2, r8, #1
 801c788:	9217      	str	r2, [sp, #92]	; 0x5c
 801c78a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c78e:	2a2b      	cmp	r2, #43	; 0x2b
 801c790:	d075      	beq.n	801c87e <_strtod_l+0x286>
 801c792:	2a2d      	cmp	r2, #45	; 0x2d
 801c794:	d07b      	beq.n	801c88e <_strtod_l+0x296>
 801c796:	f04f 0c00 	mov.w	ip, #0
 801c79a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c79e:	2909      	cmp	r1, #9
 801c7a0:	f240 8082 	bls.w	801c8a8 <_strtod_l+0x2b0>
 801c7a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c7a8:	2600      	movs	r6, #0
 801c7aa:	e09d      	b.n	801c8e8 <_strtod_l+0x2f0>
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	e7c4      	b.n	801c73a <_strtod_l+0x142>
 801c7b0:	2f08      	cmp	r7, #8
 801c7b2:	bfd8      	it	le
 801c7b4:	9907      	ldrle	r1, [sp, #28]
 801c7b6:	f100 0001 	add.w	r0, r0, #1
 801c7ba:	bfda      	itte	le
 801c7bc:	fb02 3301 	mlale	r3, r2, r1, r3
 801c7c0:	9307      	strle	r3, [sp, #28]
 801c7c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c7c6:	3701      	adds	r7, #1
 801c7c8:	9017      	str	r0, [sp, #92]	; 0x5c
 801c7ca:	e7bf      	b.n	801c74c <_strtod_l+0x154>
 801c7cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c7ce:	195a      	adds	r2, r3, r5
 801c7d0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c7d2:	5d5a      	ldrb	r2, [r3, r5]
 801c7d4:	2f00      	cmp	r7, #0
 801c7d6:	d037      	beq.n	801c848 <_strtod_l+0x250>
 801c7d8:	9005      	str	r0, [sp, #20]
 801c7da:	463d      	mov	r5, r7
 801c7dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c7e0:	2b09      	cmp	r3, #9
 801c7e2:	d912      	bls.n	801c80a <_strtod_l+0x212>
 801c7e4:	2301      	movs	r3, #1
 801c7e6:	e7c2      	b.n	801c76e <_strtod_l+0x176>
 801c7e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c7ea:	1c5a      	adds	r2, r3, #1
 801c7ec:	9217      	str	r2, [sp, #92]	; 0x5c
 801c7ee:	785a      	ldrb	r2, [r3, #1]
 801c7f0:	3001      	adds	r0, #1
 801c7f2:	2a30      	cmp	r2, #48	; 0x30
 801c7f4:	d0f8      	beq.n	801c7e8 <_strtod_l+0x1f0>
 801c7f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c7fa:	2b08      	cmp	r3, #8
 801c7fc:	f200 84d9 	bhi.w	801d1b2 <_strtod_l+0xbba>
 801c800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c802:	9005      	str	r0, [sp, #20]
 801c804:	2000      	movs	r0, #0
 801c806:	9308      	str	r3, [sp, #32]
 801c808:	4605      	mov	r5, r0
 801c80a:	3a30      	subs	r2, #48	; 0x30
 801c80c:	f100 0301 	add.w	r3, r0, #1
 801c810:	d014      	beq.n	801c83c <_strtod_l+0x244>
 801c812:	9905      	ldr	r1, [sp, #20]
 801c814:	4419      	add	r1, r3
 801c816:	9105      	str	r1, [sp, #20]
 801c818:	462b      	mov	r3, r5
 801c81a:	eb00 0e05 	add.w	lr, r0, r5
 801c81e:	210a      	movs	r1, #10
 801c820:	4573      	cmp	r3, lr
 801c822:	d113      	bne.n	801c84c <_strtod_l+0x254>
 801c824:	182b      	adds	r3, r5, r0
 801c826:	2b08      	cmp	r3, #8
 801c828:	f105 0501 	add.w	r5, r5, #1
 801c82c:	4405      	add	r5, r0
 801c82e:	dc1c      	bgt.n	801c86a <_strtod_l+0x272>
 801c830:	9907      	ldr	r1, [sp, #28]
 801c832:	230a      	movs	r3, #10
 801c834:	fb03 2301 	mla	r3, r3, r1, r2
 801c838:	9307      	str	r3, [sp, #28]
 801c83a:	2300      	movs	r3, #0
 801c83c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c83e:	1c51      	adds	r1, r2, #1
 801c840:	9117      	str	r1, [sp, #92]	; 0x5c
 801c842:	7852      	ldrb	r2, [r2, #1]
 801c844:	4618      	mov	r0, r3
 801c846:	e7c9      	b.n	801c7dc <_strtod_l+0x1e4>
 801c848:	4638      	mov	r0, r7
 801c84a:	e7d2      	b.n	801c7f2 <_strtod_l+0x1fa>
 801c84c:	2b08      	cmp	r3, #8
 801c84e:	dc04      	bgt.n	801c85a <_strtod_l+0x262>
 801c850:	9e07      	ldr	r6, [sp, #28]
 801c852:	434e      	muls	r6, r1
 801c854:	9607      	str	r6, [sp, #28]
 801c856:	3301      	adds	r3, #1
 801c858:	e7e2      	b.n	801c820 <_strtod_l+0x228>
 801c85a:	f103 0c01 	add.w	ip, r3, #1
 801c85e:	f1bc 0f10 	cmp.w	ip, #16
 801c862:	bfd8      	it	le
 801c864:	fb01 f909 	mulle.w	r9, r1, r9
 801c868:	e7f5      	b.n	801c856 <_strtod_l+0x25e>
 801c86a:	2d10      	cmp	r5, #16
 801c86c:	bfdc      	itt	le
 801c86e:	230a      	movle	r3, #10
 801c870:	fb03 2909 	mlale	r9, r3, r9, r2
 801c874:	e7e1      	b.n	801c83a <_strtod_l+0x242>
 801c876:	2300      	movs	r3, #0
 801c878:	9305      	str	r3, [sp, #20]
 801c87a:	2301      	movs	r3, #1
 801c87c:	e77c      	b.n	801c778 <_strtod_l+0x180>
 801c87e:	f04f 0c00 	mov.w	ip, #0
 801c882:	f108 0202 	add.w	r2, r8, #2
 801c886:	9217      	str	r2, [sp, #92]	; 0x5c
 801c888:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c88c:	e785      	b.n	801c79a <_strtod_l+0x1a2>
 801c88e:	f04f 0c01 	mov.w	ip, #1
 801c892:	e7f6      	b.n	801c882 <_strtod_l+0x28a>
 801c894:	08022244 	.word	0x08022244
 801c898:	08021f00 	.word	0x08021f00
 801c89c:	7ff00000 	.word	0x7ff00000
 801c8a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c8a2:	1c51      	adds	r1, r2, #1
 801c8a4:	9117      	str	r1, [sp, #92]	; 0x5c
 801c8a6:	7852      	ldrb	r2, [r2, #1]
 801c8a8:	2a30      	cmp	r2, #48	; 0x30
 801c8aa:	d0f9      	beq.n	801c8a0 <_strtod_l+0x2a8>
 801c8ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c8b0:	2908      	cmp	r1, #8
 801c8b2:	f63f af79 	bhi.w	801c7a8 <_strtod_l+0x1b0>
 801c8b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c8ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c8bc:	9206      	str	r2, [sp, #24]
 801c8be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c8c0:	1c51      	adds	r1, r2, #1
 801c8c2:	9117      	str	r1, [sp, #92]	; 0x5c
 801c8c4:	7852      	ldrb	r2, [r2, #1]
 801c8c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c8ca:	2e09      	cmp	r6, #9
 801c8cc:	d937      	bls.n	801c93e <_strtod_l+0x346>
 801c8ce:	9e06      	ldr	r6, [sp, #24]
 801c8d0:	1b89      	subs	r1, r1, r6
 801c8d2:	2908      	cmp	r1, #8
 801c8d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c8d8:	dc02      	bgt.n	801c8e0 <_strtod_l+0x2e8>
 801c8da:	4576      	cmp	r6, lr
 801c8dc:	bfa8      	it	ge
 801c8de:	4676      	movge	r6, lr
 801c8e0:	f1bc 0f00 	cmp.w	ip, #0
 801c8e4:	d000      	beq.n	801c8e8 <_strtod_l+0x2f0>
 801c8e6:	4276      	negs	r6, r6
 801c8e8:	2d00      	cmp	r5, #0
 801c8ea:	d14d      	bne.n	801c988 <_strtod_l+0x390>
 801c8ec:	9904      	ldr	r1, [sp, #16]
 801c8ee:	4301      	orrs	r1, r0
 801c8f0:	f47f aec6 	bne.w	801c680 <_strtod_l+0x88>
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	f47f aee1 	bne.w	801c6bc <_strtod_l+0xc4>
 801c8fa:	2a69      	cmp	r2, #105	; 0x69
 801c8fc:	d027      	beq.n	801c94e <_strtod_l+0x356>
 801c8fe:	dc24      	bgt.n	801c94a <_strtod_l+0x352>
 801c900:	2a49      	cmp	r2, #73	; 0x49
 801c902:	d024      	beq.n	801c94e <_strtod_l+0x356>
 801c904:	2a4e      	cmp	r2, #78	; 0x4e
 801c906:	f47f aed9 	bne.w	801c6bc <_strtod_l+0xc4>
 801c90a:	499f      	ldr	r1, [pc, #636]	; (801cb88 <_strtod_l+0x590>)
 801c90c:	a817      	add	r0, sp, #92	; 0x5c
 801c90e:	f002 f985 	bl	801ec1c <__match>
 801c912:	2800      	cmp	r0, #0
 801c914:	f43f aed2 	beq.w	801c6bc <_strtod_l+0xc4>
 801c918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c91a:	781b      	ldrb	r3, [r3, #0]
 801c91c:	2b28      	cmp	r3, #40	; 0x28
 801c91e:	d12d      	bne.n	801c97c <_strtod_l+0x384>
 801c920:	499a      	ldr	r1, [pc, #616]	; (801cb8c <_strtod_l+0x594>)
 801c922:	aa1a      	add	r2, sp, #104	; 0x68
 801c924:	a817      	add	r0, sp, #92	; 0x5c
 801c926:	f002 f98d 	bl	801ec44 <__hexnan>
 801c92a:	2805      	cmp	r0, #5
 801c92c:	d126      	bne.n	801c97c <_strtod_l+0x384>
 801c92e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c930:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c934:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c938:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c93c:	e6a0      	b.n	801c680 <_strtod_l+0x88>
 801c93e:	210a      	movs	r1, #10
 801c940:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c944:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c948:	e7b9      	b.n	801c8be <_strtod_l+0x2c6>
 801c94a:	2a6e      	cmp	r2, #110	; 0x6e
 801c94c:	e7db      	b.n	801c906 <_strtod_l+0x30e>
 801c94e:	4990      	ldr	r1, [pc, #576]	; (801cb90 <_strtod_l+0x598>)
 801c950:	a817      	add	r0, sp, #92	; 0x5c
 801c952:	f002 f963 	bl	801ec1c <__match>
 801c956:	2800      	cmp	r0, #0
 801c958:	f43f aeb0 	beq.w	801c6bc <_strtod_l+0xc4>
 801c95c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c95e:	498d      	ldr	r1, [pc, #564]	; (801cb94 <_strtod_l+0x59c>)
 801c960:	3b01      	subs	r3, #1
 801c962:	a817      	add	r0, sp, #92	; 0x5c
 801c964:	9317      	str	r3, [sp, #92]	; 0x5c
 801c966:	f002 f959 	bl	801ec1c <__match>
 801c96a:	b910      	cbnz	r0, 801c972 <_strtod_l+0x37a>
 801c96c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c96e:	3301      	adds	r3, #1
 801c970:	9317      	str	r3, [sp, #92]	; 0x5c
 801c972:	f8df b230 	ldr.w	fp, [pc, #560]	; 801cba4 <_strtod_l+0x5ac>
 801c976:	f04f 0a00 	mov.w	sl, #0
 801c97a:	e681      	b.n	801c680 <_strtod_l+0x88>
 801c97c:	4886      	ldr	r0, [pc, #536]	; (801cb98 <_strtod_l+0x5a0>)
 801c97e:	f003 fa13 	bl	801fda8 <nan>
 801c982:	ec5b ab10 	vmov	sl, fp, d0
 801c986:	e67b      	b.n	801c680 <_strtod_l+0x88>
 801c988:	9b05      	ldr	r3, [sp, #20]
 801c98a:	9807      	ldr	r0, [sp, #28]
 801c98c:	1af3      	subs	r3, r6, r3
 801c98e:	2f00      	cmp	r7, #0
 801c990:	bf08      	it	eq
 801c992:	462f      	moveq	r7, r5
 801c994:	2d10      	cmp	r5, #16
 801c996:	9306      	str	r3, [sp, #24]
 801c998:	46a8      	mov	r8, r5
 801c99a:	bfa8      	it	ge
 801c99c:	f04f 0810 	movge.w	r8, #16
 801c9a0:	f7e3 fdc8 	bl	8000534 <__aeabi_ui2d>
 801c9a4:	2d09      	cmp	r5, #9
 801c9a6:	4682      	mov	sl, r0
 801c9a8:	468b      	mov	fp, r1
 801c9aa:	dd13      	ble.n	801c9d4 <_strtod_l+0x3dc>
 801c9ac:	4b7b      	ldr	r3, [pc, #492]	; (801cb9c <_strtod_l+0x5a4>)
 801c9ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c9b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c9b6:	f7e3 fe37 	bl	8000628 <__aeabi_dmul>
 801c9ba:	4682      	mov	sl, r0
 801c9bc:	4648      	mov	r0, r9
 801c9be:	468b      	mov	fp, r1
 801c9c0:	f7e3 fdb8 	bl	8000534 <__aeabi_ui2d>
 801c9c4:	4602      	mov	r2, r0
 801c9c6:	460b      	mov	r3, r1
 801c9c8:	4650      	mov	r0, sl
 801c9ca:	4659      	mov	r1, fp
 801c9cc:	f7e3 fc76 	bl	80002bc <__adddf3>
 801c9d0:	4682      	mov	sl, r0
 801c9d2:	468b      	mov	fp, r1
 801c9d4:	2d0f      	cmp	r5, #15
 801c9d6:	dc38      	bgt.n	801ca4a <_strtod_l+0x452>
 801c9d8:	9b06      	ldr	r3, [sp, #24]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	f43f ae50 	beq.w	801c680 <_strtod_l+0x88>
 801c9e0:	dd24      	ble.n	801ca2c <_strtod_l+0x434>
 801c9e2:	2b16      	cmp	r3, #22
 801c9e4:	dc0b      	bgt.n	801c9fe <_strtod_l+0x406>
 801c9e6:	496d      	ldr	r1, [pc, #436]	; (801cb9c <_strtod_l+0x5a4>)
 801c9e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9f0:	4652      	mov	r2, sl
 801c9f2:	465b      	mov	r3, fp
 801c9f4:	f7e3 fe18 	bl	8000628 <__aeabi_dmul>
 801c9f8:	4682      	mov	sl, r0
 801c9fa:	468b      	mov	fp, r1
 801c9fc:	e640      	b.n	801c680 <_strtod_l+0x88>
 801c9fe:	9a06      	ldr	r2, [sp, #24]
 801ca00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ca04:	4293      	cmp	r3, r2
 801ca06:	db20      	blt.n	801ca4a <_strtod_l+0x452>
 801ca08:	4c64      	ldr	r4, [pc, #400]	; (801cb9c <_strtod_l+0x5a4>)
 801ca0a:	f1c5 050f 	rsb	r5, r5, #15
 801ca0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ca12:	4652      	mov	r2, sl
 801ca14:	465b      	mov	r3, fp
 801ca16:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca1a:	f7e3 fe05 	bl	8000628 <__aeabi_dmul>
 801ca1e:	9b06      	ldr	r3, [sp, #24]
 801ca20:	1b5d      	subs	r5, r3, r5
 801ca22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ca26:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ca2a:	e7e3      	b.n	801c9f4 <_strtod_l+0x3fc>
 801ca2c:	9b06      	ldr	r3, [sp, #24]
 801ca2e:	3316      	adds	r3, #22
 801ca30:	db0b      	blt.n	801ca4a <_strtod_l+0x452>
 801ca32:	9b05      	ldr	r3, [sp, #20]
 801ca34:	1b9e      	subs	r6, r3, r6
 801ca36:	4b59      	ldr	r3, [pc, #356]	; (801cb9c <_strtod_l+0x5a4>)
 801ca38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ca3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ca40:	4650      	mov	r0, sl
 801ca42:	4659      	mov	r1, fp
 801ca44:	f7e3 ff1a 	bl	800087c <__aeabi_ddiv>
 801ca48:	e7d6      	b.n	801c9f8 <_strtod_l+0x400>
 801ca4a:	9b06      	ldr	r3, [sp, #24]
 801ca4c:	eba5 0808 	sub.w	r8, r5, r8
 801ca50:	4498      	add	r8, r3
 801ca52:	f1b8 0f00 	cmp.w	r8, #0
 801ca56:	dd74      	ble.n	801cb42 <_strtod_l+0x54a>
 801ca58:	f018 030f 	ands.w	r3, r8, #15
 801ca5c:	d00a      	beq.n	801ca74 <_strtod_l+0x47c>
 801ca5e:	494f      	ldr	r1, [pc, #316]	; (801cb9c <_strtod_l+0x5a4>)
 801ca60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ca64:	4652      	mov	r2, sl
 801ca66:	465b      	mov	r3, fp
 801ca68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca6c:	f7e3 fddc 	bl	8000628 <__aeabi_dmul>
 801ca70:	4682      	mov	sl, r0
 801ca72:	468b      	mov	fp, r1
 801ca74:	f038 080f 	bics.w	r8, r8, #15
 801ca78:	d04f      	beq.n	801cb1a <_strtod_l+0x522>
 801ca7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ca7e:	dd22      	ble.n	801cac6 <_strtod_l+0x4ce>
 801ca80:	2500      	movs	r5, #0
 801ca82:	462e      	mov	r6, r5
 801ca84:	9507      	str	r5, [sp, #28]
 801ca86:	9505      	str	r5, [sp, #20]
 801ca88:	2322      	movs	r3, #34	; 0x22
 801ca8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801cba4 <_strtod_l+0x5ac>
 801ca8e:	6023      	str	r3, [r4, #0]
 801ca90:	f04f 0a00 	mov.w	sl, #0
 801ca94:	9b07      	ldr	r3, [sp, #28]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	f43f adf2 	beq.w	801c680 <_strtod_l+0x88>
 801ca9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ca9e:	4620      	mov	r0, r4
 801caa0:	f002 fa34 	bl	801ef0c <_Bfree>
 801caa4:	9905      	ldr	r1, [sp, #20]
 801caa6:	4620      	mov	r0, r4
 801caa8:	f002 fa30 	bl	801ef0c <_Bfree>
 801caac:	4631      	mov	r1, r6
 801caae:	4620      	mov	r0, r4
 801cab0:	f002 fa2c 	bl	801ef0c <_Bfree>
 801cab4:	9907      	ldr	r1, [sp, #28]
 801cab6:	4620      	mov	r0, r4
 801cab8:	f002 fa28 	bl	801ef0c <_Bfree>
 801cabc:	4629      	mov	r1, r5
 801cabe:	4620      	mov	r0, r4
 801cac0:	f002 fa24 	bl	801ef0c <_Bfree>
 801cac4:	e5dc      	b.n	801c680 <_strtod_l+0x88>
 801cac6:	4b36      	ldr	r3, [pc, #216]	; (801cba0 <_strtod_l+0x5a8>)
 801cac8:	9304      	str	r3, [sp, #16]
 801caca:	2300      	movs	r3, #0
 801cacc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801cad0:	4650      	mov	r0, sl
 801cad2:	4659      	mov	r1, fp
 801cad4:	4699      	mov	r9, r3
 801cad6:	f1b8 0f01 	cmp.w	r8, #1
 801cada:	dc21      	bgt.n	801cb20 <_strtod_l+0x528>
 801cadc:	b10b      	cbz	r3, 801cae2 <_strtod_l+0x4ea>
 801cade:	4682      	mov	sl, r0
 801cae0:	468b      	mov	fp, r1
 801cae2:	4b2f      	ldr	r3, [pc, #188]	; (801cba0 <_strtod_l+0x5a8>)
 801cae4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801cae8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801caec:	4652      	mov	r2, sl
 801caee:	465b      	mov	r3, fp
 801caf0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801caf4:	f7e3 fd98 	bl	8000628 <__aeabi_dmul>
 801caf8:	4b2a      	ldr	r3, [pc, #168]	; (801cba4 <_strtod_l+0x5ac>)
 801cafa:	460a      	mov	r2, r1
 801cafc:	400b      	ands	r3, r1
 801cafe:	492a      	ldr	r1, [pc, #168]	; (801cba8 <_strtod_l+0x5b0>)
 801cb00:	428b      	cmp	r3, r1
 801cb02:	4682      	mov	sl, r0
 801cb04:	d8bc      	bhi.n	801ca80 <_strtod_l+0x488>
 801cb06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801cb0a:	428b      	cmp	r3, r1
 801cb0c:	bf86      	itte	hi
 801cb0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801cbac <_strtod_l+0x5b4>
 801cb12:	f04f 3aff 	movhi.w	sl, #4294967295
 801cb16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	9304      	str	r3, [sp, #16]
 801cb1e:	e084      	b.n	801cc2a <_strtod_l+0x632>
 801cb20:	f018 0f01 	tst.w	r8, #1
 801cb24:	d005      	beq.n	801cb32 <_strtod_l+0x53a>
 801cb26:	9b04      	ldr	r3, [sp, #16]
 801cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb2c:	f7e3 fd7c 	bl	8000628 <__aeabi_dmul>
 801cb30:	2301      	movs	r3, #1
 801cb32:	9a04      	ldr	r2, [sp, #16]
 801cb34:	3208      	adds	r2, #8
 801cb36:	f109 0901 	add.w	r9, r9, #1
 801cb3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801cb3e:	9204      	str	r2, [sp, #16]
 801cb40:	e7c9      	b.n	801cad6 <_strtod_l+0x4de>
 801cb42:	d0ea      	beq.n	801cb1a <_strtod_l+0x522>
 801cb44:	f1c8 0800 	rsb	r8, r8, #0
 801cb48:	f018 020f 	ands.w	r2, r8, #15
 801cb4c:	d00a      	beq.n	801cb64 <_strtod_l+0x56c>
 801cb4e:	4b13      	ldr	r3, [pc, #76]	; (801cb9c <_strtod_l+0x5a4>)
 801cb50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cb54:	4650      	mov	r0, sl
 801cb56:	4659      	mov	r1, fp
 801cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb5c:	f7e3 fe8e 	bl	800087c <__aeabi_ddiv>
 801cb60:	4682      	mov	sl, r0
 801cb62:	468b      	mov	fp, r1
 801cb64:	ea5f 1828 	movs.w	r8, r8, asr #4
 801cb68:	d0d7      	beq.n	801cb1a <_strtod_l+0x522>
 801cb6a:	f1b8 0f1f 	cmp.w	r8, #31
 801cb6e:	dd1f      	ble.n	801cbb0 <_strtod_l+0x5b8>
 801cb70:	2500      	movs	r5, #0
 801cb72:	462e      	mov	r6, r5
 801cb74:	9507      	str	r5, [sp, #28]
 801cb76:	9505      	str	r5, [sp, #20]
 801cb78:	2322      	movs	r3, #34	; 0x22
 801cb7a:	f04f 0a00 	mov.w	sl, #0
 801cb7e:	f04f 0b00 	mov.w	fp, #0
 801cb82:	6023      	str	r3, [r4, #0]
 801cb84:	e786      	b.n	801ca94 <_strtod_l+0x49c>
 801cb86:	bf00      	nop
 801cb88:	08021ed1 	.word	0x08021ed1
 801cb8c:	08021f14 	.word	0x08021f14
 801cb90:	08021ec9 	.word	0x08021ec9
 801cb94:	08022104 	.word	0x08022104
 801cb98:	08021fff 	.word	0x08021fff
 801cb9c:	080222e0 	.word	0x080222e0
 801cba0:	080222b8 	.word	0x080222b8
 801cba4:	7ff00000 	.word	0x7ff00000
 801cba8:	7ca00000 	.word	0x7ca00000
 801cbac:	7fefffff 	.word	0x7fefffff
 801cbb0:	f018 0310 	ands.w	r3, r8, #16
 801cbb4:	bf18      	it	ne
 801cbb6:	236a      	movne	r3, #106	; 0x6a
 801cbb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801cf68 <_strtod_l+0x970>
 801cbbc:	9304      	str	r3, [sp, #16]
 801cbbe:	4650      	mov	r0, sl
 801cbc0:	4659      	mov	r1, fp
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	f018 0f01 	tst.w	r8, #1
 801cbc8:	d004      	beq.n	801cbd4 <_strtod_l+0x5dc>
 801cbca:	e9d9 2300 	ldrd	r2, r3, [r9]
 801cbce:	f7e3 fd2b 	bl	8000628 <__aeabi_dmul>
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801cbd8:	f109 0908 	add.w	r9, r9, #8
 801cbdc:	d1f2      	bne.n	801cbc4 <_strtod_l+0x5cc>
 801cbde:	b10b      	cbz	r3, 801cbe4 <_strtod_l+0x5ec>
 801cbe0:	4682      	mov	sl, r0
 801cbe2:	468b      	mov	fp, r1
 801cbe4:	9b04      	ldr	r3, [sp, #16]
 801cbe6:	b1c3      	cbz	r3, 801cc1a <_strtod_l+0x622>
 801cbe8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801cbec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	4659      	mov	r1, fp
 801cbf4:	dd11      	ble.n	801cc1a <_strtod_l+0x622>
 801cbf6:	2b1f      	cmp	r3, #31
 801cbf8:	f340 8124 	ble.w	801ce44 <_strtod_l+0x84c>
 801cbfc:	2b34      	cmp	r3, #52	; 0x34
 801cbfe:	bfde      	ittt	le
 801cc00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801cc04:	f04f 33ff 	movle.w	r3, #4294967295
 801cc08:	fa03 f202 	lslle.w	r2, r3, r2
 801cc0c:	f04f 0a00 	mov.w	sl, #0
 801cc10:	bfcc      	ite	gt
 801cc12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801cc16:	ea02 0b01 	andle.w	fp, r2, r1
 801cc1a:	2200      	movs	r2, #0
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	4650      	mov	r0, sl
 801cc20:	4659      	mov	r1, fp
 801cc22:	f7e3 ff69 	bl	8000af8 <__aeabi_dcmpeq>
 801cc26:	2800      	cmp	r0, #0
 801cc28:	d1a2      	bne.n	801cb70 <_strtod_l+0x578>
 801cc2a:	9b07      	ldr	r3, [sp, #28]
 801cc2c:	9300      	str	r3, [sp, #0]
 801cc2e:	9908      	ldr	r1, [sp, #32]
 801cc30:	462b      	mov	r3, r5
 801cc32:	463a      	mov	r2, r7
 801cc34:	4620      	mov	r0, r4
 801cc36:	f002 f9d1 	bl	801efdc <__s2b>
 801cc3a:	9007      	str	r0, [sp, #28]
 801cc3c:	2800      	cmp	r0, #0
 801cc3e:	f43f af1f 	beq.w	801ca80 <_strtod_l+0x488>
 801cc42:	9b05      	ldr	r3, [sp, #20]
 801cc44:	1b9e      	subs	r6, r3, r6
 801cc46:	9b06      	ldr	r3, [sp, #24]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	bfb4      	ite	lt
 801cc4c:	4633      	movlt	r3, r6
 801cc4e:	2300      	movge	r3, #0
 801cc50:	930c      	str	r3, [sp, #48]	; 0x30
 801cc52:	9b06      	ldr	r3, [sp, #24]
 801cc54:	2500      	movs	r5, #0
 801cc56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc5a:	9312      	str	r3, [sp, #72]	; 0x48
 801cc5c:	462e      	mov	r6, r5
 801cc5e:	9b07      	ldr	r3, [sp, #28]
 801cc60:	4620      	mov	r0, r4
 801cc62:	6859      	ldr	r1, [r3, #4]
 801cc64:	f002 f912 	bl	801ee8c <_Balloc>
 801cc68:	9005      	str	r0, [sp, #20]
 801cc6a:	2800      	cmp	r0, #0
 801cc6c:	f43f af0c 	beq.w	801ca88 <_strtod_l+0x490>
 801cc70:	9b07      	ldr	r3, [sp, #28]
 801cc72:	691a      	ldr	r2, [r3, #16]
 801cc74:	3202      	adds	r2, #2
 801cc76:	f103 010c 	add.w	r1, r3, #12
 801cc7a:	0092      	lsls	r2, r2, #2
 801cc7c:	300c      	adds	r0, #12
 801cc7e:	f7fe fc25 	bl	801b4cc <memcpy>
 801cc82:	ec4b ab10 	vmov	d0, sl, fp
 801cc86:	aa1a      	add	r2, sp, #104	; 0x68
 801cc88:	a919      	add	r1, sp, #100	; 0x64
 801cc8a:	4620      	mov	r0, r4
 801cc8c:	f002 fcec 	bl	801f668 <__d2b>
 801cc90:	ec4b ab18 	vmov	d8, sl, fp
 801cc94:	9018      	str	r0, [sp, #96]	; 0x60
 801cc96:	2800      	cmp	r0, #0
 801cc98:	f43f aef6 	beq.w	801ca88 <_strtod_l+0x490>
 801cc9c:	2101      	movs	r1, #1
 801cc9e:	4620      	mov	r0, r4
 801cca0:	f002 fa36 	bl	801f110 <__i2b>
 801cca4:	4606      	mov	r6, r0
 801cca6:	2800      	cmp	r0, #0
 801cca8:	f43f aeee 	beq.w	801ca88 <_strtod_l+0x490>
 801ccac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ccae:	9904      	ldr	r1, [sp, #16]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	bfab      	itete	ge
 801ccb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801ccb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ccb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ccba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ccbe:	bfac      	ite	ge
 801ccc0:	eb03 0902 	addge.w	r9, r3, r2
 801ccc4:	1ad7      	sublt	r7, r2, r3
 801ccc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ccc8:	eba3 0801 	sub.w	r8, r3, r1
 801cccc:	4490      	add	r8, r2
 801ccce:	4ba1      	ldr	r3, [pc, #644]	; (801cf54 <_strtod_l+0x95c>)
 801ccd0:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccd4:	4598      	cmp	r8, r3
 801ccd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ccda:	f280 80c7 	bge.w	801ce6c <_strtod_l+0x874>
 801ccde:	eba3 0308 	sub.w	r3, r3, r8
 801cce2:	2b1f      	cmp	r3, #31
 801cce4:	eba2 0203 	sub.w	r2, r2, r3
 801cce8:	f04f 0101 	mov.w	r1, #1
 801ccec:	f300 80b1 	bgt.w	801ce52 <_strtod_l+0x85a>
 801ccf0:	fa01 f303 	lsl.w	r3, r1, r3
 801ccf4:	930d      	str	r3, [sp, #52]	; 0x34
 801ccf6:	2300      	movs	r3, #0
 801ccf8:	9308      	str	r3, [sp, #32]
 801ccfa:	eb09 0802 	add.w	r8, r9, r2
 801ccfe:	9b04      	ldr	r3, [sp, #16]
 801cd00:	45c1      	cmp	r9, r8
 801cd02:	4417      	add	r7, r2
 801cd04:	441f      	add	r7, r3
 801cd06:	464b      	mov	r3, r9
 801cd08:	bfa8      	it	ge
 801cd0a:	4643      	movge	r3, r8
 801cd0c:	42bb      	cmp	r3, r7
 801cd0e:	bfa8      	it	ge
 801cd10:	463b      	movge	r3, r7
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	bfc2      	ittt	gt
 801cd16:	eba8 0803 	subgt.w	r8, r8, r3
 801cd1a:	1aff      	subgt	r7, r7, r3
 801cd1c:	eba9 0903 	subgt.w	r9, r9, r3
 801cd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	dd17      	ble.n	801cd56 <_strtod_l+0x75e>
 801cd26:	4631      	mov	r1, r6
 801cd28:	461a      	mov	r2, r3
 801cd2a:	4620      	mov	r0, r4
 801cd2c:	f002 fab0 	bl	801f290 <__pow5mult>
 801cd30:	4606      	mov	r6, r0
 801cd32:	2800      	cmp	r0, #0
 801cd34:	f43f aea8 	beq.w	801ca88 <_strtod_l+0x490>
 801cd38:	4601      	mov	r1, r0
 801cd3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd3c:	4620      	mov	r0, r4
 801cd3e:	f002 f9fd 	bl	801f13c <__multiply>
 801cd42:	900b      	str	r0, [sp, #44]	; 0x2c
 801cd44:	2800      	cmp	r0, #0
 801cd46:	f43f ae9f 	beq.w	801ca88 <_strtod_l+0x490>
 801cd4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	f002 f8dd 	bl	801ef0c <_Bfree>
 801cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd54:	9318      	str	r3, [sp, #96]	; 0x60
 801cd56:	f1b8 0f00 	cmp.w	r8, #0
 801cd5a:	f300 808c 	bgt.w	801ce76 <_strtod_l+0x87e>
 801cd5e:	9b06      	ldr	r3, [sp, #24]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	dd08      	ble.n	801cd76 <_strtod_l+0x77e>
 801cd64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd66:	9905      	ldr	r1, [sp, #20]
 801cd68:	4620      	mov	r0, r4
 801cd6a:	f002 fa91 	bl	801f290 <__pow5mult>
 801cd6e:	9005      	str	r0, [sp, #20]
 801cd70:	2800      	cmp	r0, #0
 801cd72:	f43f ae89 	beq.w	801ca88 <_strtod_l+0x490>
 801cd76:	2f00      	cmp	r7, #0
 801cd78:	dd08      	ble.n	801cd8c <_strtod_l+0x794>
 801cd7a:	9905      	ldr	r1, [sp, #20]
 801cd7c:	463a      	mov	r2, r7
 801cd7e:	4620      	mov	r0, r4
 801cd80:	f002 fae0 	bl	801f344 <__lshift>
 801cd84:	9005      	str	r0, [sp, #20]
 801cd86:	2800      	cmp	r0, #0
 801cd88:	f43f ae7e 	beq.w	801ca88 <_strtod_l+0x490>
 801cd8c:	f1b9 0f00 	cmp.w	r9, #0
 801cd90:	dd08      	ble.n	801cda4 <_strtod_l+0x7ac>
 801cd92:	4631      	mov	r1, r6
 801cd94:	464a      	mov	r2, r9
 801cd96:	4620      	mov	r0, r4
 801cd98:	f002 fad4 	bl	801f344 <__lshift>
 801cd9c:	4606      	mov	r6, r0
 801cd9e:	2800      	cmp	r0, #0
 801cda0:	f43f ae72 	beq.w	801ca88 <_strtod_l+0x490>
 801cda4:	9a05      	ldr	r2, [sp, #20]
 801cda6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cda8:	4620      	mov	r0, r4
 801cdaa:	f002 fb57 	bl	801f45c <__mdiff>
 801cdae:	4605      	mov	r5, r0
 801cdb0:	2800      	cmp	r0, #0
 801cdb2:	f43f ae69 	beq.w	801ca88 <_strtod_l+0x490>
 801cdb6:	68c3      	ldr	r3, [r0, #12]
 801cdb8:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdba:	2300      	movs	r3, #0
 801cdbc:	60c3      	str	r3, [r0, #12]
 801cdbe:	4631      	mov	r1, r6
 801cdc0:	f002 fb30 	bl	801f424 <__mcmp>
 801cdc4:	2800      	cmp	r0, #0
 801cdc6:	da60      	bge.n	801ce8a <_strtod_l+0x892>
 801cdc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdca:	ea53 030a 	orrs.w	r3, r3, sl
 801cdce:	f040 8082 	bne.w	801ced6 <_strtod_l+0x8de>
 801cdd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d17d      	bne.n	801ced6 <_strtod_l+0x8de>
 801cdda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cdde:	0d1b      	lsrs	r3, r3, #20
 801cde0:	051b      	lsls	r3, r3, #20
 801cde2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801cde6:	d976      	bls.n	801ced6 <_strtod_l+0x8de>
 801cde8:	696b      	ldr	r3, [r5, #20]
 801cdea:	b913      	cbnz	r3, 801cdf2 <_strtod_l+0x7fa>
 801cdec:	692b      	ldr	r3, [r5, #16]
 801cdee:	2b01      	cmp	r3, #1
 801cdf0:	dd71      	ble.n	801ced6 <_strtod_l+0x8de>
 801cdf2:	4629      	mov	r1, r5
 801cdf4:	2201      	movs	r2, #1
 801cdf6:	4620      	mov	r0, r4
 801cdf8:	f002 faa4 	bl	801f344 <__lshift>
 801cdfc:	4631      	mov	r1, r6
 801cdfe:	4605      	mov	r5, r0
 801ce00:	f002 fb10 	bl	801f424 <__mcmp>
 801ce04:	2800      	cmp	r0, #0
 801ce06:	dd66      	ble.n	801ced6 <_strtod_l+0x8de>
 801ce08:	9904      	ldr	r1, [sp, #16]
 801ce0a:	4a53      	ldr	r2, [pc, #332]	; (801cf58 <_strtod_l+0x960>)
 801ce0c:	465b      	mov	r3, fp
 801ce0e:	2900      	cmp	r1, #0
 801ce10:	f000 8081 	beq.w	801cf16 <_strtod_l+0x91e>
 801ce14:	ea02 010b 	and.w	r1, r2, fp
 801ce18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ce1c:	dc7b      	bgt.n	801cf16 <_strtod_l+0x91e>
 801ce1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ce22:	f77f aea9 	ble.w	801cb78 <_strtod_l+0x580>
 801ce26:	4b4d      	ldr	r3, [pc, #308]	; (801cf5c <_strtod_l+0x964>)
 801ce28:	4650      	mov	r0, sl
 801ce2a:	4659      	mov	r1, fp
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	f7e3 fbfb 	bl	8000628 <__aeabi_dmul>
 801ce32:	460b      	mov	r3, r1
 801ce34:	4303      	orrs	r3, r0
 801ce36:	bf08      	it	eq
 801ce38:	2322      	moveq	r3, #34	; 0x22
 801ce3a:	4682      	mov	sl, r0
 801ce3c:	468b      	mov	fp, r1
 801ce3e:	bf08      	it	eq
 801ce40:	6023      	streq	r3, [r4, #0]
 801ce42:	e62b      	b.n	801ca9c <_strtod_l+0x4a4>
 801ce44:	f04f 32ff 	mov.w	r2, #4294967295
 801ce48:	fa02 f303 	lsl.w	r3, r2, r3
 801ce4c:	ea03 0a0a 	and.w	sl, r3, sl
 801ce50:	e6e3      	b.n	801cc1a <_strtod_l+0x622>
 801ce52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ce56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ce5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ce5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ce62:	fa01 f308 	lsl.w	r3, r1, r8
 801ce66:	9308      	str	r3, [sp, #32]
 801ce68:	910d      	str	r1, [sp, #52]	; 0x34
 801ce6a:	e746      	b.n	801ccfa <_strtod_l+0x702>
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	9308      	str	r3, [sp, #32]
 801ce70:	2301      	movs	r3, #1
 801ce72:	930d      	str	r3, [sp, #52]	; 0x34
 801ce74:	e741      	b.n	801ccfa <_strtod_l+0x702>
 801ce76:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ce78:	4642      	mov	r2, r8
 801ce7a:	4620      	mov	r0, r4
 801ce7c:	f002 fa62 	bl	801f344 <__lshift>
 801ce80:	9018      	str	r0, [sp, #96]	; 0x60
 801ce82:	2800      	cmp	r0, #0
 801ce84:	f47f af6b 	bne.w	801cd5e <_strtod_l+0x766>
 801ce88:	e5fe      	b.n	801ca88 <_strtod_l+0x490>
 801ce8a:	465f      	mov	r7, fp
 801ce8c:	d16e      	bne.n	801cf6c <_strtod_l+0x974>
 801ce8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ce90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ce94:	b342      	cbz	r2, 801cee8 <_strtod_l+0x8f0>
 801ce96:	4a32      	ldr	r2, [pc, #200]	; (801cf60 <_strtod_l+0x968>)
 801ce98:	4293      	cmp	r3, r2
 801ce9a:	d128      	bne.n	801ceee <_strtod_l+0x8f6>
 801ce9c:	9b04      	ldr	r3, [sp, #16]
 801ce9e:	4651      	mov	r1, sl
 801cea0:	b1eb      	cbz	r3, 801cede <_strtod_l+0x8e6>
 801cea2:	4b2d      	ldr	r3, [pc, #180]	; (801cf58 <_strtod_l+0x960>)
 801cea4:	403b      	ands	r3, r7
 801cea6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ceaa:	f04f 32ff 	mov.w	r2, #4294967295
 801ceae:	d819      	bhi.n	801cee4 <_strtod_l+0x8ec>
 801ceb0:	0d1b      	lsrs	r3, r3, #20
 801ceb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ceb6:	fa02 f303 	lsl.w	r3, r2, r3
 801ceba:	4299      	cmp	r1, r3
 801cebc:	d117      	bne.n	801ceee <_strtod_l+0x8f6>
 801cebe:	4b29      	ldr	r3, [pc, #164]	; (801cf64 <_strtod_l+0x96c>)
 801cec0:	429f      	cmp	r7, r3
 801cec2:	d102      	bne.n	801ceca <_strtod_l+0x8d2>
 801cec4:	3101      	adds	r1, #1
 801cec6:	f43f addf 	beq.w	801ca88 <_strtod_l+0x490>
 801ceca:	4b23      	ldr	r3, [pc, #140]	; (801cf58 <_strtod_l+0x960>)
 801cecc:	403b      	ands	r3, r7
 801cece:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ced2:	f04f 0a00 	mov.w	sl, #0
 801ced6:	9b04      	ldr	r3, [sp, #16]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d1a4      	bne.n	801ce26 <_strtod_l+0x82e>
 801cedc:	e5de      	b.n	801ca9c <_strtod_l+0x4a4>
 801cede:	f04f 33ff 	mov.w	r3, #4294967295
 801cee2:	e7ea      	b.n	801ceba <_strtod_l+0x8c2>
 801cee4:	4613      	mov	r3, r2
 801cee6:	e7e8      	b.n	801ceba <_strtod_l+0x8c2>
 801cee8:	ea53 030a 	orrs.w	r3, r3, sl
 801ceec:	d08c      	beq.n	801ce08 <_strtod_l+0x810>
 801ceee:	9b08      	ldr	r3, [sp, #32]
 801cef0:	b1db      	cbz	r3, 801cf2a <_strtod_l+0x932>
 801cef2:	423b      	tst	r3, r7
 801cef4:	d0ef      	beq.n	801ced6 <_strtod_l+0x8de>
 801cef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cef8:	9a04      	ldr	r2, [sp, #16]
 801cefa:	4650      	mov	r0, sl
 801cefc:	4659      	mov	r1, fp
 801cefe:	b1c3      	cbz	r3, 801cf32 <_strtod_l+0x93a>
 801cf00:	f7ff fb5d 	bl	801c5be <sulp>
 801cf04:	4602      	mov	r2, r0
 801cf06:	460b      	mov	r3, r1
 801cf08:	ec51 0b18 	vmov	r0, r1, d8
 801cf0c:	f7e3 f9d6 	bl	80002bc <__adddf3>
 801cf10:	4682      	mov	sl, r0
 801cf12:	468b      	mov	fp, r1
 801cf14:	e7df      	b.n	801ced6 <_strtod_l+0x8de>
 801cf16:	4013      	ands	r3, r2
 801cf18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cf1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cf20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cf24:	f04f 3aff 	mov.w	sl, #4294967295
 801cf28:	e7d5      	b.n	801ced6 <_strtod_l+0x8de>
 801cf2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf2c:	ea13 0f0a 	tst.w	r3, sl
 801cf30:	e7e0      	b.n	801cef4 <_strtod_l+0x8fc>
 801cf32:	f7ff fb44 	bl	801c5be <sulp>
 801cf36:	4602      	mov	r2, r0
 801cf38:	460b      	mov	r3, r1
 801cf3a:	ec51 0b18 	vmov	r0, r1, d8
 801cf3e:	f7e3 f9bb 	bl	80002b8 <__aeabi_dsub>
 801cf42:	2200      	movs	r2, #0
 801cf44:	2300      	movs	r3, #0
 801cf46:	4682      	mov	sl, r0
 801cf48:	468b      	mov	fp, r1
 801cf4a:	f7e3 fdd5 	bl	8000af8 <__aeabi_dcmpeq>
 801cf4e:	2800      	cmp	r0, #0
 801cf50:	d0c1      	beq.n	801ced6 <_strtod_l+0x8de>
 801cf52:	e611      	b.n	801cb78 <_strtod_l+0x580>
 801cf54:	fffffc02 	.word	0xfffffc02
 801cf58:	7ff00000 	.word	0x7ff00000
 801cf5c:	39500000 	.word	0x39500000
 801cf60:	000fffff 	.word	0x000fffff
 801cf64:	7fefffff 	.word	0x7fefffff
 801cf68:	08021f28 	.word	0x08021f28
 801cf6c:	4631      	mov	r1, r6
 801cf6e:	4628      	mov	r0, r5
 801cf70:	f002 fbd6 	bl	801f720 <__ratio>
 801cf74:	ec59 8b10 	vmov	r8, r9, d0
 801cf78:	ee10 0a10 	vmov	r0, s0
 801cf7c:	2200      	movs	r2, #0
 801cf7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cf82:	4649      	mov	r1, r9
 801cf84:	f7e3 fdcc 	bl	8000b20 <__aeabi_dcmple>
 801cf88:	2800      	cmp	r0, #0
 801cf8a:	d07a      	beq.n	801d082 <_strtod_l+0xa8a>
 801cf8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d04a      	beq.n	801d028 <_strtod_l+0xa30>
 801cf92:	4b95      	ldr	r3, [pc, #596]	; (801d1e8 <_strtod_l+0xbf0>)
 801cf94:	2200      	movs	r2, #0
 801cf96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cf9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801d1e8 <_strtod_l+0xbf0>
 801cf9e:	f04f 0800 	mov.w	r8, #0
 801cfa2:	4b92      	ldr	r3, [pc, #584]	; (801d1ec <_strtod_l+0xbf4>)
 801cfa4:	403b      	ands	r3, r7
 801cfa6:	930d      	str	r3, [sp, #52]	; 0x34
 801cfa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cfaa:	4b91      	ldr	r3, [pc, #580]	; (801d1f0 <_strtod_l+0xbf8>)
 801cfac:	429a      	cmp	r2, r3
 801cfae:	f040 80b0 	bne.w	801d112 <_strtod_l+0xb1a>
 801cfb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cfb6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801cfba:	ec4b ab10 	vmov	d0, sl, fp
 801cfbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cfc2:	f002 fad5 	bl	801f570 <__ulp>
 801cfc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cfca:	ec53 2b10 	vmov	r2, r3, d0
 801cfce:	f7e3 fb2b 	bl	8000628 <__aeabi_dmul>
 801cfd2:	4652      	mov	r2, sl
 801cfd4:	465b      	mov	r3, fp
 801cfd6:	f7e3 f971 	bl	80002bc <__adddf3>
 801cfda:	460b      	mov	r3, r1
 801cfdc:	4983      	ldr	r1, [pc, #524]	; (801d1ec <_strtod_l+0xbf4>)
 801cfde:	4a85      	ldr	r2, [pc, #532]	; (801d1f4 <_strtod_l+0xbfc>)
 801cfe0:	4019      	ands	r1, r3
 801cfe2:	4291      	cmp	r1, r2
 801cfe4:	4682      	mov	sl, r0
 801cfe6:	d960      	bls.n	801d0aa <_strtod_l+0xab2>
 801cfe8:	ee18 3a90 	vmov	r3, s17
 801cfec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cff0:	4293      	cmp	r3, r2
 801cff2:	d104      	bne.n	801cffe <_strtod_l+0xa06>
 801cff4:	ee18 3a10 	vmov	r3, s16
 801cff8:	3301      	adds	r3, #1
 801cffa:	f43f ad45 	beq.w	801ca88 <_strtod_l+0x490>
 801cffe:	f8df b200 	ldr.w	fp, [pc, #512]	; 801d200 <_strtod_l+0xc08>
 801d002:	f04f 3aff 	mov.w	sl, #4294967295
 801d006:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d008:	4620      	mov	r0, r4
 801d00a:	f001 ff7f 	bl	801ef0c <_Bfree>
 801d00e:	9905      	ldr	r1, [sp, #20]
 801d010:	4620      	mov	r0, r4
 801d012:	f001 ff7b 	bl	801ef0c <_Bfree>
 801d016:	4631      	mov	r1, r6
 801d018:	4620      	mov	r0, r4
 801d01a:	f001 ff77 	bl	801ef0c <_Bfree>
 801d01e:	4629      	mov	r1, r5
 801d020:	4620      	mov	r0, r4
 801d022:	f001 ff73 	bl	801ef0c <_Bfree>
 801d026:	e61a      	b.n	801cc5e <_strtod_l+0x666>
 801d028:	f1ba 0f00 	cmp.w	sl, #0
 801d02c:	d11b      	bne.n	801d066 <_strtod_l+0xa6e>
 801d02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d032:	b9f3      	cbnz	r3, 801d072 <_strtod_l+0xa7a>
 801d034:	4b6c      	ldr	r3, [pc, #432]	; (801d1e8 <_strtod_l+0xbf0>)
 801d036:	2200      	movs	r2, #0
 801d038:	4640      	mov	r0, r8
 801d03a:	4649      	mov	r1, r9
 801d03c:	f7e3 fd66 	bl	8000b0c <__aeabi_dcmplt>
 801d040:	b9d0      	cbnz	r0, 801d078 <_strtod_l+0xa80>
 801d042:	4640      	mov	r0, r8
 801d044:	4649      	mov	r1, r9
 801d046:	4b6c      	ldr	r3, [pc, #432]	; (801d1f8 <_strtod_l+0xc00>)
 801d048:	2200      	movs	r2, #0
 801d04a:	f7e3 faed 	bl	8000628 <__aeabi_dmul>
 801d04e:	4680      	mov	r8, r0
 801d050:	4689      	mov	r9, r1
 801d052:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d056:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801d05a:	9315      	str	r3, [sp, #84]	; 0x54
 801d05c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d060:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d064:	e79d      	b.n	801cfa2 <_strtod_l+0x9aa>
 801d066:	f1ba 0f01 	cmp.w	sl, #1
 801d06a:	d102      	bne.n	801d072 <_strtod_l+0xa7a>
 801d06c:	2f00      	cmp	r7, #0
 801d06e:	f43f ad83 	beq.w	801cb78 <_strtod_l+0x580>
 801d072:	4b62      	ldr	r3, [pc, #392]	; (801d1fc <_strtod_l+0xc04>)
 801d074:	2200      	movs	r2, #0
 801d076:	e78e      	b.n	801cf96 <_strtod_l+0x99e>
 801d078:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801d1f8 <_strtod_l+0xc00>
 801d07c:	f04f 0800 	mov.w	r8, #0
 801d080:	e7e7      	b.n	801d052 <_strtod_l+0xa5a>
 801d082:	4b5d      	ldr	r3, [pc, #372]	; (801d1f8 <_strtod_l+0xc00>)
 801d084:	4640      	mov	r0, r8
 801d086:	4649      	mov	r1, r9
 801d088:	2200      	movs	r2, #0
 801d08a:	f7e3 facd 	bl	8000628 <__aeabi_dmul>
 801d08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d090:	4680      	mov	r8, r0
 801d092:	4689      	mov	r9, r1
 801d094:	b933      	cbnz	r3, 801d0a4 <_strtod_l+0xaac>
 801d096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d09a:	900e      	str	r0, [sp, #56]	; 0x38
 801d09c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d09e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d0a2:	e7dd      	b.n	801d060 <_strtod_l+0xa68>
 801d0a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801d0a8:	e7f9      	b.n	801d09e <_strtod_l+0xaa6>
 801d0aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d0ae:	9b04      	ldr	r3, [sp, #16]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d1a8      	bne.n	801d006 <_strtod_l+0xa0e>
 801d0b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d0ba:	0d1b      	lsrs	r3, r3, #20
 801d0bc:	051b      	lsls	r3, r3, #20
 801d0be:	429a      	cmp	r2, r3
 801d0c0:	d1a1      	bne.n	801d006 <_strtod_l+0xa0e>
 801d0c2:	4640      	mov	r0, r8
 801d0c4:	4649      	mov	r1, r9
 801d0c6:	f7e3 fe0f 	bl	8000ce8 <__aeabi_d2lz>
 801d0ca:	f7e3 fa7f 	bl	80005cc <__aeabi_l2d>
 801d0ce:	4602      	mov	r2, r0
 801d0d0:	460b      	mov	r3, r1
 801d0d2:	4640      	mov	r0, r8
 801d0d4:	4649      	mov	r1, r9
 801d0d6:	f7e3 f8ef 	bl	80002b8 <__aeabi_dsub>
 801d0da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d0dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d0e0:	ea43 030a 	orr.w	r3, r3, sl
 801d0e4:	4313      	orrs	r3, r2
 801d0e6:	4680      	mov	r8, r0
 801d0e8:	4689      	mov	r9, r1
 801d0ea:	d055      	beq.n	801d198 <_strtod_l+0xba0>
 801d0ec:	a336      	add	r3, pc, #216	; (adr r3, 801d1c8 <_strtod_l+0xbd0>)
 801d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0f2:	f7e3 fd0b 	bl	8000b0c <__aeabi_dcmplt>
 801d0f6:	2800      	cmp	r0, #0
 801d0f8:	f47f acd0 	bne.w	801ca9c <_strtod_l+0x4a4>
 801d0fc:	a334      	add	r3, pc, #208	; (adr r3, 801d1d0 <_strtod_l+0xbd8>)
 801d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d102:	4640      	mov	r0, r8
 801d104:	4649      	mov	r1, r9
 801d106:	f7e3 fd1f 	bl	8000b48 <__aeabi_dcmpgt>
 801d10a:	2800      	cmp	r0, #0
 801d10c:	f43f af7b 	beq.w	801d006 <_strtod_l+0xa0e>
 801d110:	e4c4      	b.n	801ca9c <_strtod_l+0x4a4>
 801d112:	9b04      	ldr	r3, [sp, #16]
 801d114:	b333      	cbz	r3, 801d164 <_strtod_l+0xb6c>
 801d116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d118:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d11c:	d822      	bhi.n	801d164 <_strtod_l+0xb6c>
 801d11e:	a32e      	add	r3, pc, #184	; (adr r3, 801d1d8 <_strtod_l+0xbe0>)
 801d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d124:	4640      	mov	r0, r8
 801d126:	4649      	mov	r1, r9
 801d128:	f7e3 fcfa 	bl	8000b20 <__aeabi_dcmple>
 801d12c:	b1a0      	cbz	r0, 801d158 <_strtod_l+0xb60>
 801d12e:	4649      	mov	r1, r9
 801d130:	4640      	mov	r0, r8
 801d132:	f7e3 fd51 	bl	8000bd8 <__aeabi_d2uiz>
 801d136:	2801      	cmp	r0, #1
 801d138:	bf38      	it	cc
 801d13a:	2001      	movcc	r0, #1
 801d13c:	f7e3 f9fa 	bl	8000534 <__aeabi_ui2d>
 801d140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d142:	4680      	mov	r8, r0
 801d144:	4689      	mov	r9, r1
 801d146:	bb23      	cbnz	r3, 801d192 <_strtod_l+0xb9a>
 801d148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d14c:	9010      	str	r0, [sp, #64]	; 0x40
 801d14e:	9311      	str	r3, [sp, #68]	; 0x44
 801d150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d154:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d15a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d15c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d160:	1a9b      	subs	r3, r3, r2
 801d162:	9309      	str	r3, [sp, #36]	; 0x24
 801d164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d168:	eeb0 0a48 	vmov.f32	s0, s16
 801d16c:	eef0 0a68 	vmov.f32	s1, s17
 801d170:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d174:	f002 f9fc 	bl	801f570 <__ulp>
 801d178:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d17c:	ec53 2b10 	vmov	r2, r3, d0
 801d180:	f7e3 fa52 	bl	8000628 <__aeabi_dmul>
 801d184:	ec53 2b18 	vmov	r2, r3, d8
 801d188:	f7e3 f898 	bl	80002bc <__adddf3>
 801d18c:	4682      	mov	sl, r0
 801d18e:	468b      	mov	fp, r1
 801d190:	e78d      	b.n	801d0ae <_strtod_l+0xab6>
 801d192:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801d196:	e7db      	b.n	801d150 <_strtod_l+0xb58>
 801d198:	a311      	add	r3, pc, #68	; (adr r3, 801d1e0 <_strtod_l+0xbe8>)
 801d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d19e:	f7e3 fcb5 	bl	8000b0c <__aeabi_dcmplt>
 801d1a2:	e7b2      	b.n	801d10a <_strtod_l+0xb12>
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	930a      	str	r3, [sp, #40]	; 0x28
 801d1a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d1aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d1ac:	6013      	str	r3, [r2, #0]
 801d1ae:	f7ff ba6b 	b.w	801c688 <_strtod_l+0x90>
 801d1b2:	2a65      	cmp	r2, #101	; 0x65
 801d1b4:	f43f ab5f 	beq.w	801c876 <_strtod_l+0x27e>
 801d1b8:	2a45      	cmp	r2, #69	; 0x45
 801d1ba:	f43f ab5c 	beq.w	801c876 <_strtod_l+0x27e>
 801d1be:	2301      	movs	r3, #1
 801d1c0:	f7ff bb94 	b.w	801c8ec <_strtod_l+0x2f4>
 801d1c4:	f3af 8000 	nop.w
 801d1c8:	94a03595 	.word	0x94a03595
 801d1cc:	3fdfffff 	.word	0x3fdfffff
 801d1d0:	35afe535 	.word	0x35afe535
 801d1d4:	3fe00000 	.word	0x3fe00000
 801d1d8:	ffc00000 	.word	0xffc00000
 801d1dc:	41dfffff 	.word	0x41dfffff
 801d1e0:	94a03595 	.word	0x94a03595
 801d1e4:	3fcfffff 	.word	0x3fcfffff
 801d1e8:	3ff00000 	.word	0x3ff00000
 801d1ec:	7ff00000 	.word	0x7ff00000
 801d1f0:	7fe00000 	.word	0x7fe00000
 801d1f4:	7c9fffff 	.word	0x7c9fffff
 801d1f8:	3fe00000 	.word	0x3fe00000
 801d1fc:	bff00000 	.word	0xbff00000
 801d200:	7fefffff 	.word	0x7fefffff

0801d204 <_strtod_r>:
 801d204:	4b01      	ldr	r3, [pc, #4]	; (801d20c <_strtod_r+0x8>)
 801d206:	f7ff b9f7 	b.w	801c5f8 <_strtod_l>
 801d20a:	bf00      	nop
 801d20c:	200001ac 	.word	0x200001ac

0801d210 <strtok>:
 801d210:	4b16      	ldr	r3, [pc, #88]	; (801d26c <strtok+0x5c>)
 801d212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d214:	681e      	ldr	r6, [r3, #0]
 801d216:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801d218:	4605      	mov	r5, r0
 801d21a:	b9fc      	cbnz	r4, 801d25c <strtok+0x4c>
 801d21c:	2050      	movs	r0, #80	; 0x50
 801d21e:	9101      	str	r1, [sp, #4]
 801d220:	f7fe f94c 	bl	801b4bc <malloc>
 801d224:	9901      	ldr	r1, [sp, #4]
 801d226:	65b0      	str	r0, [r6, #88]	; 0x58
 801d228:	4602      	mov	r2, r0
 801d22a:	b920      	cbnz	r0, 801d236 <strtok+0x26>
 801d22c:	4b10      	ldr	r3, [pc, #64]	; (801d270 <strtok+0x60>)
 801d22e:	4811      	ldr	r0, [pc, #68]	; (801d274 <strtok+0x64>)
 801d230:	2157      	movs	r1, #87	; 0x57
 801d232:	f000 f9d1 	bl	801d5d8 <__assert_func>
 801d236:	e9c0 4400 	strd	r4, r4, [r0]
 801d23a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d23e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d242:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801d246:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801d24a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801d24e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801d252:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801d256:	6184      	str	r4, [r0, #24]
 801d258:	7704      	strb	r4, [r0, #28]
 801d25a:	6244      	str	r4, [r0, #36]	; 0x24
 801d25c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801d25e:	2301      	movs	r3, #1
 801d260:	4628      	mov	r0, r5
 801d262:	b002      	add	sp, #8
 801d264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d268:	f000 b806 	b.w	801d278 <__strtok_r>
 801d26c:	20000144 	.word	0x20000144
 801d270:	08021f50 	.word	0x08021f50
 801d274:	08021f67 	.word	0x08021f67

0801d278 <__strtok_r>:
 801d278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d27a:	b908      	cbnz	r0, 801d280 <__strtok_r+0x8>
 801d27c:	6810      	ldr	r0, [r2, #0]
 801d27e:	b188      	cbz	r0, 801d2a4 <__strtok_r+0x2c>
 801d280:	4604      	mov	r4, r0
 801d282:	4620      	mov	r0, r4
 801d284:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d288:	460f      	mov	r7, r1
 801d28a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d28e:	b91e      	cbnz	r6, 801d298 <__strtok_r+0x20>
 801d290:	b965      	cbnz	r5, 801d2ac <__strtok_r+0x34>
 801d292:	6015      	str	r5, [r2, #0]
 801d294:	4628      	mov	r0, r5
 801d296:	e005      	b.n	801d2a4 <__strtok_r+0x2c>
 801d298:	42b5      	cmp	r5, r6
 801d29a:	d1f6      	bne.n	801d28a <__strtok_r+0x12>
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d1f0      	bne.n	801d282 <__strtok_r+0xa>
 801d2a0:	6014      	str	r4, [r2, #0]
 801d2a2:	7003      	strb	r3, [r0, #0]
 801d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2a6:	461c      	mov	r4, r3
 801d2a8:	e00c      	b.n	801d2c4 <__strtok_r+0x4c>
 801d2aa:	b915      	cbnz	r5, 801d2b2 <__strtok_r+0x3a>
 801d2ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d2b0:	460e      	mov	r6, r1
 801d2b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d2b6:	42ab      	cmp	r3, r5
 801d2b8:	d1f7      	bne.n	801d2aa <__strtok_r+0x32>
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d0f3      	beq.n	801d2a6 <__strtok_r+0x2e>
 801d2be:	2300      	movs	r3, #0
 801d2c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d2c4:	6014      	str	r4, [r2, #0]
 801d2c6:	e7ed      	b.n	801d2a4 <__strtok_r+0x2c>

0801d2c8 <_strtol_l.constprop.0>:
 801d2c8:	2b01      	cmp	r3, #1
 801d2ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2ce:	d001      	beq.n	801d2d4 <_strtol_l.constprop.0+0xc>
 801d2d0:	2b24      	cmp	r3, #36	; 0x24
 801d2d2:	d906      	bls.n	801d2e2 <_strtol_l.constprop.0+0x1a>
 801d2d4:	f7fe f856 	bl	801b384 <__errno>
 801d2d8:	2316      	movs	r3, #22
 801d2da:	6003      	str	r3, [r0, #0]
 801d2dc:	2000      	movs	r0, #0
 801d2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d3c8 <_strtol_l.constprop.0+0x100>
 801d2e6:	460d      	mov	r5, r1
 801d2e8:	462e      	mov	r6, r5
 801d2ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d2ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 801d2f2:	f017 0708 	ands.w	r7, r7, #8
 801d2f6:	d1f7      	bne.n	801d2e8 <_strtol_l.constprop.0+0x20>
 801d2f8:	2c2d      	cmp	r4, #45	; 0x2d
 801d2fa:	d132      	bne.n	801d362 <_strtol_l.constprop.0+0x9a>
 801d2fc:	782c      	ldrb	r4, [r5, #0]
 801d2fe:	2701      	movs	r7, #1
 801d300:	1cb5      	adds	r5, r6, #2
 801d302:	2b00      	cmp	r3, #0
 801d304:	d05b      	beq.n	801d3be <_strtol_l.constprop.0+0xf6>
 801d306:	2b10      	cmp	r3, #16
 801d308:	d109      	bne.n	801d31e <_strtol_l.constprop.0+0x56>
 801d30a:	2c30      	cmp	r4, #48	; 0x30
 801d30c:	d107      	bne.n	801d31e <_strtol_l.constprop.0+0x56>
 801d30e:	782c      	ldrb	r4, [r5, #0]
 801d310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d314:	2c58      	cmp	r4, #88	; 0x58
 801d316:	d14d      	bne.n	801d3b4 <_strtol_l.constprop.0+0xec>
 801d318:	786c      	ldrb	r4, [r5, #1]
 801d31a:	2310      	movs	r3, #16
 801d31c:	3502      	adds	r5, #2
 801d31e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d322:	f108 38ff 	add.w	r8, r8, #4294967295
 801d326:	f04f 0c00 	mov.w	ip, #0
 801d32a:	fbb8 f9f3 	udiv	r9, r8, r3
 801d32e:	4666      	mov	r6, ip
 801d330:	fb03 8a19 	mls	sl, r3, r9, r8
 801d334:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801d338:	f1be 0f09 	cmp.w	lr, #9
 801d33c:	d816      	bhi.n	801d36c <_strtol_l.constprop.0+0xa4>
 801d33e:	4674      	mov	r4, lr
 801d340:	42a3      	cmp	r3, r4
 801d342:	dd24      	ble.n	801d38e <_strtol_l.constprop.0+0xc6>
 801d344:	f1bc 0f00 	cmp.w	ip, #0
 801d348:	db1e      	blt.n	801d388 <_strtol_l.constprop.0+0xc0>
 801d34a:	45b1      	cmp	r9, r6
 801d34c:	d31c      	bcc.n	801d388 <_strtol_l.constprop.0+0xc0>
 801d34e:	d101      	bne.n	801d354 <_strtol_l.constprop.0+0x8c>
 801d350:	45a2      	cmp	sl, r4
 801d352:	db19      	blt.n	801d388 <_strtol_l.constprop.0+0xc0>
 801d354:	fb06 4603 	mla	r6, r6, r3, r4
 801d358:	f04f 0c01 	mov.w	ip, #1
 801d35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d360:	e7e8      	b.n	801d334 <_strtol_l.constprop.0+0x6c>
 801d362:	2c2b      	cmp	r4, #43	; 0x2b
 801d364:	bf04      	itt	eq
 801d366:	782c      	ldrbeq	r4, [r5, #0]
 801d368:	1cb5      	addeq	r5, r6, #2
 801d36a:	e7ca      	b.n	801d302 <_strtol_l.constprop.0+0x3a>
 801d36c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801d370:	f1be 0f19 	cmp.w	lr, #25
 801d374:	d801      	bhi.n	801d37a <_strtol_l.constprop.0+0xb2>
 801d376:	3c37      	subs	r4, #55	; 0x37
 801d378:	e7e2      	b.n	801d340 <_strtol_l.constprop.0+0x78>
 801d37a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801d37e:	f1be 0f19 	cmp.w	lr, #25
 801d382:	d804      	bhi.n	801d38e <_strtol_l.constprop.0+0xc6>
 801d384:	3c57      	subs	r4, #87	; 0x57
 801d386:	e7db      	b.n	801d340 <_strtol_l.constprop.0+0x78>
 801d388:	f04f 3cff 	mov.w	ip, #4294967295
 801d38c:	e7e6      	b.n	801d35c <_strtol_l.constprop.0+0x94>
 801d38e:	f1bc 0f00 	cmp.w	ip, #0
 801d392:	da05      	bge.n	801d3a0 <_strtol_l.constprop.0+0xd8>
 801d394:	2322      	movs	r3, #34	; 0x22
 801d396:	6003      	str	r3, [r0, #0]
 801d398:	4646      	mov	r6, r8
 801d39a:	b942      	cbnz	r2, 801d3ae <_strtol_l.constprop.0+0xe6>
 801d39c:	4630      	mov	r0, r6
 801d39e:	e79e      	b.n	801d2de <_strtol_l.constprop.0+0x16>
 801d3a0:	b107      	cbz	r7, 801d3a4 <_strtol_l.constprop.0+0xdc>
 801d3a2:	4276      	negs	r6, r6
 801d3a4:	2a00      	cmp	r2, #0
 801d3a6:	d0f9      	beq.n	801d39c <_strtol_l.constprop.0+0xd4>
 801d3a8:	f1bc 0f00 	cmp.w	ip, #0
 801d3ac:	d000      	beq.n	801d3b0 <_strtol_l.constprop.0+0xe8>
 801d3ae:	1e69      	subs	r1, r5, #1
 801d3b0:	6011      	str	r1, [r2, #0]
 801d3b2:	e7f3      	b.n	801d39c <_strtol_l.constprop.0+0xd4>
 801d3b4:	2430      	movs	r4, #48	; 0x30
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d1b1      	bne.n	801d31e <_strtol_l.constprop.0+0x56>
 801d3ba:	2308      	movs	r3, #8
 801d3bc:	e7af      	b.n	801d31e <_strtol_l.constprop.0+0x56>
 801d3be:	2c30      	cmp	r4, #48	; 0x30
 801d3c0:	d0a5      	beq.n	801d30e <_strtol_l.constprop.0+0x46>
 801d3c2:	230a      	movs	r3, #10
 801d3c4:	e7ab      	b.n	801d31e <_strtol_l.constprop.0+0x56>
 801d3c6:	bf00      	nop
 801d3c8:	08022001 	.word	0x08022001

0801d3cc <_strtol_r>:
 801d3cc:	f7ff bf7c 	b.w	801d2c8 <_strtol_l.constprop.0>

0801d3d0 <strtol>:
 801d3d0:	4613      	mov	r3, r2
 801d3d2:	460a      	mov	r2, r1
 801d3d4:	4601      	mov	r1, r0
 801d3d6:	4802      	ldr	r0, [pc, #8]	; (801d3e0 <strtol+0x10>)
 801d3d8:	6800      	ldr	r0, [r0, #0]
 801d3da:	f7ff bf75 	b.w	801d2c8 <_strtol_l.constprop.0>
 801d3de:	bf00      	nop
 801d3e0:	20000144 	.word	0x20000144

0801d3e4 <_vsniprintf_r>:
 801d3e4:	b530      	push	{r4, r5, lr}
 801d3e6:	4614      	mov	r4, r2
 801d3e8:	2c00      	cmp	r4, #0
 801d3ea:	b09b      	sub	sp, #108	; 0x6c
 801d3ec:	4605      	mov	r5, r0
 801d3ee:	461a      	mov	r2, r3
 801d3f0:	da05      	bge.n	801d3fe <_vsniprintf_r+0x1a>
 801d3f2:	238b      	movs	r3, #139	; 0x8b
 801d3f4:	6003      	str	r3, [r0, #0]
 801d3f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d3fa:	b01b      	add	sp, #108	; 0x6c
 801d3fc:	bd30      	pop	{r4, r5, pc}
 801d3fe:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d402:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d406:	bf14      	ite	ne
 801d408:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d40c:	4623      	moveq	r3, r4
 801d40e:	9302      	str	r3, [sp, #8]
 801d410:	9305      	str	r3, [sp, #20]
 801d412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d416:	9100      	str	r1, [sp, #0]
 801d418:	9104      	str	r1, [sp, #16]
 801d41a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d41e:	4669      	mov	r1, sp
 801d420:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d422:	f002 fa65 	bl	801f8f0 <_svfiprintf_r>
 801d426:	1c43      	adds	r3, r0, #1
 801d428:	bfbc      	itt	lt
 801d42a:	238b      	movlt	r3, #139	; 0x8b
 801d42c:	602b      	strlt	r3, [r5, #0]
 801d42e:	2c00      	cmp	r4, #0
 801d430:	d0e3      	beq.n	801d3fa <_vsniprintf_r+0x16>
 801d432:	9b00      	ldr	r3, [sp, #0]
 801d434:	2200      	movs	r2, #0
 801d436:	701a      	strb	r2, [r3, #0]
 801d438:	e7df      	b.n	801d3fa <_vsniprintf_r+0x16>
	...

0801d43c <vsniprintf>:
 801d43c:	b507      	push	{r0, r1, r2, lr}
 801d43e:	9300      	str	r3, [sp, #0]
 801d440:	4613      	mov	r3, r2
 801d442:	460a      	mov	r2, r1
 801d444:	4601      	mov	r1, r0
 801d446:	4803      	ldr	r0, [pc, #12]	; (801d454 <vsniprintf+0x18>)
 801d448:	6800      	ldr	r0, [r0, #0]
 801d44a:	f7ff ffcb 	bl	801d3e4 <_vsniprintf_r>
 801d44e:	b003      	add	sp, #12
 801d450:	f85d fb04 	ldr.w	pc, [sp], #4
 801d454:	20000144 	.word	0x20000144

0801d458 <__swbuf_r>:
 801d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d45a:	460e      	mov	r6, r1
 801d45c:	4614      	mov	r4, r2
 801d45e:	4605      	mov	r5, r0
 801d460:	b118      	cbz	r0, 801d46a <__swbuf_r+0x12>
 801d462:	6983      	ldr	r3, [r0, #24]
 801d464:	b90b      	cbnz	r3, 801d46a <__swbuf_r+0x12>
 801d466:	f001 f86b 	bl	801e540 <__sinit>
 801d46a:	4b21      	ldr	r3, [pc, #132]	; (801d4f0 <__swbuf_r+0x98>)
 801d46c:	429c      	cmp	r4, r3
 801d46e:	d12b      	bne.n	801d4c8 <__swbuf_r+0x70>
 801d470:	686c      	ldr	r4, [r5, #4]
 801d472:	69a3      	ldr	r3, [r4, #24]
 801d474:	60a3      	str	r3, [r4, #8]
 801d476:	89a3      	ldrh	r3, [r4, #12]
 801d478:	071a      	lsls	r2, r3, #28
 801d47a:	d52f      	bpl.n	801d4dc <__swbuf_r+0x84>
 801d47c:	6923      	ldr	r3, [r4, #16]
 801d47e:	b36b      	cbz	r3, 801d4dc <__swbuf_r+0x84>
 801d480:	6923      	ldr	r3, [r4, #16]
 801d482:	6820      	ldr	r0, [r4, #0]
 801d484:	1ac0      	subs	r0, r0, r3
 801d486:	6963      	ldr	r3, [r4, #20]
 801d488:	b2f6      	uxtb	r6, r6
 801d48a:	4283      	cmp	r3, r0
 801d48c:	4637      	mov	r7, r6
 801d48e:	dc04      	bgt.n	801d49a <__swbuf_r+0x42>
 801d490:	4621      	mov	r1, r4
 801d492:	4628      	mov	r0, r5
 801d494:	f000 ffc0 	bl	801e418 <_fflush_r>
 801d498:	bb30      	cbnz	r0, 801d4e8 <__swbuf_r+0x90>
 801d49a:	68a3      	ldr	r3, [r4, #8]
 801d49c:	3b01      	subs	r3, #1
 801d49e:	60a3      	str	r3, [r4, #8]
 801d4a0:	6823      	ldr	r3, [r4, #0]
 801d4a2:	1c5a      	adds	r2, r3, #1
 801d4a4:	6022      	str	r2, [r4, #0]
 801d4a6:	701e      	strb	r6, [r3, #0]
 801d4a8:	6963      	ldr	r3, [r4, #20]
 801d4aa:	3001      	adds	r0, #1
 801d4ac:	4283      	cmp	r3, r0
 801d4ae:	d004      	beq.n	801d4ba <__swbuf_r+0x62>
 801d4b0:	89a3      	ldrh	r3, [r4, #12]
 801d4b2:	07db      	lsls	r3, r3, #31
 801d4b4:	d506      	bpl.n	801d4c4 <__swbuf_r+0x6c>
 801d4b6:	2e0a      	cmp	r6, #10
 801d4b8:	d104      	bne.n	801d4c4 <__swbuf_r+0x6c>
 801d4ba:	4621      	mov	r1, r4
 801d4bc:	4628      	mov	r0, r5
 801d4be:	f000 ffab 	bl	801e418 <_fflush_r>
 801d4c2:	b988      	cbnz	r0, 801d4e8 <__swbuf_r+0x90>
 801d4c4:	4638      	mov	r0, r7
 801d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4c8:	4b0a      	ldr	r3, [pc, #40]	; (801d4f4 <__swbuf_r+0x9c>)
 801d4ca:	429c      	cmp	r4, r3
 801d4cc:	d101      	bne.n	801d4d2 <__swbuf_r+0x7a>
 801d4ce:	68ac      	ldr	r4, [r5, #8]
 801d4d0:	e7cf      	b.n	801d472 <__swbuf_r+0x1a>
 801d4d2:	4b09      	ldr	r3, [pc, #36]	; (801d4f8 <__swbuf_r+0xa0>)
 801d4d4:	429c      	cmp	r4, r3
 801d4d6:	bf08      	it	eq
 801d4d8:	68ec      	ldreq	r4, [r5, #12]
 801d4da:	e7ca      	b.n	801d472 <__swbuf_r+0x1a>
 801d4dc:	4621      	mov	r1, r4
 801d4de:	4628      	mov	r0, r5
 801d4e0:	f000 f80c 	bl	801d4fc <__swsetup_r>
 801d4e4:	2800      	cmp	r0, #0
 801d4e6:	d0cb      	beq.n	801d480 <__swbuf_r+0x28>
 801d4e8:	f04f 37ff 	mov.w	r7, #4294967295
 801d4ec:	e7ea      	b.n	801d4c4 <__swbuf_r+0x6c>
 801d4ee:	bf00      	nop
 801d4f0:	0802219c 	.word	0x0802219c
 801d4f4:	080221bc 	.word	0x080221bc
 801d4f8:	0802217c 	.word	0x0802217c

0801d4fc <__swsetup_r>:
 801d4fc:	4b32      	ldr	r3, [pc, #200]	; (801d5c8 <__swsetup_r+0xcc>)
 801d4fe:	b570      	push	{r4, r5, r6, lr}
 801d500:	681d      	ldr	r5, [r3, #0]
 801d502:	4606      	mov	r6, r0
 801d504:	460c      	mov	r4, r1
 801d506:	b125      	cbz	r5, 801d512 <__swsetup_r+0x16>
 801d508:	69ab      	ldr	r3, [r5, #24]
 801d50a:	b913      	cbnz	r3, 801d512 <__swsetup_r+0x16>
 801d50c:	4628      	mov	r0, r5
 801d50e:	f001 f817 	bl	801e540 <__sinit>
 801d512:	4b2e      	ldr	r3, [pc, #184]	; (801d5cc <__swsetup_r+0xd0>)
 801d514:	429c      	cmp	r4, r3
 801d516:	d10f      	bne.n	801d538 <__swsetup_r+0x3c>
 801d518:	686c      	ldr	r4, [r5, #4]
 801d51a:	89a3      	ldrh	r3, [r4, #12]
 801d51c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d520:	0719      	lsls	r1, r3, #28
 801d522:	d42c      	bmi.n	801d57e <__swsetup_r+0x82>
 801d524:	06dd      	lsls	r5, r3, #27
 801d526:	d411      	bmi.n	801d54c <__swsetup_r+0x50>
 801d528:	2309      	movs	r3, #9
 801d52a:	6033      	str	r3, [r6, #0]
 801d52c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d530:	81a3      	strh	r3, [r4, #12]
 801d532:	f04f 30ff 	mov.w	r0, #4294967295
 801d536:	e03e      	b.n	801d5b6 <__swsetup_r+0xba>
 801d538:	4b25      	ldr	r3, [pc, #148]	; (801d5d0 <__swsetup_r+0xd4>)
 801d53a:	429c      	cmp	r4, r3
 801d53c:	d101      	bne.n	801d542 <__swsetup_r+0x46>
 801d53e:	68ac      	ldr	r4, [r5, #8]
 801d540:	e7eb      	b.n	801d51a <__swsetup_r+0x1e>
 801d542:	4b24      	ldr	r3, [pc, #144]	; (801d5d4 <__swsetup_r+0xd8>)
 801d544:	429c      	cmp	r4, r3
 801d546:	bf08      	it	eq
 801d548:	68ec      	ldreq	r4, [r5, #12]
 801d54a:	e7e6      	b.n	801d51a <__swsetup_r+0x1e>
 801d54c:	0758      	lsls	r0, r3, #29
 801d54e:	d512      	bpl.n	801d576 <__swsetup_r+0x7a>
 801d550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d552:	b141      	cbz	r1, 801d566 <__swsetup_r+0x6a>
 801d554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d558:	4299      	cmp	r1, r3
 801d55a:	d002      	beq.n	801d562 <__swsetup_r+0x66>
 801d55c:	4630      	mov	r0, r6
 801d55e:	f7fd ffe5 	bl	801b52c <_free_r>
 801d562:	2300      	movs	r3, #0
 801d564:	6363      	str	r3, [r4, #52]	; 0x34
 801d566:	89a3      	ldrh	r3, [r4, #12]
 801d568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d56c:	81a3      	strh	r3, [r4, #12]
 801d56e:	2300      	movs	r3, #0
 801d570:	6063      	str	r3, [r4, #4]
 801d572:	6923      	ldr	r3, [r4, #16]
 801d574:	6023      	str	r3, [r4, #0]
 801d576:	89a3      	ldrh	r3, [r4, #12]
 801d578:	f043 0308 	orr.w	r3, r3, #8
 801d57c:	81a3      	strh	r3, [r4, #12]
 801d57e:	6923      	ldr	r3, [r4, #16]
 801d580:	b94b      	cbnz	r3, 801d596 <__swsetup_r+0x9a>
 801d582:	89a3      	ldrh	r3, [r4, #12]
 801d584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d58c:	d003      	beq.n	801d596 <__swsetup_r+0x9a>
 801d58e:	4621      	mov	r1, r4
 801d590:	4630      	mov	r0, r6
 801d592:	f001 fc1d 	bl	801edd0 <__smakebuf_r>
 801d596:	89a0      	ldrh	r0, [r4, #12]
 801d598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d59c:	f010 0301 	ands.w	r3, r0, #1
 801d5a0:	d00a      	beq.n	801d5b8 <__swsetup_r+0xbc>
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	60a3      	str	r3, [r4, #8]
 801d5a6:	6963      	ldr	r3, [r4, #20]
 801d5a8:	425b      	negs	r3, r3
 801d5aa:	61a3      	str	r3, [r4, #24]
 801d5ac:	6923      	ldr	r3, [r4, #16]
 801d5ae:	b943      	cbnz	r3, 801d5c2 <__swsetup_r+0xc6>
 801d5b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d5b4:	d1ba      	bne.n	801d52c <__swsetup_r+0x30>
 801d5b6:	bd70      	pop	{r4, r5, r6, pc}
 801d5b8:	0781      	lsls	r1, r0, #30
 801d5ba:	bf58      	it	pl
 801d5bc:	6963      	ldrpl	r3, [r4, #20]
 801d5be:	60a3      	str	r3, [r4, #8]
 801d5c0:	e7f4      	b.n	801d5ac <__swsetup_r+0xb0>
 801d5c2:	2000      	movs	r0, #0
 801d5c4:	e7f7      	b.n	801d5b6 <__swsetup_r+0xba>
 801d5c6:	bf00      	nop
 801d5c8:	20000144 	.word	0x20000144
 801d5cc:	0802219c 	.word	0x0802219c
 801d5d0:	080221bc 	.word	0x080221bc
 801d5d4:	0802217c 	.word	0x0802217c

0801d5d8 <__assert_func>:
 801d5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d5da:	4614      	mov	r4, r2
 801d5dc:	461a      	mov	r2, r3
 801d5de:	4b09      	ldr	r3, [pc, #36]	; (801d604 <__assert_func+0x2c>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	4605      	mov	r5, r0
 801d5e4:	68d8      	ldr	r0, [r3, #12]
 801d5e6:	b14c      	cbz	r4, 801d5fc <__assert_func+0x24>
 801d5e8:	4b07      	ldr	r3, [pc, #28]	; (801d608 <__assert_func+0x30>)
 801d5ea:	9100      	str	r1, [sp, #0]
 801d5ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d5f0:	4906      	ldr	r1, [pc, #24]	; (801d60c <__assert_func+0x34>)
 801d5f2:	462b      	mov	r3, r5
 801d5f4:	f001 f822 	bl	801e63c <fiprintf>
 801d5f8:	f002 fc54 	bl	801fea4 <abort>
 801d5fc:	4b04      	ldr	r3, [pc, #16]	; (801d610 <__assert_func+0x38>)
 801d5fe:	461c      	mov	r4, r3
 801d600:	e7f3      	b.n	801d5ea <__assert_func+0x12>
 801d602:	bf00      	nop
 801d604:	20000144 	.word	0x20000144
 801d608:	08021fc4 	.word	0x08021fc4
 801d60c:	08021fd1 	.word	0x08021fd1
 801d610:	08021fff 	.word	0x08021fff

0801d614 <quorem>:
 801d614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d618:	6903      	ldr	r3, [r0, #16]
 801d61a:	690c      	ldr	r4, [r1, #16]
 801d61c:	42a3      	cmp	r3, r4
 801d61e:	4607      	mov	r7, r0
 801d620:	f2c0 8081 	blt.w	801d726 <quorem+0x112>
 801d624:	3c01      	subs	r4, #1
 801d626:	f101 0814 	add.w	r8, r1, #20
 801d62a:	f100 0514 	add.w	r5, r0, #20
 801d62e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d632:	9301      	str	r3, [sp, #4]
 801d634:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d63c:	3301      	adds	r3, #1
 801d63e:	429a      	cmp	r2, r3
 801d640:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d644:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d648:	fbb2 f6f3 	udiv	r6, r2, r3
 801d64c:	d331      	bcc.n	801d6b2 <quorem+0x9e>
 801d64e:	f04f 0e00 	mov.w	lr, #0
 801d652:	4640      	mov	r0, r8
 801d654:	46ac      	mov	ip, r5
 801d656:	46f2      	mov	sl, lr
 801d658:	f850 2b04 	ldr.w	r2, [r0], #4
 801d65c:	b293      	uxth	r3, r2
 801d65e:	fb06 e303 	mla	r3, r6, r3, lr
 801d662:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d666:	b29b      	uxth	r3, r3
 801d668:	ebaa 0303 	sub.w	r3, sl, r3
 801d66c:	f8dc a000 	ldr.w	sl, [ip]
 801d670:	0c12      	lsrs	r2, r2, #16
 801d672:	fa13 f38a 	uxtah	r3, r3, sl
 801d676:	fb06 e202 	mla	r2, r6, r2, lr
 801d67a:	9300      	str	r3, [sp, #0]
 801d67c:	9b00      	ldr	r3, [sp, #0]
 801d67e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d682:	b292      	uxth	r2, r2
 801d684:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d68c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d690:	4581      	cmp	r9, r0
 801d692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d696:	f84c 3b04 	str.w	r3, [ip], #4
 801d69a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d69e:	d2db      	bcs.n	801d658 <quorem+0x44>
 801d6a0:	f855 300b 	ldr.w	r3, [r5, fp]
 801d6a4:	b92b      	cbnz	r3, 801d6b2 <quorem+0x9e>
 801d6a6:	9b01      	ldr	r3, [sp, #4]
 801d6a8:	3b04      	subs	r3, #4
 801d6aa:	429d      	cmp	r5, r3
 801d6ac:	461a      	mov	r2, r3
 801d6ae:	d32e      	bcc.n	801d70e <quorem+0xfa>
 801d6b0:	613c      	str	r4, [r7, #16]
 801d6b2:	4638      	mov	r0, r7
 801d6b4:	f001 feb6 	bl	801f424 <__mcmp>
 801d6b8:	2800      	cmp	r0, #0
 801d6ba:	db24      	blt.n	801d706 <quorem+0xf2>
 801d6bc:	3601      	adds	r6, #1
 801d6be:	4628      	mov	r0, r5
 801d6c0:	f04f 0c00 	mov.w	ip, #0
 801d6c4:	f858 2b04 	ldr.w	r2, [r8], #4
 801d6c8:	f8d0 e000 	ldr.w	lr, [r0]
 801d6cc:	b293      	uxth	r3, r2
 801d6ce:	ebac 0303 	sub.w	r3, ip, r3
 801d6d2:	0c12      	lsrs	r2, r2, #16
 801d6d4:	fa13 f38e 	uxtah	r3, r3, lr
 801d6d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d6e0:	b29b      	uxth	r3, r3
 801d6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d6e6:	45c1      	cmp	r9, r8
 801d6e8:	f840 3b04 	str.w	r3, [r0], #4
 801d6ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d6f0:	d2e8      	bcs.n	801d6c4 <quorem+0xb0>
 801d6f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d6f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d6fa:	b922      	cbnz	r2, 801d706 <quorem+0xf2>
 801d6fc:	3b04      	subs	r3, #4
 801d6fe:	429d      	cmp	r5, r3
 801d700:	461a      	mov	r2, r3
 801d702:	d30a      	bcc.n	801d71a <quorem+0x106>
 801d704:	613c      	str	r4, [r7, #16]
 801d706:	4630      	mov	r0, r6
 801d708:	b003      	add	sp, #12
 801d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d70e:	6812      	ldr	r2, [r2, #0]
 801d710:	3b04      	subs	r3, #4
 801d712:	2a00      	cmp	r2, #0
 801d714:	d1cc      	bne.n	801d6b0 <quorem+0x9c>
 801d716:	3c01      	subs	r4, #1
 801d718:	e7c7      	b.n	801d6aa <quorem+0x96>
 801d71a:	6812      	ldr	r2, [r2, #0]
 801d71c:	3b04      	subs	r3, #4
 801d71e:	2a00      	cmp	r2, #0
 801d720:	d1f0      	bne.n	801d704 <quorem+0xf0>
 801d722:	3c01      	subs	r4, #1
 801d724:	e7eb      	b.n	801d6fe <quorem+0xea>
 801d726:	2000      	movs	r0, #0
 801d728:	e7ee      	b.n	801d708 <quorem+0xf4>
 801d72a:	0000      	movs	r0, r0
 801d72c:	0000      	movs	r0, r0
	...

0801d730 <_dtoa_r>:
 801d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d734:	ed2d 8b04 	vpush	{d8-d9}
 801d738:	ec57 6b10 	vmov	r6, r7, d0
 801d73c:	b093      	sub	sp, #76	; 0x4c
 801d73e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d744:	9106      	str	r1, [sp, #24]
 801d746:	ee10 aa10 	vmov	sl, s0
 801d74a:	4604      	mov	r4, r0
 801d74c:	9209      	str	r2, [sp, #36]	; 0x24
 801d74e:	930c      	str	r3, [sp, #48]	; 0x30
 801d750:	46bb      	mov	fp, r7
 801d752:	b975      	cbnz	r5, 801d772 <_dtoa_r+0x42>
 801d754:	2010      	movs	r0, #16
 801d756:	f7fd feb1 	bl	801b4bc <malloc>
 801d75a:	4602      	mov	r2, r0
 801d75c:	6260      	str	r0, [r4, #36]	; 0x24
 801d75e:	b920      	cbnz	r0, 801d76a <_dtoa_r+0x3a>
 801d760:	4ba7      	ldr	r3, [pc, #668]	; (801da00 <_dtoa_r+0x2d0>)
 801d762:	21ea      	movs	r1, #234	; 0xea
 801d764:	48a7      	ldr	r0, [pc, #668]	; (801da04 <_dtoa_r+0x2d4>)
 801d766:	f7ff ff37 	bl	801d5d8 <__assert_func>
 801d76a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d76e:	6005      	str	r5, [r0, #0]
 801d770:	60c5      	str	r5, [r0, #12]
 801d772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d774:	6819      	ldr	r1, [r3, #0]
 801d776:	b151      	cbz	r1, 801d78e <_dtoa_r+0x5e>
 801d778:	685a      	ldr	r2, [r3, #4]
 801d77a:	604a      	str	r2, [r1, #4]
 801d77c:	2301      	movs	r3, #1
 801d77e:	4093      	lsls	r3, r2
 801d780:	608b      	str	r3, [r1, #8]
 801d782:	4620      	mov	r0, r4
 801d784:	f001 fbc2 	bl	801ef0c <_Bfree>
 801d788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d78a:	2200      	movs	r2, #0
 801d78c:	601a      	str	r2, [r3, #0]
 801d78e:	1e3b      	subs	r3, r7, #0
 801d790:	bfaa      	itet	ge
 801d792:	2300      	movge	r3, #0
 801d794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d798:	f8c8 3000 	strge.w	r3, [r8]
 801d79c:	4b9a      	ldr	r3, [pc, #616]	; (801da08 <_dtoa_r+0x2d8>)
 801d79e:	bfbc      	itt	lt
 801d7a0:	2201      	movlt	r2, #1
 801d7a2:	f8c8 2000 	strlt.w	r2, [r8]
 801d7a6:	ea33 030b 	bics.w	r3, r3, fp
 801d7aa:	d11b      	bne.n	801d7e4 <_dtoa_r+0xb4>
 801d7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d7ae:	f242 730f 	movw	r3, #9999	; 0x270f
 801d7b2:	6013      	str	r3, [r2, #0]
 801d7b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d7b8:	4333      	orrs	r3, r6
 801d7ba:	f000 8592 	beq.w	801e2e2 <_dtoa_r+0xbb2>
 801d7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d7c0:	b963      	cbnz	r3, 801d7dc <_dtoa_r+0xac>
 801d7c2:	4b92      	ldr	r3, [pc, #584]	; (801da0c <_dtoa_r+0x2dc>)
 801d7c4:	e022      	b.n	801d80c <_dtoa_r+0xdc>
 801d7c6:	4b92      	ldr	r3, [pc, #584]	; (801da10 <_dtoa_r+0x2e0>)
 801d7c8:	9301      	str	r3, [sp, #4]
 801d7ca:	3308      	adds	r3, #8
 801d7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d7ce:	6013      	str	r3, [r2, #0]
 801d7d0:	9801      	ldr	r0, [sp, #4]
 801d7d2:	b013      	add	sp, #76	; 0x4c
 801d7d4:	ecbd 8b04 	vpop	{d8-d9}
 801d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7dc:	4b8b      	ldr	r3, [pc, #556]	; (801da0c <_dtoa_r+0x2dc>)
 801d7de:	9301      	str	r3, [sp, #4]
 801d7e0:	3303      	adds	r3, #3
 801d7e2:	e7f3      	b.n	801d7cc <_dtoa_r+0x9c>
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	4650      	mov	r0, sl
 801d7ea:	4659      	mov	r1, fp
 801d7ec:	f7e3 f984 	bl	8000af8 <__aeabi_dcmpeq>
 801d7f0:	ec4b ab19 	vmov	d9, sl, fp
 801d7f4:	4680      	mov	r8, r0
 801d7f6:	b158      	cbz	r0, 801d810 <_dtoa_r+0xe0>
 801d7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d7fa:	2301      	movs	r3, #1
 801d7fc:	6013      	str	r3, [r2, #0]
 801d7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d800:	2b00      	cmp	r3, #0
 801d802:	f000 856b 	beq.w	801e2dc <_dtoa_r+0xbac>
 801d806:	4883      	ldr	r0, [pc, #524]	; (801da14 <_dtoa_r+0x2e4>)
 801d808:	6018      	str	r0, [r3, #0]
 801d80a:	1e43      	subs	r3, r0, #1
 801d80c:	9301      	str	r3, [sp, #4]
 801d80e:	e7df      	b.n	801d7d0 <_dtoa_r+0xa0>
 801d810:	ec4b ab10 	vmov	d0, sl, fp
 801d814:	aa10      	add	r2, sp, #64	; 0x40
 801d816:	a911      	add	r1, sp, #68	; 0x44
 801d818:	4620      	mov	r0, r4
 801d81a:	f001 ff25 	bl	801f668 <__d2b>
 801d81e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d822:	ee08 0a10 	vmov	s16, r0
 801d826:	2d00      	cmp	r5, #0
 801d828:	f000 8084 	beq.w	801d934 <_dtoa_r+0x204>
 801d82c:	ee19 3a90 	vmov	r3, s19
 801d830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d838:	4656      	mov	r6, sl
 801d83a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d83e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d846:	4b74      	ldr	r3, [pc, #464]	; (801da18 <_dtoa_r+0x2e8>)
 801d848:	2200      	movs	r2, #0
 801d84a:	4630      	mov	r0, r6
 801d84c:	4639      	mov	r1, r7
 801d84e:	f7e2 fd33 	bl	80002b8 <__aeabi_dsub>
 801d852:	a365      	add	r3, pc, #404	; (adr r3, 801d9e8 <_dtoa_r+0x2b8>)
 801d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d858:	f7e2 fee6 	bl	8000628 <__aeabi_dmul>
 801d85c:	a364      	add	r3, pc, #400	; (adr r3, 801d9f0 <_dtoa_r+0x2c0>)
 801d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d862:	f7e2 fd2b 	bl	80002bc <__adddf3>
 801d866:	4606      	mov	r6, r0
 801d868:	4628      	mov	r0, r5
 801d86a:	460f      	mov	r7, r1
 801d86c:	f7e2 fe72 	bl	8000554 <__aeabi_i2d>
 801d870:	a361      	add	r3, pc, #388	; (adr r3, 801d9f8 <_dtoa_r+0x2c8>)
 801d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d876:	f7e2 fed7 	bl	8000628 <__aeabi_dmul>
 801d87a:	4602      	mov	r2, r0
 801d87c:	460b      	mov	r3, r1
 801d87e:	4630      	mov	r0, r6
 801d880:	4639      	mov	r1, r7
 801d882:	f7e2 fd1b 	bl	80002bc <__adddf3>
 801d886:	4606      	mov	r6, r0
 801d888:	460f      	mov	r7, r1
 801d88a:	f7e3 f97d 	bl	8000b88 <__aeabi_d2iz>
 801d88e:	2200      	movs	r2, #0
 801d890:	9000      	str	r0, [sp, #0]
 801d892:	2300      	movs	r3, #0
 801d894:	4630      	mov	r0, r6
 801d896:	4639      	mov	r1, r7
 801d898:	f7e3 f938 	bl	8000b0c <__aeabi_dcmplt>
 801d89c:	b150      	cbz	r0, 801d8b4 <_dtoa_r+0x184>
 801d89e:	9800      	ldr	r0, [sp, #0]
 801d8a0:	f7e2 fe58 	bl	8000554 <__aeabi_i2d>
 801d8a4:	4632      	mov	r2, r6
 801d8a6:	463b      	mov	r3, r7
 801d8a8:	f7e3 f926 	bl	8000af8 <__aeabi_dcmpeq>
 801d8ac:	b910      	cbnz	r0, 801d8b4 <_dtoa_r+0x184>
 801d8ae:	9b00      	ldr	r3, [sp, #0]
 801d8b0:	3b01      	subs	r3, #1
 801d8b2:	9300      	str	r3, [sp, #0]
 801d8b4:	9b00      	ldr	r3, [sp, #0]
 801d8b6:	2b16      	cmp	r3, #22
 801d8b8:	d85a      	bhi.n	801d970 <_dtoa_r+0x240>
 801d8ba:	9a00      	ldr	r2, [sp, #0]
 801d8bc:	4b57      	ldr	r3, [pc, #348]	; (801da1c <_dtoa_r+0x2ec>)
 801d8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c6:	ec51 0b19 	vmov	r0, r1, d9
 801d8ca:	f7e3 f91f 	bl	8000b0c <__aeabi_dcmplt>
 801d8ce:	2800      	cmp	r0, #0
 801d8d0:	d050      	beq.n	801d974 <_dtoa_r+0x244>
 801d8d2:	9b00      	ldr	r3, [sp, #0]
 801d8d4:	3b01      	subs	r3, #1
 801d8d6:	9300      	str	r3, [sp, #0]
 801d8d8:	2300      	movs	r3, #0
 801d8da:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8de:	1b5d      	subs	r5, r3, r5
 801d8e0:	1e6b      	subs	r3, r5, #1
 801d8e2:	9305      	str	r3, [sp, #20]
 801d8e4:	bf45      	ittet	mi
 801d8e6:	f1c5 0301 	rsbmi	r3, r5, #1
 801d8ea:	9304      	strmi	r3, [sp, #16]
 801d8ec:	2300      	movpl	r3, #0
 801d8ee:	2300      	movmi	r3, #0
 801d8f0:	bf4c      	ite	mi
 801d8f2:	9305      	strmi	r3, [sp, #20]
 801d8f4:	9304      	strpl	r3, [sp, #16]
 801d8f6:	9b00      	ldr	r3, [sp, #0]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	db3d      	blt.n	801d978 <_dtoa_r+0x248>
 801d8fc:	9b05      	ldr	r3, [sp, #20]
 801d8fe:	9a00      	ldr	r2, [sp, #0]
 801d900:	920a      	str	r2, [sp, #40]	; 0x28
 801d902:	4413      	add	r3, r2
 801d904:	9305      	str	r3, [sp, #20]
 801d906:	2300      	movs	r3, #0
 801d908:	9307      	str	r3, [sp, #28]
 801d90a:	9b06      	ldr	r3, [sp, #24]
 801d90c:	2b09      	cmp	r3, #9
 801d90e:	f200 8089 	bhi.w	801da24 <_dtoa_r+0x2f4>
 801d912:	2b05      	cmp	r3, #5
 801d914:	bfc4      	itt	gt
 801d916:	3b04      	subgt	r3, #4
 801d918:	9306      	strgt	r3, [sp, #24]
 801d91a:	9b06      	ldr	r3, [sp, #24]
 801d91c:	f1a3 0302 	sub.w	r3, r3, #2
 801d920:	bfcc      	ite	gt
 801d922:	2500      	movgt	r5, #0
 801d924:	2501      	movle	r5, #1
 801d926:	2b03      	cmp	r3, #3
 801d928:	f200 8087 	bhi.w	801da3a <_dtoa_r+0x30a>
 801d92c:	e8df f003 	tbb	[pc, r3]
 801d930:	59383a2d 	.word	0x59383a2d
 801d934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d938:	441d      	add	r5, r3
 801d93a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d93e:	2b20      	cmp	r3, #32
 801d940:	bfc1      	itttt	gt
 801d942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d94a:	fa0b f303 	lslgt.w	r3, fp, r3
 801d94e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d952:	bfda      	itte	le
 801d954:	f1c3 0320 	rsble	r3, r3, #32
 801d958:	fa06 f003 	lslle.w	r0, r6, r3
 801d95c:	4318      	orrgt	r0, r3
 801d95e:	f7e2 fde9 	bl	8000534 <__aeabi_ui2d>
 801d962:	2301      	movs	r3, #1
 801d964:	4606      	mov	r6, r0
 801d966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d96a:	3d01      	subs	r5, #1
 801d96c:	930e      	str	r3, [sp, #56]	; 0x38
 801d96e:	e76a      	b.n	801d846 <_dtoa_r+0x116>
 801d970:	2301      	movs	r3, #1
 801d972:	e7b2      	b.n	801d8da <_dtoa_r+0x1aa>
 801d974:	900b      	str	r0, [sp, #44]	; 0x2c
 801d976:	e7b1      	b.n	801d8dc <_dtoa_r+0x1ac>
 801d978:	9b04      	ldr	r3, [sp, #16]
 801d97a:	9a00      	ldr	r2, [sp, #0]
 801d97c:	1a9b      	subs	r3, r3, r2
 801d97e:	9304      	str	r3, [sp, #16]
 801d980:	4253      	negs	r3, r2
 801d982:	9307      	str	r3, [sp, #28]
 801d984:	2300      	movs	r3, #0
 801d986:	930a      	str	r3, [sp, #40]	; 0x28
 801d988:	e7bf      	b.n	801d90a <_dtoa_r+0x1da>
 801d98a:	2300      	movs	r3, #0
 801d98c:	9308      	str	r3, [sp, #32]
 801d98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d990:	2b00      	cmp	r3, #0
 801d992:	dc55      	bgt.n	801da40 <_dtoa_r+0x310>
 801d994:	2301      	movs	r3, #1
 801d996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d99a:	461a      	mov	r2, r3
 801d99c:	9209      	str	r2, [sp, #36]	; 0x24
 801d99e:	e00c      	b.n	801d9ba <_dtoa_r+0x28a>
 801d9a0:	2301      	movs	r3, #1
 801d9a2:	e7f3      	b.n	801d98c <_dtoa_r+0x25c>
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9a8:	9308      	str	r3, [sp, #32]
 801d9aa:	9b00      	ldr	r3, [sp, #0]
 801d9ac:	4413      	add	r3, r2
 801d9ae:	9302      	str	r3, [sp, #8]
 801d9b0:	3301      	adds	r3, #1
 801d9b2:	2b01      	cmp	r3, #1
 801d9b4:	9303      	str	r3, [sp, #12]
 801d9b6:	bfb8      	it	lt
 801d9b8:	2301      	movlt	r3, #1
 801d9ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d9bc:	2200      	movs	r2, #0
 801d9be:	6042      	str	r2, [r0, #4]
 801d9c0:	2204      	movs	r2, #4
 801d9c2:	f102 0614 	add.w	r6, r2, #20
 801d9c6:	429e      	cmp	r6, r3
 801d9c8:	6841      	ldr	r1, [r0, #4]
 801d9ca:	d93d      	bls.n	801da48 <_dtoa_r+0x318>
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	f001 fa5d 	bl	801ee8c <_Balloc>
 801d9d2:	9001      	str	r0, [sp, #4]
 801d9d4:	2800      	cmp	r0, #0
 801d9d6:	d13b      	bne.n	801da50 <_dtoa_r+0x320>
 801d9d8:	4b11      	ldr	r3, [pc, #68]	; (801da20 <_dtoa_r+0x2f0>)
 801d9da:	4602      	mov	r2, r0
 801d9dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d9e0:	e6c0      	b.n	801d764 <_dtoa_r+0x34>
 801d9e2:	2301      	movs	r3, #1
 801d9e4:	e7df      	b.n	801d9a6 <_dtoa_r+0x276>
 801d9e6:	bf00      	nop
 801d9e8:	636f4361 	.word	0x636f4361
 801d9ec:	3fd287a7 	.word	0x3fd287a7
 801d9f0:	8b60c8b3 	.word	0x8b60c8b3
 801d9f4:	3fc68a28 	.word	0x3fc68a28
 801d9f8:	509f79fb 	.word	0x509f79fb
 801d9fc:	3fd34413 	.word	0x3fd34413
 801da00:	08021f50 	.word	0x08021f50
 801da04:	0802210e 	.word	0x0802210e
 801da08:	7ff00000 	.word	0x7ff00000
 801da0c:	0802210a 	.word	0x0802210a
 801da10:	08022101 	.word	0x08022101
 801da14:	08021ed5 	.word	0x08021ed5
 801da18:	3ff80000 	.word	0x3ff80000
 801da1c:	080222e0 	.word	0x080222e0
 801da20:	08022169 	.word	0x08022169
 801da24:	2501      	movs	r5, #1
 801da26:	2300      	movs	r3, #0
 801da28:	9306      	str	r3, [sp, #24]
 801da2a:	9508      	str	r5, [sp, #32]
 801da2c:	f04f 33ff 	mov.w	r3, #4294967295
 801da30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801da34:	2200      	movs	r2, #0
 801da36:	2312      	movs	r3, #18
 801da38:	e7b0      	b.n	801d99c <_dtoa_r+0x26c>
 801da3a:	2301      	movs	r3, #1
 801da3c:	9308      	str	r3, [sp, #32]
 801da3e:	e7f5      	b.n	801da2c <_dtoa_r+0x2fc>
 801da40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801da46:	e7b8      	b.n	801d9ba <_dtoa_r+0x28a>
 801da48:	3101      	adds	r1, #1
 801da4a:	6041      	str	r1, [r0, #4]
 801da4c:	0052      	lsls	r2, r2, #1
 801da4e:	e7b8      	b.n	801d9c2 <_dtoa_r+0x292>
 801da50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da52:	9a01      	ldr	r2, [sp, #4]
 801da54:	601a      	str	r2, [r3, #0]
 801da56:	9b03      	ldr	r3, [sp, #12]
 801da58:	2b0e      	cmp	r3, #14
 801da5a:	f200 809d 	bhi.w	801db98 <_dtoa_r+0x468>
 801da5e:	2d00      	cmp	r5, #0
 801da60:	f000 809a 	beq.w	801db98 <_dtoa_r+0x468>
 801da64:	9b00      	ldr	r3, [sp, #0]
 801da66:	2b00      	cmp	r3, #0
 801da68:	dd32      	ble.n	801dad0 <_dtoa_r+0x3a0>
 801da6a:	4ab7      	ldr	r2, [pc, #732]	; (801dd48 <_dtoa_r+0x618>)
 801da6c:	f003 030f 	and.w	r3, r3, #15
 801da70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801da74:	e9d3 8900 	ldrd	r8, r9, [r3]
 801da78:	9b00      	ldr	r3, [sp, #0]
 801da7a:	05d8      	lsls	r0, r3, #23
 801da7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801da80:	d516      	bpl.n	801dab0 <_dtoa_r+0x380>
 801da82:	4bb2      	ldr	r3, [pc, #712]	; (801dd4c <_dtoa_r+0x61c>)
 801da84:	ec51 0b19 	vmov	r0, r1, d9
 801da88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801da8c:	f7e2 fef6 	bl	800087c <__aeabi_ddiv>
 801da90:	f007 070f 	and.w	r7, r7, #15
 801da94:	4682      	mov	sl, r0
 801da96:	468b      	mov	fp, r1
 801da98:	2503      	movs	r5, #3
 801da9a:	4eac      	ldr	r6, [pc, #688]	; (801dd4c <_dtoa_r+0x61c>)
 801da9c:	b957      	cbnz	r7, 801dab4 <_dtoa_r+0x384>
 801da9e:	4642      	mov	r2, r8
 801daa0:	464b      	mov	r3, r9
 801daa2:	4650      	mov	r0, sl
 801daa4:	4659      	mov	r1, fp
 801daa6:	f7e2 fee9 	bl	800087c <__aeabi_ddiv>
 801daaa:	4682      	mov	sl, r0
 801daac:	468b      	mov	fp, r1
 801daae:	e028      	b.n	801db02 <_dtoa_r+0x3d2>
 801dab0:	2502      	movs	r5, #2
 801dab2:	e7f2      	b.n	801da9a <_dtoa_r+0x36a>
 801dab4:	07f9      	lsls	r1, r7, #31
 801dab6:	d508      	bpl.n	801daca <_dtoa_r+0x39a>
 801dab8:	4640      	mov	r0, r8
 801daba:	4649      	mov	r1, r9
 801dabc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dac0:	f7e2 fdb2 	bl	8000628 <__aeabi_dmul>
 801dac4:	3501      	adds	r5, #1
 801dac6:	4680      	mov	r8, r0
 801dac8:	4689      	mov	r9, r1
 801daca:	107f      	asrs	r7, r7, #1
 801dacc:	3608      	adds	r6, #8
 801dace:	e7e5      	b.n	801da9c <_dtoa_r+0x36c>
 801dad0:	f000 809b 	beq.w	801dc0a <_dtoa_r+0x4da>
 801dad4:	9b00      	ldr	r3, [sp, #0]
 801dad6:	4f9d      	ldr	r7, [pc, #628]	; (801dd4c <_dtoa_r+0x61c>)
 801dad8:	425e      	negs	r6, r3
 801dada:	4b9b      	ldr	r3, [pc, #620]	; (801dd48 <_dtoa_r+0x618>)
 801dadc:	f006 020f 	and.w	r2, r6, #15
 801dae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dae8:	ec51 0b19 	vmov	r0, r1, d9
 801daec:	f7e2 fd9c 	bl	8000628 <__aeabi_dmul>
 801daf0:	1136      	asrs	r6, r6, #4
 801daf2:	4682      	mov	sl, r0
 801daf4:	468b      	mov	fp, r1
 801daf6:	2300      	movs	r3, #0
 801daf8:	2502      	movs	r5, #2
 801dafa:	2e00      	cmp	r6, #0
 801dafc:	d17a      	bne.n	801dbf4 <_dtoa_r+0x4c4>
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d1d3      	bne.n	801daaa <_dtoa_r+0x37a>
 801db02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db04:	2b00      	cmp	r3, #0
 801db06:	f000 8082 	beq.w	801dc0e <_dtoa_r+0x4de>
 801db0a:	4b91      	ldr	r3, [pc, #580]	; (801dd50 <_dtoa_r+0x620>)
 801db0c:	2200      	movs	r2, #0
 801db0e:	4650      	mov	r0, sl
 801db10:	4659      	mov	r1, fp
 801db12:	f7e2 fffb 	bl	8000b0c <__aeabi_dcmplt>
 801db16:	2800      	cmp	r0, #0
 801db18:	d079      	beq.n	801dc0e <_dtoa_r+0x4de>
 801db1a:	9b03      	ldr	r3, [sp, #12]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d076      	beq.n	801dc0e <_dtoa_r+0x4de>
 801db20:	9b02      	ldr	r3, [sp, #8]
 801db22:	2b00      	cmp	r3, #0
 801db24:	dd36      	ble.n	801db94 <_dtoa_r+0x464>
 801db26:	9b00      	ldr	r3, [sp, #0]
 801db28:	4650      	mov	r0, sl
 801db2a:	4659      	mov	r1, fp
 801db2c:	1e5f      	subs	r7, r3, #1
 801db2e:	2200      	movs	r2, #0
 801db30:	4b88      	ldr	r3, [pc, #544]	; (801dd54 <_dtoa_r+0x624>)
 801db32:	f7e2 fd79 	bl	8000628 <__aeabi_dmul>
 801db36:	9e02      	ldr	r6, [sp, #8]
 801db38:	4682      	mov	sl, r0
 801db3a:	468b      	mov	fp, r1
 801db3c:	3501      	adds	r5, #1
 801db3e:	4628      	mov	r0, r5
 801db40:	f7e2 fd08 	bl	8000554 <__aeabi_i2d>
 801db44:	4652      	mov	r2, sl
 801db46:	465b      	mov	r3, fp
 801db48:	f7e2 fd6e 	bl	8000628 <__aeabi_dmul>
 801db4c:	4b82      	ldr	r3, [pc, #520]	; (801dd58 <_dtoa_r+0x628>)
 801db4e:	2200      	movs	r2, #0
 801db50:	f7e2 fbb4 	bl	80002bc <__adddf3>
 801db54:	46d0      	mov	r8, sl
 801db56:	46d9      	mov	r9, fp
 801db58:	4682      	mov	sl, r0
 801db5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801db5e:	2e00      	cmp	r6, #0
 801db60:	d158      	bne.n	801dc14 <_dtoa_r+0x4e4>
 801db62:	4b7e      	ldr	r3, [pc, #504]	; (801dd5c <_dtoa_r+0x62c>)
 801db64:	2200      	movs	r2, #0
 801db66:	4640      	mov	r0, r8
 801db68:	4649      	mov	r1, r9
 801db6a:	f7e2 fba5 	bl	80002b8 <__aeabi_dsub>
 801db6e:	4652      	mov	r2, sl
 801db70:	465b      	mov	r3, fp
 801db72:	4680      	mov	r8, r0
 801db74:	4689      	mov	r9, r1
 801db76:	f7e2 ffe7 	bl	8000b48 <__aeabi_dcmpgt>
 801db7a:	2800      	cmp	r0, #0
 801db7c:	f040 8295 	bne.w	801e0aa <_dtoa_r+0x97a>
 801db80:	4652      	mov	r2, sl
 801db82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801db86:	4640      	mov	r0, r8
 801db88:	4649      	mov	r1, r9
 801db8a:	f7e2 ffbf 	bl	8000b0c <__aeabi_dcmplt>
 801db8e:	2800      	cmp	r0, #0
 801db90:	f040 8289 	bne.w	801e0a6 <_dtoa_r+0x976>
 801db94:	ec5b ab19 	vmov	sl, fp, d9
 801db98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	f2c0 8148 	blt.w	801de30 <_dtoa_r+0x700>
 801dba0:	9a00      	ldr	r2, [sp, #0]
 801dba2:	2a0e      	cmp	r2, #14
 801dba4:	f300 8144 	bgt.w	801de30 <_dtoa_r+0x700>
 801dba8:	4b67      	ldr	r3, [pc, #412]	; (801dd48 <_dtoa_r+0x618>)
 801dbaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dbae:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	f280 80d5 	bge.w	801dd64 <_dtoa_r+0x634>
 801dbba:	9b03      	ldr	r3, [sp, #12]
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	f300 80d1 	bgt.w	801dd64 <_dtoa_r+0x634>
 801dbc2:	f040 826f 	bne.w	801e0a4 <_dtoa_r+0x974>
 801dbc6:	4b65      	ldr	r3, [pc, #404]	; (801dd5c <_dtoa_r+0x62c>)
 801dbc8:	2200      	movs	r2, #0
 801dbca:	4640      	mov	r0, r8
 801dbcc:	4649      	mov	r1, r9
 801dbce:	f7e2 fd2b 	bl	8000628 <__aeabi_dmul>
 801dbd2:	4652      	mov	r2, sl
 801dbd4:	465b      	mov	r3, fp
 801dbd6:	f7e2 ffad 	bl	8000b34 <__aeabi_dcmpge>
 801dbda:	9e03      	ldr	r6, [sp, #12]
 801dbdc:	4637      	mov	r7, r6
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	f040 8245 	bne.w	801e06e <_dtoa_r+0x93e>
 801dbe4:	9d01      	ldr	r5, [sp, #4]
 801dbe6:	2331      	movs	r3, #49	; 0x31
 801dbe8:	f805 3b01 	strb.w	r3, [r5], #1
 801dbec:	9b00      	ldr	r3, [sp, #0]
 801dbee:	3301      	adds	r3, #1
 801dbf0:	9300      	str	r3, [sp, #0]
 801dbf2:	e240      	b.n	801e076 <_dtoa_r+0x946>
 801dbf4:	07f2      	lsls	r2, r6, #31
 801dbf6:	d505      	bpl.n	801dc04 <_dtoa_r+0x4d4>
 801dbf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dbfc:	f7e2 fd14 	bl	8000628 <__aeabi_dmul>
 801dc00:	3501      	adds	r5, #1
 801dc02:	2301      	movs	r3, #1
 801dc04:	1076      	asrs	r6, r6, #1
 801dc06:	3708      	adds	r7, #8
 801dc08:	e777      	b.n	801dafa <_dtoa_r+0x3ca>
 801dc0a:	2502      	movs	r5, #2
 801dc0c:	e779      	b.n	801db02 <_dtoa_r+0x3d2>
 801dc0e:	9f00      	ldr	r7, [sp, #0]
 801dc10:	9e03      	ldr	r6, [sp, #12]
 801dc12:	e794      	b.n	801db3e <_dtoa_r+0x40e>
 801dc14:	9901      	ldr	r1, [sp, #4]
 801dc16:	4b4c      	ldr	r3, [pc, #304]	; (801dd48 <_dtoa_r+0x618>)
 801dc18:	4431      	add	r1, r6
 801dc1a:	910d      	str	r1, [sp, #52]	; 0x34
 801dc1c:	9908      	ldr	r1, [sp, #32]
 801dc1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801dc22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dc26:	2900      	cmp	r1, #0
 801dc28:	d043      	beq.n	801dcb2 <_dtoa_r+0x582>
 801dc2a:	494d      	ldr	r1, [pc, #308]	; (801dd60 <_dtoa_r+0x630>)
 801dc2c:	2000      	movs	r0, #0
 801dc2e:	f7e2 fe25 	bl	800087c <__aeabi_ddiv>
 801dc32:	4652      	mov	r2, sl
 801dc34:	465b      	mov	r3, fp
 801dc36:	f7e2 fb3f 	bl	80002b8 <__aeabi_dsub>
 801dc3a:	9d01      	ldr	r5, [sp, #4]
 801dc3c:	4682      	mov	sl, r0
 801dc3e:	468b      	mov	fp, r1
 801dc40:	4649      	mov	r1, r9
 801dc42:	4640      	mov	r0, r8
 801dc44:	f7e2 ffa0 	bl	8000b88 <__aeabi_d2iz>
 801dc48:	4606      	mov	r6, r0
 801dc4a:	f7e2 fc83 	bl	8000554 <__aeabi_i2d>
 801dc4e:	4602      	mov	r2, r0
 801dc50:	460b      	mov	r3, r1
 801dc52:	4640      	mov	r0, r8
 801dc54:	4649      	mov	r1, r9
 801dc56:	f7e2 fb2f 	bl	80002b8 <__aeabi_dsub>
 801dc5a:	3630      	adds	r6, #48	; 0x30
 801dc5c:	f805 6b01 	strb.w	r6, [r5], #1
 801dc60:	4652      	mov	r2, sl
 801dc62:	465b      	mov	r3, fp
 801dc64:	4680      	mov	r8, r0
 801dc66:	4689      	mov	r9, r1
 801dc68:	f7e2 ff50 	bl	8000b0c <__aeabi_dcmplt>
 801dc6c:	2800      	cmp	r0, #0
 801dc6e:	d163      	bne.n	801dd38 <_dtoa_r+0x608>
 801dc70:	4642      	mov	r2, r8
 801dc72:	464b      	mov	r3, r9
 801dc74:	4936      	ldr	r1, [pc, #216]	; (801dd50 <_dtoa_r+0x620>)
 801dc76:	2000      	movs	r0, #0
 801dc78:	f7e2 fb1e 	bl	80002b8 <__aeabi_dsub>
 801dc7c:	4652      	mov	r2, sl
 801dc7e:	465b      	mov	r3, fp
 801dc80:	f7e2 ff44 	bl	8000b0c <__aeabi_dcmplt>
 801dc84:	2800      	cmp	r0, #0
 801dc86:	f040 80b5 	bne.w	801ddf4 <_dtoa_r+0x6c4>
 801dc8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc8c:	429d      	cmp	r5, r3
 801dc8e:	d081      	beq.n	801db94 <_dtoa_r+0x464>
 801dc90:	4b30      	ldr	r3, [pc, #192]	; (801dd54 <_dtoa_r+0x624>)
 801dc92:	2200      	movs	r2, #0
 801dc94:	4650      	mov	r0, sl
 801dc96:	4659      	mov	r1, fp
 801dc98:	f7e2 fcc6 	bl	8000628 <__aeabi_dmul>
 801dc9c:	4b2d      	ldr	r3, [pc, #180]	; (801dd54 <_dtoa_r+0x624>)
 801dc9e:	4682      	mov	sl, r0
 801dca0:	468b      	mov	fp, r1
 801dca2:	4640      	mov	r0, r8
 801dca4:	4649      	mov	r1, r9
 801dca6:	2200      	movs	r2, #0
 801dca8:	f7e2 fcbe 	bl	8000628 <__aeabi_dmul>
 801dcac:	4680      	mov	r8, r0
 801dcae:	4689      	mov	r9, r1
 801dcb0:	e7c6      	b.n	801dc40 <_dtoa_r+0x510>
 801dcb2:	4650      	mov	r0, sl
 801dcb4:	4659      	mov	r1, fp
 801dcb6:	f7e2 fcb7 	bl	8000628 <__aeabi_dmul>
 801dcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcbc:	9d01      	ldr	r5, [sp, #4]
 801dcbe:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcc0:	4682      	mov	sl, r0
 801dcc2:	468b      	mov	fp, r1
 801dcc4:	4649      	mov	r1, r9
 801dcc6:	4640      	mov	r0, r8
 801dcc8:	f7e2 ff5e 	bl	8000b88 <__aeabi_d2iz>
 801dccc:	4606      	mov	r6, r0
 801dcce:	f7e2 fc41 	bl	8000554 <__aeabi_i2d>
 801dcd2:	3630      	adds	r6, #48	; 0x30
 801dcd4:	4602      	mov	r2, r0
 801dcd6:	460b      	mov	r3, r1
 801dcd8:	4640      	mov	r0, r8
 801dcda:	4649      	mov	r1, r9
 801dcdc:	f7e2 faec 	bl	80002b8 <__aeabi_dsub>
 801dce0:	f805 6b01 	strb.w	r6, [r5], #1
 801dce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dce6:	429d      	cmp	r5, r3
 801dce8:	4680      	mov	r8, r0
 801dcea:	4689      	mov	r9, r1
 801dcec:	f04f 0200 	mov.w	r2, #0
 801dcf0:	d124      	bne.n	801dd3c <_dtoa_r+0x60c>
 801dcf2:	4b1b      	ldr	r3, [pc, #108]	; (801dd60 <_dtoa_r+0x630>)
 801dcf4:	4650      	mov	r0, sl
 801dcf6:	4659      	mov	r1, fp
 801dcf8:	f7e2 fae0 	bl	80002bc <__adddf3>
 801dcfc:	4602      	mov	r2, r0
 801dcfe:	460b      	mov	r3, r1
 801dd00:	4640      	mov	r0, r8
 801dd02:	4649      	mov	r1, r9
 801dd04:	f7e2 ff20 	bl	8000b48 <__aeabi_dcmpgt>
 801dd08:	2800      	cmp	r0, #0
 801dd0a:	d173      	bne.n	801ddf4 <_dtoa_r+0x6c4>
 801dd0c:	4652      	mov	r2, sl
 801dd0e:	465b      	mov	r3, fp
 801dd10:	4913      	ldr	r1, [pc, #76]	; (801dd60 <_dtoa_r+0x630>)
 801dd12:	2000      	movs	r0, #0
 801dd14:	f7e2 fad0 	bl	80002b8 <__aeabi_dsub>
 801dd18:	4602      	mov	r2, r0
 801dd1a:	460b      	mov	r3, r1
 801dd1c:	4640      	mov	r0, r8
 801dd1e:	4649      	mov	r1, r9
 801dd20:	f7e2 fef4 	bl	8000b0c <__aeabi_dcmplt>
 801dd24:	2800      	cmp	r0, #0
 801dd26:	f43f af35 	beq.w	801db94 <_dtoa_r+0x464>
 801dd2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dd2c:	1e6b      	subs	r3, r5, #1
 801dd2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dd34:	2b30      	cmp	r3, #48	; 0x30
 801dd36:	d0f8      	beq.n	801dd2a <_dtoa_r+0x5fa>
 801dd38:	9700      	str	r7, [sp, #0]
 801dd3a:	e049      	b.n	801ddd0 <_dtoa_r+0x6a0>
 801dd3c:	4b05      	ldr	r3, [pc, #20]	; (801dd54 <_dtoa_r+0x624>)
 801dd3e:	f7e2 fc73 	bl	8000628 <__aeabi_dmul>
 801dd42:	4680      	mov	r8, r0
 801dd44:	4689      	mov	r9, r1
 801dd46:	e7bd      	b.n	801dcc4 <_dtoa_r+0x594>
 801dd48:	080222e0 	.word	0x080222e0
 801dd4c:	080222b8 	.word	0x080222b8
 801dd50:	3ff00000 	.word	0x3ff00000
 801dd54:	40240000 	.word	0x40240000
 801dd58:	401c0000 	.word	0x401c0000
 801dd5c:	40140000 	.word	0x40140000
 801dd60:	3fe00000 	.word	0x3fe00000
 801dd64:	9d01      	ldr	r5, [sp, #4]
 801dd66:	4656      	mov	r6, sl
 801dd68:	465f      	mov	r7, fp
 801dd6a:	4642      	mov	r2, r8
 801dd6c:	464b      	mov	r3, r9
 801dd6e:	4630      	mov	r0, r6
 801dd70:	4639      	mov	r1, r7
 801dd72:	f7e2 fd83 	bl	800087c <__aeabi_ddiv>
 801dd76:	f7e2 ff07 	bl	8000b88 <__aeabi_d2iz>
 801dd7a:	4682      	mov	sl, r0
 801dd7c:	f7e2 fbea 	bl	8000554 <__aeabi_i2d>
 801dd80:	4642      	mov	r2, r8
 801dd82:	464b      	mov	r3, r9
 801dd84:	f7e2 fc50 	bl	8000628 <__aeabi_dmul>
 801dd88:	4602      	mov	r2, r0
 801dd8a:	460b      	mov	r3, r1
 801dd8c:	4630      	mov	r0, r6
 801dd8e:	4639      	mov	r1, r7
 801dd90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801dd94:	f7e2 fa90 	bl	80002b8 <__aeabi_dsub>
 801dd98:	f805 6b01 	strb.w	r6, [r5], #1
 801dd9c:	9e01      	ldr	r6, [sp, #4]
 801dd9e:	9f03      	ldr	r7, [sp, #12]
 801dda0:	1bae      	subs	r6, r5, r6
 801dda2:	42b7      	cmp	r7, r6
 801dda4:	4602      	mov	r2, r0
 801dda6:	460b      	mov	r3, r1
 801dda8:	d135      	bne.n	801de16 <_dtoa_r+0x6e6>
 801ddaa:	f7e2 fa87 	bl	80002bc <__adddf3>
 801ddae:	4642      	mov	r2, r8
 801ddb0:	464b      	mov	r3, r9
 801ddb2:	4606      	mov	r6, r0
 801ddb4:	460f      	mov	r7, r1
 801ddb6:	f7e2 fec7 	bl	8000b48 <__aeabi_dcmpgt>
 801ddba:	b9d0      	cbnz	r0, 801ddf2 <_dtoa_r+0x6c2>
 801ddbc:	4642      	mov	r2, r8
 801ddbe:	464b      	mov	r3, r9
 801ddc0:	4630      	mov	r0, r6
 801ddc2:	4639      	mov	r1, r7
 801ddc4:	f7e2 fe98 	bl	8000af8 <__aeabi_dcmpeq>
 801ddc8:	b110      	cbz	r0, 801ddd0 <_dtoa_r+0x6a0>
 801ddca:	f01a 0f01 	tst.w	sl, #1
 801ddce:	d110      	bne.n	801ddf2 <_dtoa_r+0x6c2>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	ee18 1a10 	vmov	r1, s16
 801ddd6:	f001 f899 	bl	801ef0c <_Bfree>
 801ddda:	2300      	movs	r3, #0
 801dddc:	9800      	ldr	r0, [sp, #0]
 801ddde:	702b      	strb	r3, [r5, #0]
 801dde0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dde2:	3001      	adds	r0, #1
 801dde4:	6018      	str	r0, [r3, #0]
 801dde6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	f43f acf1 	beq.w	801d7d0 <_dtoa_r+0xa0>
 801ddee:	601d      	str	r5, [r3, #0]
 801ddf0:	e4ee      	b.n	801d7d0 <_dtoa_r+0xa0>
 801ddf2:	9f00      	ldr	r7, [sp, #0]
 801ddf4:	462b      	mov	r3, r5
 801ddf6:	461d      	mov	r5, r3
 801ddf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ddfc:	2a39      	cmp	r2, #57	; 0x39
 801ddfe:	d106      	bne.n	801de0e <_dtoa_r+0x6de>
 801de00:	9a01      	ldr	r2, [sp, #4]
 801de02:	429a      	cmp	r2, r3
 801de04:	d1f7      	bne.n	801ddf6 <_dtoa_r+0x6c6>
 801de06:	9901      	ldr	r1, [sp, #4]
 801de08:	2230      	movs	r2, #48	; 0x30
 801de0a:	3701      	adds	r7, #1
 801de0c:	700a      	strb	r2, [r1, #0]
 801de0e:	781a      	ldrb	r2, [r3, #0]
 801de10:	3201      	adds	r2, #1
 801de12:	701a      	strb	r2, [r3, #0]
 801de14:	e790      	b.n	801dd38 <_dtoa_r+0x608>
 801de16:	4ba6      	ldr	r3, [pc, #664]	; (801e0b0 <_dtoa_r+0x980>)
 801de18:	2200      	movs	r2, #0
 801de1a:	f7e2 fc05 	bl	8000628 <__aeabi_dmul>
 801de1e:	2200      	movs	r2, #0
 801de20:	2300      	movs	r3, #0
 801de22:	4606      	mov	r6, r0
 801de24:	460f      	mov	r7, r1
 801de26:	f7e2 fe67 	bl	8000af8 <__aeabi_dcmpeq>
 801de2a:	2800      	cmp	r0, #0
 801de2c:	d09d      	beq.n	801dd6a <_dtoa_r+0x63a>
 801de2e:	e7cf      	b.n	801ddd0 <_dtoa_r+0x6a0>
 801de30:	9a08      	ldr	r2, [sp, #32]
 801de32:	2a00      	cmp	r2, #0
 801de34:	f000 80d7 	beq.w	801dfe6 <_dtoa_r+0x8b6>
 801de38:	9a06      	ldr	r2, [sp, #24]
 801de3a:	2a01      	cmp	r2, #1
 801de3c:	f300 80ba 	bgt.w	801dfb4 <_dtoa_r+0x884>
 801de40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801de42:	2a00      	cmp	r2, #0
 801de44:	f000 80b2 	beq.w	801dfac <_dtoa_r+0x87c>
 801de48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801de4c:	9e07      	ldr	r6, [sp, #28]
 801de4e:	9d04      	ldr	r5, [sp, #16]
 801de50:	9a04      	ldr	r2, [sp, #16]
 801de52:	441a      	add	r2, r3
 801de54:	9204      	str	r2, [sp, #16]
 801de56:	9a05      	ldr	r2, [sp, #20]
 801de58:	2101      	movs	r1, #1
 801de5a:	441a      	add	r2, r3
 801de5c:	4620      	mov	r0, r4
 801de5e:	9205      	str	r2, [sp, #20]
 801de60:	f001 f956 	bl	801f110 <__i2b>
 801de64:	4607      	mov	r7, r0
 801de66:	2d00      	cmp	r5, #0
 801de68:	dd0c      	ble.n	801de84 <_dtoa_r+0x754>
 801de6a:	9b05      	ldr	r3, [sp, #20]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	dd09      	ble.n	801de84 <_dtoa_r+0x754>
 801de70:	42ab      	cmp	r3, r5
 801de72:	9a04      	ldr	r2, [sp, #16]
 801de74:	bfa8      	it	ge
 801de76:	462b      	movge	r3, r5
 801de78:	1ad2      	subs	r2, r2, r3
 801de7a:	9204      	str	r2, [sp, #16]
 801de7c:	9a05      	ldr	r2, [sp, #20]
 801de7e:	1aed      	subs	r5, r5, r3
 801de80:	1ad3      	subs	r3, r2, r3
 801de82:	9305      	str	r3, [sp, #20]
 801de84:	9b07      	ldr	r3, [sp, #28]
 801de86:	b31b      	cbz	r3, 801ded0 <_dtoa_r+0x7a0>
 801de88:	9b08      	ldr	r3, [sp, #32]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	f000 80af 	beq.w	801dfee <_dtoa_r+0x8be>
 801de90:	2e00      	cmp	r6, #0
 801de92:	dd13      	ble.n	801debc <_dtoa_r+0x78c>
 801de94:	4639      	mov	r1, r7
 801de96:	4632      	mov	r2, r6
 801de98:	4620      	mov	r0, r4
 801de9a:	f001 f9f9 	bl	801f290 <__pow5mult>
 801de9e:	ee18 2a10 	vmov	r2, s16
 801dea2:	4601      	mov	r1, r0
 801dea4:	4607      	mov	r7, r0
 801dea6:	4620      	mov	r0, r4
 801dea8:	f001 f948 	bl	801f13c <__multiply>
 801deac:	ee18 1a10 	vmov	r1, s16
 801deb0:	4680      	mov	r8, r0
 801deb2:	4620      	mov	r0, r4
 801deb4:	f001 f82a 	bl	801ef0c <_Bfree>
 801deb8:	ee08 8a10 	vmov	s16, r8
 801debc:	9b07      	ldr	r3, [sp, #28]
 801debe:	1b9a      	subs	r2, r3, r6
 801dec0:	d006      	beq.n	801ded0 <_dtoa_r+0x7a0>
 801dec2:	ee18 1a10 	vmov	r1, s16
 801dec6:	4620      	mov	r0, r4
 801dec8:	f001 f9e2 	bl	801f290 <__pow5mult>
 801decc:	ee08 0a10 	vmov	s16, r0
 801ded0:	2101      	movs	r1, #1
 801ded2:	4620      	mov	r0, r4
 801ded4:	f001 f91c 	bl	801f110 <__i2b>
 801ded8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801deda:	2b00      	cmp	r3, #0
 801dedc:	4606      	mov	r6, r0
 801dede:	f340 8088 	ble.w	801dff2 <_dtoa_r+0x8c2>
 801dee2:	461a      	mov	r2, r3
 801dee4:	4601      	mov	r1, r0
 801dee6:	4620      	mov	r0, r4
 801dee8:	f001 f9d2 	bl	801f290 <__pow5mult>
 801deec:	9b06      	ldr	r3, [sp, #24]
 801deee:	2b01      	cmp	r3, #1
 801def0:	4606      	mov	r6, r0
 801def2:	f340 8081 	ble.w	801dff8 <_dtoa_r+0x8c8>
 801def6:	f04f 0800 	mov.w	r8, #0
 801defa:	6933      	ldr	r3, [r6, #16]
 801defc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801df00:	6918      	ldr	r0, [r3, #16]
 801df02:	f001 f8b5 	bl	801f070 <__hi0bits>
 801df06:	f1c0 0020 	rsb	r0, r0, #32
 801df0a:	9b05      	ldr	r3, [sp, #20]
 801df0c:	4418      	add	r0, r3
 801df0e:	f010 001f 	ands.w	r0, r0, #31
 801df12:	f000 8092 	beq.w	801e03a <_dtoa_r+0x90a>
 801df16:	f1c0 0320 	rsb	r3, r0, #32
 801df1a:	2b04      	cmp	r3, #4
 801df1c:	f340 808a 	ble.w	801e034 <_dtoa_r+0x904>
 801df20:	f1c0 001c 	rsb	r0, r0, #28
 801df24:	9b04      	ldr	r3, [sp, #16]
 801df26:	4403      	add	r3, r0
 801df28:	9304      	str	r3, [sp, #16]
 801df2a:	9b05      	ldr	r3, [sp, #20]
 801df2c:	4403      	add	r3, r0
 801df2e:	4405      	add	r5, r0
 801df30:	9305      	str	r3, [sp, #20]
 801df32:	9b04      	ldr	r3, [sp, #16]
 801df34:	2b00      	cmp	r3, #0
 801df36:	dd07      	ble.n	801df48 <_dtoa_r+0x818>
 801df38:	ee18 1a10 	vmov	r1, s16
 801df3c:	461a      	mov	r2, r3
 801df3e:	4620      	mov	r0, r4
 801df40:	f001 fa00 	bl	801f344 <__lshift>
 801df44:	ee08 0a10 	vmov	s16, r0
 801df48:	9b05      	ldr	r3, [sp, #20]
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	dd05      	ble.n	801df5a <_dtoa_r+0x82a>
 801df4e:	4631      	mov	r1, r6
 801df50:	461a      	mov	r2, r3
 801df52:	4620      	mov	r0, r4
 801df54:	f001 f9f6 	bl	801f344 <__lshift>
 801df58:	4606      	mov	r6, r0
 801df5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d06e      	beq.n	801e03e <_dtoa_r+0x90e>
 801df60:	ee18 0a10 	vmov	r0, s16
 801df64:	4631      	mov	r1, r6
 801df66:	f001 fa5d 	bl	801f424 <__mcmp>
 801df6a:	2800      	cmp	r0, #0
 801df6c:	da67      	bge.n	801e03e <_dtoa_r+0x90e>
 801df6e:	9b00      	ldr	r3, [sp, #0]
 801df70:	3b01      	subs	r3, #1
 801df72:	ee18 1a10 	vmov	r1, s16
 801df76:	9300      	str	r3, [sp, #0]
 801df78:	220a      	movs	r2, #10
 801df7a:	2300      	movs	r3, #0
 801df7c:	4620      	mov	r0, r4
 801df7e:	f000 ffe7 	bl	801ef50 <__multadd>
 801df82:	9b08      	ldr	r3, [sp, #32]
 801df84:	ee08 0a10 	vmov	s16, r0
 801df88:	2b00      	cmp	r3, #0
 801df8a:	f000 81b1 	beq.w	801e2f0 <_dtoa_r+0xbc0>
 801df8e:	2300      	movs	r3, #0
 801df90:	4639      	mov	r1, r7
 801df92:	220a      	movs	r2, #10
 801df94:	4620      	mov	r0, r4
 801df96:	f000 ffdb 	bl	801ef50 <__multadd>
 801df9a:	9b02      	ldr	r3, [sp, #8]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	4607      	mov	r7, r0
 801dfa0:	f300 808e 	bgt.w	801e0c0 <_dtoa_r+0x990>
 801dfa4:	9b06      	ldr	r3, [sp, #24]
 801dfa6:	2b02      	cmp	r3, #2
 801dfa8:	dc51      	bgt.n	801e04e <_dtoa_r+0x91e>
 801dfaa:	e089      	b.n	801e0c0 <_dtoa_r+0x990>
 801dfac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dfae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dfb2:	e74b      	b.n	801de4c <_dtoa_r+0x71c>
 801dfb4:	9b03      	ldr	r3, [sp, #12]
 801dfb6:	1e5e      	subs	r6, r3, #1
 801dfb8:	9b07      	ldr	r3, [sp, #28]
 801dfba:	42b3      	cmp	r3, r6
 801dfbc:	bfbf      	itttt	lt
 801dfbe:	9b07      	ldrlt	r3, [sp, #28]
 801dfc0:	9607      	strlt	r6, [sp, #28]
 801dfc2:	1af2      	sublt	r2, r6, r3
 801dfc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801dfc6:	bfb6      	itet	lt
 801dfc8:	189b      	addlt	r3, r3, r2
 801dfca:	1b9e      	subge	r6, r3, r6
 801dfcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801dfce:	9b03      	ldr	r3, [sp, #12]
 801dfd0:	bfb8      	it	lt
 801dfd2:	2600      	movlt	r6, #0
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	bfb7      	itett	lt
 801dfd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801dfdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801dfe0:	1a9d      	sublt	r5, r3, r2
 801dfe2:	2300      	movlt	r3, #0
 801dfe4:	e734      	b.n	801de50 <_dtoa_r+0x720>
 801dfe6:	9e07      	ldr	r6, [sp, #28]
 801dfe8:	9d04      	ldr	r5, [sp, #16]
 801dfea:	9f08      	ldr	r7, [sp, #32]
 801dfec:	e73b      	b.n	801de66 <_dtoa_r+0x736>
 801dfee:	9a07      	ldr	r2, [sp, #28]
 801dff0:	e767      	b.n	801dec2 <_dtoa_r+0x792>
 801dff2:	9b06      	ldr	r3, [sp, #24]
 801dff4:	2b01      	cmp	r3, #1
 801dff6:	dc18      	bgt.n	801e02a <_dtoa_r+0x8fa>
 801dff8:	f1ba 0f00 	cmp.w	sl, #0
 801dffc:	d115      	bne.n	801e02a <_dtoa_r+0x8fa>
 801dffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e002:	b993      	cbnz	r3, 801e02a <_dtoa_r+0x8fa>
 801e004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e008:	0d1b      	lsrs	r3, r3, #20
 801e00a:	051b      	lsls	r3, r3, #20
 801e00c:	b183      	cbz	r3, 801e030 <_dtoa_r+0x900>
 801e00e:	9b04      	ldr	r3, [sp, #16]
 801e010:	3301      	adds	r3, #1
 801e012:	9304      	str	r3, [sp, #16]
 801e014:	9b05      	ldr	r3, [sp, #20]
 801e016:	3301      	adds	r3, #1
 801e018:	9305      	str	r3, [sp, #20]
 801e01a:	f04f 0801 	mov.w	r8, #1
 801e01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e020:	2b00      	cmp	r3, #0
 801e022:	f47f af6a 	bne.w	801defa <_dtoa_r+0x7ca>
 801e026:	2001      	movs	r0, #1
 801e028:	e76f      	b.n	801df0a <_dtoa_r+0x7da>
 801e02a:	f04f 0800 	mov.w	r8, #0
 801e02e:	e7f6      	b.n	801e01e <_dtoa_r+0x8ee>
 801e030:	4698      	mov	r8, r3
 801e032:	e7f4      	b.n	801e01e <_dtoa_r+0x8ee>
 801e034:	f43f af7d 	beq.w	801df32 <_dtoa_r+0x802>
 801e038:	4618      	mov	r0, r3
 801e03a:	301c      	adds	r0, #28
 801e03c:	e772      	b.n	801df24 <_dtoa_r+0x7f4>
 801e03e:	9b03      	ldr	r3, [sp, #12]
 801e040:	2b00      	cmp	r3, #0
 801e042:	dc37      	bgt.n	801e0b4 <_dtoa_r+0x984>
 801e044:	9b06      	ldr	r3, [sp, #24]
 801e046:	2b02      	cmp	r3, #2
 801e048:	dd34      	ble.n	801e0b4 <_dtoa_r+0x984>
 801e04a:	9b03      	ldr	r3, [sp, #12]
 801e04c:	9302      	str	r3, [sp, #8]
 801e04e:	9b02      	ldr	r3, [sp, #8]
 801e050:	b96b      	cbnz	r3, 801e06e <_dtoa_r+0x93e>
 801e052:	4631      	mov	r1, r6
 801e054:	2205      	movs	r2, #5
 801e056:	4620      	mov	r0, r4
 801e058:	f000 ff7a 	bl	801ef50 <__multadd>
 801e05c:	4601      	mov	r1, r0
 801e05e:	4606      	mov	r6, r0
 801e060:	ee18 0a10 	vmov	r0, s16
 801e064:	f001 f9de 	bl	801f424 <__mcmp>
 801e068:	2800      	cmp	r0, #0
 801e06a:	f73f adbb 	bgt.w	801dbe4 <_dtoa_r+0x4b4>
 801e06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e070:	9d01      	ldr	r5, [sp, #4]
 801e072:	43db      	mvns	r3, r3
 801e074:	9300      	str	r3, [sp, #0]
 801e076:	f04f 0800 	mov.w	r8, #0
 801e07a:	4631      	mov	r1, r6
 801e07c:	4620      	mov	r0, r4
 801e07e:	f000 ff45 	bl	801ef0c <_Bfree>
 801e082:	2f00      	cmp	r7, #0
 801e084:	f43f aea4 	beq.w	801ddd0 <_dtoa_r+0x6a0>
 801e088:	f1b8 0f00 	cmp.w	r8, #0
 801e08c:	d005      	beq.n	801e09a <_dtoa_r+0x96a>
 801e08e:	45b8      	cmp	r8, r7
 801e090:	d003      	beq.n	801e09a <_dtoa_r+0x96a>
 801e092:	4641      	mov	r1, r8
 801e094:	4620      	mov	r0, r4
 801e096:	f000 ff39 	bl	801ef0c <_Bfree>
 801e09a:	4639      	mov	r1, r7
 801e09c:	4620      	mov	r0, r4
 801e09e:	f000 ff35 	bl	801ef0c <_Bfree>
 801e0a2:	e695      	b.n	801ddd0 <_dtoa_r+0x6a0>
 801e0a4:	2600      	movs	r6, #0
 801e0a6:	4637      	mov	r7, r6
 801e0a8:	e7e1      	b.n	801e06e <_dtoa_r+0x93e>
 801e0aa:	9700      	str	r7, [sp, #0]
 801e0ac:	4637      	mov	r7, r6
 801e0ae:	e599      	b.n	801dbe4 <_dtoa_r+0x4b4>
 801e0b0:	40240000 	.word	0x40240000
 801e0b4:	9b08      	ldr	r3, [sp, #32]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	f000 80ca 	beq.w	801e250 <_dtoa_r+0xb20>
 801e0bc:	9b03      	ldr	r3, [sp, #12]
 801e0be:	9302      	str	r3, [sp, #8]
 801e0c0:	2d00      	cmp	r5, #0
 801e0c2:	dd05      	ble.n	801e0d0 <_dtoa_r+0x9a0>
 801e0c4:	4639      	mov	r1, r7
 801e0c6:	462a      	mov	r2, r5
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f001 f93b 	bl	801f344 <__lshift>
 801e0ce:	4607      	mov	r7, r0
 801e0d0:	f1b8 0f00 	cmp.w	r8, #0
 801e0d4:	d05b      	beq.n	801e18e <_dtoa_r+0xa5e>
 801e0d6:	6879      	ldr	r1, [r7, #4]
 801e0d8:	4620      	mov	r0, r4
 801e0da:	f000 fed7 	bl	801ee8c <_Balloc>
 801e0de:	4605      	mov	r5, r0
 801e0e0:	b928      	cbnz	r0, 801e0ee <_dtoa_r+0x9be>
 801e0e2:	4b87      	ldr	r3, [pc, #540]	; (801e300 <_dtoa_r+0xbd0>)
 801e0e4:	4602      	mov	r2, r0
 801e0e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e0ea:	f7ff bb3b 	b.w	801d764 <_dtoa_r+0x34>
 801e0ee:	693a      	ldr	r2, [r7, #16]
 801e0f0:	3202      	adds	r2, #2
 801e0f2:	0092      	lsls	r2, r2, #2
 801e0f4:	f107 010c 	add.w	r1, r7, #12
 801e0f8:	300c      	adds	r0, #12
 801e0fa:	f7fd f9e7 	bl	801b4cc <memcpy>
 801e0fe:	2201      	movs	r2, #1
 801e100:	4629      	mov	r1, r5
 801e102:	4620      	mov	r0, r4
 801e104:	f001 f91e 	bl	801f344 <__lshift>
 801e108:	9b01      	ldr	r3, [sp, #4]
 801e10a:	f103 0901 	add.w	r9, r3, #1
 801e10e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e112:	4413      	add	r3, r2
 801e114:	9305      	str	r3, [sp, #20]
 801e116:	f00a 0301 	and.w	r3, sl, #1
 801e11a:	46b8      	mov	r8, r7
 801e11c:	9304      	str	r3, [sp, #16]
 801e11e:	4607      	mov	r7, r0
 801e120:	4631      	mov	r1, r6
 801e122:	ee18 0a10 	vmov	r0, s16
 801e126:	f7ff fa75 	bl	801d614 <quorem>
 801e12a:	4641      	mov	r1, r8
 801e12c:	9002      	str	r0, [sp, #8]
 801e12e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e132:	ee18 0a10 	vmov	r0, s16
 801e136:	f001 f975 	bl	801f424 <__mcmp>
 801e13a:	463a      	mov	r2, r7
 801e13c:	9003      	str	r0, [sp, #12]
 801e13e:	4631      	mov	r1, r6
 801e140:	4620      	mov	r0, r4
 801e142:	f001 f98b 	bl	801f45c <__mdiff>
 801e146:	68c2      	ldr	r2, [r0, #12]
 801e148:	f109 3bff 	add.w	fp, r9, #4294967295
 801e14c:	4605      	mov	r5, r0
 801e14e:	bb02      	cbnz	r2, 801e192 <_dtoa_r+0xa62>
 801e150:	4601      	mov	r1, r0
 801e152:	ee18 0a10 	vmov	r0, s16
 801e156:	f001 f965 	bl	801f424 <__mcmp>
 801e15a:	4602      	mov	r2, r0
 801e15c:	4629      	mov	r1, r5
 801e15e:	4620      	mov	r0, r4
 801e160:	9207      	str	r2, [sp, #28]
 801e162:	f000 fed3 	bl	801ef0c <_Bfree>
 801e166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e16a:	ea43 0102 	orr.w	r1, r3, r2
 801e16e:	9b04      	ldr	r3, [sp, #16]
 801e170:	430b      	orrs	r3, r1
 801e172:	464d      	mov	r5, r9
 801e174:	d10f      	bne.n	801e196 <_dtoa_r+0xa66>
 801e176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e17a:	d02a      	beq.n	801e1d2 <_dtoa_r+0xaa2>
 801e17c:	9b03      	ldr	r3, [sp, #12]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	dd02      	ble.n	801e188 <_dtoa_r+0xa58>
 801e182:	9b02      	ldr	r3, [sp, #8]
 801e184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801e188:	f88b a000 	strb.w	sl, [fp]
 801e18c:	e775      	b.n	801e07a <_dtoa_r+0x94a>
 801e18e:	4638      	mov	r0, r7
 801e190:	e7ba      	b.n	801e108 <_dtoa_r+0x9d8>
 801e192:	2201      	movs	r2, #1
 801e194:	e7e2      	b.n	801e15c <_dtoa_r+0xa2c>
 801e196:	9b03      	ldr	r3, [sp, #12]
 801e198:	2b00      	cmp	r3, #0
 801e19a:	db04      	blt.n	801e1a6 <_dtoa_r+0xa76>
 801e19c:	9906      	ldr	r1, [sp, #24]
 801e19e:	430b      	orrs	r3, r1
 801e1a0:	9904      	ldr	r1, [sp, #16]
 801e1a2:	430b      	orrs	r3, r1
 801e1a4:	d122      	bne.n	801e1ec <_dtoa_r+0xabc>
 801e1a6:	2a00      	cmp	r2, #0
 801e1a8:	ddee      	ble.n	801e188 <_dtoa_r+0xa58>
 801e1aa:	ee18 1a10 	vmov	r1, s16
 801e1ae:	2201      	movs	r2, #1
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	f001 f8c7 	bl	801f344 <__lshift>
 801e1b6:	4631      	mov	r1, r6
 801e1b8:	ee08 0a10 	vmov	s16, r0
 801e1bc:	f001 f932 	bl	801f424 <__mcmp>
 801e1c0:	2800      	cmp	r0, #0
 801e1c2:	dc03      	bgt.n	801e1cc <_dtoa_r+0xa9c>
 801e1c4:	d1e0      	bne.n	801e188 <_dtoa_r+0xa58>
 801e1c6:	f01a 0f01 	tst.w	sl, #1
 801e1ca:	d0dd      	beq.n	801e188 <_dtoa_r+0xa58>
 801e1cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e1d0:	d1d7      	bne.n	801e182 <_dtoa_r+0xa52>
 801e1d2:	2339      	movs	r3, #57	; 0x39
 801e1d4:	f88b 3000 	strb.w	r3, [fp]
 801e1d8:	462b      	mov	r3, r5
 801e1da:	461d      	mov	r5, r3
 801e1dc:	3b01      	subs	r3, #1
 801e1de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e1e2:	2a39      	cmp	r2, #57	; 0x39
 801e1e4:	d071      	beq.n	801e2ca <_dtoa_r+0xb9a>
 801e1e6:	3201      	adds	r2, #1
 801e1e8:	701a      	strb	r2, [r3, #0]
 801e1ea:	e746      	b.n	801e07a <_dtoa_r+0x94a>
 801e1ec:	2a00      	cmp	r2, #0
 801e1ee:	dd07      	ble.n	801e200 <_dtoa_r+0xad0>
 801e1f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e1f4:	d0ed      	beq.n	801e1d2 <_dtoa_r+0xaa2>
 801e1f6:	f10a 0301 	add.w	r3, sl, #1
 801e1fa:	f88b 3000 	strb.w	r3, [fp]
 801e1fe:	e73c      	b.n	801e07a <_dtoa_r+0x94a>
 801e200:	9b05      	ldr	r3, [sp, #20]
 801e202:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e206:	4599      	cmp	r9, r3
 801e208:	d047      	beq.n	801e29a <_dtoa_r+0xb6a>
 801e20a:	ee18 1a10 	vmov	r1, s16
 801e20e:	2300      	movs	r3, #0
 801e210:	220a      	movs	r2, #10
 801e212:	4620      	mov	r0, r4
 801e214:	f000 fe9c 	bl	801ef50 <__multadd>
 801e218:	45b8      	cmp	r8, r7
 801e21a:	ee08 0a10 	vmov	s16, r0
 801e21e:	f04f 0300 	mov.w	r3, #0
 801e222:	f04f 020a 	mov.w	r2, #10
 801e226:	4641      	mov	r1, r8
 801e228:	4620      	mov	r0, r4
 801e22a:	d106      	bne.n	801e23a <_dtoa_r+0xb0a>
 801e22c:	f000 fe90 	bl	801ef50 <__multadd>
 801e230:	4680      	mov	r8, r0
 801e232:	4607      	mov	r7, r0
 801e234:	f109 0901 	add.w	r9, r9, #1
 801e238:	e772      	b.n	801e120 <_dtoa_r+0x9f0>
 801e23a:	f000 fe89 	bl	801ef50 <__multadd>
 801e23e:	4639      	mov	r1, r7
 801e240:	4680      	mov	r8, r0
 801e242:	2300      	movs	r3, #0
 801e244:	220a      	movs	r2, #10
 801e246:	4620      	mov	r0, r4
 801e248:	f000 fe82 	bl	801ef50 <__multadd>
 801e24c:	4607      	mov	r7, r0
 801e24e:	e7f1      	b.n	801e234 <_dtoa_r+0xb04>
 801e250:	9b03      	ldr	r3, [sp, #12]
 801e252:	9302      	str	r3, [sp, #8]
 801e254:	9d01      	ldr	r5, [sp, #4]
 801e256:	ee18 0a10 	vmov	r0, s16
 801e25a:	4631      	mov	r1, r6
 801e25c:	f7ff f9da 	bl	801d614 <quorem>
 801e260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e264:	9b01      	ldr	r3, [sp, #4]
 801e266:	f805 ab01 	strb.w	sl, [r5], #1
 801e26a:	1aea      	subs	r2, r5, r3
 801e26c:	9b02      	ldr	r3, [sp, #8]
 801e26e:	4293      	cmp	r3, r2
 801e270:	dd09      	ble.n	801e286 <_dtoa_r+0xb56>
 801e272:	ee18 1a10 	vmov	r1, s16
 801e276:	2300      	movs	r3, #0
 801e278:	220a      	movs	r2, #10
 801e27a:	4620      	mov	r0, r4
 801e27c:	f000 fe68 	bl	801ef50 <__multadd>
 801e280:	ee08 0a10 	vmov	s16, r0
 801e284:	e7e7      	b.n	801e256 <_dtoa_r+0xb26>
 801e286:	9b02      	ldr	r3, [sp, #8]
 801e288:	2b00      	cmp	r3, #0
 801e28a:	bfc8      	it	gt
 801e28c:	461d      	movgt	r5, r3
 801e28e:	9b01      	ldr	r3, [sp, #4]
 801e290:	bfd8      	it	le
 801e292:	2501      	movle	r5, #1
 801e294:	441d      	add	r5, r3
 801e296:	f04f 0800 	mov.w	r8, #0
 801e29a:	ee18 1a10 	vmov	r1, s16
 801e29e:	2201      	movs	r2, #1
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	f001 f84f 	bl	801f344 <__lshift>
 801e2a6:	4631      	mov	r1, r6
 801e2a8:	ee08 0a10 	vmov	s16, r0
 801e2ac:	f001 f8ba 	bl	801f424 <__mcmp>
 801e2b0:	2800      	cmp	r0, #0
 801e2b2:	dc91      	bgt.n	801e1d8 <_dtoa_r+0xaa8>
 801e2b4:	d102      	bne.n	801e2bc <_dtoa_r+0xb8c>
 801e2b6:	f01a 0f01 	tst.w	sl, #1
 801e2ba:	d18d      	bne.n	801e1d8 <_dtoa_r+0xaa8>
 801e2bc:	462b      	mov	r3, r5
 801e2be:	461d      	mov	r5, r3
 801e2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e2c4:	2a30      	cmp	r2, #48	; 0x30
 801e2c6:	d0fa      	beq.n	801e2be <_dtoa_r+0xb8e>
 801e2c8:	e6d7      	b.n	801e07a <_dtoa_r+0x94a>
 801e2ca:	9a01      	ldr	r2, [sp, #4]
 801e2cc:	429a      	cmp	r2, r3
 801e2ce:	d184      	bne.n	801e1da <_dtoa_r+0xaaa>
 801e2d0:	9b00      	ldr	r3, [sp, #0]
 801e2d2:	3301      	adds	r3, #1
 801e2d4:	9300      	str	r3, [sp, #0]
 801e2d6:	2331      	movs	r3, #49	; 0x31
 801e2d8:	7013      	strb	r3, [r2, #0]
 801e2da:	e6ce      	b.n	801e07a <_dtoa_r+0x94a>
 801e2dc:	4b09      	ldr	r3, [pc, #36]	; (801e304 <_dtoa_r+0xbd4>)
 801e2de:	f7ff ba95 	b.w	801d80c <_dtoa_r+0xdc>
 801e2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	f47f aa6e 	bne.w	801d7c6 <_dtoa_r+0x96>
 801e2ea:	4b07      	ldr	r3, [pc, #28]	; (801e308 <_dtoa_r+0xbd8>)
 801e2ec:	f7ff ba8e 	b.w	801d80c <_dtoa_r+0xdc>
 801e2f0:	9b02      	ldr	r3, [sp, #8]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	dcae      	bgt.n	801e254 <_dtoa_r+0xb24>
 801e2f6:	9b06      	ldr	r3, [sp, #24]
 801e2f8:	2b02      	cmp	r3, #2
 801e2fa:	f73f aea8 	bgt.w	801e04e <_dtoa_r+0x91e>
 801e2fe:	e7a9      	b.n	801e254 <_dtoa_r+0xb24>
 801e300:	08022169 	.word	0x08022169
 801e304:	08021ed4 	.word	0x08021ed4
 801e308:	08022101 	.word	0x08022101

0801e30c <__sflush_r>:
 801e30c:	898a      	ldrh	r2, [r1, #12]
 801e30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e312:	4605      	mov	r5, r0
 801e314:	0710      	lsls	r0, r2, #28
 801e316:	460c      	mov	r4, r1
 801e318:	d458      	bmi.n	801e3cc <__sflush_r+0xc0>
 801e31a:	684b      	ldr	r3, [r1, #4]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	dc05      	bgt.n	801e32c <__sflush_r+0x20>
 801e320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e322:	2b00      	cmp	r3, #0
 801e324:	dc02      	bgt.n	801e32c <__sflush_r+0x20>
 801e326:	2000      	movs	r0, #0
 801e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e32e:	2e00      	cmp	r6, #0
 801e330:	d0f9      	beq.n	801e326 <__sflush_r+0x1a>
 801e332:	2300      	movs	r3, #0
 801e334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e338:	682f      	ldr	r7, [r5, #0]
 801e33a:	602b      	str	r3, [r5, #0]
 801e33c:	d032      	beq.n	801e3a4 <__sflush_r+0x98>
 801e33e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e340:	89a3      	ldrh	r3, [r4, #12]
 801e342:	075a      	lsls	r2, r3, #29
 801e344:	d505      	bpl.n	801e352 <__sflush_r+0x46>
 801e346:	6863      	ldr	r3, [r4, #4]
 801e348:	1ac0      	subs	r0, r0, r3
 801e34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e34c:	b10b      	cbz	r3, 801e352 <__sflush_r+0x46>
 801e34e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e350:	1ac0      	subs	r0, r0, r3
 801e352:	2300      	movs	r3, #0
 801e354:	4602      	mov	r2, r0
 801e356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e358:	6a21      	ldr	r1, [r4, #32]
 801e35a:	4628      	mov	r0, r5
 801e35c:	47b0      	blx	r6
 801e35e:	1c43      	adds	r3, r0, #1
 801e360:	89a3      	ldrh	r3, [r4, #12]
 801e362:	d106      	bne.n	801e372 <__sflush_r+0x66>
 801e364:	6829      	ldr	r1, [r5, #0]
 801e366:	291d      	cmp	r1, #29
 801e368:	d82c      	bhi.n	801e3c4 <__sflush_r+0xb8>
 801e36a:	4a2a      	ldr	r2, [pc, #168]	; (801e414 <__sflush_r+0x108>)
 801e36c:	40ca      	lsrs	r2, r1
 801e36e:	07d6      	lsls	r6, r2, #31
 801e370:	d528      	bpl.n	801e3c4 <__sflush_r+0xb8>
 801e372:	2200      	movs	r2, #0
 801e374:	6062      	str	r2, [r4, #4]
 801e376:	04d9      	lsls	r1, r3, #19
 801e378:	6922      	ldr	r2, [r4, #16]
 801e37a:	6022      	str	r2, [r4, #0]
 801e37c:	d504      	bpl.n	801e388 <__sflush_r+0x7c>
 801e37e:	1c42      	adds	r2, r0, #1
 801e380:	d101      	bne.n	801e386 <__sflush_r+0x7a>
 801e382:	682b      	ldr	r3, [r5, #0]
 801e384:	b903      	cbnz	r3, 801e388 <__sflush_r+0x7c>
 801e386:	6560      	str	r0, [r4, #84]	; 0x54
 801e388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e38a:	602f      	str	r7, [r5, #0]
 801e38c:	2900      	cmp	r1, #0
 801e38e:	d0ca      	beq.n	801e326 <__sflush_r+0x1a>
 801e390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e394:	4299      	cmp	r1, r3
 801e396:	d002      	beq.n	801e39e <__sflush_r+0x92>
 801e398:	4628      	mov	r0, r5
 801e39a:	f7fd f8c7 	bl	801b52c <_free_r>
 801e39e:	2000      	movs	r0, #0
 801e3a0:	6360      	str	r0, [r4, #52]	; 0x34
 801e3a2:	e7c1      	b.n	801e328 <__sflush_r+0x1c>
 801e3a4:	6a21      	ldr	r1, [r4, #32]
 801e3a6:	2301      	movs	r3, #1
 801e3a8:	4628      	mov	r0, r5
 801e3aa:	47b0      	blx	r6
 801e3ac:	1c41      	adds	r1, r0, #1
 801e3ae:	d1c7      	bne.n	801e340 <__sflush_r+0x34>
 801e3b0:	682b      	ldr	r3, [r5, #0]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d0c4      	beq.n	801e340 <__sflush_r+0x34>
 801e3b6:	2b1d      	cmp	r3, #29
 801e3b8:	d001      	beq.n	801e3be <__sflush_r+0xb2>
 801e3ba:	2b16      	cmp	r3, #22
 801e3bc:	d101      	bne.n	801e3c2 <__sflush_r+0xb6>
 801e3be:	602f      	str	r7, [r5, #0]
 801e3c0:	e7b1      	b.n	801e326 <__sflush_r+0x1a>
 801e3c2:	89a3      	ldrh	r3, [r4, #12]
 801e3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3c8:	81a3      	strh	r3, [r4, #12]
 801e3ca:	e7ad      	b.n	801e328 <__sflush_r+0x1c>
 801e3cc:	690f      	ldr	r7, [r1, #16]
 801e3ce:	2f00      	cmp	r7, #0
 801e3d0:	d0a9      	beq.n	801e326 <__sflush_r+0x1a>
 801e3d2:	0793      	lsls	r3, r2, #30
 801e3d4:	680e      	ldr	r6, [r1, #0]
 801e3d6:	bf08      	it	eq
 801e3d8:	694b      	ldreq	r3, [r1, #20]
 801e3da:	600f      	str	r7, [r1, #0]
 801e3dc:	bf18      	it	ne
 801e3de:	2300      	movne	r3, #0
 801e3e0:	eba6 0807 	sub.w	r8, r6, r7
 801e3e4:	608b      	str	r3, [r1, #8]
 801e3e6:	f1b8 0f00 	cmp.w	r8, #0
 801e3ea:	dd9c      	ble.n	801e326 <__sflush_r+0x1a>
 801e3ec:	6a21      	ldr	r1, [r4, #32]
 801e3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e3f0:	4643      	mov	r3, r8
 801e3f2:	463a      	mov	r2, r7
 801e3f4:	4628      	mov	r0, r5
 801e3f6:	47b0      	blx	r6
 801e3f8:	2800      	cmp	r0, #0
 801e3fa:	dc06      	bgt.n	801e40a <__sflush_r+0xfe>
 801e3fc:	89a3      	ldrh	r3, [r4, #12]
 801e3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e402:	81a3      	strh	r3, [r4, #12]
 801e404:	f04f 30ff 	mov.w	r0, #4294967295
 801e408:	e78e      	b.n	801e328 <__sflush_r+0x1c>
 801e40a:	4407      	add	r7, r0
 801e40c:	eba8 0800 	sub.w	r8, r8, r0
 801e410:	e7e9      	b.n	801e3e6 <__sflush_r+0xda>
 801e412:	bf00      	nop
 801e414:	20400001 	.word	0x20400001

0801e418 <_fflush_r>:
 801e418:	b538      	push	{r3, r4, r5, lr}
 801e41a:	690b      	ldr	r3, [r1, #16]
 801e41c:	4605      	mov	r5, r0
 801e41e:	460c      	mov	r4, r1
 801e420:	b913      	cbnz	r3, 801e428 <_fflush_r+0x10>
 801e422:	2500      	movs	r5, #0
 801e424:	4628      	mov	r0, r5
 801e426:	bd38      	pop	{r3, r4, r5, pc}
 801e428:	b118      	cbz	r0, 801e432 <_fflush_r+0x1a>
 801e42a:	6983      	ldr	r3, [r0, #24]
 801e42c:	b90b      	cbnz	r3, 801e432 <_fflush_r+0x1a>
 801e42e:	f000 f887 	bl	801e540 <__sinit>
 801e432:	4b14      	ldr	r3, [pc, #80]	; (801e484 <_fflush_r+0x6c>)
 801e434:	429c      	cmp	r4, r3
 801e436:	d11b      	bne.n	801e470 <_fflush_r+0x58>
 801e438:	686c      	ldr	r4, [r5, #4]
 801e43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d0ef      	beq.n	801e422 <_fflush_r+0xa>
 801e442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e444:	07d0      	lsls	r0, r2, #31
 801e446:	d404      	bmi.n	801e452 <_fflush_r+0x3a>
 801e448:	0599      	lsls	r1, r3, #22
 801e44a:	d402      	bmi.n	801e452 <_fflush_r+0x3a>
 801e44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e44e:	f7fd f832 	bl	801b4b6 <__retarget_lock_acquire_recursive>
 801e452:	4628      	mov	r0, r5
 801e454:	4621      	mov	r1, r4
 801e456:	f7ff ff59 	bl	801e30c <__sflush_r>
 801e45a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e45c:	07da      	lsls	r2, r3, #31
 801e45e:	4605      	mov	r5, r0
 801e460:	d4e0      	bmi.n	801e424 <_fflush_r+0xc>
 801e462:	89a3      	ldrh	r3, [r4, #12]
 801e464:	059b      	lsls	r3, r3, #22
 801e466:	d4dd      	bmi.n	801e424 <_fflush_r+0xc>
 801e468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e46a:	f7fd f825 	bl	801b4b8 <__retarget_lock_release_recursive>
 801e46e:	e7d9      	b.n	801e424 <_fflush_r+0xc>
 801e470:	4b05      	ldr	r3, [pc, #20]	; (801e488 <_fflush_r+0x70>)
 801e472:	429c      	cmp	r4, r3
 801e474:	d101      	bne.n	801e47a <_fflush_r+0x62>
 801e476:	68ac      	ldr	r4, [r5, #8]
 801e478:	e7df      	b.n	801e43a <_fflush_r+0x22>
 801e47a:	4b04      	ldr	r3, [pc, #16]	; (801e48c <_fflush_r+0x74>)
 801e47c:	429c      	cmp	r4, r3
 801e47e:	bf08      	it	eq
 801e480:	68ec      	ldreq	r4, [r5, #12]
 801e482:	e7da      	b.n	801e43a <_fflush_r+0x22>
 801e484:	0802219c 	.word	0x0802219c
 801e488:	080221bc 	.word	0x080221bc
 801e48c:	0802217c 	.word	0x0802217c

0801e490 <std>:
 801e490:	2300      	movs	r3, #0
 801e492:	b510      	push	{r4, lr}
 801e494:	4604      	mov	r4, r0
 801e496:	e9c0 3300 	strd	r3, r3, [r0]
 801e49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e49e:	6083      	str	r3, [r0, #8]
 801e4a0:	8181      	strh	r1, [r0, #12]
 801e4a2:	6643      	str	r3, [r0, #100]	; 0x64
 801e4a4:	81c2      	strh	r2, [r0, #14]
 801e4a6:	6183      	str	r3, [r0, #24]
 801e4a8:	4619      	mov	r1, r3
 801e4aa:	2208      	movs	r2, #8
 801e4ac:	305c      	adds	r0, #92	; 0x5c
 801e4ae:	f7fd f835 	bl	801b51c <memset>
 801e4b2:	4b05      	ldr	r3, [pc, #20]	; (801e4c8 <std+0x38>)
 801e4b4:	6263      	str	r3, [r4, #36]	; 0x24
 801e4b6:	4b05      	ldr	r3, [pc, #20]	; (801e4cc <std+0x3c>)
 801e4b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e4ba:	4b05      	ldr	r3, [pc, #20]	; (801e4d0 <std+0x40>)
 801e4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e4be:	4b05      	ldr	r3, [pc, #20]	; (801e4d4 <std+0x44>)
 801e4c0:	6224      	str	r4, [r4, #32]
 801e4c2:	6323      	str	r3, [r4, #48]	; 0x30
 801e4c4:	bd10      	pop	{r4, pc}
 801e4c6:	bf00      	nop
 801e4c8:	0801fdb9 	.word	0x0801fdb9
 801e4cc:	0801fddb 	.word	0x0801fddb
 801e4d0:	0801fe13 	.word	0x0801fe13
 801e4d4:	0801fe37 	.word	0x0801fe37

0801e4d8 <_cleanup_r>:
 801e4d8:	4901      	ldr	r1, [pc, #4]	; (801e4e0 <_cleanup_r+0x8>)
 801e4da:	f000 b8c1 	b.w	801e660 <_fwalk_reent>
 801e4de:	bf00      	nop
 801e4e0:	0801e419 	.word	0x0801e419

0801e4e4 <__sfmoreglue>:
 801e4e4:	b570      	push	{r4, r5, r6, lr}
 801e4e6:	2268      	movs	r2, #104	; 0x68
 801e4e8:	1e4d      	subs	r5, r1, #1
 801e4ea:	4355      	muls	r5, r2
 801e4ec:	460e      	mov	r6, r1
 801e4ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e4f2:	f7fd f887 	bl	801b604 <_malloc_r>
 801e4f6:	4604      	mov	r4, r0
 801e4f8:	b140      	cbz	r0, 801e50c <__sfmoreglue+0x28>
 801e4fa:	2100      	movs	r1, #0
 801e4fc:	e9c0 1600 	strd	r1, r6, [r0]
 801e500:	300c      	adds	r0, #12
 801e502:	60a0      	str	r0, [r4, #8]
 801e504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e508:	f7fd f808 	bl	801b51c <memset>
 801e50c:	4620      	mov	r0, r4
 801e50e:	bd70      	pop	{r4, r5, r6, pc}

0801e510 <__sfp_lock_acquire>:
 801e510:	4801      	ldr	r0, [pc, #4]	; (801e518 <__sfp_lock_acquire+0x8>)
 801e512:	f7fc bfd0 	b.w	801b4b6 <__retarget_lock_acquire_recursive>
 801e516:	bf00      	nop
 801e518:	20003611 	.word	0x20003611

0801e51c <__sfp_lock_release>:
 801e51c:	4801      	ldr	r0, [pc, #4]	; (801e524 <__sfp_lock_release+0x8>)
 801e51e:	f7fc bfcb 	b.w	801b4b8 <__retarget_lock_release_recursive>
 801e522:	bf00      	nop
 801e524:	20003611 	.word	0x20003611

0801e528 <__sinit_lock_acquire>:
 801e528:	4801      	ldr	r0, [pc, #4]	; (801e530 <__sinit_lock_acquire+0x8>)
 801e52a:	f7fc bfc4 	b.w	801b4b6 <__retarget_lock_acquire_recursive>
 801e52e:	bf00      	nop
 801e530:	20003612 	.word	0x20003612

0801e534 <__sinit_lock_release>:
 801e534:	4801      	ldr	r0, [pc, #4]	; (801e53c <__sinit_lock_release+0x8>)
 801e536:	f7fc bfbf 	b.w	801b4b8 <__retarget_lock_release_recursive>
 801e53a:	bf00      	nop
 801e53c:	20003612 	.word	0x20003612

0801e540 <__sinit>:
 801e540:	b510      	push	{r4, lr}
 801e542:	4604      	mov	r4, r0
 801e544:	f7ff fff0 	bl	801e528 <__sinit_lock_acquire>
 801e548:	69a3      	ldr	r3, [r4, #24]
 801e54a:	b11b      	cbz	r3, 801e554 <__sinit+0x14>
 801e54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e550:	f7ff bff0 	b.w	801e534 <__sinit_lock_release>
 801e554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e558:	6523      	str	r3, [r4, #80]	; 0x50
 801e55a:	4b13      	ldr	r3, [pc, #76]	; (801e5a8 <__sinit+0x68>)
 801e55c:	4a13      	ldr	r2, [pc, #76]	; (801e5ac <__sinit+0x6c>)
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	62a2      	str	r2, [r4, #40]	; 0x28
 801e562:	42a3      	cmp	r3, r4
 801e564:	bf04      	itt	eq
 801e566:	2301      	moveq	r3, #1
 801e568:	61a3      	streq	r3, [r4, #24]
 801e56a:	4620      	mov	r0, r4
 801e56c:	f000 f820 	bl	801e5b0 <__sfp>
 801e570:	6060      	str	r0, [r4, #4]
 801e572:	4620      	mov	r0, r4
 801e574:	f000 f81c 	bl	801e5b0 <__sfp>
 801e578:	60a0      	str	r0, [r4, #8]
 801e57a:	4620      	mov	r0, r4
 801e57c:	f000 f818 	bl	801e5b0 <__sfp>
 801e580:	2200      	movs	r2, #0
 801e582:	60e0      	str	r0, [r4, #12]
 801e584:	2104      	movs	r1, #4
 801e586:	6860      	ldr	r0, [r4, #4]
 801e588:	f7ff ff82 	bl	801e490 <std>
 801e58c:	68a0      	ldr	r0, [r4, #8]
 801e58e:	2201      	movs	r2, #1
 801e590:	2109      	movs	r1, #9
 801e592:	f7ff ff7d 	bl	801e490 <std>
 801e596:	68e0      	ldr	r0, [r4, #12]
 801e598:	2202      	movs	r2, #2
 801e59a:	2112      	movs	r1, #18
 801e59c:	f7ff ff78 	bl	801e490 <std>
 801e5a0:	2301      	movs	r3, #1
 801e5a2:	61a3      	str	r3, [r4, #24]
 801e5a4:	e7d2      	b.n	801e54c <__sinit+0xc>
 801e5a6:	bf00      	nop
 801e5a8:	08021ec0 	.word	0x08021ec0
 801e5ac:	0801e4d9 	.word	0x0801e4d9

0801e5b0 <__sfp>:
 801e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5b2:	4607      	mov	r7, r0
 801e5b4:	f7ff ffac 	bl	801e510 <__sfp_lock_acquire>
 801e5b8:	4b1e      	ldr	r3, [pc, #120]	; (801e634 <__sfp+0x84>)
 801e5ba:	681e      	ldr	r6, [r3, #0]
 801e5bc:	69b3      	ldr	r3, [r6, #24]
 801e5be:	b913      	cbnz	r3, 801e5c6 <__sfp+0x16>
 801e5c0:	4630      	mov	r0, r6
 801e5c2:	f7ff ffbd 	bl	801e540 <__sinit>
 801e5c6:	3648      	adds	r6, #72	; 0x48
 801e5c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e5cc:	3b01      	subs	r3, #1
 801e5ce:	d503      	bpl.n	801e5d8 <__sfp+0x28>
 801e5d0:	6833      	ldr	r3, [r6, #0]
 801e5d2:	b30b      	cbz	r3, 801e618 <__sfp+0x68>
 801e5d4:	6836      	ldr	r6, [r6, #0]
 801e5d6:	e7f7      	b.n	801e5c8 <__sfp+0x18>
 801e5d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e5dc:	b9d5      	cbnz	r5, 801e614 <__sfp+0x64>
 801e5de:	4b16      	ldr	r3, [pc, #88]	; (801e638 <__sfp+0x88>)
 801e5e0:	60e3      	str	r3, [r4, #12]
 801e5e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e5e6:	6665      	str	r5, [r4, #100]	; 0x64
 801e5e8:	f7fc ff64 	bl	801b4b4 <__retarget_lock_init_recursive>
 801e5ec:	f7ff ff96 	bl	801e51c <__sfp_lock_release>
 801e5f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e5f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e5f8:	6025      	str	r5, [r4, #0]
 801e5fa:	61a5      	str	r5, [r4, #24]
 801e5fc:	2208      	movs	r2, #8
 801e5fe:	4629      	mov	r1, r5
 801e600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e604:	f7fc ff8a 	bl	801b51c <memset>
 801e608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e60c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e610:	4620      	mov	r0, r4
 801e612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e614:	3468      	adds	r4, #104	; 0x68
 801e616:	e7d9      	b.n	801e5cc <__sfp+0x1c>
 801e618:	2104      	movs	r1, #4
 801e61a:	4638      	mov	r0, r7
 801e61c:	f7ff ff62 	bl	801e4e4 <__sfmoreglue>
 801e620:	4604      	mov	r4, r0
 801e622:	6030      	str	r0, [r6, #0]
 801e624:	2800      	cmp	r0, #0
 801e626:	d1d5      	bne.n	801e5d4 <__sfp+0x24>
 801e628:	f7ff ff78 	bl	801e51c <__sfp_lock_release>
 801e62c:	230c      	movs	r3, #12
 801e62e:	603b      	str	r3, [r7, #0]
 801e630:	e7ee      	b.n	801e610 <__sfp+0x60>
 801e632:	bf00      	nop
 801e634:	08021ec0 	.word	0x08021ec0
 801e638:	ffff0001 	.word	0xffff0001

0801e63c <fiprintf>:
 801e63c:	b40e      	push	{r1, r2, r3}
 801e63e:	b503      	push	{r0, r1, lr}
 801e640:	4601      	mov	r1, r0
 801e642:	ab03      	add	r3, sp, #12
 801e644:	4805      	ldr	r0, [pc, #20]	; (801e65c <fiprintf+0x20>)
 801e646:	f853 2b04 	ldr.w	r2, [r3], #4
 801e64a:	6800      	ldr	r0, [r0, #0]
 801e64c:	9301      	str	r3, [sp, #4]
 801e64e:	f001 fa79 	bl	801fb44 <_vfiprintf_r>
 801e652:	b002      	add	sp, #8
 801e654:	f85d eb04 	ldr.w	lr, [sp], #4
 801e658:	b003      	add	sp, #12
 801e65a:	4770      	bx	lr
 801e65c:	20000144 	.word	0x20000144

0801e660 <_fwalk_reent>:
 801e660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e664:	4606      	mov	r6, r0
 801e666:	4688      	mov	r8, r1
 801e668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e66c:	2700      	movs	r7, #0
 801e66e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e672:	f1b9 0901 	subs.w	r9, r9, #1
 801e676:	d505      	bpl.n	801e684 <_fwalk_reent+0x24>
 801e678:	6824      	ldr	r4, [r4, #0]
 801e67a:	2c00      	cmp	r4, #0
 801e67c:	d1f7      	bne.n	801e66e <_fwalk_reent+0xe>
 801e67e:	4638      	mov	r0, r7
 801e680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e684:	89ab      	ldrh	r3, [r5, #12]
 801e686:	2b01      	cmp	r3, #1
 801e688:	d907      	bls.n	801e69a <_fwalk_reent+0x3a>
 801e68a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e68e:	3301      	adds	r3, #1
 801e690:	d003      	beq.n	801e69a <_fwalk_reent+0x3a>
 801e692:	4629      	mov	r1, r5
 801e694:	4630      	mov	r0, r6
 801e696:	47c0      	blx	r8
 801e698:	4307      	orrs	r7, r0
 801e69a:	3568      	adds	r5, #104	; 0x68
 801e69c:	e7e9      	b.n	801e672 <_fwalk_reent+0x12>

0801e69e <rshift>:
 801e69e:	6903      	ldr	r3, [r0, #16]
 801e6a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e6ac:	f100 0414 	add.w	r4, r0, #20
 801e6b0:	dd45      	ble.n	801e73e <rshift+0xa0>
 801e6b2:	f011 011f 	ands.w	r1, r1, #31
 801e6b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e6ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e6be:	d10c      	bne.n	801e6da <rshift+0x3c>
 801e6c0:	f100 0710 	add.w	r7, r0, #16
 801e6c4:	4629      	mov	r1, r5
 801e6c6:	42b1      	cmp	r1, r6
 801e6c8:	d334      	bcc.n	801e734 <rshift+0x96>
 801e6ca:	1a9b      	subs	r3, r3, r2
 801e6cc:	009b      	lsls	r3, r3, #2
 801e6ce:	1eea      	subs	r2, r5, #3
 801e6d0:	4296      	cmp	r6, r2
 801e6d2:	bf38      	it	cc
 801e6d4:	2300      	movcc	r3, #0
 801e6d6:	4423      	add	r3, r4
 801e6d8:	e015      	b.n	801e706 <rshift+0x68>
 801e6da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e6de:	f1c1 0820 	rsb	r8, r1, #32
 801e6e2:	40cf      	lsrs	r7, r1
 801e6e4:	f105 0e04 	add.w	lr, r5, #4
 801e6e8:	46a1      	mov	r9, r4
 801e6ea:	4576      	cmp	r6, lr
 801e6ec:	46f4      	mov	ip, lr
 801e6ee:	d815      	bhi.n	801e71c <rshift+0x7e>
 801e6f0:	1a9a      	subs	r2, r3, r2
 801e6f2:	0092      	lsls	r2, r2, #2
 801e6f4:	3a04      	subs	r2, #4
 801e6f6:	3501      	adds	r5, #1
 801e6f8:	42ae      	cmp	r6, r5
 801e6fa:	bf38      	it	cc
 801e6fc:	2200      	movcc	r2, #0
 801e6fe:	18a3      	adds	r3, r4, r2
 801e700:	50a7      	str	r7, [r4, r2]
 801e702:	b107      	cbz	r7, 801e706 <rshift+0x68>
 801e704:	3304      	adds	r3, #4
 801e706:	1b1a      	subs	r2, r3, r4
 801e708:	42a3      	cmp	r3, r4
 801e70a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e70e:	bf08      	it	eq
 801e710:	2300      	moveq	r3, #0
 801e712:	6102      	str	r2, [r0, #16]
 801e714:	bf08      	it	eq
 801e716:	6143      	streq	r3, [r0, #20]
 801e718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e71c:	f8dc c000 	ldr.w	ip, [ip]
 801e720:	fa0c fc08 	lsl.w	ip, ip, r8
 801e724:	ea4c 0707 	orr.w	r7, ip, r7
 801e728:	f849 7b04 	str.w	r7, [r9], #4
 801e72c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e730:	40cf      	lsrs	r7, r1
 801e732:	e7da      	b.n	801e6ea <rshift+0x4c>
 801e734:	f851 cb04 	ldr.w	ip, [r1], #4
 801e738:	f847 cf04 	str.w	ip, [r7, #4]!
 801e73c:	e7c3      	b.n	801e6c6 <rshift+0x28>
 801e73e:	4623      	mov	r3, r4
 801e740:	e7e1      	b.n	801e706 <rshift+0x68>

0801e742 <__hexdig_fun>:
 801e742:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e746:	2b09      	cmp	r3, #9
 801e748:	d802      	bhi.n	801e750 <__hexdig_fun+0xe>
 801e74a:	3820      	subs	r0, #32
 801e74c:	b2c0      	uxtb	r0, r0
 801e74e:	4770      	bx	lr
 801e750:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e754:	2b05      	cmp	r3, #5
 801e756:	d801      	bhi.n	801e75c <__hexdig_fun+0x1a>
 801e758:	3847      	subs	r0, #71	; 0x47
 801e75a:	e7f7      	b.n	801e74c <__hexdig_fun+0xa>
 801e75c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e760:	2b05      	cmp	r3, #5
 801e762:	d801      	bhi.n	801e768 <__hexdig_fun+0x26>
 801e764:	3827      	subs	r0, #39	; 0x27
 801e766:	e7f1      	b.n	801e74c <__hexdig_fun+0xa>
 801e768:	2000      	movs	r0, #0
 801e76a:	4770      	bx	lr

0801e76c <__gethex>:
 801e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e770:	ed2d 8b02 	vpush	{d8}
 801e774:	b089      	sub	sp, #36	; 0x24
 801e776:	ee08 0a10 	vmov	s16, r0
 801e77a:	9304      	str	r3, [sp, #16]
 801e77c:	4bb4      	ldr	r3, [pc, #720]	; (801ea50 <__gethex+0x2e4>)
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	9301      	str	r3, [sp, #4]
 801e782:	4618      	mov	r0, r3
 801e784:	468b      	mov	fp, r1
 801e786:	4690      	mov	r8, r2
 801e788:	f7e1 fd34 	bl	80001f4 <strlen>
 801e78c:	9b01      	ldr	r3, [sp, #4]
 801e78e:	f8db 2000 	ldr.w	r2, [fp]
 801e792:	4403      	add	r3, r0
 801e794:	4682      	mov	sl, r0
 801e796:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e79a:	9305      	str	r3, [sp, #20]
 801e79c:	1c93      	adds	r3, r2, #2
 801e79e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e7a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e7a6:	32fe      	adds	r2, #254	; 0xfe
 801e7a8:	18d1      	adds	r1, r2, r3
 801e7aa:	461f      	mov	r7, r3
 801e7ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e7b0:	9100      	str	r1, [sp, #0]
 801e7b2:	2830      	cmp	r0, #48	; 0x30
 801e7b4:	d0f8      	beq.n	801e7a8 <__gethex+0x3c>
 801e7b6:	f7ff ffc4 	bl	801e742 <__hexdig_fun>
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	2800      	cmp	r0, #0
 801e7be:	d13a      	bne.n	801e836 <__gethex+0xca>
 801e7c0:	9901      	ldr	r1, [sp, #4]
 801e7c2:	4652      	mov	r2, sl
 801e7c4:	4638      	mov	r0, r7
 801e7c6:	f001 fb3a 	bl	801fe3e <strncmp>
 801e7ca:	4605      	mov	r5, r0
 801e7cc:	2800      	cmp	r0, #0
 801e7ce:	d168      	bne.n	801e8a2 <__gethex+0x136>
 801e7d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e7d4:	eb07 060a 	add.w	r6, r7, sl
 801e7d8:	f7ff ffb3 	bl	801e742 <__hexdig_fun>
 801e7dc:	2800      	cmp	r0, #0
 801e7de:	d062      	beq.n	801e8a6 <__gethex+0x13a>
 801e7e0:	4633      	mov	r3, r6
 801e7e2:	7818      	ldrb	r0, [r3, #0]
 801e7e4:	2830      	cmp	r0, #48	; 0x30
 801e7e6:	461f      	mov	r7, r3
 801e7e8:	f103 0301 	add.w	r3, r3, #1
 801e7ec:	d0f9      	beq.n	801e7e2 <__gethex+0x76>
 801e7ee:	f7ff ffa8 	bl	801e742 <__hexdig_fun>
 801e7f2:	2301      	movs	r3, #1
 801e7f4:	fab0 f480 	clz	r4, r0
 801e7f8:	0964      	lsrs	r4, r4, #5
 801e7fa:	4635      	mov	r5, r6
 801e7fc:	9300      	str	r3, [sp, #0]
 801e7fe:	463a      	mov	r2, r7
 801e800:	4616      	mov	r6, r2
 801e802:	3201      	adds	r2, #1
 801e804:	7830      	ldrb	r0, [r6, #0]
 801e806:	f7ff ff9c 	bl	801e742 <__hexdig_fun>
 801e80a:	2800      	cmp	r0, #0
 801e80c:	d1f8      	bne.n	801e800 <__gethex+0x94>
 801e80e:	9901      	ldr	r1, [sp, #4]
 801e810:	4652      	mov	r2, sl
 801e812:	4630      	mov	r0, r6
 801e814:	f001 fb13 	bl	801fe3e <strncmp>
 801e818:	b980      	cbnz	r0, 801e83c <__gethex+0xd0>
 801e81a:	b94d      	cbnz	r5, 801e830 <__gethex+0xc4>
 801e81c:	eb06 050a 	add.w	r5, r6, sl
 801e820:	462a      	mov	r2, r5
 801e822:	4616      	mov	r6, r2
 801e824:	3201      	adds	r2, #1
 801e826:	7830      	ldrb	r0, [r6, #0]
 801e828:	f7ff ff8b 	bl	801e742 <__hexdig_fun>
 801e82c:	2800      	cmp	r0, #0
 801e82e:	d1f8      	bne.n	801e822 <__gethex+0xb6>
 801e830:	1bad      	subs	r5, r5, r6
 801e832:	00ad      	lsls	r5, r5, #2
 801e834:	e004      	b.n	801e840 <__gethex+0xd4>
 801e836:	2400      	movs	r4, #0
 801e838:	4625      	mov	r5, r4
 801e83a:	e7e0      	b.n	801e7fe <__gethex+0x92>
 801e83c:	2d00      	cmp	r5, #0
 801e83e:	d1f7      	bne.n	801e830 <__gethex+0xc4>
 801e840:	7833      	ldrb	r3, [r6, #0]
 801e842:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e846:	2b50      	cmp	r3, #80	; 0x50
 801e848:	d13b      	bne.n	801e8c2 <__gethex+0x156>
 801e84a:	7873      	ldrb	r3, [r6, #1]
 801e84c:	2b2b      	cmp	r3, #43	; 0x2b
 801e84e:	d02c      	beq.n	801e8aa <__gethex+0x13e>
 801e850:	2b2d      	cmp	r3, #45	; 0x2d
 801e852:	d02e      	beq.n	801e8b2 <__gethex+0x146>
 801e854:	1c71      	adds	r1, r6, #1
 801e856:	f04f 0900 	mov.w	r9, #0
 801e85a:	7808      	ldrb	r0, [r1, #0]
 801e85c:	f7ff ff71 	bl	801e742 <__hexdig_fun>
 801e860:	1e43      	subs	r3, r0, #1
 801e862:	b2db      	uxtb	r3, r3
 801e864:	2b18      	cmp	r3, #24
 801e866:	d82c      	bhi.n	801e8c2 <__gethex+0x156>
 801e868:	f1a0 0210 	sub.w	r2, r0, #16
 801e86c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e870:	f7ff ff67 	bl	801e742 <__hexdig_fun>
 801e874:	1e43      	subs	r3, r0, #1
 801e876:	b2db      	uxtb	r3, r3
 801e878:	2b18      	cmp	r3, #24
 801e87a:	d91d      	bls.n	801e8b8 <__gethex+0x14c>
 801e87c:	f1b9 0f00 	cmp.w	r9, #0
 801e880:	d000      	beq.n	801e884 <__gethex+0x118>
 801e882:	4252      	negs	r2, r2
 801e884:	4415      	add	r5, r2
 801e886:	f8cb 1000 	str.w	r1, [fp]
 801e88a:	b1e4      	cbz	r4, 801e8c6 <__gethex+0x15a>
 801e88c:	9b00      	ldr	r3, [sp, #0]
 801e88e:	2b00      	cmp	r3, #0
 801e890:	bf14      	ite	ne
 801e892:	2700      	movne	r7, #0
 801e894:	2706      	moveq	r7, #6
 801e896:	4638      	mov	r0, r7
 801e898:	b009      	add	sp, #36	; 0x24
 801e89a:	ecbd 8b02 	vpop	{d8}
 801e89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8a2:	463e      	mov	r6, r7
 801e8a4:	4625      	mov	r5, r4
 801e8a6:	2401      	movs	r4, #1
 801e8a8:	e7ca      	b.n	801e840 <__gethex+0xd4>
 801e8aa:	f04f 0900 	mov.w	r9, #0
 801e8ae:	1cb1      	adds	r1, r6, #2
 801e8b0:	e7d3      	b.n	801e85a <__gethex+0xee>
 801e8b2:	f04f 0901 	mov.w	r9, #1
 801e8b6:	e7fa      	b.n	801e8ae <__gethex+0x142>
 801e8b8:	230a      	movs	r3, #10
 801e8ba:	fb03 0202 	mla	r2, r3, r2, r0
 801e8be:	3a10      	subs	r2, #16
 801e8c0:	e7d4      	b.n	801e86c <__gethex+0x100>
 801e8c2:	4631      	mov	r1, r6
 801e8c4:	e7df      	b.n	801e886 <__gethex+0x11a>
 801e8c6:	1bf3      	subs	r3, r6, r7
 801e8c8:	3b01      	subs	r3, #1
 801e8ca:	4621      	mov	r1, r4
 801e8cc:	2b07      	cmp	r3, #7
 801e8ce:	dc0b      	bgt.n	801e8e8 <__gethex+0x17c>
 801e8d0:	ee18 0a10 	vmov	r0, s16
 801e8d4:	f000 fada 	bl	801ee8c <_Balloc>
 801e8d8:	4604      	mov	r4, r0
 801e8da:	b940      	cbnz	r0, 801e8ee <__gethex+0x182>
 801e8dc:	4b5d      	ldr	r3, [pc, #372]	; (801ea54 <__gethex+0x2e8>)
 801e8de:	4602      	mov	r2, r0
 801e8e0:	21de      	movs	r1, #222	; 0xde
 801e8e2:	485d      	ldr	r0, [pc, #372]	; (801ea58 <__gethex+0x2ec>)
 801e8e4:	f7fe fe78 	bl	801d5d8 <__assert_func>
 801e8e8:	3101      	adds	r1, #1
 801e8ea:	105b      	asrs	r3, r3, #1
 801e8ec:	e7ee      	b.n	801e8cc <__gethex+0x160>
 801e8ee:	f100 0914 	add.w	r9, r0, #20
 801e8f2:	f04f 0b00 	mov.w	fp, #0
 801e8f6:	f1ca 0301 	rsb	r3, sl, #1
 801e8fa:	f8cd 9008 	str.w	r9, [sp, #8]
 801e8fe:	f8cd b000 	str.w	fp, [sp]
 801e902:	9306      	str	r3, [sp, #24]
 801e904:	42b7      	cmp	r7, r6
 801e906:	d340      	bcc.n	801e98a <__gethex+0x21e>
 801e908:	9802      	ldr	r0, [sp, #8]
 801e90a:	9b00      	ldr	r3, [sp, #0]
 801e90c:	f840 3b04 	str.w	r3, [r0], #4
 801e910:	eba0 0009 	sub.w	r0, r0, r9
 801e914:	1080      	asrs	r0, r0, #2
 801e916:	0146      	lsls	r6, r0, #5
 801e918:	6120      	str	r0, [r4, #16]
 801e91a:	4618      	mov	r0, r3
 801e91c:	f000 fba8 	bl	801f070 <__hi0bits>
 801e920:	1a30      	subs	r0, r6, r0
 801e922:	f8d8 6000 	ldr.w	r6, [r8]
 801e926:	42b0      	cmp	r0, r6
 801e928:	dd63      	ble.n	801e9f2 <__gethex+0x286>
 801e92a:	1b87      	subs	r7, r0, r6
 801e92c:	4639      	mov	r1, r7
 801e92e:	4620      	mov	r0, r4
 801e930:	f000 ff4c 	bl	801f7cc <__any_on>
 801e934:	4682      	mov	sl, r0
 801e936:	b1a8      	cbz	r0, 801e964 <__gethex+0x1f8>
 801e938:	1e7b      	subs	r3, r7, #1
 801e93a:	1159      	asrs	r1, r3, #5
 801e93c:	f003 021f 	and.w	r2, r3, #31
 801e940:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e944:	f04f 0a01 	mov.w	sl, #1
 801e948:	fa0a f202 	lsl.w	r2, sl, r2
 801e94c:	420a      	tst	r2, r1
 801e94e:	d009      	beq.n	801e964 <__gethex+0x1f8>
 801e950:	4553      	cmp	r3, sl
 801e952:	dd05      	ble.n	801e960 <__gethex+0x1f4>
 801e954:	1eb9      	subs	r1, r7, #2
 801e956:	4620      	mov	r0, r4
 801e958:	f000 ff38 	bl	801f7cc <__any_on>
 801e95c:	2800      	cmp	r0, #0
 801e95e:	d145      	bne.n	801e9ec <__gethex+0x280>
 801e960:	f04f 0a02 	mov.w	sl, #2
 801e964:	4639      	mov	r1, r7
 801e966:	4620      	mov	r0, r4
 801e968:	f7ff fe99 	bl	801e69e <rshift>
 801e96c:	443d      	add	r5, r7
 801e96e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e972:	42ab      	cmp	r3, r5
 801e974:	da4c      	bge.n	801ea10 <__gethex+0x2a4>
 801e976:	ee18 0a10 	vmov	r0, s16
 801e97a:	4621      	mov	r1, r4
 801e97c:	f000 fac6 	bl	801ef0c <_Bfree>
 801e980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e982:	2300      	movs	r3, #0
 801e984:	6013      	str	r3, [r2, #0]
 801e986:	27a3      	movs	r7, #163	; 0xa3
 801e988:	e785      	b.n	801e896 <__gethex+0x12a>
 801e98a:	1e73      	subs	r3, r6, #1
 801e98c:	9a05      	ldr	r2, [sp, #20]
 801e98e:	9303      	str	r3, [sp, #12]
 801e990:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e994:	4293      	cmp	r3, r2
 801e996:	d019      	beq.n	801e9cc <__gethex+0x260>
 801e998:	f1bb 0f20 	cmp.w	fp, #32
 801e99c:	d107      	bne.n	801e9ae <__gethex+0x242>
 801e99e:	9b02      	ldr	r3, [sp, #8]
 801e9a0:	9a00      	ldr	r2, [sp, #0]
 801e9a2:	f843 2b04 	str.w	r2, [r3], #4
 801e9a6:	9302      	str	r3, [sp, #8]
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	9300      	str	r3, [sp, #0]
 801e9ac:	469b      	mov	fp, r3
 801e9ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e9b2:	f7ff fec6 	bl	801e742 <__hexdig_fun>
 801e9b6:	9b00      	ldr	r3, [sp, #0]
 801e9b8:	f000 000f 	and.w	r0, r0, #15
 801e9bc:	fa00 f00b 	lsl.w	r0, r0, fp
 801e9c0:	4303      	orrs	r3, r0
 801e9c2:	9300      	str	r3, [sp, #0]
 801e9c4:	f10b 0b04 	add.w	fp, fp, #4
 801e9c8:	9b03      	ldr	r3, [sp, #12]
 801e9ca:	e00d      	b.n	801e9e8 <__gethex+0x27c>
 801e9cc:	9b03      	ldr	r3, [sp, #12]
 801e9ce:	9a06      	ldr	r2, [sp, #24]
 801e9d0:	4413      	add	r3, r2
 801e9d2:	42bb      	cmp	r3, r7
 801e9d4:	d3e0      	bcc.n	801e998 <__gethex+0x22c>
 801e9d6:	4618      	mov	r0, r3
 801e9d8:	9901      	ldr	r1, [sp, #4]
 801e9da:	9307      	str	r3, [sp, #28]
 801e9dc:	4652      	mov	r2, sl
 801e9de:	f001 fa2e 	bl	801fe3e <strncmp>
 801e9e2:	9b07      	ldr	r3, [sp, #28]
 801e9e4:	2800      	cmp	r0, #0
 801e9e6:	d1d7      	bne.n	801e998 <__gethex+0x22c>
 801e9e8:	461e      	mov	r6, r3
 801e9ea:	e78b      	b.n	801e904 <__gethex+0x198>
 801e9ec:	f04f 0a03 	mov.w	sl, #3
 801e9f0:	e7b8      	b.n	801e964 <__gethex+0x1f8>
 801e9f2:	da0a      	bge.n	801ea0a <__gethex+0x29e>
 801e9f4:	1a37      	subs	r7, r6, r0
 801e9f6:	4621      	mov	r1, r4
 801e9f8:	ee18 0a10 	vmov	r0, s16
 801e9fc:	463a      	mov	r2, r7
 801e9fe:	f000 fca1 	bl	801f344 <__lshift>
 801ea02:	1bed      	subs	r5, r5, r7
 801ea04:	4604      	mov	r4, r0
 801ea06:	f100 0914 	add.w	r9, r0, #20
 801ea0a:	f04f 0a00 	mov.w	sl, #0
 801ea0e:	e7ae      	b.n	801e96e <__gethex+0x202>
 801ea10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ea14:	42a8      	cmp	r0, r5
 801ea16:	dd72      	ble.n	801eafe <__gethex+0x392>
 801ea18:	1b45      	subs	r5, r0, r5
 801ea1a:	42ae      	cmp	r6, r5
 801ea1c:	dc36      	bgt.n	801ea8c <__gethex+0x320>
 801ea1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ea22:	2b02      	cmp	r3, #2
 801ea24:	d02a      	beq.n	801ea7c <__gethex+0x310>
 801ea26:	2b03      	cmp	r3, #3
 801ea28:	d02c      	beq.n	801ea84 <__gethex+0x318>
 801ea2a:	2b01      	cmp	r3, #1
 801ea2c:	d11c      	bne.n	801ea68 <__gethex+0x2fc>
 801ea2e:	42ae      	cmp	r6, r5
 801ea30:	d11a      	bne.n	801ea68 <__gethex+0x2fc>
 801ea32:	2e01      	cmp	r6, #1
 801ea34:	d112      	bne.n	801ea5c <__gethex+0x2f0>
 801ea36:	9a04      	ldr	r2, [sp, #16]
 801ea38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea3c:	6013      	str	r3, [r2, #0]
 801ea3e:	2301      	movs	r3, #1
 801ea40:	6123      	str	r3, [r4, #16]
 801ea42:	f8c9 3000 	str.w	r3, [r9]
 801ea46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ea48:	2762      	movs	r7, #98	; 0x62
 801ea4a:	601c      	str	r4, [r3, #0]
 801ea4c:	e723      	b.n	801e896 <__gethex+0x12a>
 801ea4e:	bf00      	nop
 801ea50:	08022244 	.word	0x08022244
 801ea54:	08022169 	.word	0x08022169
 801ea58:	080221dc 	.word	0x080221dc
 801ea5c:	1e71      	subs	r1, r6, #1
 801ea5e:	4620      	mov	r0, r4
 801ea60:	f000 feb4 	bl	801f7cc <__any_on>
 801ea64:	2800      	cmp	r0, #0
 801ea66:	d1e6      	bne.n	801ea36 <__gethex+0x2ca>
 801ea68:	ee18 0a10 	vmov	r0, s16
 801ea6c:	4621      	mov	r1, r4
 801ea6e:	f000 fa4d 	bl	801ef0c <_Bfree>
 801ea72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea74:	2300      	movs	r3, #0
 801ea76:	6013      	str	r3, [r2, #0]
 801ea78:	2750      	movs	r7, #80	; 0x50
 801ea7a:	e70c      	b.n	801e896 <__gethex+0x12a>
 801ea7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d1f2      	bne.n	801ea68 <__gethex+0x2fc>
 801ea82:	e7d8      	b.n	801ea36 <__gethex+0x2ca>
 801ea84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	d1d5      	bne.n	801ea36 <__gethex+0x2ca>
 801ea8a:	e7ed      	b.n	801ea68 <__gethex+0x2fc>
 801ea8c:	1e6f      	subs	r7, r5, #1
 801ea8e:	f1ba 0f00 	cmp.w	sl, #0
 801ea92:	d131      	bne.n	801eaf8 <__gethex+0x38c>
 801ea94:	b127      	cbz	r7, 801eaa0 <__gethex+0x334>
 801ea96:	4639      	mov	r1, r7
 801ea98:	4620      	mov	r0, r4
 801ea9a:	f000 fe97 	bl	801f7cc <__any_on>
 801ea9e:	4682      	mov	sl, r0
 801eaa0:	117b      	asrs	r3, r7, #5
 801eaa2:	2101      	movs	r1, #1
 801eaa4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801eaa8:	f007 071f 	and.w	r7, r7, #31
 801eaac:	fa01 f707 	lsl.w	r7, r1, r7
 801eab0:	421f      	tst	r7, r3
 801eab2:	4629      	mov	r1, r5
 801eab4:	4620      	mov	r0, r4
 801eab6:	bf18      	it	ne
 801eab8:	f04a 0a02 	orrne.w	sl, sl, #2
 801eabc:	1b76      	subs	r6, r6, r5
 801eabe:	f7ff fdee 	bl	801e69e <rshift>
 801eac2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801eac6:	2702      	movs	r7, #2
 801eac8:	f1ba 0f00 	cmp.w	sl, #0
 801eacc:	d048      	beq.n	801eb60 <__gethex+0x3f4>
 801eace:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ead2:	2b02      	cmp	r3, #2
 801ead4:	d015      	beq.n	801eb02 <__gethex+0x396>
 801ead6:	2b03      	cmp	r3, #3
 801ead8:	d017      	beq.n	801eb0a <__gethex+0x39e>
 801eada:	2b01      	cmp	r3, #1
 801eadc:	d109      	bne.n	801eaf2 <__gethex+0x386>
 801eade:	f01a 0f02 	tst.w	sl, #2
 801eae2:	d006      	beq.n	801eaf2 <__gethex+0x386>
 801eae4:	f8d9 0000 	ldr.w	r0, [r9]
 801eae8:	ea4a 0a00 	orr.w	sl, sl, r0
 801eaec:	f01a 0f01 	tst.w	sl, #1
 801eaf0:	d10e      	bne.n	801eb10 <__gethex+0x3a4>
 801eaf2:	f047 0710 	orr.w	r7, r7, #16
 801eaf6:	e033      	b.n	801eb60 <__gethex+0x3f4>
 801eaf8:	f04f 0a01 	mov.w	sl, #1
 801eafc:	e7d0      	b.n	801eaa0 <__gethex+0x334>
 801eafe:	2701      	movs	r7, #1
 801eb00:	e7e2      	b.n	801eac8 <__gethex+0x35c>
 801eb02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb04:	f1c3 0301 	rsb	r3, r3, #1
 801eb08:	9315      	str	r3, [sp, #84]	; 0x54
 801eb0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d0f0      	beq.n	801eaf2 <__gethex+0x386>
 801eb10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801eb14:	f104 0314 	add.w	r3, r4, #20
 801eb18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801eb1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801eb20:	f04f 0c00 	mov.w	ip, #0
 801eb24:	4618      	mov	r0, r3
 801eb26:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801eb2e:	d01c      	beq.n	801eb6a <__gethex+0x3fe>
 801eb30:	3201      	adds	r2, #1
 801eb32:	6002      	str	r2, [r0, #0]
 801eb34:	2f02      	cmp	r7, #2
 801eb36:	f104 0314 	add.w	r3, r4, #20
 801eb3a:	d13f      	bne.n	801ebbc <__gethex+0x450>
 801eb3c:	f8d8 2000 	ldr.w	r2, [r8]
 801eb40:	3a01      	subs	r2, #1
 801eb42:	42b2      	cmp	r2, r6
 801eb44:	d10a      	bne.n	801eb5c <__gethex+0x3f0>
 801eb46:	1171      	asrs	r1, r6, #5
 801eb48:	2201      	movs	r2, #1
 801eb4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eb4e:	f006 061f 	and.w	r6, r6, #31
 801eb52:	fa02 f606 	lsl.w	r6, r2, r6
 801eb56:	421e      	tst	r6, r3
 801eb58:	bf18      	it	ne
 801eb5a:	4617      	movne	r7, r2
 801eb5c:	f047 0720 	orr.w	r7, r7, #32
 801eb60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb62:	601c      	str	r4, [r3, #0]
 801eb64:	9b04      	ldr	r3, [sp, #16]
 801eb66:	601d      	str	r5, [r3, #0]
 801eb68:	e695      	b.n	801e896 <__gethex+0x12a>
 801eb6a:	4299      	cmp	r1, r3
 801eb6c:	f843 cc04 	str.w	ip, [r3, #-4]
 801eb70:	d8d8      	bhi.n	801eb24 <__gethex+0x3b8>
 801eb72:	68a3      	ldr	r3, [r4, #8]
 801eb74:	459b      	cmp	fp, r3
 801eb76:	db19      	blt.n	801ebac <__gethex+0x440>
 801eb78:	6861      	ldr	r1, [r4, #4]
 801eb7a:	ee18 0a10 	vmov	r0, s16
 801eb7e:	3101      	adds	r1, #1
 801eb80:	f000 f984 	bl	801ee8c <_Balloc>
 801eb84:	4681      	mov	r9, r0
 801eb86:	b918      	cbnz	r0, 801eb90 <__gethex+0x424>
 801eb88:	4b1a      	ldr	r3, [pc, #104]	; (801ebf4 <__gethex+0x488>)
 801eb8a:	4602      	mov	r2, r0
 801eb8c:	2184      	movs	r1, #132	; 0x84
 801eb8e:	e6a8      	b.n	801e8e2 <__gethex+0x176>
 801eb90:	6922      	ldr	r2, [r4, #16]
 801eb92:	3202      	adds	r2, #2
 801eb94:	f104 010c 	add.w	r1, r4, #12
 801eb98:	0092      	lsls	r2, r2, #2
 801eb9a:	300c      	adds	r0, #12
 801eb9c:	f7fc fc96 	bl	801b4cc <memcpy>
 801eba0:	4621      	mov	r1, r4
 801eba2:	ee18 0a10 	vmov	r0, s16
 801eba6:	f000 f9b1 	bl	801ef0c <_Bfree>
 801ebaa:	464c      	mov	r4, r9
 801ebac:	6923      	ldr	r3, [r4, #16]
 801ebae:	1c5a      	adds	r2, r3, #1
 801ebb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ebb4:	6122      	str	r2, [r4, #16]
 801ebb6:	2201      	movs	r2, #1
 801ebb8:	615a      	str	r2, [r3, #20]
 801ebba:	e7bb      	b.n	801eb34 <__gethex+0x3c8>
 801ebbc:	6922      	ldr	r2, [r4, #16]
 801ebbe:	455a      	cmp	r2, fp
 801ebc0:	dd0b      	ble.n	801ebda <__gethex+0x46e>
 801ebc2:	2101      	movs	r1, #1
 801ebc4:	4620      	mov	r0, r4
 801ebc6:	f7ff fd6a 	bl	801e69e <rshift>
 801ebca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ebce:	3501      	adds	r5, #1
 801ebd0:	42ab      	cmp	r3, r5
 801ebd2:	f6ff aed0 	blt.w	801e976 <__gethex+0x20a>
 801ebd6:	2701      	movs	r7, #1
 801ebd8:	e7c0      	b.n	801eb5c <__gethex+0x3f0>
 801ebda:	f016 061f 	ands.w	r6, r6, #31
 801ebde:	d0fa      	beq.n	801ebd6 <__gethex+0x46a>
 801ebe0:	4453      	add	r3, sl
 801ebe2:	f1c6 0620 	rsb	r6, r6, #32
 801ebe6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ebea:	f000 fa41 	bl	801f070 <__hi0bits>
 801ebee:	42b0      	cmp	r0, r6
 801ebf0:	dbe7      	blt.n	801ebc2 <__gethex+0x456>
 801ebf2:	e7f0      	b.n	801ebd6 <__gethex+0x46a>
 801ebf4:	08022169 	.word	0x08022169

0801ebf8 <L_shift>:
 801ebf8:	f1c2 0208 	rsb	r2, r2, #8
 801ebfc:	0092      	lsls	r2, r2, #2
 801ebfe:	b570      	push	{r4, r5, r6, lr}
 801ec00:	f1c2 0620 	rsb	r6, r2, #32
 801ec04:	6843      	ldr	r3, [r0, #4]
 801ec06:	6804      	ldr	r4, [r0, #0]
 801ec08:	fa03 f506 	lsl.w	r5, r3, r6
 801ec0c:	432c      	orrs	r4, r5
 801ec0e:	40d3      	lsrs	r3, r2
 801ec10:	6004      	str	r4, [r0, #0]
 801ec12:	f840 3f04 	str.w	r3, [r0, #4]!
 801ec16:	4288      	cmp	r0, r1
 801ec18:	d3f4      	bcc.n	801ec04 <L_shift+0xc>
 801ec1a:	bd70      	pop	{r4, r5, r6, pc}

0801ec1c <__match>:
 801ec1c:	b530      	push	{r4, r5, lr}
 801ec1e:	6803      	ldr	r3, [r0, #0]
 801ec20:	3301      	adds	r3, #1
 801ec22:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec26:	b914      	cbnz	r4, 801ec2e <__match+0x12>
 801ec28:	6003      	str	r3, [r0, #0]
 801ec2a:	2001      	movs	r0, #1
 801ec2c:	bd30      	pop	{r4, r5, pc}
 801ec2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ec36:	2d19      	cmp	r5, #25
 801ec38:	bf98      	it	ls
 801ec3a:	3220      	addls	r2, #32
 801ec3c:	42a2      	cmp	r2, r4
 801ec3e:	d0f0      	beq.n	801ec22 <__match+0x6>
 801ec40:	2000      	movs	r0, #0
 801ec42:	e7f3      	b.n	801ec2c <__match+0x10>

0801ec44 <__hexnan>:
 801ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec48:	680b      	ldr	r3, [r1, #0]
 801ec4a:	115e      	asrs	r6, r3, #5
 801ec4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ec50:	f013 031f 	ands.w	r3, r3, #31
 801ec54:	b087      	sub	sp, #28
 801ec56:	bf18      	it	ne
 801ec58:	3604      	addne	r6, #4
 801ec5a:	2500      	movs	r5, #0
 801ec5c:	1f37      	subs	r7, r6, #4
 801ec5e:	4690      	mov	r8, r2
 801ec60:	6802      	ldr	r2, [r0, #0]
 801ec62:	9301      	str	r3, [sp, #4]
 801ec64:	4682      	mov	sl, r0
 801ec66:	f846 5c04 	str.w	r5, [r6, #-4]
 801ec6a:	46b9      	mov	r9, r7
 801ec6c:	463c      	mov	r4, r7
 801ec6e:	9502      	str	r5, [sp, #8]
 801ec70:	46ab      	mov	fp, r5
 801ec72:	7851      	ldrb	r1, [r2, #1]
 801ec74:	1c53      	adds	r3, r2, #1
 801ec76:	9303      	str	r3, [sp, #12]
 801ec78:	b341      	cbz	r1, 801eccc <__hexnan+0x88>
 801ec7a:	4608      	mov	r0, r1
 801ec7c:	9205      	str	r2, [sp, #20]
 801ec7e:	9104      	str	r1, [sp, #16]
 801ec80:	f7ff fd5f 	bl	801e742 <__hexdig_fun>
 801ec84:	2800      	cmp	r0, #0
 801ec86:	d14f      	bne.n	801ed28 <__hexnan+0xe4>
 801ec88:	9904      	ldr	r1, [sp, #16]
 801ec8a:	9a05      	ldr	r2, [sp, #20]
 801ec8c:	2920      	cmp	r1, #32
 801ec8e:	d818      	bhi.n	801ecc2 <__hexnan+0x7e>
 801ec90:	9b02      	ldr	r3, [sp, #8]
 801ec92:	459b      	cmp	fp, r3
 801ec94:	dd13      	ble.n	801ecbe <__hexnan+0x7a>
 801ec96:	454c      	cmp	r4, r9
 801ec98:	d206      	bcs.n	801eca8 <__hexnan+0x64>
 801ec9a:	2d07      	cmp	r5, #7
 801ec9c:	dc04      	bgt.n	801eca8 <__hexnan+0x64>
 801ec9e:	462a      	mov	r2, r5
 801eca0:	4649      	mov	r1, r9
 801eca2:	4620      	mov	r0, r4
 801eca4:	f7ff ffa8 	bl	801ebf8 <L_shift>
 801eca8:	4544      	cmp	r4, r8
 801ecaa:	d950      	bls.n	801ed4e <__hexnan+0x10a>
 801ecac:	2300      	movs	r3, #0
 801ecae:	f1a4 0904 	sub.w	r9, r4, #4
 801ecb2:	f844 3c04 	str.w	r3, [r4, #-4]
 801ecb6:	f8cd b008 	str.w	fp, [sp, #8]
 801ecba:	464c      	mov	r4, r9
 801ecbc:	461d      	mov	r5, r3
 801ecbe:	9a03      	ldr	r2, [sp, #12]
 801ecc0:	e7d7      	b.n	801ec72 <__hexnan+0x2e>
 801ecc2:	2929      	cmp	r1, #41	; 0x29
 801ecc4:	d156      	bne.n	801ed74 <__hexnan+0x130>
 801ecc6:	3202      	adds	r2, #2
 801ecc8:	f8ca 2000 	str.w	r2, [sl]
 801eccc:	f1bb 0f00 	cmp.w	fp, #0
 801ecd0:	d050      	beq.n	801ed74 <__hexnan+0x130>
 801ecd2:	454c      	cmp	r4, r9
 801ecd4:	d206      	bcs.n	801ece4 <__hexnan+0xa0>
 801ecd6:	2d07      	cmp	r5, #7
 801ecd8:	dc04      	bgt.n	801ece4 <__hexnan+0xa0>
 801ecda:	462a      	mov	r2, r5
 801ecdc:	4649      	mov	r1, r9
 801ecde:	4620      	mov	r0, r4
 801ece0:	f7ff ff8a 	bl	801ebf8 <L_shift>
 801ece4:	4544      	cmp	r4, r8
 801ece6:	d934      	bls.n	801ed52 <__hexnan+0x10e>
 801ece8:	f1a8 0204 	sub.w	r2, r8, #4
 801ecec:	4623      	mov	r3, r4
 801ecee:	f853 1b04 	ldr.w	r1, [r3], #4
 801ecf2:	f842 1f04 	str.w	r1, [r2, #4]!
 801ecf6:	429f      	cmp	r7, r3
 801ecf8:	d2f9      	bcs.n	801ecee <__hexnan+0xaa>
 801ecfa:	1b3b      	subs	r3, r7, r4
 801ecfc:	f023 0303 	bic.w	r3, r3, #3
 801ed00:	3304      	adds	r3, #4
 801ed02:	3401      	adds	r4, #1
 801ed04:	3e03      	subs	r6, #3
 801ed06:	42b4      	cmp	r4, r6
 801ed08:	bf88      	it	hi
 801ed0a:	2304      	movhi	r3, #4
 801ed0c:	4443      	add	r3, r8
 801ed0e:	2200      	movs	r2, #0
 801ed10:	f843 2b04 	str.w	r2, [r3], #4
 801ed14:	429f      	cmp	r7, r3
 801ed16:	d2fb      	bcs.n	801ed10 <__hexnan+0xcc>
 801ed18:	683b      	ldr	r3, [r7, #0]
 801ed1a:	b91b      	cbnz	r3, 801ed24 <__hexnan+0xe0>
 801ed1c:	4547      	cmp	r7, r8
 801ed1e:	d127      	bne.n	801ed70 <__hexnan+0x12c>
 801ed20:	2301      	movs	r3, #1
 801ed22:	603b      	str	r3, [r7, #0]
 801ed24:	2005      	movs	r0, #5
 801ed26:	e026      	b.n	801ed76 <__hexnan+0x132>
 801ed28:	3501      	adds	r5, #1
 801ed2a:	2d08      	cmp	r5, #8
 801ed2c:	f10b 0b01 	add.w	fp, fp, #1
 801ed30:	dd06      	ble.n	801ed40 <__hexnan+0xfc>
 801ed32:	4544      	cmp	r4, r8
 801ed34:	d9c3      	bls.n	801ecbe <__hexnan+0x7a>
 801ed36:	2300      	movs	r3, #0
 801ed38:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed3c:	2501      	movs	r5, #1
 801ed3e:	3c04      	subs	r4, #4
 801ed40:	6822      	ldr	r2, [r4, #0]
 801ed42:	f000 000f 	and.w	r0, r0, #15
 801ed46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ed4a:	6022      	str	r2, [r4, #0]
 801ed4c:	e7b7      	b.n	801ecbe <__hexnan+0x7a>
 801ed4e:	2508      	movs	r5, #8
 801ed50:	e7b5      	b.n	801ecbe <__hexnan+0x7a>
 801ed52:	9b01      	ldr	r3, [sp, #4]
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d0df      	beq.n	801ed18 <__hexnan+0xd4>
 801ed58:	f04f 32ff 	mov.w	r2, #4294967295
 801ed5c:	f1c3 0320 	rsb	r3, r3, #32
 801ed60:	fa22 f303 	lsr.w	r3, r2, r3
 801ed64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ed68:	401a      	ands	r2, r3
 801ed6a:	f846 2c04 	str.w	r2, [r6, #-4]
 801ed6e:	e7d3      	b.n	801ed18 <__hexnan+0xd4>
 801ed70:	3f04      	subs	r7, #4
 801ed72:	e7d1      	b.n	801ed18 <__hexnan+0xd4>
 801ed74:	2004      	movs	r0, #4
 801ed76:	b007      	add	sp, #28
 801ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed7c <_localeconv_r>:
 801ed7c:	4800      	ldr	r0, [pc, #0]	; (801ed80 <_localeconv_r+0x4>)
 801ed7e:	4770      	bx	lr
 801ed80:	2000029c 	.word	0x2000029c

0801ed84 <__swhatbuf_r>:
 801ed84:	b570      	push	{r4, r5, r6, lr}
 801ed86:	460e      	mov	r6, r1
 801ed88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed8c:	2900      	cmp	r1, #0
 801ed8e:	b096      	sub	sp, #88	; 0x58
 801ed90:	4614      	mov	r4, r2
 801ed92:	461d      	mov	r5, r3
 801ed94:	da08      	bge.n	801eda8 <__swhatbuf_r+0x24>
 801ed96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ed9a:	2200      	movs	r2, #0
 801ed9c:	602a      	str	r2, [r5, #0]
 801ed9e:	061a      	lsls	r2, r3, #24
 801eda0:	d410      	bmi.n	801edc4 <__swhatbuf_r+0x40>
 801eda2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eda6:	e00e      	b.n	801edc6 <__swhatbuf_r+0x42>
 801eda8:	466a      	mov	r2, sp
 801edaa:	f001 f893 	bl	801fed4 <_fstat_r>
 801edae:	2800      	cmp	r0, #0
 801edb0:	dbf1      	blt.n	801ed96 <__swhatbuf_r+0x12>
 801edb2:	9a01      	ldr	r2, [sp, #4]
 801edb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801edb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801edbc:	425a      	negs	r2, r3
 801edbe:	415a      	adcs	r2, r3
 801edc0:	602a      	str	r2, [r5, #0]
 801edc2:	e7ee      	b.n	801eda2 <__swhatbuf_r+0x1e>
 801edc4:	2340      	movs	r3, #64	; 0x40
 801edc6:	2000      	movs	r0, #0
 801edc8:	6023      	str	r3, [r4, #0]
 801edca:	b016      	add	sp, #88	; 0x58
 801edcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801edd0 <__smakebuf_r>:
 801edd0:	898b      	ldrh	r3, [r1, #12]
 801edd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801edd4:	079d      	lsls	r5, r3, #30
 801edd6:	4606      	mov	r6, r0
 801edd8:	460c      	mov	r4, r1
 801edda:	d507      	bpl.n	801edec <__smakebuf_r+0x1c>
 801eddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ede0:	6023      	str	r3, [r4, #0]
 801ede2:	6123      	str	r3, [r4, #16]
 801ede4:	2301      	movs	r3, #1
 801ede6:	6163      	str	r3, [r4, #20]
 801ede8:	b002      	add	sp, #8
 801edea:	bd70      	pop	{r4, r5, r6, pc}
 801edec:	ab01      	add	r3, sp, #4
 801edee:	466a      	mov	r2, sp
 801edf0:	f7ff ffc8 	bl	801ed84 <__swhatbuf_r>
 801edf4:	9900      	ldr	r1, [sp, #0]
 801edf6:	4605      	mov	r5, r0
 801edf8:	4630      	mov	r0, r6
 801edfa:	f7fc fc03 	bl	801b604 <_malloc_r>
 801edfe:	b948      	cbnz	r0, 801ee14 <__smakebuf_r+0x44>
 801ee00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee04:	059a      	lsls	r2, r3, #22
 801ee06:	d4ef      	bmi.n	801ede8 <__smakebuf_r+0x18>
 801ee08:	f023 0303 	bic.w	r3, r3, #3
 801ee0c:	f043 0302 	orr.w	r3, r3, #2
 801ee10:	81a3      	strh	r3, [r4, #12]
 801ee12:	e7e3      	b.n	801eddc <__smakebuf_r+0xc>
 801ee14:	4b0d      	ldr	r3, [pc, #52]	; (801ee4c <__smakebuf_r+0x7c>)
 801ee16:	62b3      	str	r3, [r6, #40]	; 0x28
 801ee18:	89a3      	ldrh	r3, [r4, #12]
 801ee1a:	6020      	str	r0, [r4, #0]
 801ee1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee20:	81a3      	strh	r3, [r4, #12]
 801ee22:	9b00      	ldr	r3, [sp, #0]
 801ee24:	6163      	str	r3, [r4, #20]
 801ee26:	9b01      	ldr	r3, [sp, #4]
 801ee28:	6120      	str	r0, [r4, #16]
 801ee2a:	b15b      	cbz	r3, 801ee44 <__smakebuf_r+0x74>
 801ee2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee30:	4630      	mov	r0, r6
 801ee32:	f001 f861 	bl	801fef8 <_isatty_r>
 801ee36:	b128      	cbz	r0, 801ee44 <__smakebuf_r+0x74>
 801ee38:	89a3      	ldrh	r3, [r4, #12]
 801ee3a:	f023 0303 	bic.w	r3, r3, #3
 801ee3e:	f043 0301 	orr.w	r3, r3, #1
 801ee42:	81a3      	strh	r3, [r4, #12]
 801ee44:	89a0      	ldrh	r0, [r4, #12]
 801ee46:	4305      	orrs	r5, r0
 801ee48:	81a5      	strh	r5, [r4, #12]
 801ee4a:	e7cd      	b.n	801ede8 <__smakebuf_r+0x18>
 801ee4c:	0801e4d9 	.word	0x0801e4d9

0801ee50 <__ascii_mbtowc>:
 801ee50:	b082      	sub	sp, #8
 801ee52:	b901      	cbnz	r1, 801ee56 <__ascii_mbtowc+0x6>
 801ee54:	a901      	add	r1, sp, #4
 801ee56:	b142      	cbz	r2, 801ee6a <__ascii_mbtowc+0x1a>
 801ee58:	b14b      	cbz	r3, 801ee6e <__ascii_mbtowc+0x1e>
 801ee5a:	7813      	ldrb	r3, [r2, #0]
 801ee5c:	600b      	str	r3, [r1, #0]
 801ee5e:	7812      	ldrb	r2, [r2, #0]
 801ee60:	1e10      	subs	r0, r2, #0
 801ee62:	bf18      	it	ne
 801ee64:	2001      	movne	r0, #1
 801ee66:	b002      	add	sp, #8
 801ee68:	4770      	bx	lr
 801ee6a:	4610      	mov	r0, r2
 801ee6c:	e7fb      	b.n	801ee66 <__ascii_mbtowc+0x16>
 801ee6e:	f06f 0001 	mvn.w	r0, #1
 801ee72:	e7f8      	b.n	801ee66 <__ascii_mbtowc+0x16>

0801ee74 <__malloc_lock>:
 801ee74:	4801      	ldr	r0, [pc, #4]	; (801ee7c <__malloc_lock+0x8>)
 801ee76:	f7fc bb1e 	b.w	801b4b6 <__retarget_lock_acquire_recursive>
 801ee7a:	bf00      	nop
 801ee7c:	20003610 	.word	0x20003610

0801ee80 <__malloc_unlock>:
 801ee80:	4801      	ldr	r0, [pc, #4]	; (801ee88 <__malloc_unlock+0x8>)
 801ee82:	f7fc bb19 	b.w	801b4b8 <__retarget_lock_release_recursive>
 801ee86:	bf00      	nop
 801ee88:	20003610 	.word	0x20003610

0801ee8c <_Balloc>:
 801ee8c:	b570      	push	{r4, r5, r6, lr}
 801ee8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ee90:	4604      	mov	r4, r0
 801ee92:	460d      	mov	r5, r1
 801ee94:	b976      	cbnz	r6, 801eeb4 <_Balloc+0x28>
 801ee96:	2010      	movs	r0, #16
 801ee98:	f7fc fb10 	bl	801b4bc <malloc>
 801ee9c:	4602      	mov	r2, r0
 801ee9e:	6260      	str	r0, [r4, #36]	; 0x24
 801eea0:	b920      	cbnz	r0, 801eeac <_Balloc+0x20>
 801eea2:	4b18      	ldr	r3, [pc, #96]	; (801ef04 <_Balloc+0x78>)
 801eea4:	4818      	ldr	r0, [pc, #96]	; (801ef08 <_Balloc+0x7c>)
 801eea6:	2166      	movs	r1, #102	; 0x66
 801eea8:	f7fe fb96 	bl	801d5d8 <__assert_func>
 801eeac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eeb0:	6006      	str	r6, [r0, #0]
 801eeb2:	60c6      	str	r6, [r0, #12]
 801eeb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801eeb6:	68f3      	ldr	r3, [r6, #12]
 801eeb8:	b183      	cbz	r3, 801eedc <_Balloc+0x50>
 801eeba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eebc:	68db      	ldr	r3, [r3, #12]
 801eebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801eec2:	b9b8      	cbnz	r0, 801eef4 <_Balloc+0x68>
 801eec4:	2101      	movs	r1, #1
 801eec6:	fa01 f605 	lsl.w	r6, r1, r5
 801eeca:	1d72      	adds	r2, r6, #5
 801eecc:	0092      	lsls	r2, r2, #2
 801eece:	4620      	mov	r0, r4
 801eed0:	f000 fc9d 	bl	801f80e <_calloc_r>
 801eed4:	b160      	cbz	r0, 801eef0 <_Balloc+0x64>
 801eed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801eeda:	e00e      	b.n	801eefa <_Balloc+0x6e>
 801eedc:	2221      	movs	r2, #33	; 0x21
 801eede:	2104      	movs	r1, #4
 801eee0:	4620      	mov	r0, r4
 801eee2:	f000 fc94 	bl	801f80e <_calloc_r>
 801eee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eee8:	60f0      	str	r0, [r6, #12]
 801eeea:	68db      	ldr	r3, [r3, #12]
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	d1e4      	bne.n	801eeba <_Balloc+0x2e>
 801eef0:	2000      	movs	r0, #0
 801eef2:	bd70      	pop	{r4, r5, r6, pc}
 801eef4:	6802      	ldr	r2, [r0, #0]
 801eef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801eefa:	2300      	movs	r3, #0
 801eefc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ef00:	e7f7      	b.n	801eef2 <_Balloc+0x66>
 801ef02:	bf00      	nop
 801ef04:	08021f50 	.word	0x08021f50
 801ef08:	08022258 	.word	0x08022258

0801ef0c <_Bfree>:
 801ef0c:	b570      	push	{r4, r5, r6, lr}
 801ef0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ef10:	4605      	mov	r5, r0
 801ef12:	460c      	mov	r4, r1
 801ef14:	b976      	cbnz	r6, 801ef34 <_Bfree+0x28>
 801ef16:	2010      	movs	r0, #16
 801ef18:	f7fc fad0 	bl	801b4bc <malloc>
 801ef1c:	4602      	mov	r2, r0
 801ef1e:	6268      	str	r0, [r5, #36]	; 0x24
 801ef20:	b920      	cbnz	r0, 801ef2c <_Bfree+0x20>
 801ef22:	4b09      	ldr	r3, [pc, #36]	; (801ef48 <_Bfree+0x3c>)
 801ef24:	4809      	ldr	r0, [pc, #36]	; (801ef4c <_Bfree+0x40>)
 801ef26:	218a      	movs	r1, #138	; 0x8a
 801ef28:	f7fe fb56 	bl	801d5d8 <__assert_func>
 801ef2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ef30:	6006      	str	r6, [r0, #0]
 801ef32:	60c6      	str	r6, [r0, #12]
 801ef34:	b13c      	cbz	r4, 801ef46 <_Bfree+0x3a>
 801ef36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ef38:	6862      	ldr	r2, [r4, #4]
 801ef3a:	68db      	ldr	r3, [r3, #12]
 801ef3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ef40:	6021      	str	r1, [r4, #0]
 801ef42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ef46:	bd70      	pop	{r4, r5, r6, pc}
 801ef48:	08021f50 	.word	0x08021f50
 801ef4c:	08022258 	.word	0x08022258

0801ef50 <__multadd>:
 801ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef54:	690d      	ldr	r5, [r1, #16]
 801ef56:	4607      	mov	r7, r0
 801ef58:	460c      	mov	r4, r1
 801ef5a:	461e      	mov	r6, r3
 801ef5c:	f101 0c14 	add.w	ip, r1, #20
 801ef60:	2000      	movs	r0, #0
 801ef62:	f8dc 3000 	ldr.w	r3, [ip]
 801ef66:	b299      	uxth	r1, r3
 801ef68:	fb02 6101 	mla	r1, r2, r1, r6
 801ef6c:	0c1e      	lsrs	r6, r3, #16
 801ef6e:	0c0b      	lsrs	r3, r1, #16
 801ef70:	fb02 3306 	mla	r3, r2, r6, r3
 801ef74:	b289      	uxth	r1, r1
 801ef76:	3001      	adds	r0, #1
 801ef78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ef7c:	4285      	cmp	r5, r0
 801ef7e:	f84c 1b04 	str.w	r1, [ip], #4
 801ef82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ef86:	dcec      	bgt.n	801ef62 <__multadd+0x12>
 801ef88:	b30e      	cbz	r6, 801efce <__multadd+0x7e>
 801ef8a:	68a3      	ldr	r3, [r4, #8]
 801ef8c:	42ab      	cmp	r3, r5
 801ef8e:	dc19      	bgt.n	801efc4 <__multadd+0x74>
 801ef90:	6861      	ldr	r1, [r4, #4]
 801ef92:	4638      	mov	r0, r7
 801ef94:	3101      	adds	r1, #1
 801ef96:	f7ff ff79 	bl	801ee8c <_Balloc>
 801ef9a:	4680      	mov	r8, r0
 801ef9c:	b928      	cbnz	r0, 801efaa <__multadd+0x5a>
 801ef9e:	4602      	mov	r2, r0
 801efa0:	4b0c      	ldr	r3, [pc, #48]	; (801efd4 <__multadd+0x84>)
 801efa2:	480d      	ldr	r0, [pc, #52]	; (801efd8 <__multadd+0x88>)
 801efa4:	21b5      	movs	r1, #181	; 0xb5
 801efa6:	f7fe fb17 	bl	801d5d8 <__assert_func>
 801efaa:	6922      	ldr	r2, [r4, #16]
 801efac:	3202      	adds	r2, #2
 801efae:	f104 010c 	add.w	r1, r4, #12
 801efb2:	0092      	lsls	r2, r2, #2
 801efb4:	300c      	adds	r0, #12
 801efb6:	f7fc fa89 	bl	801b4cc <memcpy>
 801efba:	4621      	mov	r1, r4
 801efbc:	4638      	mov	r0, r7
 801efbe:	f7ff ffa5 	bl	801ef0c <_Bfree>
 801efc2:	4644      	mov	r4, r8
 801efc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801efc8:	3501      	adds	r5, #1
 801efca:	615e      	str	r6, [r3, #20]
 801efcc:	6125      	str	r5, [r4, #16]
 801efce:	4620      	mov	r0, r4
 801efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efd4:	08022169 	.word	0x08022169
 801efd8:	08022258 	.word	0x08022258

0801efdc <__s2b>:
 801efdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efe0:	460c      	mov	r4, r1
 801efe2:	4615      	mov	r5, r2
 801efe4:	461f      	mov	r7, r3
 801efe6:	2209      	movs	r2, #9
 801efe8:	3308      	adds	r3, #8
 801efea:	4606      	mov	r6, r0
 801efec:	fb93 f3f2 	sdiv	r3, r3, r2
 801eff0:	2100      	movs	r1, #0
 801eff2:	2201      	movs	r2, #1
 801eff4:	429a      	cmp	r2, r3
 801eff6:	db09      	blt.n	801f00c <__s2b+0x30>
 801eff8:	4630      	mov	r0, r6
 801effa:	f7ff ff47 	bl	801ee8c <_Balloc>
 801effe:	b940      	cbnz	r0, 801f012 <__s2b+0x36>
 801f000:	4602      	mov	r2, r0
 801f002:	4b19      	ldr	r3, [pc, #100]	; (801f068 <__s2b+0x8c>)
 801f004:	4819      	ldr	r0, [pc, #100]	; (801f06c <__s2b+0x90>)
 801f006:	21ce      	movs	r1, #206	; 0xce
 801f008:	f7fe fae6 	bl	801d5d8 <__assert_func>
 801f00c:	0052      	lsls	r2, r2, #1
 801f00e:	3101      	adds	r1, #1
 801f010:	e7f0      	b.n	801eff4 <__s2b+0x18>
 801f012:	9b08      	ldr	r3, [sp, #32]
 801f014:	6143      	str	r3, [r0, #20]
 801f016:	2d09      	cmp	r5, #9
 801f018:	f04f 0301 	mov.w	r3, #1
 801f01c:	6103      	str	r3, [r0, #16]
 801f01e:	dd16      	ble.n	801f04e <__s2b+0x72>
 801f020:	f104 0909 	add.w	r9, r4, #9
 801f024:	46c8      	mov	r8, r9
 801f026:	442c      	add	r4, r5
 801f028:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f02c:	4601      	mov	r1, r0
 801f02e:	3b30      	subs	r3, #48	; 0x30
 801f030:	220a      	movs	r2, #10
 801f032:	4630      	mov	r0, r6
 801f034:	f7ff ff8c 	bl	801ef50 <__multadd>
 801f038:	45a0      	cmp	r8, r4
 801f03a:	d1f5      	bne.n	801f028 <__s2b+0x4c>
 801f03c:	f1a5 0408 	sub.w	r4, r5, #8
 801f040:	444c      	add	r4, r9
 801f042:	1b2d      	subs	r5, r5, r4
 801f044:	1963      	adds	r3, r4, r5
 801f046:	42bb      	cmp	r3, r7
 801f048:	db04      	blt.n	801f054 <__s2b+0x78>
 801f04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f04e:	340a      	adds	r4, #10
 801f050:	2509      	movs	r5, #9
 801f052:	e7f6      	b.n	801f042 <__s2b+0x66>
 801f054:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f058:	4601      	mov	r1, r0
 801f05a:	3b30      	subs	r3, #48	; 0x30
 801f05c:	220a      	movs	r2, #10
 801f05e:	4630      	mov	r0, r6
 801f060:	f7ff ff76 	bl	801ef50 <__multadd>
 801f064:	e7ee      	b.n	801f044 <__s2b+0x68>
 801f066:	bf00      	nop
 801f068:	08022169 	.word	0x08022169
 801f06c:	08022258 	.word	0x08022258

0801f070 <__hi0bits>:
 801f070:	0c03      	lsrs	r3, r0, #16
 801f072:	041b      	lsls	r3, r3, #16
 801f074:	b9d3      	cbnz	r3, 801f0ac <__hi0bits+0x3c>
 801f076:	0400      	lsls	r0, r0, #16
 801f078:	2310      	movs	r3, #16
 801f07a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f07e:	bf04      	itt	eq
 801f080:	0200      	lsleq	r0, r0, #8
 801f082:	3308      	addeq	r3, #8
 801f084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f088:	bf04      	itt	eq
 801f08a:	0100      	lsleq	r0, r0, #4
 801f08c:	3304      	addeq	r3, #4
 801f08e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f092:	bf04      	itt	eq
 801f094:	0080      	lsleq	r0, r0, #2
 801f096:	3302      	addeq	r3, #2
 801f098:	2800      	cmp	r0, #0
 801f09a:	db05      	blt.n	801f0a8 <__hi0bits+0x38>
 801f09c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f0a0:	f103 0301 	add.w	r3, r3, #1
 801f0a4:	bf08      	it	eq
 801f0a6:	2320      	moveq	r3, #32
 801f0a8:	4618      	mov	r0, r3
 801f0aa:	4770      	bx	lr
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	e7e4      	b.n	801f07a <__hi0bits+0xa>

0801f0b0 <__lo0bits>:
 801f0b0:	6803      	ldr	r3, [r0, #0]
 801f0b2:	f013 0207 	ands.w	r2, r3, #7
 801f0b6:	4601      	mov	r1, r0
 801f0b8:	d00b      	beq.n	801f0d2 <__lo0bits+0x22>
 801f0ba:	07da      	lsls	r2, r3, #31
 801f0bc:	d423      	bmi.n	801f106 <__lo0bits+0x56>
 801f0be:	0798      	lsls	r0, r3, #30
 801f0c0:	bf49      	itett	mi
 801f0c2:	085b      	lsrmi	r3, r3, #1
 801f0c4:	089b      	lsrpl	r3, r3, #2
 801f0c6:	2001      	movmi	r0, #1
 801f0c8:	600b      	strmi	r3, [r1, #0]
 801f0ca:	bf5c      	itt	pl
 801f0cc:	600b      	strpl	r3, [r1, #0]
 801f0ce:	2002      	movpl	r0, #2
 801f0d0:	4770      	bx	lr
 801f0d2:	b298      	uxth	r0, r3
 801f0d4:	b9a8      	cbnz	r0, 801f102 <__lo0bits+0x52>
 801f0d6:	0c1b      	lsrs	r3, r3, #16
 801f0d8:	2010      	movs	r0, #16
 801f0da:	b2da      	uxtb	r2, r3
 801f0dc:	b90a      	cbnz	r2, 801f0e2 <__lo0bits+0x32>
 801f0de:	3008      	adds	r0, #8
 801f0e0:	0a1b      	lsrs	r3, r3, #8
 801f0e2:	071a      	lsls	r2, r3, #28
 801f0e4:	bf04      	itt	eq
 801f0e6:	091b      	lsreq	r3, r3, #4
 801f0e8:	3004      	addeq	r0, #4
 801f0ea:	079a      	lsls	r2, r3, #30
 801f0ec:	bf04      	itt	eq
 801f0ee:	089b      	lsreq	r3, r3, #2
 801f0f0:	3002      	addeq	r0, #2
 801f0f2:	07da      	lsls	r2, r3, #31
 801f0f4:	d403      	bmi.n	801f0fe <__lo0bits+0x4e>
 801f0f6:	085b      	lsrs	r3, r3, #1
 801f0f8:	f100 0001 	add.w	r0, r0, #1
 801f0fc:	d005      	beq.n	801f10a <__lo0bits+0x5a>
 801f0fe:	600b      	str	r3, [r1, #0]
 801f100:	4770      	bx	lr
 801f102:	4610      	mov	r0, r2
 801f104:	e7e9      	b.n	801f0da <__lo0bits+0x2a>
 801f106:	2000      	movs	r0, #0
 801f108:	4770      	bx	lr
 801f10a:	2020      	movs	r0, #32
 801f10c:	4770      	bx	lr
	...

0801f110 <__i2b>:
 801f110:	b510      	push	{r4, lr}
 801f112:	460c      	mov	r4, r1
 801f114:	2101      	movs	r1, #1
 801f116:	f7ff feb9 	bl	801ee8c <_Balloc>
 801f11a:	4602      	mov	r2, r0
 801f11c:	b928      	cbnz	r0, 801f12a <__i2b+0x1a>
 801f11e:	4b05      	ldr	r3, [pc, #20]	; (801f134 <__i2b+0x24>)
 801f120:	4805      	ldr	r0, [pc, #20]	; (801f138 <__i2b+0x28>)
 801f122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f126:	f7fe fa57 	bl	801d5d8 <__assert_func>
 801f12a:	2301      	movs	r3, #1
 801f12c:	6144      	str	r4, [r0, #20]
 801f12e:	6103      	str	r3, [r0, #16]
 801f130:	bd10      	pop	{r4, pc}
 801f132:	bf00      	nop
 801f134:	08022169 	.word	0x08022169
 801f138:	08022258 	.word	0x08022258

0801f13c <__multiply>:
 801f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f140:	4691      	mov	r9, r2
 801f142:	690a      	ldr	r2, [r1, #16]
 801f144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f148:	429a      	cmp	r2, r3
 801f14a:	bfb8      	it	lt
 801f14c:	460b      	movlt	r3, r1
 801f14e:	460c      	mov	r4, r1
 801f150:	bfbc      	itt	lt
 801f152:	464c      	movlt	r4, r9
 801f154:	4699      	movlt	r9, r3
 801f156:	6927      	ldr	r7, [r4, #16]
 801f158:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f15c:	68a3      	ldr	r3, [r4, #8]
 801f15e:	6861      	ldr	r1, [r4, #4]
 801f160:	eb07 060a 	add.w	r6, r7, sl
 801f164:	42b3      	cmp	r3, r6
 801f166:	b085      	sub	sp, #20
 801f168:	bfb8      	it	lt
 801f16a:	3101      	addlt	r1, #1
 801f16c:	f7ff fe8e 	bl	801ee8c <_Balloc>
 801f170:	b930      	cbnz	r0, 801f180 <__multiply+0x44>
 801f172:	4602      	mov	r2, r0
 801f174:	4b44      	ldr	r3, [pc, #272]	; (801f288 <__multiply+0x14c>)
 801f176:	4845      	ldr	r0, [pc, #276]	; (801f28c <__multiply+0x150>)
 801f178:	f240 115d 	movw	r1, #349	; 0x15d
 801f17c:	f7fe fa2c 	bl	801d5d8 <__assert_func>
 801f180:	f100 0514 	add.w	r5, r0, #20
 801f184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f188:	462b      	mov	r3, r5
 801f18a:	2200      	movs	r2, #0
 801f18c:	4543      	cmp	r3, r8
 801f18e:	d321      	bcc.n	801f1d4 <__multiply+0x98>
 801f190:	f104 0314 	add.w	r3, r4, #20
 801f194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f198:	f109 0314 	add.w	r3, r9, #20
 801f19c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f1a0:	9202      	str	r2, [sp, #8]
 801f1a2:	1b3a      	subs	r2, r7, r4
 801f1a4:	3a15      	subs	r2, #21
 801f1a6:	f022 0203 	bic.w	r2, r2, #3
 801f1aa:	3204      	adds	r2, #4
 801f1ac:	f104 0115 	add.w	r1, r4, #21
 801f1b0:	428f      	cmp	r7, r1
 801f1b2:	bf38      	it	cc
 801f1b4:	2204      	movcc	r2, #4
 801f1b6:	9201      	str	r2, [sp, #4]
 801f1b8:	9a02      	ldr	r2, [sp, #8]
 801f1ba:	9303      	str	r3, [sp, #12]
 801f1bc:	429a      	cmp	r2, r3
 801f1be:	d80c      	bhi.n	801f1da <__multiply+0x9e>
 801f1c0:	2e00      	cmp	r6, #0
 801f1c2:	dd03      	ble.n	801f1cc <__multiply+0x90>
 801f1c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d05a      	beq.n	801f282 <__multiply+0x146>
 801f1cc:	6106      	str	r6, [r0, #16]
 801f1ce:	b005      	add	sp, #20
 801f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1d4:	f843 2b04 	str.w	r2, [r3], #4
 801f1d8:	e7d8      	b.n	801f18c <__multiply+0x50>
 801f1da:	f8b3 a000 	ldrh.w	sl, [r3]
 801f1de:	f1ba 0f00 	cmp.w	sl, #0
 801f1e2:	d024      	beq.n	801f22e <__multiply+0xf2>
 801f1e4:	f104 0e14 	add.w	lr, r4, #20
 801f1e8:	46a9      	mov	r9, r5
 801f1ea:	f04f 0c00 	mov.w	ip, #0
 801f1ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f1f2:	f8d9 1000 	ldr.w	r1, [r9]
 801f1f6:	fa1f fb82 	uxth.w	fp, r2
 801f1fa:	b289      	uxth	r1, r1
 801f1fc:	fb0a 110b 	mla	r1, sl, fp, r1
 801f200:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f204:	f8d9 2000 	ldr.w	r2, [r9]
 801f208:	4461      	add	r1, ip
 801f20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f20e:	fb0a c20b 	mla	r2, sl, fp, ip
 801f212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f216:	b289      	uxth	r1, r1
 801f218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f21c:	4577      	cmp	r7, lr
 801f21e:	f849 1b04 	str.w	r1, [r9], #4
 801f222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f226:	d8e2      	bhi.n	801f1ee <__multiply+0xb2>
 801f228:	9a01      	ldr	r2, [sp, #4]
 801f22a:	f845 c002 	str.w	ip, [r5, r2]
 801f22e:	9a03      	ldr	r2, [sp, #12]
 801f230:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f234:	3304      	adds	r3, #4
 801f236:	f1b9 0f00 	cmp.w	r9, #0
 801f23a:	d020      	beq.n	801f27e <__multiply+0x142>
 801f23c:	6829      	ldr	r1, [r5, #0]
 801f23e:	f104 0c14 	add.w	ip, r4, #20
 801f242:	46ae      	mov	lr, r5
 801f244:	f04f 0a00 	mov.w	sl, #0
 801f248:	f8bc b000 	ldrh.w	fp, [ip]
 801f24c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f250:	fb09 220b 	mla	r2, r9, fp, r2
 801f254:	4492      	add	sl, r2
 801f256:	b289      	uxth	r1, r1
 801f258:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f25c:	f84e 1b04 	str.w	r1, [lr], #4
 801f260:	f85c 2b04 	ldr.w	r2, [ip], #4
 801f264:	f8be 1000 	ldrh.w	r1, [lr]
 801f268:	0c12      	lsrs	r2, r2, #16
 801f26a:	fb09 1102 	mla	r1, r9, r2, r1
 801f26e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801f272:	4567      	cmp	r7, ip
 801f274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f278:	d8e6      	bhi.n	801f248 <__multiply+0x10c>
 801f27a:	9a01      	ldr	r2, [sp, #4]
 801f27c:	50a9      	str	r1, [r5, r2]
 801f27e:	3504      	adds	r5, #4
 801f280:	e79a      	b.n	801f1b8 <__multiply+0x7c>
 801f282:	3e01      	subs	r6, #1
 801f284:	e79c      	b.n	801f1c0 <__multiply+0x84>
 801f286:	bf00      	nop
 801f288:	08022169 	.word	0x08022169
 801f28c:	08022258 	.word	0x08022258

0801f290 <__pow5mult>:
 801f290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f294:	4615      	mov	r5, r2
 801f296:	f012 0203 	ands.w	r2, r2, #3
 801f29a:	4606      	mov	r6, r0
 801f29c:	460f      	mov	r7, r1
 801f29e:	d007      	beq.n	801f2b0 <__pow5mult+0x20>
 801f2a0:	4c25      	ldr	r4, [pc, #148]	; (801f338 <__pow5mult+0xa8>)
 801f2a2:	3a01      	subs	r2, #1
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f2aa:	f7ff fe51 	bl	801ef50 <__multadd>
 801f2ae:	4607      	mov	r7, r0
 801f2b0:	10ad      	asrs	r5, r5, #2
 801f2b2:	d03d      	beq.n	801f330 <__pow5mult+0xa0>
 801f2b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f2b6:	b97c      	cbnz	r4, 801f2d8 <__pow5mult+0x48>
 801f2b8:	2010      	movs	r0, #16
 801f2ba:	f7fc f8ff 	bl	801b4bc <malloc>
 801f2be:	4602      	mov	r2, r0
 801f2c0:	6270      	str	r0, [r6, #36]	; 0x24
 801f2c2:	b928      	cbnz	r0, 801f2d0 <__pow5mult+0x40>
 801f2c4:	4b1d      	ldr	r3, [pc, #116]	; (801f33c <__pow5mult+0xac>)
 801f2c6:	481e      	ldr	r0, [pc, #120]	; (801f340 <__pow5mult+0xb0>)
 801f2c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f2cc:	f7fe f984 	bl	801d5d8 <__assert_func>
 801f2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f2d4:	6004      	str	r4, [r0, #0]
 801f2d6:	60c4      	str	r4, [r0, #12]
 801f2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f2e0:	b94c      	cbnz	r4, 801f2f6 <__pow5mult+0x66>
 801f2e2:	f240 2171 	movw	r1, #625	; 0x271
 801f2e6:	4630      	mov	r0, r6
 801f2e8:	f7ff ff12 	bl	801f110 <__i2b>
 801f2ec:	2300      	movs	r3, #0
 801f2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 801f2f2:	4604      	mov	r4, r0
 801f2f4:	6003      	str	r3, [r0, #0]
 801f2f6:	f04f 0900 	mov.w	r9, #0
 801f2fa:	07eb      	lsls	r3, r5, #31
 801f2fc:	d50a      	bpl.n	801f314 <__pow5mult+0x84>
 801f2fe:	4639      	mov	r1, r7
 801f300:	4622      	mov	r2, r4
 801f302:	4630      	mov	r0, r6
 801f304:	f7ff ff1a 	bl	801f13c <__multiply>
 801f308:	4639      	mov	r1, r7
 801f30a:	4680      	mov	r8, r0
 801f30c:	4630      	mov	r0, r6
 801f30e:	f7ff fdfd 	bl	801ef0c <_Bfree>
 801f312:	4647      	mov	r7, r8
 801f314:	106d      	asrs	r5, r5, #1
 801f316:	d00b      	beq.n	801f330 <__pow5mult+0xa0>
 801f318:	6820      	ldr	r0, [r4, #0]
 801f31a:	b938      	cbnz	r0, 801f32c <__pow5mult+0x9c>
 801f31c:	4622      	mov	r2, r4
 801f31e:	4621      	mov	r1, r4
 801f320:	4630      	mov	r0, r6
 801f322:	f7ff ff0b 	bl	801f13c <__multiply>
 801f326:	6020      	str	r0, [r4, #0]
 801f328:	f8c0 9000 	str.w	r9, [r0]
 801f32c:	4604      	mov	r4, r0
 801f32e:	e7e4      	b.n	801f2fa <__pow5mult+0x6a>
 801f330:	4638      	mov	r0, r7
 801f332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f336:	bf00      	nop
 801f338:	080223a8 	.word	0x080223a8
 801f33c:	08021f50 	.word	0x08021f50
 801f340:	08022258 	.word	0x08022258

0801f344 <__lshift>:
 801f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f348:	460c      	mov	r4, r1
 801f34a:	6849      	ldr	r1, [r1, #4]
 801f34c:	6923      	ldr	r3, [r4, #16]
 801f34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f352:	68a3      	ldr	r3, [r4, #8]
 801f354:	4607      	mov	r7, r0
 801f356:	4691      	mov	r9, r2
 801f358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f35c:	f108 0601 	add.w	r6, r8, #1
 801f360:	42b3      	cmp	r3, r6
 801f362:	db0b      	blt.n	801f37c <__lshift+0x38>
 801f364:	4638      	mov	r0, r7
 801f366:	f7ff fd91 	bl	801ee8c <_Balloc>
 801f36a:	4605      	mov	r5, r0
 801f36c:	b948      	cbnz	r0, 801f382 <__lshift+0x3e>
 801f36e:	4602      	mov	r2, r0
 801f370:	4b2a      	ldr	r3, [pc, #168]	; (801f41c <__lshift+0xd8>)
 801f372:	482b      	ldr	r0, [pc, #172]	; (801f420 <__lshift+0xdc>)
 801f374:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f378:	f7fe f92e 	bl	801d5d8 <__assert_func>
 801f37c:	3101      	adds	r1, #1
 801f37e:	005b      	lsls	r3, r3, #1
 801f380:	e7ee      	b.n	801f360 <__lshift+0x1c>
 801f382:	2300      	movs	r3, #0
 801f384:	f100 0114 	add.w	r1, r0, #20
 801f388:	f100 0210 	add.w	r2, r0, #16
 801f38c:	4618      	mov	r0, r3
 801f38e:	4553      	cmp	r3, sl
 801f390:	db37      	blt.n	801f402 <__lshift+0xbe>
 801f392:	6920      	ldr	r0, [r4, #16]
 801f394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f398:	f104 0314 	add.w	r3, r4, #20
 801f39c:	f019 091f 	ands.w	r9, r9, #31
 801f3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f3a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f3a8:	d02f      	beq.n	801f40a <__lshift+0xc6>
 801f3aa:	f1c9 0e20 	rsb	lr, r9, #32
 801f3ae:	468a      	mov	sl, r1
 801f3b0:	f04f 0c00 	mov.w	ip, #0
 801f3b4:	681a      	ldr	r2, [r3, #0]
 801f3b6:	fa02 f209 	lsl.w	r2, r2, r9
 801f3ba:	ea42 020c 	orr.w	r2, r2, ip
 801f3be:	f84a 2b04 	str.w	r2, [sl], #4
 801f3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f3c6:	4298      	cmp	r0, r3
 801f3c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801f3cc:	d8f2      	bhi.n	801f3b4 <__lshift+0x70>
 801f3ce:	1b03      	subs	r3, r0, r4
 801f3d0:	3b15      	subs	r3, #21
 801f3d2:	f023 0303 	bic.w	r3, r3, #3
 801f3d6:	3304      	adds	r3, #4
 801f3d8:	f104 0215 	add.w	r2, r4, #21
 801f3dc:	4290      	cmp	r0, r2
 801f3de:	bf38      	it	cc
 801f3e0:	2304      	movcc	r3, #4
 801f3e2:	f841 c003 	str.w	ip, [r1, r3]
 801f3e6:	f1bc 0f00 	cmp.w	ip, #0
 801f3ea:	d001      	beq.n	801f3f0 <__lshift+0xac>
 801f3ec:	f108 0602 	add.w	r6, r8, #2
 801f3f0:	3e01      	subs	r6, #1
 801f3f2:	4638      	mov	r0, r7
 801f3f4:	612e      	str	r6, [r5, #16]
 801f3f6:	4621      	mov	r1, r4
 801f3f8:	f7ff fd88 	bl	801ef0c <_Bfree>
 801f3fc:	4628      	mov	r0, r5
 801f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f402:	f842 0f04 	str.w	r0, [r2, #4]!
 801f406:	3301      	adds	r3, #1
 801f408:	e7c1      	b.n	801f38e <__lshift+0x4a>
 801f40a:	3904      	subs	r1, #4
 801f40c:	f853 2b04 	ldr.w	r2, [r3], #4
 801f410:	f841 2f04 	str.w	r2, [r1, #4]!
 801f414:	4298      	cmp	r0, r3
 801f416:	d8f9      	bhi.n	801f40c <__lshift+0xc8>
 801f418:	e7ea      	b.n	801f3f0 <__lshift+0xac>
 801f41a:	bf00      	nop
 801f41c:	08022169 	.word	0x08022169
 801f420:	08022258 	.word	0x08022258

0801f424 <__mcmp>:
 801f424:	b530      	push	{r4, r5, lr}
 801f426:	6902      	ldr	r2, [r0, #16]
 801f428:	690c      	ldr	r4, [r1, #16]
 801f42a:	1b12      	subs	r2, r2, r4
 801f42c:	d10e      	bne.n	801f44c <__mcmp+0x28>
 801f42e:	f100 0314 	add.w	r3, r0, #20
 801f432:	3114      	adds	r1, #20
 801f434:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f438:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f43c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f440:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f444:	42a5      	cmp	r5, r4
 801f446:	d003      	beq.n	801f450 <__mcmp+0x2c>
 801f448:	d305      	bcc.n	801f456 <__mcmp+0x32>
 801f44a:	2201      	movs	r2, #1
 801f44c:	4610      	mov	r0, r2
 801f44e:	bd30      	pop	{r4, r5, pc}
 801f450:	4283      	cmp	r3, r0
 801f452:	d3f3      	bcc.n	801f43c <__mcmp+0x18>
 801f454:	e7fa      	b.n	801f44c <__mcmp+0x28>
 801f456:	f04f 32ff 	mov.w	r2, #4294967295
 801f45a:	e7f7      	b.n	801f44c <__mcmp+0x28>

0801f45c <__mdiff>:
 801f45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f460:	460c      	mov	r4, r1
 801f462:	4606      	mov	r6, r0
 801f464:	4611      	mov	r1, r2
 801f466:	4620      	mov	r0, r4
 801f468:	4690      	mov	r8, r2
 801f46a:	f7ff ffdb 	bl	801f424 <__mcmp>
 801f46e:	1e05      	subs	r5, r0, #0
 801f470:	d110      	bne.n	801f494 <__mdiff+0x38>
 801f472:	4629      	mov	r1, r5
 801f474:	4630      	mov	r0, r6
 801f476:	f7ff fd09 	bl	801ee8c <_Balloc>
 801f47a:	b930      	cbnz	r0, 801f48a <__mdiff+0x2e>
 801f47c:	4b3a      	ldr	r3, [pc, #232]	; (801f568 <__mdiff+0x10c>)
 801f47e:	4602      	mov	r2, r0
 801f480:	f240 2132 	movw	r1, #562	; 0x232
 801f484:	4839      	ldr	r0, [pc, #228]	; (801f56c <__mdiff+0x110>)
 801f486:	f7fe f8a7 	bl	801d5d8 <__assert_func>
 801f48a:	2301      	movs	r3, #1
 801f48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f494:	bfa4      	itt	ge
 801f496:	4643      	movge	r3, r8
 801f498:	46a0      	movge	r8, r4
 801f49a:	4630      	mov	r0, r6
 801f49c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f4a0:	bfa6      	itte	ge
 801f4a2:	461c      	movge	r4, r3
 801f4a4:	2500      	movge	r5, #0
 801f4a6:	2501      	movlt	r5, #1
 801f4a8:	f7ff fcf0 	bl	801ee8c <_Balloc>
 801f4ac:	b920      	cbnz	r0, 801f4b8 <__mdiff+0x5c>
 801f4ae:	4b2e      	ldr	r3, [pc, #184]	; (801f568 <__mdiff+0x10c>)
 801f4b0:	4602      	mov	r2, r0
 801f4b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f4b6:	e7e5      	b.n	801f484 <__mdiff+0x28>
 801f4b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f4bc:	6926      	ldr	r6, [r4, #16]
 801f4be:	60c5      	str	r5, [r0, #12]
 801f4c0:	f104 0914 	add.w	r9, r4, #20
 801f4c4:	f108 0514 	add.w	r5, r8, #20
 801f4c8:	f100 0e14 	add.w	lr, r0, #20
 801f4cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f4d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f4d4:	f108 0210 	add.w	r2, r8, #16
 801f4d8:	46f2      	mov	sl, lr
 801f4da:	2100      	movs	r1, #0
 801f4dc:	f859 3b04 	ldr.w	r3, [r9], #4
 801f4e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f4e4:	fa1f f883 	uxth.w	r8, r3
 801f4e8:	fa11 f18b 	uxtah	r1, r1, fp
 801f4ec:	0c1b      	lsrs	r3, r3, #16
 801f4ee:	eba1 0808 	sub.w	r8, r1, r8
 801f4f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f4f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f4fa:	fa1f f888 	uxth.w	r8, r8
 801f4fe:	1419      	asrs	r1, r3, #16
 801f500:	454e      	cmp	r6, r9
 801f502:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f506:	f84a 3b04 	str.w	r3, [sl], #4
 801f50a:	d8e7      	bhi.n	801f4dc <__mdiff+0x80>
 801f50c:	1b33      	subs	r3, r6, r4
 801f50e:	3b15      	subs	r3, #21
 801f510:	f023 0303 	bic.w	r3, r3, #3
 801f514:	3304      	adds	r3, #4
 801f516:	3415      	adds	r4, #21
 801f518:	42a6      	cmp	r6, r4
 801f51a:	bf38      	it	cc
 801f51c:	2304      	movcc	r3, #4
 801f51e:	441d      	add	r5, r3
 801f520:	4473      	add	r3, lr
 801f522:	469e      	mov	lr, r3
 801f524:	462e      	mov	r6, r5
 801f526:	4566      	cmp	r6, ip
 801f528:	d30e      	bcc.n	801f548 <__mdiff+0xec>
 801f52a:	f10c 0203 	add.w	r2, ip, #3
 801f52e:	1b52      	subs	r2, r2, r5
 801f530:	f022 0203 	bic.w	r2, r2, #3
 801f534:	3d03      	subs	r5, #3
 801f536:	45ac      	cmp	ip, r5
 801f538:	bf38      	it	cc
 801f53a:	2200      	movcc	r2, #0
 801f53c:	441a      	add	r2, r3
 801f53e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f542:	b17b      	cbz	r3, 801f564 <__mdiff+0x108>
 801f544:	6107      	str	r7, [r0, #16]
 801f546:	e7a3      	b.n	801f490 <__mdiff+0x34>
 801f548:	f856 8b04 	ldr.w	r8, [r6], #4
 801f54c:	fa11 f288 	uxtah	r2, r1, r8
 801f550:	1414      	asrs	r4, r2, #16
 801f552:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f556:	b292      	uxth	r2, r2
 801f558:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f55c:	f84e 2b04 	str.w	r2, [lr], #4
 801f560:	1421      	asrs	r1, r4, #16
 801f562:	e7e0      	b.n	801f526 <__mdiff+0xca>
 801f564:	3f01      	subs	r7, #1
 801f566:	e7ea      	b.n	801f53e <__mdiff+0xe2>
 801f568:	08022169 	.word	0x08022169
 801f56c:	08022258 	.word	0x08022258

0801f570 <__ulp>:
 801f570:	b082      	sub	sp, #8
 801f572:	ed8d 0b00 	vstr	d0, [sp]
 801f576:	9b01      	ldr	r3, [sp, #4]
 801f578:	4912      	ldr	r1, [pc, #72]	; (801f5c4 <__ulp+0x54>)
 801f57a:	4019      	ands	r1, r3
 801f57c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f580:	2900      	cmp	r1, #0
 801f582:	dd05      	ble.n	801f590 <__ulp+0x20>
 801f584:	2200      	movs	r2, #0
 801f586:	460b      	mov	r3, r1
 801f588:	ec43 2b10 	vmov	d0, r2, r3
 801f58c:	b002      	add	sp, #8
 801f58e:	4770      	bx	lr
 801f590:	4249      	negs	r1, r1
 801f592:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f596:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f59a:	f04f 0200 	mov.w	r2, #0
 801f59e:	f04f 0300 	mov.w	r3, #0
 801f5a2:	da04      	bge.n	801f5ae <__ulp+0x3e>
 801f5a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f5a8:	fa41 f300 	asr.w	r3, r1, r0
 801f5ac:	e7ec      	b.n	801f588 <__ulp+0x18>
 801f5ae:	f1a0 0114 	sub.w	r1, r0, #20
 801f5b2:	291e      	cmp	r1, #30
 801f5b4:	bfda      	itte	le
 801f5b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f5ba:	fa20 f101 	lsrle.w	r1, r0, r1
 801f5be:	2101      	movgt	r1, #1
 801f5c0:	460a      	mov	r2, r1
 801f5c2:	e7e1      	b.n	801f588 <__ulp+0x18>
 801f5c4:	7ff00000 	.word	0x7ff00000

0801f5c8 <__b2d>:
 801f5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5ca:	6905      	ldr	r5, [r0, #16]
 801f5cc:	f100 0714 	add.w	r7, r0, #20
 801f5d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f5d4:	1f2e      	subs	r6, r5, #4
 801f5d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f5da:	4620      	mov	r0, r4
 801f5dc:	f7ff fd48 	bl	801f070 <__hi0bits>
 801f5e0:	f1c0 0320 	rsb	r3, r0, #32
 801f5e4:	280a      	cmp	r0, #10
 801f5e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f664 <__b2d+0x9c>
 801f5ea:	600b      	str	r3, [r1, #0]
 801f5ec:	dc14      	bgt.n	801f618 <__b2d+0x50>
 801f5ee:	f1c0 0e0b 	rsb	lr, r0, #11
 801f5f2:	fa24 f10e 	lsr.w	r1, r4, lr
 801f5f6:	42b7      	cmp	r7, r6
 801f5f8:	ea41 030c 	orr.w	r3, r1, ip
 801f5fc:	bf34      	ite	cc
 801f5fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f602:	2100      	movcs	r1, #0
 801f604:	3015      	adds	r0, #21
 801f606:	fa04 f000 	lsl.w	r0, r4, r0
 801f60a:	fa21 f10e 	lsr.w	r1, r1, lr
 801f60e:	ea40 0201 	orr.w	r2, r0, r1
 801f612:	ec43 2b10 	vmov	d0, r2, r3
 801f616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f618:	42b7      	cmp	r7, r6
 801f61a:	bf3a      	itte	cc
 801f61c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f620:	f1a5 0608 	subcc.w	r6, r5, #8
 801f624:	2100      	movcs	r1, #0
 801f626:	380b      	subs	r0, #11
 801f628:	d017      	beq.n	801f65a <__b2d+0x92>
 801f62a:	f1c0 0c20 	rsb	ip, r0, #32
 801f62e:	fa04 f500 	lsl.w	r5, r4, r0
 801f632:	42be      	cmp	r6, r7
 801f634:	fa21 f40c 	lsr.w	r4, r1, ip
 801f638:	ea45 0504 	orr.w	r5, r5, r4
 801f63c:	bf8c      	ite	hi
 801f63e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f642:	2400      	movls	r4, #0
 801f644:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f648:	fa01 f000 	lsl.w	r0, r1, r0
 801f64c:	fa24 f40c 	lsr.w	r4, r4, ip
 801f650:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f654:	ea40 0204 	orr.w	r2, r0, r4
 801f658:	e7db      	b.n	801f612 <__b2d+0x4a>
 801f65a:	ea44 030c 	orr.w	r3, r4, ip
 801f65e:	460a      	mov	r2, r1
 801f660:	e7d7      	b.n	801f612 <__b2d+0x4a>
 801f662:	bf00      	nop
 801f664:	3ff00000 	.word	0x3ff00000

0801f668 <__d2b>:
 801f668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f66c:	4689      	mov	r9, r1
 801f66e:	2101      	movs	r1, #1
 801f670:	ec57 6b10 	vmov	r6, r7, d0
 801f674:	4690      	mov	r8, r2
 801f676:	f7ff fc09 	bl	801ee8c <_Balloc>
 801f67a:	4604      	mov	r4, r0
 801f67c:	b930      	cbnz	r0, 801f68c <__d2b+0x24>
 801f67e:	4602      	mov	r2, r0
 801f680:	4b25      	ldr	r3, [pc, #148]	; (801f718 <__d2b+0xb0>)
 801f682:	4826      	ldr	r0, [pc, #152]	; (801f71c <__d2b+0xb4>)
 801f684:	f240 310a 	movw	r1, #778	; 0x30a
 801f688:	f7fd ffa6 	bl	801d5d8 <__assert_func>
 801f68c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f694:	bb35      	cbnz	r5, 801f6e4 <__d2b+0x7c>
 801f696:	2e00      	cmp	r6, #0
 801f698:	9301      	str	r3, [sp, #4]
 801f69a:	d028      	beq.n	801f6ee <__d2b+0x86>
 801f69c:	4668      	mov	r0, sp
 801f69e:	9600      	str	r6, [sp, #0]
 801f6a0:	f7ff fd06 	bl	801f0b0 <__lo0bits>
 801f6a4:	9900      	ldr	r1, [sp, #0]
 801f6a6:	b300      	cbz	r0, 801f6ea <__d2b+0x82>
 801f6a8:	9a01      	ldr	r2, [sp, #4]
 801f6aa:	f1c0 0320 	rsb	r3, r0, #32
 801f6ae:	fa02 f303 	lsl.w	r3, r2, r3
 801f6b2:	430b      	orrs	r3, r1
 801f6b4:	40c2      	lsrs	r2, r0
 801f6b6:	6163      	str	r3, [r4, #20]
 801f6b8:	9201      	str	r2, [sp, #4]
 801f6ba:	9b01      	ldr	r3, [sp, #4]
 801f6bc:	61a3      	str	r3, [r4, #24]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	bf14      	ite	ne
 801f6c2:	2202      	movne	r2, #2
 801f6c4:	2201      	moveq	r2, #1
 801f6c6:	6122      	str	r2, [r4, #16]
 801f6c8:	b1d5      	cbz	r5, 801f700 <__d2b+0x98>
 801f6ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f6ce:	4405      	add	r5, r0
 801f6d0:	f8c9 5000 	str.w	r5, [r9]
 801f6d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f6d8:	f8c8 0000 	str.w	r0, [r8]
 801f6dc:	4620      	mov	r0, r4
 801f6de:	b003      	add	sp, #12
 801f6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f6e8:	e7d5      	b.n	801f696 <__d2b+0x2e>
 801f6ea:	6161      	str	r1, [r4, #20]
 801f6ec:	e7e5      	b.n	801f6ba <__d2b+0x52>
 801f6ee:	a801      	add	r0, sp, #4
 801f6f0:	f7ff fcde 	bl	801f0b0 <__lo0bits>
 801f6f4:	9b01      	ldr	r3, [sp, #4]
 801f6f6:	6163      	str	r3, [r4, #20]
 801f6f8:	2201      	movs	r2, #1
 801f6fa:	6122      	str	r2, [r4, #16]
 801f6fc:	3020      	adds	r0, #32
 801f6fe:	e7e3      	b.n	801f6c8 <__d2b+0x60>
 801f700:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f704:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f708:	f8c9 0000 	str.w	r0, [r9]
 801f70c:	6918      	ldr	r0, [r3, #16]
 801f70e:	f7ff fcaf 	bl	801f070 <__hi0bits>
 801f712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f716:	e7df      	b.n	801f6d8 <__d2b+0x70>
 801f718:	08022169 	.word	0x08022169
 801f71c:	08022258 	.word	0x08022258

0801f720 <__ratio>:
 801f720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f724:	4688      	mov	r8, r1
 801f726:	4669      	mov	r1, sp
 801f728:	4681      	mov	r9, r0
 801f72a:	f7ff ff4d 	bl	801f5c8 <__b2d>
 801f72e:	a901      	add	r1, sp, #4
 801f730:	4640      	mov	r0, r8
 801f732:	ec55 4b10 	vmov	r4, r5, d0
 801f736:	f7ff ff47 	bl	801f5c8 <__b2d>
 801f73a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f73e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f742:	eba3 0c02 	sub.w	ip, r3, r2
 801f746:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f74a:	1a9b      	subs	r3, r3, r2
 801f74c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f750:	ec51 0b10 	vmov	r0, r1, d0
 801f754:	2b00      	cmp	r3, #0
 801f756:	bfd6      	itet	le
 801f758:	460a      	movle	r2, r1
 801f75a:	462a      	movgt	r2, r5
 801f75c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f760:	468b      	mov	fp, r1
 801f762:	462f      	mov	r7, r5
 801f764:	bfd4      	ite	le
 801f766:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f76a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f76e:	4620      	mov	r0, r4
 801f770:	ee10 2a10 	vmov	r2, s0
 801f774:	465b      	mov	r3, fp
 801f776:	4639      	mov	r1, r7
 801f778:	f7e1 f880 	bl	800087c <__aeabi_ddiv>
 801f77c:	ec41 0b10 	vmov	d0, r0, r1
 801f780:	b003      	add	sp, #12
 801f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f786 <__copybits>:
 801f786:	3901      	subs	r1, #1
 801f788:	b570      	push	{r4, r5, r6, lr}
 801f78a:	1149      	asrs	r1, r1, #5
 801f78c:	6914      	ldr	r4, [r2, #16]
 801f78e:	3101      	adds	r1, #1
 801f790:	f102 0314 	add.w	r3, r2, #20
 801f794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f798:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f79c:	1f05      	subs	r5, r0, #4
 801f79e:	42a3      	cmp	r3, r4
 801f7a0:	d30c      	bcc.n	801f7bc <__copybits+0x36>
 801f7a2:	1aa3      	subs	r3, r4, r2
 801f7a4:	3b11      	subs	r3, #17
 801f7a6:	f023 0303 	bic.w	r3, r3, #3
 801f7aa:	3211      	adds	r2, #17
 801f7ac:	42a2      	cmp	r2, r4
 801f7ae:	bf88      	it	hi
 801f7b0:	2300      	movhi	r3, #0
 801f7b2:	4418      	add	r0, r3
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	4288      	cmp	r0, r1
 801f7b8:	d305      	bcc.n	801f7c6 <__copybits+0x40>
 801f7ba:	bd70      	pop	{r4, r5, r6, pc}
 801f7bc:	f853 6b04 	ldr.w	r6, [r3], #4
 801f7c0:	f845 6f04 	str.w	r6, [r5, #4]!
 801f7c4:	e7eb      	b.n	801f79e <__copybits+0x18>
 801f7c6:	f840 3b04 	str.w	r3, [r0], #4
 801f7ca:	e7f4      	b.n	801f7b6 <__copybits+0x30>

0801f7cc <__any_on>:
 801f7cc:	f100 0214 	add.w	r2, r0, #20
 801f7d0:	6900      	ldr	r0, [r0, #16]
 801f7d2:	114b      	asrs	r3, r1, #5
 801f7d4:	4298      	cmp	r0, r3
 801f7d6:	b510      	push	{r4, lr}
 801f7d8:	db11      	blt.n	801f7fe <__any_on+0x32>
 801f7da:	dd0a      	ble.n	801f7f2 <__any_on+0x26>
 801f7dc:	f011 011f 	ands.w	r1, r1, #31
 801f7e0:	d007      	beq.n	801f7f2 <__any_on+0x26>
 801f7e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f7e6:	fa24 f001 	lsr.w	r0, r4, r1
 801f7ea:	fa00 f101 	lsl.w	r1, r0, r1
 801f7ee:	428c      	cmp	r4, r1
 801f7f0:	d10b      	bne.n	801f80a <__any_on+0x3e>
 801f7f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f7f6:	4293      	cmp	r3, r2
 801f7f8:	d803      	bhi.n	801f802 <__any_on+0x36>
 801f7fa:	2000      	movs	r0, #0
 801f7fc:	bd10      	pop	{r4, pc}
 801f7fe:	4603      	mov	r3, r0
 801f800:	e7f7      	b.n	801f7f2 <__any_on+0x26>
 801f802:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f806:	2900      	cmp	r1, #0
 801f808:	d0f5      	beq.n	801f7f6 <__any_on+0x2a>
 801f80a:	2001      	movs	r0, #1
 801f80c:	e7f6      	b.n	801f7fc <__any_on+0x30>

0801f80e <_calloc_r>:
 801f80e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f810:	fba1 2402 	umull	r2, r4, r1, r2
 801f814:	b94c      	cbnz	r4, 801f82a <_calloc_r+0x1c>
 801f816:	4611      	mov	r1, r2
 801f818:	9201      	str	r2, [sp, #4]
 801f81a:	f7fb fef3 	bl	801b604 <_malloc_r>
 801f81e:	9a01      	ldr	r2, [sp, #4]
 801f820:	4605      	mov	r5, r0
 801f822:	b930      	cbnz	r0, 801f832 <_calloc_r+0x24>
 801f824:	4628      	mov	r0, r5
 801f826:	b003      	add	sp, #12
 801f828:	bd30      	pop	{r4, r5, pc}
 801f82a:	220c      	movs	r2, #12
 801f82c:	6002      	str	r2, [r0, #0]
 801f82e:	2500      	movs	r5, #0
 801f830:	e7f8      	b.n	801f824 <_calloc_r+0x16>
 801f832:	4621      	mov	r1, r4
 801f834:	f7fb fe72 	bl	801b51c <memset>
 801f838:	e7f4      	b.n	801f824 <_calloc_r+0x16>

0801f83a <__ssputs_r>:
 801f83a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f83e:	688e      	ldr	r6, [r1, #8]
 801f840:	429e      	cmp	r6, r3
 801f842:	4682      	mov	sl, r0
 801f844:	460c      	mov	r4, r1
 801f846:	4690      	mov	r8, r2
 801f848:	461f      	mov	r7, r3
 801f84a:	d838      	bhi.n	801f8be <__ssputs_r+0x84>
 801f84c:	898a      	ldrh	r2, [r1, #12]
 801f84e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f852:	d032      	beq.n	801f8ba <__ssputs_r+0x80>
 801f854:	6825      	ldr	r5, [r4, #0]
 801f856:	6909      	ldr	r1, [r1, #16]
 801f858:	eba5 0901 	sub.w	r9, r5, r1
 801f85c:	6965      	ldr	r5, [r4, #20]
 801f85e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f866:	3301      	adds	r3, #1
 801f868:	444b      	add	r3, r9
 801f86a:	106d      	asrs	r5, r5, #1
 801f86c:	429d      	cmp	r5, r3
 801f86e:	bf38      	it	cc
 801f870:	461d      	movcc	r5, r3
 801f872:	0553      	lsls	r3, r2, #21
 801f874:	d531      	bpl.n	801f8da <__ssputs_r+0xa0>
 801f876:	4629      	mov	r1, r5
 801f878:	f7fb fec4 	bl	801b604 <_malloc_r>
 801f87c:	4606      	mov	r6, r0
 801f87e:	b950      	cbnz	r0, 801f896 <__ssputs_r+0x5c>
 801f880:	230c      	movs	r3, #12
 801f882:	f8ca 3000 	str.w	r3, [sl]
 801f886:	89a3      	ldrh	r3, [r4, #12]
 801f888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f88c:	81a3      	strh	r3, [r4, #12]
 801f88e:	f04f 30ff 	mov.w	r0, #4294967295
 801f892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f896:	6921      	ldr	r1, [r4, #16]
 801f898:	464a      	mov	r2, r9
 801f89a:	f7fb fe17 	bl	801b4cc <memcpy>
 801f89e:	89a3      	ldrh	r3, [r4, #12]
 801f8a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f8a8:	81a3      	strh	r3, [r4, #12]
 801f8aa:	6126      	str	r6, [r4, #16]
 801f8ac:	6165      	str	r5, [r4, #20]
 801f8ae:	444e      	add	r6, r9
 801f8b0:	eba5 0509 	sub.w	r5, r5, r9
 801f8b4:	6026      	str	r6, [r4, #0]
 801f8b6:	60a5      	str	r5, [r4, #8]
 801f8b8:	463e      	mov	r6, r7
 801f8ba:	42be      	cmp	r6, r7
 801f8bc:	d900      	bls.n	801f8c0 <__ssputs_r+0x86>
 801f8be:	463e      	mov	r6, r7
 801f8c0:	6820      	ldr	r0, [r4, #0]
 801f8c2:	4632      	mov	r2, r6
 801f8c4:	4641      	mov	r1, r8
 801f8c6:	f7fb fe0f 	bl	801b4e8 <memmove>
 801f8ca:	68a3      	ldr	r3, [r4, #8]
 801f8cc:	1b9b      	subs	r3, r3, r6
 801f8ce:	60a3      	str	r3, [r4, #8]
 801f8d0:	6823      	ldr	r3, [r4, #0]
 801f8d2:	4433      	add	r3, r6
 801f8d4:	6023      	str	r3, [r4, #0]
 801f8d6:	2000      	movs	r0, #0
 801f8d8:	e7db      	b.n	801f892 <__ssputs_r+0x58>
 801f8da:	462a      	mov	r2, r5
 801f8dc:	f000 fb2e 	bl	801ff3c <_realloc_r>
 801f8e0:	4606      	mov	r6, r0
 801f8e2:	2800      	cmp	r0, #0
 801f8e4:	d1e1      	bne.n	801f8aa <__ssputs_r+0x70>
 801f8e6:	6921      	ldr	r1, [r4, #16]
 801f8e8:	4650      	mov	r0, sl
 801f8ea:	f7fb fe1f 	bl	801b52c <_free_r>
 801f8ee:	e7c7      	b.n	801f880 <__ssputs_r+0x46>

0801f8f0 <_svfiprintf_r>:
 801f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8f4:	4698      	mov	r8, r3
 801f8f6:	898b      	ldrh	r3, [r1, #12]
 801f8f8:	061b      	lsls	r3, r3, #24
 801f8fa:	b09d      	sub	sp, #116	; 0x74
 801f8fc:	4607      	mov	r7, r0
 801f8fe:	460d      	mov	r5, r1
 801f900:	4614      	mov	r4, r2
 801f902:	d50e      	bpl.n	801f922 <_svfiprintf_r+0x32>
 801f904:	690b      	ldr	r3, [r1, #16]
 801f906:	b963      	cbnz	r3, 801f922 <_svfiprintf_r+0x32>
 801f908:	2140      	movs	r1, #64	; 0x40
 801f90a:	f7fb fe7b 	bl	801b604 <_malloc_r>
 801f90e:	6028      	str	r0, [r5, #0]
 801f910:	6128      	str	r0, [r5, #16]
 801f912:	b920      	cbnz	r0, 801f91e <_svfiprintf_r+0x2e>
 801f914:	230c      	movs	r3, #12
 801f916:	603b      	str	r3, [r7, #0]
 801f918:	f04f 30ff 	mov.w	r0, #4294967295
 801f91c:	e0d1      	b.n	801fac2 <_svfiprintf_r+0x1d2>
 801f91e:	2340      	movs	r3, #64	; 0x40
 801f920:	616b      	str	r3, [r5, #20]
 801f922:	2300      	movs	r3, #0
 801f924:	9309      	str	r3, [sp, #36]	; 0x24
 801f926:	2320      	movs	r3, #32
 801f928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f92c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f930:	2330      	movs	r3, #48	; 0x30
 801f932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fadc <_svfiprintf_r+0x1ec>
 801f936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f93a:	f04f 0901 	mov.w	r9, #1
 801f93e:	4623      	mov	r3, r4
 801f940:	469a      	mov	sl, r3
 801f942:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f946:	b10a      	cbz	r2, 801f94c <_svfiprintf_r+0x5c>
 801f948:	2a25      	cmp	r2, #37	; 0x25
 801f94a:	d1f9      	bne.n	801f940 <_svfiprintf_r+0x50>
 801f94c:	ebba 0b04 	subs.w	fp, sl, r4
 801f950:	d00b      	beq.n	801f96a <_svfiprintf_r+0x7a>
 801f952:	465b      	mov	r3, fp
 801f954:	4622      	mov	r2, r4
 801f956:	4629      	mov	r1, r5
 801f958:	4638      	mov	r0, r7
 801f95a:	f7ff ff6e 	bl	801f83a <__ssputs_r>
 801f95e:	3001      	adds	r0, #1
 801f960:	f000 80aa 	beq.w	801fab8 <_svfiprintf_r+0x1c8>
 801f964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f966:	445a      	add	r2, fp
 801f968:	9209      	str	r2, [sp, #36]	; 0x24
 801f96a:	f89a 3000 	ldrb.w	r3, [sl]
 801f96e:	2b00      	cmp	r3, #0
 801f970:	f000 80a2 	beq.w	801fab8 <_svfiprintf_r+0x1c8>
 801f974:	2300      	movs	r3, #0
 801f976:	f04f 32ff 	mov.w	r2, #4294967295
 801f97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f97e:	f10a 0a01 	add.w	sl, sl, #1
 801f982:	9304      	str	r3, [sp, #16]
 801f984:	9307      	str	r3, [sp, #28]
 801f986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f98a:	931a      	str	r3, [sp, #104]	; 0x68
 801f98c:	4654      	mov	r4, sl
 801f98e:	2205      	movs	r2, #5
 801f990:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f994:	4851      	ldr	r0, [pc, #324]	; (801fadc <_svfiprintf_r+0x1ec>)
 801f996:	f7e0 fc3b 	bl	8000210 <memchr>
 801f99a:	9a04      	ldr	r2, [sp, #16]
 801f99c:	b9d8      	cbnz	r0, 801f9d6 <_svfiprintf_r+0xe6>
 801f99e:	06d0      	lsls	r0, r2, #27
 801f9a0:	bf44      	itt	mi
 801f9a2:	2320      	movmi	r3, #32
 801f9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f9a8:	0711      	lsls	r1, r2, #28
 801f9aa:	bf44      	itt	mi
 801f9ac:	232b      	movmi	r3, #43	; 0x2b
 801f9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f9b2:	f89a 3000 	ldrb.w	r3, [sl]
 801f9b6:	2b2a      	cmp	r3, #42	; 0x2a
 801f9b8:	d015      	beq.n	801f9e6 <_svfiprintf_r+0xf6>
 801f9ba:	9a07      	ldr	r2, [sp, #28]
 801f9bc:	4654      	mov	r4, sl
 801f9be:	2000      	movs	r0, #0
 801f9c0:	f04f 0c0a 	mov.w	ip, #10
 801f9c4:	4621      	mov	r1, r4
 801f9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f9ca:	3b30      	subs	r3, #48	; 0x30
 801f9cc:	2b09      	cmp	r3, #9
 801f9ce:	d94e      	bls.n	801fa6e <_svfiprintf_r+0x17e>
 801f9d0:	b1b0      	cbz	r0, 801fa00 <_svfiprintf_r+0x110>
 801f9d2:	9207      	str	r2, [sp, #28]
 801f9d4:	e014      	b.n	801fa00 <_svfiprintf_r+0x110>
 801f9d6:	eba0 0308 	sub.w	r3, r0, r8
 801f9da:	fa09 f303 	lsl.w	r3, r9, r3
 801f9de:	4313      	orrs	r3, r2
 801f9e0:	9304      	str	r3, [sp, #16]
 801f9e2:	46a2      	mov	sl, r4
 801f9e4:	e7d2      	b.n	801f98c <_svfiprintf_r+0x9c>
 801f9e6:	9b03      	ldr	r3, [sp, #12]
 801f9e8:	1d19      	adds	r1, r3, #4
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	9103      	str	r1, [sp, #12]
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	bfbb      	ittet	lt
 801f9f2:	425b      	neglt	r3, r3
 801f9f4:	f042 0202 	orrlt.w	r2, r2, #2
 801f9f8:	9307      	strge	r3, [sp, #28]
 801f9fa:	9307      	strlt	r3, [sp, #28]
 801f9fc:	bfb8      	it	lt
 801f9fe:	9204      	strlt	r2, [sp, #16]
 801fa00:	7823      	ldrb	r3, [r4, #0]
 801fa02:	2b2e      	cmp	r3, #46	; 0x2e
 801fa04:	d10c      	bne.n	801fa20 <_svfiprintf_r+0x130>
 801fa06:	7863      	ldrb	r3, [r4, #1]
 801fa08:	2b2a      	cmp	r3, #42	; 0x2a
 801fa0a:	d135      	bne.n	801fa78 <_svfiprintf_r+0x188>
 801fa0c:	9b03      	ldr	r3, [sp, #12]
 801fa0e:	1d1a      	adds	r2, r3, #4
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	9203      	str	r2, [sp, #12]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	bfb8      	it	lt
 801fa18:	f04f 33ff 	movlt.w	r3, #4294967295
 801fa1c:	3402      	adds	r4, #2
 801fa1e:	9305      	str	r3, [sp, #20]
 801fa20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801faec <_svfiprintf_r+0x1fc>
 801fa24:	7821      	ldrb	r1, [r4, #0]
 801fa26:	2203      	movs	r2, #3
 801fa28:	4650      	mov	r0, sl
 801fa2a:	f7e0 fbf1 	bl	8000210 <memchr>
 801fa2e:	b140      	cbz	r0, 801fa42 <_svfiprintf_r+0x152>
 801fa30:	2340      	movs	r3, #64	; 0x40
 801fa32:	eba0 000a 	sub.w	r0, r0, sl
 801fa36:	fa03 f000 	lsl.w	r0, r3, r0
 801fa3a:	9b04      	ldr	r3, [sp, #16]
 801fa3c:	4303      	orrs	r3, r0
 801fa3e:	3401      	adds	r4, #1
 801fa40:	9304      	str	r3, [sp, #16]
 801fa42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa46:	4826      	ldr	r0, [pc, #152]	; (801fae0 <_svfiprintf_r+0x1f0>)
 801fa48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fa4c:	2206      	movs	r2, #6
 801fa4e:	f7e0 fbdf 	bl	8000210 <memchr>
 801fa52:	2800      	cmp	r0, #0
 801fa54:	d038      	beq.n	801fac8 <_svfiprintf_r+0x1d8>
 801fa56:	4b23      	ldr	r3, [pc, #140]	; (801fae4 <_svfiprintf_r+0x1f4>)
 801fa58:	bb1b      	cbnz	r3, 801faa2 <_svfiprintf_r+0x1b2>
 801fa5a:	9b03      	ldr	r3, [sp, #12]
 801fa5c:	3307      	adds	r3, #7
 801fa5e:	f023 0307 	bic.w	r3, r3, #7
 801fa62:	3308      	adds	r3, #8
 801fa64:	9303      	str	r3, [sp, #12]
 801fa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa68:	4433      	add	r3, r6
 801fa6a:	9309      	str	r3, [sp, #36]	; 0x24
 801fa6c:	e767      	b.n	801f93e <_svfiprintf_r+0x4e>
 801fa6e:	fb0c 3202 	mla	r2, ip, r2, r3
 801fa72:	460c      	mov	r4, r1
 801fa74:	2001      	movs	r0, #1
 801fa76:	e7a5      	b.n	801f9c4 <_svfiprintf_r+0xd4>
 801fa78:	2300      	movs	r3, #0
 801fa7a:	3401      	adds	r4, #1
 801fa7c:	9305      	str	r3, [sp, #20]
 801fa7e:	4619      	mov	r1, r3
 801fa80:	f04f 0c0a 	mov.w	ip, #10
 801fa84:	4620      	mov	r0, r4
 801fa86:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa8a:	3a30      	subs	r2, #48	; 0x30
 801fa8c:	2a09      	cmp	r2, #9
 801fa8e:	d903      	bls.n	801fa98 <_svfiprintf_r+0x1a8>
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d0c5      	beq.n	801fa20 <_svfiprintf_r+0x130>
 801fa94:	9105      	str	r1, [sp, #20]
 801fa96:	e7c3      	b.n	801fa20 <_svfiprintf_r+0x130>
 801fa98:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa9c:	4604      	mov	r4, r0
 801fa9e:	2301      	movs	r3, #1
 801faa0:	e7f0      	b.n	801fa84 <_svfiprintf_r+0x194>
 801faa2:	ab03      	add	r3, sp, #12
 801faa4:	9300      	str	r3, [sp, #0]
 801faa6:	462a      	mov	r2, r5
 801faa8:	4b0f      	ldr	r3, [pc, #60]	; (801fae8 <_svfiprintf_r+0x1f8>)
 801faaa:	a904      	add	r1, sp, #16
 801faac:	4638      	mov	r0, r7
 801faae:	f7fb febd 	bl	801b82c <_printf_float>
 801fab2:	1c42      	adds	r2, r0, #1
 801fab4:	4606      	mov	r6, r0
 801fab6:	d1d6      	bne.n	801fa66 <_svfiprintf_r+0x176>
 801fab8:	89ab      	ldrh	r3, [r5, #12]
 801faba:	065b      	lsls	r3, r3, #25
 801fabc:	f53f af2c 	bmi.w	801f918 <_svfiprintf_r+0x28>
 801fac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fac2:	b01d      	add	sp, #116	; 0x74
 801fac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fac8:	ab03      	add	r3, sp, #12
 801faca:	9300      	str	r3, [sp, #0]
 801facc:	462a      	mov	r2, r5
 801face:	4b06      	ldr	r3, [pc, #24]	; (801fae8 <_svfiprintf_r+0x1f8>)
 801fad0:	a904      	add	r1, sp, #16
 801fad2:	4638      	mov	r0, r7
 801fad4:	f7fc f94e 	bl	801bd74 <_printf_i>
 801fad8:	e7eb      	b.n	801fab2 <_svfiprintf_r+0x1c2>
 801fada:	bf00      	nop
 801fadc:	080223b4 	.word	0x080223b4
 801fae0:	080223be 	.word	0x080223be
 801fae4:	0801b82d 	.word	0x0801b82d
 801fae8:	0801f83b 	.word	0x0801f83b
 801faec:	080223ba 	.word	0x080223ba

0801faf0 <__sfputc_r>:
 801faf0:	6893      	ldr	r3, [r2, #8]
 801faf2:	3b01      	subs	r3, #1
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	b410      	push	{r4}
 801faf8:	6093      	str	r3, [r2, #8]
 801fafa:	da08      	bge.n	801fb0e <__sfputc_r+0x1e>
 801fafc:	6994      	ldr	r4, [r2, #24]
 801fafe:	42a3      	cmp	r3, r4
 801fb00:	db01      	blt.n	801fb06 <__sfputc_r+0x16>
 801fb02:	290a      	cmp	r1, #10
 801fb04:	d103      	bne.n	801fb0e <__sfputc_r+0x1e>
 801fb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb0a:	f7fd bca5 	b.w	801d458 <__swbuf_r>
 801fb0e:	6813      	ldr	r3, [r2, #0]
 801fb10:	1c58      	adds	r0, r3, #1
 801fb12:	6010      	str	r0, [r2, #0]
 801fb14:	7019      	strb	r1, [r3, #0]
 801fb16:	4608      	mov	r0, r1
 801fb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb1c:	4770      	bx	lr

0801fb1e <__sfputs_r>:
 801fb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb20:	4606      	mov	r6, r0
 801fb22:	460f      	mov	r7, r1
 801fb24:	4614      	mov	r4, r2
 801fb26:	18d5      	adds	r5, r2, r3
 801fb28:	42ac      	cmp	r4, r5
 801fb2a:	d101      	bne.n	801fb30 <__sfputs_r+0x12>
 801fb2c:	2000      	movs	r0, #0
 801fb2e:	e007      	b.n	801fb40 <__sfputs_r+0x22>
 801fb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb34:	463a      	mov	r2, r7
 801fb36:	4630      	mov	r0, r6
 801fb38:	f7ff ffda 	bl	801faf0 <__sfputc_r>
 801fb3c:	1c43      	adds	r3, r0, #1
 801fb3e:	d1f3      	bne.n	801fb28 <__sfputs_r+0xa>
 801fb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fb44 <_vfiprintf_r>:
 801fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb48:	460d      	mov	r5, r1
 801fb4a:	b09d      	sub	sp, #116	; 0x74
 801fb4c:	4614      	mov	r4, r2
 801fb4e:	4698      	mov	r8, r3
 801fb50:	4606      	mov	r6, r0
 801fb52:	b118      	cbz	r0, 801fb5c <_vfiprintf_r+0x18>
 801fb54:	6983      	ldr	r3, [r0, #24]
 801fb56:	b90b      	cbnz	r3, 801fb5c <_vfiprintf_r+0x18>
 801fb58:	f7fe fcf2 	bl	801e540 <__sinit>
 801fb5c:	4b89      	ldr	r3, [pc, #548]	; (801fd84 <_vfiprintf_r+0x240>)
 801fb5e:	429d      	cmp	r5, r3
 801fb60:	d11b      	bne.n	801fb9a <_vfiprintf_r+0x56>
 801fb62:	6875      	ldr	r5, [r6, #4]
 801fb64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fb66:	07d9      	lsls	r1, r3, #31
 801fb68:	d405      	bmi.n	801fb76 <_vfiprintf_r+0x32>
 801fb6a:	89ab      	ldrh	r3, [r5, #12]
 801fb6c:	059a      	lsls	r2, r3, #22
 801fb6e:	d402      	bmi.n	801fb76 <_vfiprintf_r+0x32>
 801fb70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fb72:	f7fb fca0 	bl	801b4b6 <__retarget_lock_acquire_recursive>
 801fb76:	89ab      	ldrh	r3, [r5, #12]
 801fb78:	071b      	lsls	r3, r3, #28
 801fb7a:	d501      	bpl.n	801fb80 <_vfiprintf_r+0x3c>
 801fb7c:	692b      	ldr	r3, [r5, #16]
 801fb7e:	b9eb      	cbnz	r3, 801fbbc <_vfiprintf_r+0x78>
 801fb80:	4629      	mov	r1, r5
 801fb82:	4630      	mov	r0, r6
 801fb84:	f7fd fcba 	bl	801d4fc <__swsetup_r>
 801fb88:	b1c0      	cbz	r0, 801fbbc <_vfiprintf_r+0x78>
 801fb8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fb8c:	07dc      	lsls	r4, r3, #31
 801fb8e:	d50e      	bpl.n	801fbae <_vfiprintf_r+0x6a>
 801fb90:	f04f 30ff 	mov.w	r0, #4294967295
 801fb94:	b01d      	add	sp, #116	; 0x74
 801fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb9a:	4b7b      	ldr	r3, [pc, #492]	; (801fd88 <_vfiprintf_r+0x244>)
 801fb9c:	429d      	cmp	r5, r3
 801fb9e:	d101      	bne.n	801fba4 <_vfiprintf_r+0x60>
 801fba0:	68b5      	ldr	r5, [r6, #8]
 801fba2:	e7df      	b.n	801fb64 <_vfiprintf_r+0x20>
 801fba4:	4b79      	ldr	r3, [pc, #484]	; (801fd8c <_vfiprintf_r+0x248>)
 801fba6:	429d      	cmp	r5, r3
 801fba8:	bf08      	it	eq
 801fbaa:	68f5      	ldreq	r5, [r6, #12]
 801fbac:	e7da      	b.n	801fb64 <_vfiprintf_r+0x20>
 801fbae:	89ab      	ldrh	r3, [r5, #12]
 801fbb0:	0598      	lsls	r0, r3, #22
 801fbb2:	d4ed      	bmi.n	801fb90 <_vfiprintf_r+0x4c>
 801fbb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fbb6:	f7fb fc7f 	bl	801b4b8 <__retarget_lock_release_recursive>
 801fbba:	e7e9      	b.n	801fb90 <_vfiprintf_r+0x4c>
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	9309      	str	r3, [sp, #36]	; 0x24
 801fbc0:	2320      	movs	r3, #32
 801fbc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fbc6:	f8cd 800c 	str.w	r8, [sp, #12]
 801fbca:	2330      	movs	r3, #48	; 0x30
 801fbcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fd90 <_vfiprintf_r+0x24c>
 801fbd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fbd4:	f04f 0901 	mov.w	r9, #1
 801fbd8:	4623      	mov	r3, r4
 801fbda:	469a      	mov	sl, r3
 801fbdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fbe0:	b10a      	cbz	r2, 801fbe6 <_vfiprintf_r+0xa2>
 801fbe2:	2a25      	cmp	r2, #37	; 0x25
 801fbe4:	d1f9      	bne.n	801fbda <_vfiprintf_r+0x96>
 801fbe6:	ebba 0b04 	subs.w	fp, sl, r4
 801fbea:	d00b      	beq.n	801fc04 <_vfiprintf_r+0xc0>
 801fbec:	465b      	mov	r3, fp
 801fbee:	4622      	mov	r2, r4
 801fbf0:	4629      	mov	r1, r5
 801fbf2:	4630      	mov	r0, r6
 801fbf4:	f7ff ff93 	bl	801fb1e <__sfputs_r>
 801fbf8:	3001      	adds	r0, #1
 801fbfa:	f000 80aa 	beq.w	801fd52 <_vfiprintf_r+0x20e>
 801fbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc00:	445a      	add	r2, fp
 801fc02:	9209      	str	r2, [sp, #36]	; 0x24
 801fc04:	f89a 3000 	ldrb.w	r3, [sl]
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	f000 80a2 	beq.w	801fd52 <_vfiprintf_r+0x20e>
 801fc0e:	2300      	movs	r3, #0
 801fc10:	f04f 32ff 	mov.w	r2, #4294967295
 801fc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc18:	f10a 0a01 	add.w	sl, sl, #1
 801fc1c:	9304      	str	r3, [sp, #16]
 801fc1e:	9307      	str	r3, [sp, #28]
 801fc20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fc24:	931a      	str	r3, [sp, #104]	; 0x68
 801fc26:	4654      	mov	r4, sl
 801fc28:	2205      	movs	r2, #5
 801fc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc2e:	4858      	ldr	r0, [pc, #352]	; (801fd90 <_vfiprintf_r+0x24c>)
 801fc30:	f7e0 faee 	bl	8000210 <memchr>
 801fc34:	9a04      	ldr	r2, [sp, #16]
 801fc36:	b9d8      	cbnz	r0, 801fc70 <_vfiprintf_r+0x12c>
 801fc38:	06d1      	lsls	r1, r2, #27
 801fc3a:	bf44      	itt	mi
 801fc3c:	2320      	movmi	r3, #32
 801fc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc42:	0713      	lsls	r3, r2, #28
 801fc44:	bf44      	itt	mi
 801fc46:	232b      	movmi	r3, #43	; 0x2b
 801fc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc4c:	f89a 3000 	ldrb.w	r3, [sl]
 801fc50:	2b2a      	cmp	r3, #42	; 0x2a
 801fc52:	d015      	beq.n	801fc80 <_vfiprintf_r+0x13c>
 801fc54:	9a07      	ldr	r2, [sp, #28]
 801fc56:	4654      	mov	r4, sl
 801fc58:	2000      	movs	r0, #0
 801fc5a:	f04f 0c0a 	mov.w	ip, #10
 801fc5e:	4621      	mov	r1, r4
 801fc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc64:	3b30      	subs	r3, #48	; 0x30
 801fc66:	2b09      	cmp	r3, #9
 801fc68:	d94e      	bls.n	801fd08 <_vfiprintf_r+0x1c4>
 801fc6a:	b1b0      	cbz	r0, 801fc9a <_vfiprintf_r+0x156>
 801fc6c:	9207      	str	r2, [sp, #28]
 801fc6e:	e014      	b.n	801fc9a <_vfiprintf_r+0x156>
 801fc70:	eba0 0308 	sub.w	r3, r0, r8
 801fc74:	fa09 f303 	lsl.w	r3, r9, r3
 801fc78:	4313      	orrs	r3, r2
 801fc7a:	9304      	str	r3, [sp, #16]
 801fc7c:	46a2      	mov	sl, r4
 801fc7e:	e7d2      	b.n	801fc26 <_vfiprintf_r+0xe2>
 801fc80:	9b03      	ldr	r3, [sp, #12]
 801fc82:	1d19      	adds	r1, r3, #4
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	9103      	str	r1, [sp, #12]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	bfbb      	ittet	lt
 801fc8c:	425b      	neglt	r3, r3
 801fc8e:	f042 0202 	orrlt.w	r2, r2, #2
 801fc92:	9307      	strge	r3, [sp, #28]
 801fc94:	9307      	strlt	r3, [sp, #28]
 801fc96:	bfb8      	it	lt
 801fc98:	9204      	strlt	r2, [sp, #16]
 801fc9a:	7823      	ldrb	r3, [r4, #0]
 801fc9c:	2b2e      	cmp	r3, #46	; 0x2e
 801fc9e:	d10c      	bne.n	801fcba <_vfiprintf_r+0x176>
 801fca0:	7863      	ldrb	r3, [r4, #1]
 801fca2:	2b2a      	cmp	r3, #42	; 0x2a
 801fca4:	d135      	bne.n	801fd12 <_vfiprintf_r+0x1ce>
 801fca6:	9b03      	ldr	r3, [sp, #12]
 801fca8:	1d1a      	adds	r2, r3, #4
 801fcaa:	681b      	ldr	r3, [r3, #0]
 801fcac:	9203      	str	r2, [sp, #12]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	bfb8      	it	lt
 801fcb2:	f04f 33ff 	movlt.w	r3, #4294967295
 801fcb6:	3402      	adds	r4, #2
 801fcb8:	9305      	str	r3, [sp, #20]
 801fcba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fda0 <_vfiprintf_r+0x25c>
 801fcbe:	7821      	ldrb	r1, [r4, #0]
 801fcc0:	2203      	movs	r2, #3
 801fcc2:	4650      	mov	r0, sl
 801fcc4:	f7e0 faa4 	bl	8000210 <memchr>
 801fcc8:	b140      	cbz	r0, 801fcdc <_vfiprintf_r+0x198>
 801fcca:	2340      	movs	r3, #64	; 0x40
 801fccc:	eba0 000a 	sub.w	r0, r0, sl
 801fcd0:	fa03 f000 	lsl.w	r0, r3, r0
 801fcd4:	9b04      	ldr	r3, [sp, #16]
 801fcd6:	4303      	orrs	r3, r0
 801fcd8:	3401      	adds	r4, #1
 801fcda:	9304      	str	r3, [sp, #16]
 801fcdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fce0:	482c      	ldr	r0, [pc, #176]	; (801fd94 <_vfiprintf_r+0x250>)
 801fce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fce6:	2206      	movs	r2, #6
 801fce8:	f7e0 fa92 	bl	8000210 <memchr>
 801fcec:	2800      	cmp	r0, #0
 801fcee:	d03f      	beq.n	801fd70 <_vfiprintf_r+0x22c>
 801fcf0:	4b29      	ldr	r3, [pc, #164]	; (801fd98 <_vfiprintf_r+0x254>)
 801fcf2:	bb1b      	cbnz	r3, 801fd3c <_vfiprintf_r+0x1f8>
 801fcf4:	9b03      	ldr	r3, [sp, #12]
 801fcf6:	3307      	adds	r3, #7
 801fcf8:	f023 0307 	bic.w	r3, r3, #7
 801fcfc:	3308      	adds	r3, #8
 801fcfe:	9303      	str	r3, [sp, #12]
 801fd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd02:	443b      	add	r3, r7
 801fd04:	9309      	str	r3, [sp, #36]	; 0x24
 801fd06:	e767      	b.n	801fbd8 <_vfiprintf_r+0x94>
 801fd08:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd0c:	460c      	mov	r4, r1
 801fd0e:	2001      	movs	r0, #1
 801fd10:	e7a5      	b.n	801fc5e <_vfiprintf_r+0x11a>
 801fd12:	2300      	movs	r3, #0
 801fd14:	3401      	adds	r4, #1
 801fd16:	9305      	str	r3, [sp, #20]
 801fd18:	4619      	mov	r1, r3
 801fd1a:	f04f 0c0a 	mov.w	ip, #10
 801fd1e:	4620      	mov	r0, r4
 801fd20:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd24:	3a30      	subs	r2, #48	; 0x30
 801fd26:	2a09      	cmp	r2, #9
 801fd28:	d903      	bls.n	801fd32 <_vfiprintf_r+0x1ee>
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d0c5      	beq.n	801fcba <_vfiprintf_r+0x176>
 801fd2e:	9105      	str	r1, [sp, #20]
 801fd30:	e7c3      	b.n	801fcba <_vfiprintf_r+0x176>
 801fd32:	fb0c 2101 	mla	r1, ip, r1, r2
 801fd36:	4604      	mov	r4, r0
 801fd38:	2301      	movs	r3, #1
 801fd3a:	e7f0      	b.n	801fd1e <_vfiprintf_r+0x1da>
 801fd3c:	ab03      	add	r3, sp, #12
 801fd3e:	9300      	str	r3, [sp, #0]
 801fd40:	462a      	mov	r2, r5
 801fd42:	4b16      	ldr	r3, [pc, #88]	; (801fd9c <_vfiprintf_r+0x258>)
 801fd44:	a904      	add	r1, sp, #16
 801fd46:	4630      	mov	r0, r6
 801fd48:	f7fb fd70 	bl	801b82c <_printf_float>
 801fd4c:	4607      	mov	r7, r0
 801fd4e:	1c78      	adds	r0, r7, #1
 801fd50:	d1d6      	bne.n	801fd00 <_vfiprintf_r+0x1bc>
 801fd52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fd54:	07d9      	lsls	r1, r3, #31
 801fd56:	d405      	bmi.n	801fd64 <_vfiprintf_r+0x220>
 801fd58:	89ab      	ldrh	r3, [r5, #12]
 801fd5a:	059a      	lsls	r2, r3, #22
 801fd5c:	d402      	bmi.n	801fd64 <_vfiprintf_r+0x220>
 801fd5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fd60:	f7fb fbaa 	bl	801b4b8 <__retarget_lock_release_recursive>
 801fd64:	89ab      	ldrh	r3, [r5, #12]
 801fd66:	065b      	lsls	r3, r3, #25
 801fd68:	f53f af12 	bmi.w	801fb90 <_vfiprintf_r+0x4c>
 801fd6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd6e:	e711      	b.n	801fb94 <_vfiprintf_r+0x50>
 801fd70:	ab03      	add	r3, sp, #12
 801fd72:	9300      	str	r3, [sp, #0]
 801fd74:	462a      	mov	r2, r5
 801fd76:	4b09      	ldr	r3, [pc, #36]	; (801fd9c <_vfiprintf_r+0x258>)
 801fd78:	a904      	add	r1, sp, #16
 801fd7a:	4630      	mov	r0, r6
 801fd7c:	f7fb fffa 	bl	801bd74 <_printf_i>
 801fd80:	e7e4      	b.n	801fd4c <_vfiprintf_r+0x208>
 801fd82:	bf00      	nop
 801fd84:	0802219c 	.word	0x0802219c
 801fd88:	080221bc 	.word	0x080221bc
 801fd8c:	0802217c 	.word	0x0802217c
 801fd90:	080223b4 	.word	0x080223b4
 801fd94:	080223be 	.word	0x080223be
 801fd98:	0801b82d 	.word	0x0801b82d
 801fd9c:	0801fb1f 	.word	0x0801fb1f
 801fda0:	080223ba 	.word	0x080223ba
 801fda4:	00000000 	.word	0x00000000

0801fda8 <nan>:
 801fda8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801fdb0 <nan+0x8>
 801fdac:	4770      	bx	lr
 801fdae:	bf00      	nop
 801fdb0:	00000000 	.word	0x00000000
 801fdb4:	7ff80000 	.word	0x7ff80000

0801fdb8 <__sread>:
 801fdb8:	b510      	push	{r4, lr}
 801fdba:	460c      	mov	r4, r1
 801fdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdc0:	f000 f8ec 	bl	801ff9c <_read_r>
 801fdc4:	2800      	cmp	r0, #0
 801fdc6:	bfab      	itete	ge
 801fdc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fdca:	89a3      	ldrhlt	r3, [r4, #12]
 801fdcc:	181b      	addge	r3, r3, r0
 801fdce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fdd2:	bfac      	ite	ge
 801fdd4:	6563      	strge	r3, [r4, #84]	; 0x54
 801fdd6:	81a3      	strhlt	r3, [r4, #12]
 801fdd8:	bd10      	pop	{r4, pc}

0801fdda <__swrite>:
 801fdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdde:	461f      	mov	r7, r3
 801fde0:	898b      	ldrh	r3, [r1, #12]
 801fde2:	05db      	lsls	r3, r3, #23
 801fde4:	4605      	mov	r5, r0
 801fde6:	460c      	mov	r4, r1
 801fde8:	4616      	mov	r6, r2
 801fdea:	d505      	bpl.n	801fdf8 <__swrite+0x1e>
 801fdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdf0:	2302      	movs	r3, #2
 801fdf2:	2200      	movs	r2, #0
 801fdf4:	f000 f890 	bl	801ff18 <_lseek_r>
 801fdf8:	89a3      	ldrh	r3, [r4, #12]
 801fdfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fe02:	81a3      	strh	r3, [r4, #12]
 801fe04:	4632      	mov	r2, r6
 801fe06:	463b      	mov	r3, r7
 801fe08:	4628      	mov	r0, r5
 801fe0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe0e:	f000 b837 	b.w	801fe80 <_write_r>

0801fe12 <__sseek>:
 801fe12:	b510      	push	{r4, lr}
 801fe14:	460c      	mov	r4, r1
 801fe16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe1a:	f000 f87d 	bl	801ff18 <_lseek_r>
 801fe1e:	1c43      	adds	r3, r0, #1
 801fe20:	89a3      	ldrh	r3, [r4, #12]
 801fe22:	bf15      	itete	ne
 801fe24:	6560      	strne	r0, [r4, #84]	; 0x54
 801fe26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fe2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fe2e:	81a3      	strheq	r3, [r4, #12]
 801fe30:	bf18      	it	ne
 801fe32:	81a3      	strhne	r3, [r4, #12]
 801fe34:	bd10      	pop	{r4, pc}

0801fe36 <__sclose>:
 801fe36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe3a:	f000 b83b 	b.w	801feb4 <_close_r>

0801fe3e <strncmp>:
 801fe3e:	b510      	push	{r4, lr}
 801fe40:	b17a      	cbz	r2, 801fe62 <strncmp+0x24>
 801fe42:	4603      	mov	r3, r0
 801fe44:	3901      	subs	r1, #1
 801fe46:	1884      	adds	r4, r0, r2
 801fe48:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fe4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fe50:	4290      	cmp	r0, r2
 801fe52:	d101      	bne.n	801fe58 <strncmp+0x1a>
 801fe54:	42a3      	cmp	r3, r4
 801fe56:	d101      	bne.n	801fe5c <strncmp+0x1e>
 801fe58:	1a80      	subs	r0, r0, r2
 801fe5a:	bd10      	pop	{r4, pc}
 801fe5c:	2800      	cmp	r0, #0
 801fe5e:	d1f3      	bne.n	801fe48 <strncmp+0xa>
 801fe60:	e7fa      	b.n	801fe58 <strncmp+0x1a>
 801fe62:	4610      	mov	r0, r2
 801fe64:	e7f9      	b.n	801fe5a <strncmp+0x1c>

0801fe66 <__ascii_wctomb>:
 801fe66:	b149      	cbz	r1, 801fe7c <__ascii_wctomb+0x16>
 801fe68:	2aff      	cmp	r2, #255	; 0xff
 801fe6a:	bf85      	ittet	hi
 801fe6c:	238a      	movhi	r3, #138	; 0x8a
 801fe6e:	6003      	strhi	r3, [r0, #0]
 801fe70:	700a      	strbls	r2, [r1, #0]
 801fe72:	f04f 30ff 	movhi.w	r0, #4294967295
 801fe76:	bf98      	it	ls
 801fe78:	2001      	movls	r0, #1
 801fe7a:	4770      	bx	lr
 801fe7c:	4608      	mov	r0, r1
 801fe7e:	4770      	bx	lr

0801fe80 <_write_r>:
 801fe80:	b538      	push	{r3, r4, r5, lr}
 801fe82:	4d07      	ldr	r5, [pc, #28]	; (801fea0 <_write_r+0x20>)
 801fe84:	4604      	mov	r4, r0
 801fe86:	4608      	mov	r0, r1
 801fe88:	4611      	mov	r1, r2
 801fe8a:	2200      	movs	r2, #0
 801fe8c:	602a      	str	r2, [r5, #0]
 801fe8e:	461a      	mov	r2, r3
 801fe90:	f7e3 fceb 	bl	800386a <_write>
 801fe94:	1c43      	adds	r3, r0, #1
 801fe96:	d102      	bne.n	801fe9e <_write_r+0x1e>
 801fe98:	682b      	ldr	r3, [r5, #0]
 801fe9a:	b103      	cbz	r3, 801fe9e <_write_r+0x1e>
 801fe9c:	6023      	str	r3, [r4, #0]
 801fe9e:	bd38      	pop	{r3, r4, r5, pc}
 801fea0:	2000361c 	.word	0x2000361c

0801fea4 <abort>:
 801fea4:	b508      	push	{r3, lr}
 801fea6:	2006      	movs	r0, #6
 801fea8:	f000 f8b2 	bl	8020010 <raise>
 801feac:	2001      	movs	r0, #1
 801feae:	f7e3 fcb5 	bl	800381c <_exit>
	...

0801feb4 <_close_r>:
 801feb4:	b538      	push	{r3, r4, r5, lr}
 801feb6:	4d06      	ldr	r5, [pc, #24]	; (801fed0 <_close_r+0x1c>)
 801feb8:	2300      	movs	r3, #0
 801feba:	4604      	mov	r4, r0
 801febc:	4608      	mov	r0, r1
 801febe:	602b      	str	r3, [r5, #0]
 801fec0:	f7e3 fcef 	bl	80038a2 <_close>
 801fec4:	1c43      	adds	r3, r0, #1
 801fec6:	d102      	bne.n	801fece <_close_r+0x1a>
 801fec8:	682b      	ldr	r3, [r5, #0]
 801feca:	b103      	cbz	r3, 801fece <_close_r+0x1a>
 801fecc:	6023      	str	r3, [r4, #0]
 801fece:	bd38      	pop	{r3, r4, r5, pc}
 801fed0:	2000361c 	.word	0x2000361c

0801fed4 <_fstat_r>:
 801fed4:	b538      	push	{r3, r4, r5, lr}
 801fed6:	4d07      	ldr	r5, [pc, #28]	; (801fef4 <_fstat_r+0x20>)
 801fed8:	2300      	movs	r3, #0
 801feda:	4604      	mov	r4, r0
 801fedc:	4608      	mov	r0, r1
 801fede:	4611      	mov	r1, r2
 801fee0:	602b      	str	r3, [r5, #0]
 801fee2:	f7e3 fcea 	bl	80038ba <_fstat>
 801fee6:	1c43      	adds	r3, r0, #1
 801fee8:	d102      	bne.n	801fef0 <_fstat_r+0x1c>
 801feea:	682b      	ldr	r3, [r5, #0]
 801feec:	b103      	cbz	r3, 801fef0 <_fstat_r+0x1c>
 801feee:	6023      	str	r3, [r4, #0]
 801fef0:	bd38      	pop	{r3, r4, r5, pc}
 801fef2:	bf00      	nop
 801fef4:	2000361c 	.word	0x2000361c

0801fef8 <_isatty_r>:
 801fef8:	b538      	push	{r3, r4, r5, lr}
 801fefa:	4d06      	ldr	r5, [pc, #24]	; (801ff14 <_isatty_r+0x1c>)
 801fefc:	2300      	movs	r3, #0
 801fefe:	4604      	mov	r4, r0
 801ff00:	4608      	mov	r0, r1
 801ff02:	602b      	str	r3, [r5, #0]
 801ff04:	f7e3 fce9 	bl	80038da <_isatty>
 801ff08:	1c43      	adds	r3, r0, #1
 801ff0a:	d102      	bne.n	801ff12 <_isatty_r+0x1a>
 801ff0c:	682b      	ldr	r3, [r5, #0]
 801ff0e:	b103      	cbz	r3, 801ff12 <_isatty_r+0x1a>
 801ff10:	6023      	str	r3, [r4, #0]
 801ff12:	bd38      	pop	{r3, r4, r5, pc}
 801ff14:	2000361c 	.word	0x2000361c

0801ff18 <_lseek_r>:
 801ff18:	b538      	push	{r3, r4, r5, lr}
 801ff1a:	4d07      	ldr	r5, [pc, #28]	; (801ff38 <_lseek_r+0x20>)
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	4608      	mov	r0, r1
 801ff20:	4611      	mov	r1, r2
 801ff22:	2200      	movs	r2, #0
 801ff24:	602a      	str	r2, [r5, #0]
 801ff26:	461a      	mov	r2, r3
 801ff28:	f7e3 fce2 	bl	80038f0 <_lseek>
 801ff2c:	1c43      	adds	r3, r0, #1
 801ff2e:	d102      	bne.n	801ff36 <_lseek_r+0x1e>
 801ff30:	682b      	ldr	r3, [r5, #0]
 801ff32:	b103      	cbz	r3, 801ff36 <_lseek_r+0x1e>
 801ff34:	6023      	str	r3, [r4, #0]
 801ff36:	bd38      	pop	{r3, r4, r5, pc}
 801ff38:	2000361c 	.word	0x2000361c

0801ff3c <_realloc_r>:
 801ff3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff40:	4680      	mov	r8, r0
 801ff42:	4614      	mov	r4, r2
 801ff44:	460e      	mov	r6, r1
 801ff46:	b921      	cbnz	r1, 801ff52 <_realloc_r+0x16>
 801ff48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ff4c:	4611      	mov	r1, r2
 801ff4e:	f7fb bb59 	b.w	801b604 <_malloc_r>
 801ff52:	b92a      	cbnz	r2, 801ff60 <_realloc_r+0x24>
 801ff54:	f7fb faea 	bl	801b52c <_free_r>
 801ff58:	4625      	mov	r5, r4
 801ff5a:	4628      	mov	r0, r5
 801ff5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff60:	f000 f872 	bl	8020048 <_malloc_usable_size_r>
 801ff64:	4284      	cmp	r4, r0
 801ff66:	4607      	mov	r7, r0
 801ff68:	d802      	bhi.n	801ff70 <_realloc_r+0x34>
 801ff6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ff6e:	d812      	bhi.n	801ff96 <_realloc_r+0x5a>
 801ff70:	4621      	mov	r1, r4
 801ff72:	4640      	mov	r0, r8
 801ff74:	f7fb fb46 	bl	801b604 <_malloc_r>
 801ff78:	4605      	mov	r5, r0
 801ff7a:	2800      	cmp	r0, #0
 801ff7c:	d0ed      	beq.n	801ff5a <_realloc_r+0x1e>
 801ff7e:	42bc      	cmp	r4, r7
 801ff80:	4622      	mov	r2, r4
 801ff82:	4631      	mov	r1, r6
 801ff84:	bf28      	it	cs
 801ff86:	463a      	movcs	r2, r7
 801ff88:	f7fb faa0 	bl	801b4cc <memcpy>
 801ff8c:	4631      	mov	r1, r6
 801ff8e:	4640      	mov	r0, r8
 801ff90:	f7fb facc 	bl	801b52c <_free_r>
 801ff94:	e7e1      	b.n	801ff5a <_realloc_r+0x1e>
 801ff96:	4635      	mov	r5, r6
 801ff98:	e7df      	b.n	801ff5a <_realloc_r+0x1e>
	...

0801ff9c <_read_r>:
 801ff9c:	b538      	push	{r3, r4, r5, lr}
 801ff9e:	4d07      	ldr	r5, [pc, #28]	; (801ffbc <_read_r+0x20>)
 801ffa0:	4604      	mov	r4, r0
 801ffa2:	4608      	mov	r0, r1
 801ffa4:	4611      	mov	r1, r2
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	602a      	str	r2, [r5, #0]
 801ffaa:	461a      	mov	r2, r3
 801ffac:	f7e3 fc40 	bl	8003830 <_read>
 801ffb0:	1c43      	adds	r3, r0, #1
 801ffb2:	d102      	bne.n	801ffba <_read_r+0x1e>
 801ffb4:	682b      	ldr	r3, [r5, #0]
 801ffb6:	b103      	cbz	r3, 801ffba <_read_r+0x1e>
 801ffb8:	6023      	str	r3, [r4, #0]
 801ffba:	bd38      	pop	{r3, r4, r5, pc}
 801ffbc:	2000361c 	.word	0x2000361c

0801ffc0 <_raise_r>:
 801ffc0:	291f      	cmp	r1, #31
 801ffc2:	b538      	push	{r3, r4, r5, lr}
 801ffc4:	4604      	mov	r4, r0
 801ffc6:	460d      	mov	r5, r1
 801ffc8:	d904      	bls.n	801ffd4 <_raise_r+0x14>
 801ffca:	2316      	movs	r3, #22
 801ffcc:	6003      	str	r3, [r0, #0]
 801ffce:	f04f 30ff 	mov.w	r0, #4294967295
 801ffd2:	bd38      	pop	{r3, r4, r5, pc}
 801ffd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ffd6:	b112      	cbz	r2, 801ffde <_raise_r+0x1e>
 801ffd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ffdc:	b94b      	cbnz	r3, 801fff2 <_raise_r+0x32>
 801ffde:	4620      	mov	r0, r4
 801ffe0:	f000 f830 	bl	8020044 <_getpid_r>
 801ffe4:	462a      	mov	r2, r5
 801ffe6:	4601      	mov	r1, r0
 801ffe8:	4620      	mov	r0, r4
 801ffea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ffee:	f000 b817 	b.w	8020020 <_kill_r>
 801fff2:	2b01      	cmp	r3, #1
 801fff4:	d00a      	beq.n	802000c <_raise_r+0x4c>
 801fff6:	1c59      	adds	r1, r3, #1
 801fff8:	d103      	bne.n	8020002 <_raise_r+0x42>
 801fffa:	2316      	movs	r3, #22
 801fffc:	6003      	str	r3, [r0, #0]
 801fffe:	2001      	movs	r0, #1
 8020000:	e7e7      	b.n	801ffd2 <_raise_r+0x12>
 8020002:	2400      	movs	r4, #0
 8020004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020008:	4628      	mov	r0, r5
 802000a:	4798      	blx	r3
 802000c:	2000      	movs	r0, #0
 802000e:	e7e0      	b.n	801ffd2 <_raise_r+0x12>

08020010 <raise>:
 8020010:	4b02      	ldr	r3, [pc, #8]	; (802001c <raise+0xc>)
 8020012:	4601      	mov	r1, r0
 8020014:	6818      	ldr	r0, [r3, #0]
 8020016:	f7ff bfd3 	b.w	801ffc0 <_raise_r>
 802001a:	bf00      	nop
 802001c:	20000144 	.word	0x20000144

08020020 <_kill_r>:
 8020020:	b538      	push	{r3, r4, r5, lr}
 8020022:	4d07      	ldr	r5, [pc, #28]	; (8020040 <_kill_r+0x20>)
 8020024:	2300      	movs	r3, #0
 8020026:	4604      	mov	r4, r0
 8020028:	4608      	mov	r0, r1
 802002a:	4611      	mov	r1, r2
 802002c:	602b      	str	r3, [r5, #0]
 802002e:	f7e3 fbe5 	bl	80037fc <_kill>
 8020032:	1c43      	adds	r3, r0, #1
 8020034:	d102      	bne.n	802003c <_kill_r+0x1c>
 8020036:	682b      	ldr	r3, [r5, #0]
 8020038:	b103      	cbz	r3, 802003c <_kill_r+0x1c>
 802003a:	6023      	str	r3, [r4, #0]
 802003c:	bd38      	pop	{r3, r4, r5, pc}
 802003e:	bf00      	nop
 8020040:	2000361c 	.word	0x2000361c

08020044 <_getpid_r>:
 8020044:	f7e3 bbd2 	b.w	80037ec <_getpid>

08020048 <_malloc_usable_size_r>:
 8020048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802004c:	1f18      	subs	r0, r3, #4
 802004e:	2b00      	cmp	r3, #0
 8020050:	bfbc      	itt	lt
 8020052:	580b      	ldrlt	r3, [r1, r0]
 8020054:	18c0      	addlt	r0, r0, r3
 8020056:	4770      	bx	lr

08020058 <_init>:
 8020058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802005a:	bf00      	nop
 802005c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802005e:	bc08      	pop	{r3}
 8020060:	469e      	mov	lr, r3
 8020062:	4770      	bx	lr

08020064 <_fini>:
 8020064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020066:	bf00      	nop
 8020068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802006a:	bc08      	pop	{r3}
 802006c:	469e      	mov	lr, r3
 802006e:	4770      	bx	lr
